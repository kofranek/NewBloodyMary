within ;
package AcidBaseBalance

  package Acidbase
    package OSA
      function lg
        input Real x;
        output Real result;
      algorithm
        result := log(x) / log(10);
        //it is not necessary, in Modelica exists embeded function log10
      end lg;

      function antilogit
        input Real x;
        output Real returnValue;
      algorithm
        returnValue := exp(x) / (1.0 + exp(x));
      end antilogit;

      function logit
        input Real x;
        output Real returnValue;
      algorithm
        returnValue := log(x / (1 - x));
      end logit;

      function antilg
        input Real x;
        output Real result;
      algorithm
        result := exp(log(10) * x);
      end antilg;

      function x
        input Real pO2CO;
        input Real a;
        input Real T;
        output Real returnValue;
      protected
        Real p0 = 7.0;
        Real T0 = 37.0;
        Real dbdT = 0.055;
      algorithm
        returnValue := log(pO2CO / p0) - a - dbdT * (T - T0);
      end x;

      function h
        input Real a;
        output Real returnValue;
      protected
        Real h0 = 3.5;
      algorithm
        returnValue := h0 + a;
      end h;

      function y
        input Real pO2CO;
        input Real a;
        input Real T;
        output Real returnValue;
      protected
        Real y0 = 1.8747;
        Real k = 0.5342857;
      algorithm
        returnValue := y0 + OSA.x(
                pO2CO,
                a,
                T) + h(a)*tanh(k*OSA.x(
                pO2CO,
                a,
                T));
      end y;

      function aFrom
        input Real pH;
        input Real pCO2;
        input Real MetHb;
        input Real HbF;
        input Real cDPG;
        output Real returnValue;
      protected
        Real dadpH = -0.88;
        Real dadlnpCO2 = 0.048;
        Real dadxMetHb = -0.7;
        Real dadxHbF = -0.25;
        Real dadcDPG0 = 0.3;
        Real pH0 = 7.40;
        Real pCO20 = 5.33;
        Real dadcDPGxHbF = -0.1;
        Real cDPG0 = 5.0;
      algorithm
        returnValue := dadpH * (pH - pH0) + dadlnpCO2 * log(pCO2 / pCO20) + dadxMetHb * MetHb + dadxHbF * HbF + (dadcDPG0 + dadcDPGxHbF * HbF) * (cDPG / cDPG0 - 1.0);
      end aFrom;

      function sCO
        input Real FCOHb;
        input Real FMetHb;
        output Real returnValue;
      protected
        Real xFCOHb;
      algorithm
        if FCOHb < 0 then
          xFCOHb := 0;
        else
          xFCOHb := FCOHb;
        end if;
        returnValue := xFCOHb / (1.0 - FMetHb);
      end sCO;

      function sO2CO
        input Real pO2CO;
        input Real a;
        input Real T;
        output Real returnValue;
      algorithm
        returnValue := OSA.antilogit(OSA.y(
                pO2CO,
                a,
                T));
      end sO2CO;

      function dydx
        input Real pO2CO;
        input Real a;
        input Real T;
        output Real returnValue;
      protected
        Real k = 0.5342857;
      algorithm
        returnValue := 1 + OSA.h(a)*k*(1 - tanh(k*OSA.x(
                pO2CO,
                a,
                T))^2);
      end dydx;

      function MpCOof
        input Real pO2CO;
        input Real a;
        input Real T;
        input Real FCOHb;
        input Real FMetHb;
        output Real returnValue;
      algorithm
        returnValue := pO2CO/OSA.sO2CO(
                pO2CO,
                a,
                T)*OSA.sCO(FCOHb, FMetHb);
      end MpCOof;

      function sO2fr
        input Real pO2CO;
        input Real a;
        input Real T;
        input Real FCOHb;
        input Real FMetHb;
        output Real returnValue;
      protected
        Real sO2COc;
        Real sCOc;
      algorithm
        sO2COc := OSA.sO2CO(
                pO2CO,
                a,
                T);
        sCOc := OSA.sCO(FCOHb, FMetHb);
        returnValue := (sO2COc - sCOc) / (1 - sCOc);
      end sO2fr;

      function ceHbof "effective hemoglobin concentration in mmol/l"
        input Real ctHb "concentration of hemoglobin in mmol/l";
        input Real FCOHb "substance fraction of carboxyhemoglobin";
        input Real FMetHb "substance fraction of hemoglobin";
        output Real returnValue "effective contentration of hemoglobin";
      algorithm
        returnValue := ctHb * (1 - FCOHb - FMetHb);
      end ceHbof;

      function aCO2of
        input Real T;
        output Real result;
      protected
        Real aCO2T0 = 0.23;
        //mM/kPa
        Real dlgaCO2dT = -0.0092;
        // lg(mM/kPa)/K
        Real T0 = 37;
      algorithm
        result := aCO2T0*OSA.antilg(dlgaCO2dT*(T - T0));
      end aCO2of;

      function aO2
        input Real temp;
        output Real returnValue;
      algorithm
        returnValue := exp(log(0.0105) - 0.0115 * (temp - 37.0) + 0.5 * 0.00042 * (temp - 37.0) ^ 2);
      end aO2;

      function dissO2 "concentration of dissolved oxygen in blood"
        input Real pO2;
        input Real temp;
        output Real returnValue "dissolved blood oxygen in mmol/l";
      algorithm
        returnValue := OSA.aO2(temp)*pO2;
      end dissO2;

      function pKof
        input Real T;
        output Real result;
      protected
        Real pKT0 = 6.1;
        Real dpKdT = -0.0026;
        Real T0 = 37;
      algorithm
        result := pKT0 + dpKdT * (T - T0);
      end pKof;

      function cHCO3of "calculation of plasma bicarbonate concentration"
        input Real pH "plasma pH at given temperature in mmol/l";
        input Real pCO2 "pCO2 in kPa";
        input Real T "temperature in °C";
        output Real HCO3p "plasma bicarbonate concentration in mmol/l";
      algorithm
        HCO3p := pCO2*OSA.aCO2of(T)*OSA.antilg(pH - OSA.pKof(T));
      end cHCO3of;

      function pH2Oof
        input Real temp "temperature in ?C";
        output Real vaporPressure "in mmHg";
      algorithm
        if temp < 0 then
          vaporPressure := 0;
        else
          if temp > 100 then
            vaporPressure := 760;
          else
            vaporPressure := exp(18.6686 - 4030.183 / (temp + 235));
          end if;
        end if;
      end pH2Oof;

      function BTPS_to_STPD
        "coefficient for conversion volume from BTPS to STPD"
        input Real PB "barometric pressure in mmHg";
        input Real temp "temperature in ?C";
        output Real coefficient_BTPS_to_STP
          "from BTPS to STPD conversion coefficient";
      protected
        Real pH2O;
      algorithm
        pH2O := OSA.pH2Oof(temp);
        coefficient_BTPS_to_STP := (PB - pH2O) * 273.15 / (760 * (273.15 + temp));
      end BTPS_to_STPD;

      function hematocritSI "Calculation of hematocrit"
        input Real ctHb "Hemoglobin concentration in mmol/l";
        output Real htc "hematocrit";

      protected
        Real ctHbE = 21;

      algorithm

        htc := ctHb / ctHbE;
        // !! !! it is hematokrit!!!!!!!

      end hematocritSI;

      function AlveolarGases "Calculation of partial pressures of O2 and CO2"
        input Real VAi_BTPS "inspired alveolar ventilation in l BTPS/min";
        input Real FiO2 "fraction concentration of O2 in dry inspired gas";
        input Real FiCO2 "fraction concentationo of CO2 in dry inspired gas";
        input Real temp "?core body temperature in ?C";
        input Real PB "barometric pressure";
        input Real VO2 "rate of oxygen comsumption [mmol/min]";
        input Real VCO2 "rate of carbon dioxide production [mmol/min]";
        output Real PAO2 "alveolar pO2 [mmHg]";
        output Real PACO2 "alveolar PCO2 [mmHg]";
        output Real VAe_BTPS "expired alveolar ventilation in l BTPS/min";
      protected
        Real VCO2_STPD "rate of carbon dioxide production in l STPD/min";
        Real VO2_STPD "rate of oxygen consumtion in l STPD/min";
        Real kBTPS_to_STPD "conversion factor form BTPS to STPD";
        Real VAi_STPD "inspired alveolar ventilation in l/min STPD";
        Real VO2i_STPD "inspired O2 in l STPD/min";
        Real VCO2i_STPD "inspired CO2 in l STPD/min";
        Real VAe_STPD "expired alveolar ventilation in l/min STPD";
        Real VO2e_STPD "exspired O2 in l STPD/min";
        Real VCO2e_STPD "exspired CO2 in l STPD/min";
        Real FeO2_D "fraction concentationo of O2 in dry expired gas";
        Real FeCO2_D "fraction concentationo of CO2 in dry expired gas";
      algorithm
        //conversion of metabolic gases flow from mmol/min to l STPD/min
        VCO2_STPD := VCO2 * 0.022414;
        VO2_STPD := VO2 * 0.022414;
        //calculation of VAi_STPD
        kBTPS_to_STPD := OSA.BTPS_to_STPD(PB, temp);
        VAi_STPD := VAi_BTPS * kBTPS_to_STPD;
        //l STPD/min
        // calculation of inspired gases flow in l STPD/min
        VO2i_STPD := VAi_STPD * FiO2;
        VCO2i_STPD := VAi_STPD * FiCO2;
        //calculation of expired alveolar ventilation in l STPD/min
        VAe_STPD := VAi_STPD + VCO2_STPD - VO2_STPD;
        //calculation of expired gases flow in STPD
        VO2e_STPD := VO2i_STPD - VO2_STPD;
        VCO2e_STPD := VCO2i_STPD + VCO2_STPD;
        //calculation of FeO2 and FeCO2 in dry expired gas
        FeO2_D := VO2e_STPD / VAe_STPD;
        FeCO2_D := VCO2e_STPD / VAe_STPD;
        //calculation of expired alveolar ventilation in l BTPS/min (VAe_BTPS)
        VAe_BTPS := VAe_STPD / kBTPS_to_STPD;
        //calculation of PAO2 and PACO2 (at BTPS)
        PAO2 := FeO2_D*(PB - OSA.pH2Oof(temp));
        PACO2 := FeCO2_D*(PB - OSA.pH2Oof(temp));
      end AlveolarGases;

      function pCO22of
        input Real pCO21;
        input Real T1;
        input Real T2;
        input Real cHb;
        input Real cAlb;
        input Real pH1;
        output Real result;
      protected
        Real betaX;
        Real dpHdT1;
        Real pH2;
        Real cHCO3;
        Real dlgpCO2dT1;
        Real pCO22;
        Real dpHdT2;
        Real dlgpCO2dT2;
        Real dpHdTmean;
        Real dlgpCO2dTmean;
        Real cAlbN = 0.66;
      algorithm
        betaX := 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
        dpHdT1 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
                pH1,
                pCO21,
                T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))))/(1 + betaX*(1/(2.3*
          OSA.cHCO3of(
                pH1,
                pCO21,
                T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))));
        pH2 := pH1 + dpHdT1 * (T2 - T1);
        cHCO3 := OSA.cHCO3of(
                pH1,
                pCO21,
                T1);
        dlgpCO2dT1 := (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
        pCO22 := OSA.antilg(OSA.lg(pCO21) + dlgpCO2dT1*(T2 - T1));
        dpHdT2 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
                pH2,
                pCO22,
                T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))))/(1 + betaX*(1/(2.3*
          OSA.cHCO3of(
                pH2,
                pCO22,
                T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))));
        dpHdTmean := (dpHdT1 + dpHdT2) / 2;
        pH2 := pH1 + dpHdTmean * (T2 - T1);
        cHCO3 := OSA.cHCO3of(
                pH2,
                pCO22,
                T2);
        dlgpCO2dT2 := (-0.0026) - (-0.0092) - dpHdT2 + 1 / (2.3 * cHCO3) * (betaX * dpHdT2 + betaX * 0.016);
        dlgpCO2dTmean := (dlgpCO2dT1 + dlgpCO2dT2) / 2;
        result := OSA.antilg(OSA.lg(pCO21) + dlgpCO2dTmean*(T2 - T1));
      end pCO22of;

      function pH2of
        input Real pH1;
        input Real T1;
        input Real T2;
        input Real cHb;
        input Real cAlb;
        input Real pCO21;
        output Real result;
      protected
        Real betaX;
        Real dpHdT1;
        Real pH2;
        Real cHCO3;
        Real dlgpCO2dT1;
        Real pCO22;
        Real dpHdT2;
        Real dpHdTmean;
        Real cAlbN = 0.66;
      algorithm
        betaX := 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
        dpHdT1 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
                pH1,
                pCO21,
                T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))))/(1 + betaX*(1/(2.3*
          OSA.cHCO3of(
                pH1,
                pCO21,
                T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))));
        pH2 := pH1 + dpHdT1 * (T2 - T1);
        cHCO3 := OSA.cHCO3of(
                pH1,
                pCO21,
                T1);
        dlgpCO2dT1 := (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
        pCO22 := OSA.antilg(OSA.lg(pCO21) + dlgpCO2dT1*(T2 - T1));
        dpHdT2 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
                pH2,
                pCO22,
                T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))))/(1 + betaX*(1/(2.3*
          OSA.cHCO3of(
                pH2,
                pCO22,
                T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))));
        dpHdTmean := (dpHdT1 + dpHdT2) / 2;
        result := pH1 + dpHdTmean * (T2 - T1);
      end pH2of;

      function CO2totalSI "Calculation of blood total CO2 concentration"
        input Real pH "plasma pH at given temperature";
        input Real pCO2 "pCO2 at given temperatura in Pa";
        input Real T "temperature in ?C";
        input Real ctHb "Hemoglobin concentration in mmol/l";
        input Real sO2 "O2 hemoglobin saturation";
        output Real ctCO2B "Total blood CO2 concetratoin in mmol/l";
        output Real cHCO3 "plasma concentration of bicarbonate in mmol/l";
        output Real dCO2 "dissolved CO2 concentration in plasma";
      protected
        Real dpHEdpHP = 0.77;
        Real dpHEdsO2 = 0.035;
        Real pHEx = 7.84;
        Real sO2x = 0.06;
        Real aCO2E0 = 0.195;
        Real ctHbE = 21;
        Real pHE0 = 7.19;
        Real pKE0 = 6.125;
        Real pHT0;
        Real pCO2T0;
        Real pKE;
        Real pHE;
        Real ctCO2E;
        Real phiEB;
        Real T0 = 37;
        Real cAlbN = 0.66;
        Real cAlb;
        Real pH0 = 7.40;
        Real aCO2;
        Real tCO2p;
      algorithm
        // pCO2T0 := pCO22of (pCO2, T, T0, ctHb);
        // cAlb := cAlbN;
        // albumin has minimal influence on total CO2 concentration
        pCO2T0 := OSA.pCO22of(
                pCO2/1000,
                T - 273.15,
                T0,
                ctHb,
                cAlb,
                pH);
        // pHT0 := pH2of (pH, T, T0, ctHb);
        pHT0 := OSA.pH2of(
                pH,
                T - 273.15,
                T0,
                ctHb,
                cAlb,
                pCO2/1000);
        pHE := pHE0 + dpHEdpHP * (pHT0 - pH0) + dpHEdsO2 * (1 - sO2);
        //or : (pHE - 6.9) = alpha*(pHP - pH0), where alpha = 0.7 + f*(1 - sO2)
        pKE := pKE0 - OSA.lg(1 + OSA.antilg(pHE - pHEx - sO2x*sO2));
        ctCO2E := aCO2E0*pCO2T0*(1 + OSA.antilg(pHE - pKE));
        phiEB := ctHb / ctHbE;
        // !! !! it is hematokrit!!!!!!!
        //tCO2p := pCO2T0 * aCO2of(T0)*(1 + antilg(pHT0-pKof(T0)));
        aCO2 := OSA.aCO2of(T0);
        cHCO3 := aCO2*pCO2T0*OSA.antilg(pHT0 - OSA.pKof(T0));
        dCO2 := aCO2 * pCO2T0;
        ctCO2B := ctCO2E * phiEB + (dCO2 + cHCO3) * (1 - phiEB);
        //ctCO2B :=  ctCO2E*phiEB + ctCO2Pof( pHT0, pCO2T0, T0)*(1 - phiEB);
        //ctCO2B :=  ctCO2E*phiEB + tCO2p*(1 - phiEB);
      end CO2totalSI;

      function pO2fr
        input Real sO2;
        input Real a;
        input Real T;
        input Real FCOHb;
        input Real FMetHb;
        output Real returnValue;
      protected
        Real pO2CO;
        Real sO2CO;
        Real ym;
        Real yc;
        Real dydxc;
        Real p0 = 7.0;
        Real dbdT = 0.055;
        Real T0 = 37;
        Boolean doit;
        Real Epsilon = 0.000001;
      algorithm
        pO2CO := exp(log(p0) + a + dbdT * (T - T0));
        sO2CO := sO2 + OSA.sCO(FCOHb, FMetHb)*(1 - sO2);
        ym := OSA.logit(sO2CO);
        doit := false;
        while not doit loop
          yc := OSA.y(
                  pO2CO,
                  a,
                  T);
          dydxc := OSA.dydx(
                  pO2CO,
                  a,
                  T);
          pO2CO := exp(log(pO2CO) + (ym - yc) / dydxc);
          doit := abs(ym - yc) < Epsilon;
        end while;
        returnValue := pO2CO - OSA.MpCOof(
                pO2CO,
                a,
                T,
                FCOHb,
                FMetHb);
      end pO2fr;

      function O2totalSI "Calculation of concentration of total oxygen"
        input Real ctHb "conentration of hemoglobin in mmol/l";
        input Real pO2 "pO2 at givent temperature in Pa";
        input Real pHp "pH in plasma at given temperature";
        input Real pCO2 "pCO2 at given temperature in Pa";
        input Real cDPG "concentration of 2,3 diphosphoglycerate in mmol/l";
        input Real FCOHb "substance fraction of carboxyhemoglobin";
        input Real FMetHb "substance fraction of hemiglobin";
        input Real FHbF "substance fraction of fetal hemogobin";
        input Real temp "temperature in °K";
        output Real ctO2
          "concentration of total blood oxygen concentration in mmol/l";
        output Real sO2t "oxygen saturation of hemoglobin at given temperature";
        output Real dissO2t
          "koncentration of dissolved oxygen in blood in mmol/l";
        output Real ceHb "effective hemoglobin concentration in mmol/l";
      algorithm
        //sO2t := NewBloodyMary_testing.OSA.sO2of(
        sO2t := OSA.sO2of(
                pO2/1000,
                pHp,
                pCO2/1000,
                cDPG,
                FCOHb,
                FMetHb,
                FHbF,
                temp - 273.15);
        ceHb := OSA.ceHbof(
                ctHb,
                FCOHb,
                FMetHb);
        dissO2t := OSA.dissO2(pO2/1000, temp - 273.15);
        ctO2 := dissO2t + sO2t * ceHb;
      end O2totalSI;

      function sO2of "calculation of oxygen hemoglobin saturation"
        input Real pO2T "Po2 at given temperature in kPa";
        input Real pHT "pH at given temperature";
        input Real pCO2T "pCO2 at given temperature in kPa";
        input Real cDPG "2'3 DPG koncentration in mmol/l";
        input Real FCOHb "substance fraction of carboxyhemoglobin";
        input Real FMetHb "substance fraction of hemiglobin";
        input Real FHbF "substance fraction of fetal hemoglobin";
        input Real TPt "temperature in grad C";
        output Real returnValue "oxygen hemoglobin saturation";
      protected
        Real MpCOa;
        Real MpCOb;
        Real sCOc;
        Boolean doit;
        Real a;
        Real Epsilon = 0.000001;
      algorithm
        a := OSA.aFrom(
                pHT,
                pCO2T,
                FMetHb,
                FHbF,
                cDPG);
        sCOc := OSA.sCO(FCOHb, FMetHb);
        if sCOc > 0 then
          MpCOa := OSA.pO2fr(
                  sCOc,
                  a,
                  TPt,
                  0,
                  FMetHb);
        else
          MpCOa := 0;
        end if;
        MpCOb := MpCOa;
        doit := false;
        while not doit loop
          MpCOb := 0.6 * MpCOa + 0.4 * MpCOb;
          MpCOa := OSA.MpCOof(
                  pO2T + MpCOb,
                  a,
                  TPt,
                  FCOHb,
                  FMetHb);
          doit := abs(MpCOa - MpCOb) < Epsilon;
        end while;
        returnValue := OSA.sO2fr(
                pO2T + MpCOa,
                a,
                TPt,
                FCOHb,
                FMetHb);
      end sO2of;

      function cBEoxOf "Van Slyke equation"
        input Real pH "pH at given temperature";
        input Real pCO2 "pCO2 in kPA at given temperature";
        input Real cHb "hemoglobin concentration in mmol/l";
        input Real T "temperature in ?C";
        input Real cAlb "albumin concentration in mmol/l";
        input Real cPi "phosphate concentration in mmol/l";
        input Real sO2 "O2 hemoglobin saturation (as fraction)";
        output Real result_cBEox
          "BE on virtually fully oxygenated blood in mmol/l";
      protected
        Real cAlbN = 0.66;
        Real T0 = 37;
        Real ctHbb = 43.0;
        Real betaHb = 2.3;
        Real betaP = 7.7;
        Real pH0 = 7.40;
        Real pCO20 = 5.33;
        Real cPiN = 1.15;
        Real pHT0;
        Real pCO2T0;
      algorithm
        //pCO2T0 := pCO22of(pCO2, T, T0, ctHb);
        pCO2T0 := OSA.pCO22of(
                pCO2,
                T,
                T0,
                cHb,
                cAlb,
                pH);
        //pHT0   := pH2of(pH, T, T0, ctHb);
        pHT0 := OSA.pH2of(
                pH,
                T,
                T0,
                cHb,
                cAlb,
                pCO2);
        result_cBEox := (1 - cHb/ctHbb)*(OSA.cHCO3of(
                pHT0,
                pCO2T0,
                T0) - OSA.cHCO3of(
                pH0,
                pCO20,
                T0) + (betaHb*cHb + betaP + 8*(cAlb - cAlbN) + 0.309*(cPi -
          cPiN))*(pHT0 - pH0)) - 0.2*cHb*(1 - sO2);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
      end cBEoxOf;

      model ctO2content
        Physiolibrary.Types.RealIO.pHInput pH annotation(Placement(transformation(extent = {{-120, 70}, {-80, 110}}), iconTransformation(extent = {{-120, 32}, {-100, 52}})));
        Physiolibrary.Types.RealIO.PressureInput pCO2(start = 5330) annotation(Placement(transformation(extent = {{-120, 20}, {-80, 60}}), iconTransformation(extent = {{-120, -10}, {-100, 10}})));
        Physiolibrary.Types.RealIO.PressureInput pO2( start=13300) annotation(Placement(transformation(extent={{-118,
                  -30},{-78,10}}),                                                                                            iconTransformation(extent = {{-120, 70}, {-100, 90}})));
        Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-30, -112}, {10, -72}}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {60, -110})));
        Physiolibrary.Types.RealIO.ConcentrationOutput totalO2 annotation(Placement(transformation(extent={{-14,-70},
                  {6,-50}}),                                                                                                    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {20, -110})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdO2p
          "dissolved O2 concentration in plasma"                                                    annotation(Placement(transformation(extent={{-14,-20},
                  {6,0}}),                                                                                                    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-20, -110})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
          "effective concentration of hemoglobin"                                                   annotation(Placement(transformation(extent={{-14,-42},
                  {6,-22}}),                                                                                                    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 270, origin = {-60, -110})));
        outer Interfaces.ModelSettings modelSettings annotation (Placement(
              transformation(extent={{-100,-100},{-80,-80}})));
      algorithm
        (totalO2,sO2,cdO2p,ceHb) := OSA.O2totalSI(
                modelSettings.ctHb,
                pO2,
                pH,
                pCO2,
                modelSettings.cDPG,
                modelSettings.FCOHb,
                modelSettings.FMetHb,
                modelSettings.FHbF,
                modelSettings.Temperature);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -30,66},{94,-34}},                                                                                                    lineColor = {28, 108, 200}, textString = "O2 total"),
              Text(
                extent={{-96,66},{-40,98}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pO2"),
              Text(
                extent={{-98,30},{-42,62}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pH"),
              Text(
                extent={{-96,-14},{-40,18}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pCO2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
      end ctO2content;

      model ctCO2content
        Physiolibrary.Types.RealIO.PressureInput pCO2(start = 5330)
          "pCO2 in Pa"                                                           annotation(Placement(transformation(extent = {{-120, 20}, {-80, 60}}), iconTransformation(extent = {{-120, 70}, {-100, 90}})));
        Physiolibrary.Types.RealIO.pHInput pH annotation(Placement(transformation(extent = {{-120, 70}, {-80, 110}}), iconTransformation(extent = {{-120, 30}, {-100, 50}})));
        Physiolibrary.Types.RealIO.FractionInput sO2
          "O2 hemoglobin saturation "                                            annotation(Placement(transformation(extent={{-120,
                  -10},{-80,30}}),                                                                                                    iconTransformation(extent = {{-120, -90}, {-100, -70}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2
          "total blood CO2 concentration (in mmol/l)"                                                    annotation(Placement(transformation(extent = {{100, 30}, {120, 50}}), iconTransformation(extent = {{100, 30}, {120, 50}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3
          "plasma HCO3 concentration (in mmol/l)"                                                    annotation(Placement(transformation(extent = {{100, 60}, {120, 80}}), iconTransformation(extent = {{100, -10}, {120, 10}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2p
          "plasma CO2 dissolved concentration (in mmol/l)"                                                     annotation(Placement(transformation(extent = {{100, 60}, {120, 80}}), iconTransformation(extent = {{100, -50}, {120, -30}})));
        outer Interfaces.ModelSettings modelSettings annotation (Placement(
              transformation(extent={{-100,-100},{-80,-80}})));
      algorithm
        (ctCO2,cHCO3,cdCO2p) := OSA.CO2totalSI(
                pH,
                pCO2,
                modelSettings.Temperature,
                modelSettings.ctHb,
                sO2);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -84,26},{64,-46}},                                                                                                    lineColor=
                    {28,108,200},                                                                                                    fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="CO2 
total"),      Text(
                extent={{-96,66},{-40,98}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pCO2"),
              Text(
                extent={{-98,30},{-42,62}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pH"),
              Text(
                extent={{-98,-92},{-42,-60}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="sO2"),
              Text(
                extent={{40,24},{96,56}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="tCO2"),
              Text(
                extent={{40,-16},{96,16}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cHCO3"),
              Text(
                extent={{40,-56},{96,-24}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cdCO2p")}));
      end ctCO2content;

      model BEINV
        Physiolibrary.Types.RealIO.PressureInput pCO2
          "pCO2 at given temperature in Pa"                                             annotation(Placement(transformation(extent={{-69,29},
                  {-53,45}}),                                                                                                                                 iconTransformation(extent = {{-120, 30}, {-100, 50}})));
        Physiolibrary.Types.RealIO.pHOutput pH "plasma pH at given temperature" annotation(Placement(transformation(extent={{104,50},
                  {124,70}}),                                                                                                    iconTransformation(extent={{98,8},{
                  118,28}})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent = {{-60, 51}, {-42, 69}}), iconTransformation(extent = {{-120, 70}, {-100, 90}})));
        OSA.bloodBEox vanSlykeEquation
          annotation (Placement(transformation(extent={{-36,-32},{44,40}})));
        Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints1 annotation(Placement(transformation(extent={{38,44},
                  {96,76}})));
        Physiolibrary.Types.RealIO.FractionInput sO2 "O2 hemoglobin saturation" annotation(Placement(transformation(extent={{-70,-28},
                  {-54,-12}}),                                                                                                    iconTransformation(extent = {{-120, -84}, {-100, -64}})));
      equation
        connect(vanSlykeEquation.pCO2, pCO2) annotation(Line(points={{-40,37.12},
                {-56,37.12},{-56,37},{-61,37}},                                                                           color = {0, 0, 127}));
        connect(inverseBlockConstraints1.u1, BEox) annotation(Line(points={{35.1,60},
                {-51,60}},                                                                                       color = {0, 0, 127}));
        connect(vanSlykeEquation.BEox, inverseBlockConstraints1.u2) annotation(Line(points={{48,4},{
                60,4},{60,60},{43.8,60}},                                                                                                    color = {0, 0, 127}));
        connect(vanSlykeEquation.pH, inverseBlockConstraints1.y2) annotation(Line(points={{-40,
                24.88},{-70,24.88},{-70,-38},{86,-38},{86,60},{91.65,60}},                                                                                        color = {0, 0, 127}));
        connect(pH, inverseBlockConstraints1.y1) annotation(Line(points={{114,60},
                {97.45,60}},                                                                                         color = {0, 0, 127}));
        connect(vanSlykeEquation.sO2, sO2) annotation(Line(points={{-40,-20.48},
                {-44,-20.48},{-44,-20},{-62,-20}},                                                                          color = {0, 0, 127}));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent={{-100,
                  -100},{120,100}}),                                                                        graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-84, 22}, {94, -12}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "BEINV")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent={{-100,
                  -100},{120,100}})));
      end BEINV;

      model bloodBEox
        Physiolibrary.Types.RealIO.PressureInput pCO2
          "pCO2 at given temperature in Pa"                                             annotation(Placement(transformation(extent = {{-140, 62}, {-100, 102}}), iconTransformation(extent = {{-120, 82}, {-100, 102}})));
        Physiolibrary.Types.RealIO.pHInput pH "pH at given temperature" annotation(Placement(transformation(extent = {{-140, 28}, {-100, 68}}), iconTransformation(extent = {{-120, 48}, {-100, 68}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput BEox
          "Base Excess (in fully oxygenated blood) in mmol/l"                                                   annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -10}, {120, 10}})));
        Physiolibrary.Types.RealIO.FractionInput sO2 "O2 hemoglobin saturation" annotation(Placement(transformation(extent={{-140,4},
                  {-100,44}}),                                                                                                    iconTransformation(extent = {{-120, -78}, {-100, -58}})));
        outer Interfaces.ModelSettings modelSettings annotation (Placement(
              transformation(extent={{-100,-100},{-80,-80}})));
      algorithm
        BEox := OSA.cBEoxOf(
                pH,
                pCO2/1000,
                modelSettings.ctHb,
                modelSettings.Temperature - 273.15,
                modelSettings.cAlb,
                modelSettings.cPi,
                sO2);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -102,36},{62,-50}},                                                                                                    lineColor=
                    {28,108,200},                                                                                                    fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="blood 
BEox"),       Text(
                extent={{-96,66},{-40,98}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pCO2"),
              Text(
                extent={{-98,28},{-42,60}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pH"),
              Text(
                extent={{-98,-92},{-42,-60}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="sO2"),
              Text(
                extent={{40,-16},{96,16}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="BEox")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
      end bloodBEox;

      model O2CO2Balance
        Physiolibrary.Types.RealIO.ConcentrationInput CvO2 annotation(Placement(transformation(extent={{-110,3},
                  {-92,21}}),                                                                                                    iconTransformation(extent = {{-120, 34}, {-100, 54}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CvCO2 annotation(Placement(transformation(extent={{-108,46},
                  {-92,62}}),                                                                                                    iconTransformation(extent = {{-120, 10}, {-100, 30}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation(Placement(transformation(extent = {{108, -6}, {120, 6}}), iconTransformation(extent = {{100, -4}, {116, 12}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation(Placement(transformation(extent = {{88, 18}, {98, 28}}), iconTransformation(extent = {{100, -22}, {116, -6}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CpcO2 annotation(Placement(transformation(extent={{-108,25},
                  {-90,43}}),                                                                                                    iconTransformation(extent = {{-120, -18}, {-100, 2}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CpcCO2 annotation(Placement(transformation(extent={{-108,66},
                  {-92,82}}),                                                                                                    iconTransformation(extent = {{-120, -42}, {-100, -22}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation(Placement(transformation(extent={{-110,
                  -18},{-92,0}}),                                                                                                iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-110, 72})));
      equation
        VO2 = Q * (CpcO2 - CvO2);
        VCO2 = Q * (CvCO2 - CpcCO2);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 102}, {100, -98}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-96, 6}, {96, -6}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {2, 44}, rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "CvO2"), Text(extent = {{-97, 10}, {97, -10}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {3, 20}, rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "CvCO2"), Text(extent = {{-50, 116}, {74, 38}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "O2CO2Balance"), Text(extent = {{36, 8}, {94, -2}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "VO2"), Text(extent = {{12, -12}, {94, -20}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "VCO2"), Text(extent = {{-90, 13}, {90, -13}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {-4, -33}, rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "CpcCO2"), Text(extent = {{-81, 8}, {81, -8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {-13, -8}, rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "CpcO2"), Text(extent = {{-94, 80}, {98, 64}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "Q")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
      end O2CO2Balance;

      model PO2PCO2
        Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={30,-8}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, 0})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={5,102}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, 20})));
        Physiolibrary.Types.RealIO.PressureInput pO2 annotation(Placement(transformation(extent={{-118,46},
                  {-106,58}}),                                                                                              iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-110, 98})));
        Physiolibrary.Types.RealIO.PressureInput pCO2 annotation(Placement(transformation(extent={{-122,85},
                  {-108,99}}),                                                                                           iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-110, 78})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={5,114}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, 60})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation(Placement(transformation(extent = {{7.5, -7}, {-7.5, 7}}, rotation = 180, origin={-28.5,
                  -14}),                                                                                                                                               iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, 80})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox annotation(Placement(transformation(extent={{-122,
                  -42},{-106,-26}}),                                                                                               iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-110, 58})));
        Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4) annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={6,-58}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, 40})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation(Placement(transformation(extent={{-6,6},{
                  6,-6}},                                                                                                    rotation = 0, origin={-46,-14}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, -58})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation(Placement(transformation(extent = {{-7, 7}, {7, -7}}, rotation = 0, origin={5,90}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, -78})));
        ctO2content bloodctO2content
          annotation (Placement(transformation(extent={{-80,-2},{-20,58}})));
        ctCO2content bloodctCO2content
          annotation (Placement(transformation(extent={{-80,72},{-20,132}})));
        BEINV vanSlykeEquation
          annotation (Placement(transformation(extent={{-80,-88},{-18,-28}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
          "effiective concentration of hemoglobin (mmol/l)"                                                   annotation(Placement(transformation(extent = {{-6, 6}, {6, -6}}, rotation = 0, origin={-58,-14}),  iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {110, -38})));
      equation
        connect(bloodctCO2content.pCO2, pCO2) annotation(Line(points={{-83,126},
                {-100,126},{-100,92},{-115,92}},                                                       color = {0, 0, 127}));
        connect(bloodctO2content.pCO2, pCO2) annotation(Line(points={{-83,28},{
                -100,28},{-100,92},{-115,92}},                                                                                           color = {0, 0, 127}));
        connect(bloodctO2content.pO2, pO2) annotation(Line(points={{-83,52},{
                -112,52}},                                                                  color = {0, 0, 127}));
        connect(vanSlykeEquation.BEox, BEox) annotation(Line(points={{-82.8182,
                -34},{-114,-34}},                                                                 color = {0, 0, 127}));
        connect(vanSlykeEquation.pCO2, pCO2) annotation(Line(points={{-82.8182,
                -46},{-100,-46},{-100,92},{-115,92}},                                                                                        color = {0, 0, 127}));
        connect(vanSlykeEquation.pH, bloodctCO2content.pH) annotation(Line(points={{
                -21.3818,-52.6},{-12,-52.6},{-12,-26},{-120,-26},{-120,114},{
                -83,114}},                                                                                                                            color = {0, 0, 127}));
        connect(bloodctO2content.pH, bloodctCO2content.pH) annotation(Line(points={{-83,
                40.6},{-120,40.6},{-120,114},{-83,114}},                                                                                               color = {0, 0, 127}));
        connect(bloodctO2content.totalO2, ctO2) annotation(Line(points={{-44,-5},
                {-44,-14},{-28.5,-14}},                                                                     color = {0, 0, 127}));
        connect(bloodctCO2content.ctCO2, ctCO2) annotation(Line(points={{-17,114},
                {5,114}},                                                                       color = {0, 0, 127}));
        connect(bloodctCO2content.cHCO3, cHCO3) annotation(Line(points={{-17,102},
                {5,102}},                                                                       color = {0, 0, 127}));
        connect(bloodctO2content.ceHb, ceHb) annotation(Line(points={{-68,-5},{
                -68,-14},{-58,-14}},                                                                   color = {0, 0, 127}));
        connect(bloodctCO2content.cdCO2p, cdCO2)
          annotation (Line(points={{-17,90},{5,90}},           color={0,0,127}));
        connect(bloodctO2content.cdO2p, cdO2)
          annotation (Line(points={{-56,-5},{-56,-14},{-46,-14}},
                                                              color={0,0,127}));
        connect(vanSlykeEquation.pH, pH) annotation (Line(points={{-21.3818,
                -52.6},{2,-52.6},{2,-58},{6,-58}},
                                            color={0,0,127}));
        connect(bloodctO2content.sO2, sO2) annotation (Line(points={{-32,-5},{
                -32,-8},{30,-8}}, color={0,0,127}));
        connect(vanSlykeEquation.sO2, sO2) annotation (Line(points={{-82.8182,
                -80.2},{-92,-80.2},{-92,-98},{18,-98},{18,-8},{30,-8}}, color={
                0,0,127}));
        connect(bloodctCO2content.sO2, sO2) annotation (Line(points={{-83,78},{
                -92,78},{-92,64},{18,64},{18,-8},{30,-8}}, color={0,0,127}));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent={{-140,
                  -100},{40,140}}),                                                                         graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-66, 4}, {94, -6}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "sO2"), Text(extent = {{-66, 26}, {94, 8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "HCO3"), Text(extent = {{-94, -88}, {10, -96}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "T"), Text(extent = {{-44, 44}, {92, 34}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "pH"), Text(extent = {{-96, 44}, {54, 34}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "ctHb"), Text(extent = {{-73, 7}, {73, -7}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {19, 81}, rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "ctO2"), Text(extent = {{-75, 6}, {75, -6}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {19, 58}, rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "ctCO2"), Text(extent = {{-44, 32}, {66, -56}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "PO2CO2"), Text(extent = {{-94, 98}, {104, 88}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "pO2"), Text(extent = {{-94, 86}, {58, 72}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "pCO2"), Text(extent = {{-94, -74}, {102, -82}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "FHbF"), Text(extent = {{-94, -34}, {104, -48}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "FMetHb"), Text(extent = {{-92, -14}, {102, -28}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "cDPG"), Text(extent = {{-94, 22}, {68, 12}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "ctAlb"), Text(extent = {{-74, 8}, {74, -8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {18, -56}, rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdO2"), Text(extent = {{-80, 11.5}, {80, -11.5}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {14, -79.5}, rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdCO2"), Text(extent = {{-94, -54}, {58, -64}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "FCOHb"), Text(extent = {{-78, 7}, {78, -7}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin = {14, -37}, rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "ceHb"), Text(extent = {{-94, 4}, {52, -8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "ctPi"), Text(extent = {{-96, 66}, {52, 50}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "BEox")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-140,
                  -100},{40,140}})));
      end PO2PCO2;

      model AlvGases
        Physiolibrary.Types.RealIO.PressureOutput PAO2 annotation(Placement(transformation(extent = {{36, 41}, {50, 55}}), iconTransformation(extent = {{100, 46}, {120, 66}})));
        Physiolibrary.Types.RealIO.PressureOutput PACO2 annotation(Placement(transformation(extent = {{36, 70}, {48, 82}}), iconTransformation(extent = {{100, 24}, {120, 44}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent = {{-92, 6}, {-62, 36}}), iconTransformation(extent = {{-6, -6}, {6, 6}}, rotation = 0, origin = {-106, 12})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput VAe annotation(Placement(transformation(extent = {{100, 2}, {120, 22}}), iconTransformation(extent = {{100, 2}, {120, 22}})));
        Physiolibrary.Types.RealIO.MolarFlowRateInput VO2 annotation(Placement(transformation(extent = {{-142, -10}, {-102, 30}}), iconTransformation(extent = {{-112, -26}, {-100, -14}})));
        Physiolibrary.Types.RealIO.MolarFlowRateInput VCO2 annotation(Placement(transformation(extent = {{-142, -10}, {-102, 30}}), iconTransformation(extent = {{-112, -46}, {-100, -34}})));
        Real VAi_BTPS_l_per_min "inspired alveolar ventilation in l BTPS/min";
        Real temp_cels "?core body temperature in ?C";
        Real PB_mmHg "barometric pressure";
        Real VO2_mmol_per_min(start = 11)
          "rate of oxygen comsumption [mmol/min]";
        Real VCO2_mmol_per_min(start = 10)
          "rate of carbon dioxide production [mmol/min]";
        Real PAO2_mmHg "alveolar pO2 [mmHg]";
        Real PACO2_mmHg "alveolar PCO2 [mmHg]";
        Real VAe_BTPS_l_per_min "expired alveolar ventilation in l BTPS/min";
        outer Interfaces.ModelSettings modelSettings
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      algorithm
        (PAO2_mmHg,PACO2_mmHg,VAe_BTPS_l_per_min) := OSA.AlveolarGases(
                VAi_BTPS_l_per_min,
                modelSettings.FiO2,
                modelSettings.FiCO2,
                temp_cels,
                PB_mmHg,
                VO2_mmol_per_min,
                VCO2_mmol_per_min);
      equation
        temp_cels = modelSettings.Temperature - 273.15;
        //from grad C to grad K conversion
        PB_mmHg = modelSettings.PB / 133.322365;
        // from mmHg to Pa conversion
        PAO2_mmHg = PAO2 / 133.322365;
        // from mmHg to Pa conversion
        PACO2_mmHg = PACO2 / 133.322365;
        // from mmHg to Pa conversion
        VAi_BTPS_l_per_min = VAi * 60000;
        // from m^3/sec to l/min conversion
        VAe = VAe_BTPS_l_per_min / 60000;
        //from l/min to m^3/sec conversion
        VO2 = VO2_mmol_per_min / 60 / 1000;
        //from mmol/min to mol/sec conversion
        VCO2 = VCO2_mmol_per_min / 60 / 1000;
        //from mmol/min to mol/sec conversion
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-42, -40}, {82, -86}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "AlvGases"),   Text(extent = {{-46, 44}, {94, 24}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "PACO2"), Text(extent = {{-80, 62}, {94, 52}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "PAO2"), Text(extent = {{-94, 16}, {0, 6}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "VAi"), Text(extent = {{-46, 20}, {94, 4}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "VAe"), Text(extent = {{-94, -14}, {52, -28}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "VO2"), Text(extent = {{-94, -36}, {66, -50}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "VCO2")}),
                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
      end AlvGases;

      model AlvEq

        Physiolibrary.Types.RealIO.ConcentrationInput CvO2 annotation (Placement(
              transformation(extent={{-24,79},{-8,96}}),  iconTransformation(extent={{-202,10},
                  {-190,22}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CvCO2 annotation (Placement(
              transformation(extent={{-26,64},{-8,82}}),  iconTransformation(extent={{-202,-2},
                  {-190,10}})));
        Physiolibrary.Types.RealIO.PressureOutput PAO2 annotation (Placement(
              transformation(extent={{224,80},{234,91}}),
                                                        iconTransformation(extent={{240,76},
                  {254,90}})));
        Physiolibrary.Types.RealIO.PressureOutput PACO2 annotation (Placement(
              transformation(extent={{240,70},{250,80}}),
                                                        iconTransformation(extent={{240,54},
                  {254,68}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation (Placement(
              transformation(extent={{-26,94},{-8,112}}),  iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,40})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation (Placement(
              transformation(extent={{98,96},{114,112}}),  iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,52})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput VAe annotation (Placement(
              transformation(extent={{230,54},{244,68}}), iconTransformation(
                extent={{240,-94},{256,-78}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
              transformation(extent={{130,16},{142,28}}), iconTransformation(
                extent={{240,-18},{256,-2}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
              transformation(extent={{130,8},{140,18}}),  iconTransformation(
                extent={{240,-36},{256,-20}})));

        OSA.AlvGases alvGases
          annotation (Placement(transformation(extent={{130,48},{202,100}})));
        OSA.O2CO2Balance o2CO2Balance
          annotation (Placement(transformation(extent={{36,38},{100,98}})));
        Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={-10,-54}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,6})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={-35,48}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,28})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={-35,68}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,-68})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation(Placement(transformation(extent = {{7.5, -7}, {-7.5, 7}}, rotation = 180, origin={-80.5,
                  -70}),                                                                                                    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,-46})));
        Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4) annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={142,-90}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,46})));
        ctO2content bloodctO2content
          annotation (Placement(transformation(extent={{-120,-50},{-60,10}})));
        ctCO2content bloodctCO2content
          annotation (Placement(transformation(extent={{-120,18},{-60,78}})));
        bloodBEox     vanSlykeEquation
          annotation (Placement(transformation(extent={{-30,-152},{24,-98}})));
        Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints1 annotation(Placement(transformation(extent={{28,-108},
                  {86,-76}})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent={{-68,
                  -101},{-50,-83}}),                                                                                                    iconTransformation(extent={{-210,70},
                  {-190,90}})));
      initial equation

      equation
        connect(alvGases.PACO2, PACO2) annotation (Line(points={{205.6,82.84},{
                237.6,82.84},{237.6,75},{245,75}}, color={0,0,127}));
        connect(alvGases.PAO2, PAO2) annotation (Line(points={{205.6,88.56},{
                205.6,85.5},{229,85.5}},        color={0,0,127}));
        connect(alvGases.VAe, VAe) annotation (Line(points={{205.6,77.12},{
                205.6,61},{237,61}},        color={0,0,127}));
        connect(o2CO2Balance.VCO2, VCO2) annotation (Line(points={{102.56,63.8},
                {108,63.8},{108,12},{132,12},{132,14},{134,14},{134,13},{135,13}},
                                                            color={0,0,127}));
        connect(o2CO2Balance.VO2, VO2) annotation (Line(points={{102.56,69.2},{
                112,69.2},{112,22},{136,22}},
                                        color={0,0,127}));

        connect(alvGases.VAi, VAi) annotation (Line(points={{127.84,77.12},{
                127.84,103.56},{106,103.56},{106,104}}, color={0,0,127}));
        connect(o2CO2Balance.VCO2, alvGases.VCO2) annotation (Line(points={{
                102.56,63.8},{114.28,63.8},{114.28,63.6},{127.84,63.6}}, color=
                {0,0,127}));
        connect(o2CO2Balance.VO2, alvGases.VO2) annotation (Line(points={{
                102.56,69.2},{114.28,69.2},{114.28,68.8},{127.84,68.8}}, color=
                {0,0,127}));
        connect(Q, o2CO2Balance.Q) annotation (Line(points={{-17,103},{21,103},
                {21,89.6},{32.8,89.6}}, color={0,0,127}));
        connect(CvO2, o2CO2Balance.CvO2) annotation (Line(points={{-16,87.5},{
                17.5,87.5},{17.5,81.2},{32.8,81.2}}, color={0,0,127}));
        connect(CvCO2, o2CO2Balance.CvCO2) annotation (Line(points={{-17,73},{
                19.5,73},{19.5,74},{32.8,74}}, color={0,0,127}));
        connect(bloodctO2content.sO2,bloodctCO2content. sO2) annotation(Line(points={{-72,-53},
                {-72,-54},{-26,-54},{-26,16},{-132,16},{-132,24},{-123,24}},                                                              color = {0, 0, 127}));
        connect(bloodctO2content.totalO2,ctO2)  annotation(Line(points={{-84,-53},
                {-84,-70},{-80.5,-70}},                                                                     color = {0, 0, 127}));
        connect(bloodctCO2content.ctCO2,ctCO2)  annotation(Line(points={{-57,60},
                {-46,60},{-46,68},{-35,68}},                                                    color = {0, 0, 127}));
        connect(bloodctCO2content.cHCO3,cHCO3)  annotation(Line(points={{-57,48},
                {-35,48}},                                                                      color = {0, 0, 127}));
        connect(bloodctCO2content.ctCO2, o2CO2Balance.CpcCO2) annotation (Line(
              points={{-57,60},{-14,60},{-14,58.4},{32.8,58.4}}, color={0,0,127}));
        connect(bloodctO2content.totalO2, o2CO2Balance.CpcO2) annotation (Line(
              points={{-84,-53},{-84,-62},{20,-62},{20,65.6},{32.8,65.6}},
              color={0,0,127}));
        connect(alvGases.PAO2, bloodctO2content.pO2) annotation (Line(points={{
                205.6,88.56},{212,88.56},{212,118},{-180,118},{-180,4},{-123,4}},
              color={0,0,127}));
        connect(alvGases.PACO2, bloodctCO2content.pCO2) annotation (Line(points=
               {{205.6,82.84},{214,82.84},{214,120},{-182,120},{-182,72},{-123,
                72}}, color={0,0,127}));
        connect(alvGases.PACO2, bloodctO2content.pCO2) annotation (Line(points=
                {{205.6,82.84},{214,82.84},{214,120},{-182,120},{-182,-20},{
                -123,-20}}, color={0,0,127}));
        connect(inverseBlockConstraints1.u1,BEox)  annotation(Line(points={{25.1,
                -92},{-59,-92}},                                                                                 color = {0, 0, 127}));
        connect(vanSlykeEquation.BEox,inverseBlockConstraints1. u2) annotation(Line(points={{26.7,
                -125},{56,-125},{56,-92},{33.8,-92}},                                                                                                    color = {0, 0, 127}));
        connect(vanSlykeEquation.pH,inverseBlockConstraints1. y2) annotation(Line(points={{-32.7,
                -109.34},{-34,-109.34},{-34,-110},{-60,-110},{-60,-160},{72,
                -160},{72,-92},{81.65,-92}},                                                                                                    color = {0, 0, 127}));
        connect(pH,inverseBlockConstraints1. y1) annotation(Line(points={{142,-90},
                {136,-92},{87.45,-92}},                                                                              color = {0, 0, 127}));
        connect(bloodctO2content.sO2, vanSlykeEquation.sO2) annotation (Line(
              points={{-72,-53},{-72,-142},{-42,-142},{-42,-143.36},{-32.7,
                -143.36}}, color={0,0,127}));
        connect(alvGases.PACO2, vanSlykeEquation.pCO2) annotation (Line(points=
                {{205.6,82.84},{214,82.84},{214,120},{-182,120},{-182,-100.16},
                {-32.7,-100.16}}, color={0,0,127}));
        connect(bloodctO2content.sO2, sO2) annotation (Line(points={{-72,-53},{
                -44,-53},{-44,-54},{-10,-54}}, color={0,0,127}));
        connect(inverseBlockConstraints1.y1, bloodctO2content.pH) annotation (
            Line(points={{87.45,-92},{88,-92},{88,-168},{-142,-168},{-142,-7.4},
                {-123,-7.4}}, color={0,0,127}));
        connect(inverseBlockConstraints1.y1, bloodctCO2content.pH) annotation (
            Line(points={{87.45,-92},{88,-92},{88,-168},{-142,-168},{-142,60},{
                -123,60}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -180},{260,140}}),
                         graphics={
              Rectangle(
                extent={{-218,140},{240,-180}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-68,36},{64,-12}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                textString="AlvEq"),
              Text(
                extent={{-24,6},{24,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-160,14},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvO2"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,4},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvCO2"),
              Text(
                extent={{-51,5},{51,-5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={183,-49},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CpcO2"),
              Text(
                extent={{-52,9.5},{52,-9.5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={182,-69.5},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CpcCO2"),
              Text(
                extent={{136,14},{234,2}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="sO2pc"),
              Text(
                extent={{140,36},{234,16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="HCO3pc"),
              Text(
                extent={{118,52},{234,40}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="pHpc"),
              Text(
                extent={{142,72},{234,56}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PACO2"),
              Text(
                extent={{134,86},{234,78}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PAO2"),
              Text(
                extent={{-184,42},{-148,36}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Q"),
              Text(
                extent={{-184,56},{-138,50}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="VAi"),
              Text(
                extent={{168,-82},{234,-92}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VA"),
              Text(
                extent={{132,-6},{234,-16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VO2"),
              Text(
                extent={{112,-24},{234,-34}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VCO2"),
              Text(
                extent={{-186,82},{-140,76}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="BEox")}),
                                    Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-180},{260,140}})));
      end AlvEq;

      model O2CO2
        Real HCO3act = 0.0307*(pCO2/133.32)*10^(pH-6.105) "HCO3 act acc to Berend, N ENGL J MED 2018";
        Real SBE = HCO3act - 24.8 + 16.2*(pH-7.4);
        Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={4,8}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,58})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={5,116}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,78})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox annotation(Placement(transformation(extent={{-160,
                  -40},{-120,0}}),                                                                                                 iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-186,110})));
        Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4) annotation(Placement(transformation(extent={{-7,-7},
                  {7,7}},                                                                                                    rotation = 0, origin={1,-41}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,98})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation(Placement(transformation(extent={{-6,6},{
                  6,-6}},                                                                                                    rotation = 0, origin={-46,0}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,0})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation(Placement(transformation(extent = {{-7, 7}, {7, -7}}, rotation = 0, origin={5,104}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,-20})));
        ctO2content bloodctO2content
          annotation (Placement(transformation(extent={{-80,14},{-20,74}})));
        ctCO2content bloodctCO2content
          annotation (Placement(transformation(extent={{-80,86},{-20,146}})));
        BEINV vanSlykeEquation
          annotation (Placement(transformation(extent={{-82,-76},{-20,-16}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
          "effiective concentration of hemoglobin (mmol/l)"                                                   annotation(Placement(transformation(extent = {{-6, 6}, {6, -6}}, rotation = 0, origin = {-58, 0}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,20})));
        Physiolibrary.Types.RealIO.ConcentrationInput ctO2 annotation (Placement(
              transformation(extent={{-160,150},{-120,190}}), iconTransformation(
                extent={{-196,140},{-176,160}})));
        Physiolibrary.Types.RealIO.PressureOutput pO2( start = 13300) annotation (Placement(
              transformation(extent={{-30,162},{-10,182}}), iconTransformation(extent={{56,132},
                  {76,152}})));
        Physiolibrary.Types.RealIO.ConcentrationInput ctCO2 annotation (Placement(
              transformation(extent={{-160,190},{-120,230}}), iconTransformation(
                extent={{-196,120},{-176,140}})));
        Physiolibrary.Types.RealIO.PressureOutput pCO2( start = 5333) annotation (Placement(
              transformation(extent={{-26,194},{-6,214}}), iconTransformation(extent={{56,112},
                  {76,132}})));
        Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints annotation(Placement(transformation(extent={{-80,200},
                  {-40,220}})));
        Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints1 annotation(Placement(transformation(extent={{-82,160},
                  {-40,180}})));
      equation
        connect(vanSlykeEquation.BEox, BEox) annotation(Line(points={{-84.8182,
                -22},{-98,-22},{-98,-20},{-140,-20}},                                             color = {0, 0, 127}));
        connect(bloodctO2content.pH, bloodctCO2content.pH) annotation(Line(points={{-83,
                56.6},{-120,56.6},{-120,128},{-83,128}},                                                                                               color={238,46,
                47},
            thickness=0.5));
        connect(bloodctCO2content.cHCO3, cHCO3) annotation(Line(points={{-17,116},
                {5,116}},                                                                       color = {0, 0, 127}));
        connect(bloodctO2content.ceHb, ceHb) annotation(Line(points={{-68,11},{-68,0},
                {-58,0}},                                                                              color = {0, 0, 127}));
        connect(bloodctCO2content.cdCO2p, cdCO2)
          annotation (Line(points={{-17,104},{5,104}},         color={0,0,127}));
        connect(bloodctO2content.cdO2p, cdO2)
          annotation (Line(points={{-56,11},{-56,0},{-46,0}}, color={0,0,127}));
        connect(bloodctO2content.sO2, sO2)
          annotation (Line(points={{-32,11},{-32,8},{4,8}}, color={0,0,127}));
        connect(vanSlykeEquation.pH, bloodctCO2content.pH) annotation (Line(points={{
                -23.3818,-40.6},{-12,-40.6},{-12,-8},{-120,-8},{-120,128},{-83,
                128}},                                                       color={238,46,
                47},
            thickness=0.5));
        connect(ctCO2, inverseBlockConstraints.u1) annotation (Line(points={{-140,
                210},{-82,210}},                  color={0,0,127}));
        connect(bloodctCO2content.ctCO2, inverseBlockConstraints.u2) annotation (Line(
              points={{-17,128},{-6,128},{-6,190},{-60,190},{-60,210},{-76,210}},
              color={0,0,127}));
        connect(inverseBlockConstraints1.u1, ctO2) annotation (Line(points={{-84.1,
                170},{-140,170}},                  color={0,0,127}));
        connect(bloodctCO2content.sO2, sO2) annotation (Line(points={{-83,92},{-90,92},
                {-90,78},{-12,78},{-12,8},{4,8}}, color={0,0,127}));
        connect(vanSlykeEquation.sO2, sO2) annotation (Line(points={{-84.8182,
                -68.2},{-90,-68.2},{-90,-82},{24,-82},{24,-6},{-12,-6},{-12,8},
                {4,8}},                                                    color={0,0,
                127}));
        connect(bloodctO2content.totalO2, inverseBlockConstraints1.u2) annotation (
            Line(points={{-44,11},{-44,0},{24,0},{24,156},{-60,156},{-60,170},{
                -77.8,170}},
                       color={0,0,127}));
        connect(inverseBlockConstraints.y1, pCO2)
          annotation (Line(points={{-39,210},{-28,210},{-28,204},{-16,204}},
                                                         color={0,0,127}));
        connect(inverseBlockConstraints.y2, vanSlykeEquation.pCO2) annotation (Line(
              points={{-43,210},{-50,210},{-50,236},{-162,236},{-162,-34},{
                -84.8182,-34}},
              color={0,0,127},
            thickness=0.5));
        connect(bloodctO2content.pCO2, vanSlykeEquation.pCO2) annotation (Line(points={{-83,44},
                {-162,44},{-162,-34},{-84.8182,-34}},       color={0,0,127},
            thickness=0.5));
        connect(bloodctCO2content.pCO2, vanSlykeEquation.pCO2) annotation (Line(
              points={{-83,140},{-162,140},{-162,-34},{-84.8182,-34}},
                                                                    color={0,0,127},
            thickness=0.5));

        connect(inverseBlockConstraints1.y1, pO2)
          annotation (Line(points={{-38.95,170},{-28,170},{-28,172},{-20,172}},
                                                         color={0,0,127}));
        connect(inverseBlockConstraints1.y2, bloodctO2content.pO2) annotation (Line(
              points={{-43.15,170},{-48,170},{-48,188},{-154,188},{-154,68},{
                -83,68}},
              color={0,0,127}));
        connect(vanSlykeEquation.pH, pH) annotation (Line(points={{-23.3818,
                -40.6},{-10.76,-40.6},{-10.76,-41},{1,-41}}, color={238,46,47},
            thickness=0.5));

        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent={{-180,
                  -100},{60,240}}),                                                                         graphics={  Rectangle(extent={{
                    -180,196},{56,-58}},                                                                                                                               lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -116,64},{44,54}},                                                                                                                                                    lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "sO2"), Text(extent={{
                    -114,86},{46,68}},                                                                                                                                                                                  lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "HCO3"),
                                                                                                                                                                                 Text(extent={{
                    -92,104},{44,94}},                                                                                                                                                                                lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "pH"),  Text(extent = {{-73, 7}, {73, -7}}, lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     origin={
                    -29,145},                                                                                                                                           rotation = 180, fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Right,
                textString="pO2"),                                                                                                                                                   Text(extent = {{-75, 6}, {75, -6}}, lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     origin={
                    -31,120},                                                                                                                                           rotation = 180, fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Right,
                textString="pCO2"),                                                                                                                                                   Text(extent={{
                    -104,92},{6,4}},                                                                                                                                                                                        lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="O2CO2"),                                                                                                                                         Text(extent={{
                    -172,154},{26,144}},                                                                                                                                                                           lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Left,
                textString="ctO2"),                                                                                                                                                Text(extent={{
                    -174,138},{-22,124}},                                                                                                                                                                               lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Left,
                textString="ctCO2"),                                                                                                                                                 Text(extent = {{-74, 8}, {74, -8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -26,0},                                                                                                                                              rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdO2"), Text(extent = {{-78, 7}, {78, -7}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -32,23},                                                                                                                                             rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "ceHb"), Text(extent = {{-80, 11.5}, {80, -11.5}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -30,-19.5},                                                                                                                                            rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdCO2"),
                                                                                                                                                                                    Text(extent={{
                    -174,118},{-26,102}},                                                                                                                                                                                lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Left,
                textString="BEox")}),                                                                                                                                                 Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-180,
                  -100},{60,240}})));
      end O2CO2;

      function plasmaCO2totalSI
        "Calculation of plasma total CO2 concentration"
        input Real pH "plasma pH at given temperature";
        input Real pCO2 "pCO2 at given temperatura in Pa";
        input Real T "temperature in K";
        input Real cAlb "concentration of Albumin in mmol/l";
      //  input Real ctHb "Hemoglobin concentration in mmol/l";
      //  input Real sO2 "O2 hemoglobin saturation";
        output Real ctCO2B "Total blood CO2 concetration in mmol/l";
        output Real cHCO3 "plasma concentration of bicarbonate in mmol/l";
        output Real dCO2 "dissolved CO2 concentration in plasma";
      protected
        Real dpHEdpHP = 0.77;
        Real dpHEdsO2 = 0.035;
        Real pHEx = 7.84;
        Real sO2x = 0.06;
        Real aCO2E0 = 0.195;
        Real ctHbE = 21;
        Real pHE0 = 7.19;
        Real pKE0 = 6.125;
        Real pHT0;
        Real pCO2T0;
        Real pKE;
        Real pHE;
        Real ctCO2E;
        Real phiEB;
        Real T0 = 37;
        Real cAlbN = 0.66;
        //Real cAlb;
        Real pH0 = 7.40;
        Real aCO2;
        Real tCO2p;

        Real ctHb=0 "Hemoglobin concentration in mmol/l";
        Real sO2=0 "O2 hemoglobin saturation";
      algorithm
        // pCO2T0 := pCO22of (pCO2, T, T0, ctHb);
        //cAlb := cAlbN;
        // albumin has minimal influence on total CO2 concentration
        pCO2T0 := OSA.pCO22of(
                pCO2/1000,
                T - 273.15,
                T0,
                ctHb,
                cAlb,
                pH);
        // pHT0 := pH2of (pH, T, T0, ctHb);
        pHT0 := OSA.pH2of(
                pH,
                T - 273.15,
                T0,
                ctHb,
                cAlb,
                pCO2);
        pHE := pHE0 + dpHEdpHP * (pHT0 - pH0) + dpHEdsO2 * (1 - sO2);
        //or : (pHE - 6.9) = alpha*(pHP - pH0), where alpha = 0.7 + f*(1 - sO2)
        pKE := pKE0 - OSA.lg(1 + OSA.antilg(pHE - pHEx - sO2x*sO2));
        ctCO2E := aCO2E0*pCO2T0*(1 + OSA.antilg(pHE - pKE));
        phiEB := ctHb / ctHbE;
        // !! !! it is hematokrit!!!!!!!
        //tCO2p := pCO2T0 * aCO2of(T0)*(1 + antilg(pHT0-pKof(T0)));
        aCO2 := OSA.aCO2of(T0);
        cHCO3 := aCO2*pCO2T0*OSA.antilg(pHT0 - OSA.pKof(T0));
        dCO2 := aCO2 * pCO2T0;
        ctCO2B := ctCO2E * phiEB + (dCO2 + cHCO3) * (1 - phiEB);
        //ctCO2B :=  ctCO2E*phiEB + ctCO2Pof( pHT0, pCO2T0, T0)*(1 - phiEB);
        //ctCO2B :=  ctCO2E*phiEB + tCO2p*(1 - phiEB);
      end plasmaCO2totalSI;

      model plasmaBEox
        Physiolibrary.Types.RealIO.PressureInput pCO2
          "pCO2 at given temperature in Pa"                                             annotation(Placement(transformation(extent = {{-140, 62}, {-100, 102}}), iconTransformation(extent = {{-120, 82}, {-100, 102}})));
        Physiolibrary.Types.RealIO.pHInput pH "pH at given temperature" annotation(Placement(transformation(extent = {{-140, 28}, {-100, 68}}), iconTransformation(extent = {{-120, 48}, {-100, 68}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput BEox
          "Base Excess (in fully oxygenated blood) in mmol/l"                                                   annotation(Placement(transformation(extent = {{100, -10}, {120, 10}}), iconTransformation(extent = {{100, -10}, {120, 10}})));
        Physiolibrary.Types.RealIO.ConcentrationInput cAlb "Conentration of albumin"
          annotation (Placement(transformation(extent={{-140,-38},{-100,2}}),
              iconTransformation(extent={{-122,-16},{-100,6}})));
        Physiolibrary.Types.RealIO.ConcentrationInput cPi
          "Concentration of phosphate" annotation (Placement(transformation(extent={{-140,
                  -38},{-100,2}}), iconTransformation(extent={{-124,-62},{-100,
                  -38}})));
        Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
              transformation(extent={{-142,-126},{-102,-86}}),
              iconTransformation(extent={{-126,-106},{-100,-80}})));
      algorithm
        BEox := OSA.cBEoxOf(
                pH,
                pCO2/1000,
                0,
                Temp - 273.15,
                cAlb,
                cPi,
                0);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -52,98},{112,12}},                                                                                                     lineColor=
                    {28,108,200},                                                                                                    fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="plasma 
BEox"),       Text(
                extent={{-96,66},{-40,98}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pCO2"),
              Text(
                extent={{-98,28},{-42,60}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pH"),
              Text(
                extent={{40,-16},{96,16}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="BEox"),
              Text(
                extent={{-100,-20},{-44,12}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cAlb"),
              Text(
                extent={{-102,-64},{-46,-32}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cPi"),
              Text(
                extent={{-94,-100},{-38,-68}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="Temp")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
      end plasmaBEox;

      model plasmactCO2content
        Physiolibrary.Types.RealIO.PressureInput pCO2(start = 5330)
          "pCO2 in Pa"                                                           annotation(Placement(transformation(extent = {{-120, 20}, {-80, 60}}), iconTransformation(extent = {{-120, 70}, {-100, 90}})));
        Physiolibrary.Types.RealIO.pHInput pH annotation(Placement(transformation(extent = {{-120, 70}, {-80, 110}}), iconTransformation(extent = {{-120, 30}, {-100, 50}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2
          "total blood CO2 concentration (in mmol/l)"                                                    annotation(Placement(transformation(extent = {{100, 30}, {120, 50}}), iconTransformation(extent = {{100, 30}, {120, 50}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3
          "plasma HCO3 concentration (in mmol/l)"                                                    annotation(Placement(transformation(extent = {{100, 60}, {120, 80}}), iconTransformation(extent = {{100, -10}, {120, 10}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2p
          "plasma CO2 dissolved concentration (in mmol/l)"                                                     annotation(Placement(transformation(extent = {{100, 60}, {120, 80}}), iconTransformation(extent = {{100, -50}, {120, -30}})));
        Physiolibrary.Types.RealIO.ConcentrationInput cAlb "Conentration of albumin"
          annotation (Placement(transformation(extent={{-120,-32},{-80,8}}),
              iconTransformation(extent={{-122,-16},{-100,6}})));
        Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
              transformation(extent={{-122,-106},{-82,-66}}),
              iconTransformation(extent={{-126,-106},{-100,-80}})));
      algorithm
        (ctCO2,cHCO3,cdCO2p) := OSA.plasmaCO2totalSI(
                pH,
                pCO2,
                Temp,
                cAlb);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -84,26},{64,-46}},                                                                                                    lineColor=
                    {28,108,200},                                                                                                    fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="CO2 
total"),      Text(
                extent={{-96,66},{-40,98}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pCO2"),
              Text(
                extent={{-98,30},{-42,62}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pH"),
              Text(
                extent={{40,24},{96,56}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="tCO2"),
              Text(
                extent={{40,-16},{96,16}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cHCO3"),
              Text(
                extent={{40,-56},{96,-24}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cdCO2p"),
              Text(
                extent={{-100,-20},{-44,12}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cAlb"),
              Text(
                extent={{-94,-100},{-38,-68}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="Temp")}));
      end plasmactCO2content;

      partial model BaseBEINV
        Physiolibrary.Types.RealIO.PressureInput pCO2
          "pCO2 at given temperature in Pa"                                             annotation(Placement(transformation(extent={{-79,31},
                  {-63,47}}),                                                                                                                                 iconTransformation(extent = {{-120, 30}, {-100, 50}})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent = {{-60, 51}, {-42, 69}}), iconTransformation(extent = {{-120, 70}, {-100, 90}})));
        Physiolibrary.Types.RealIO.ConcentrationInput cAlb "Conentration of albumin"
          annotation (Placement(transformation(extent={{-108,-16},{-68,24}}),
              iconTransformation(extent={{-122,-16},{-100,6}})));
        Physiolibrary.Types.RealIO.ConcentrationInput cPi
          "Concentration of phosphate" annotation (Placement(transformation(extent={{-106,
                  -48},{-66,-8}}), iconTransformation(extent={{-124,-62},{-100,
                  -38}})));
        Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
              transformation(extent={{-98,-88},{-58,-48}}), iconTransformation(
                extent={{-126,-106},{-100,-80}})));
        Physiolibrary.Types.RealIO.pHOutput pH "plasma pH at given temperature" annotation(Placement(transformation(extent={{104,50},
                  {124,70}}),                                                                                                    iconTransformation(extent={{98,8},{
                  118,28}})));
        annotation (Icon(graphics={                                                                                     Rectangle(extent={{
                    -100,100},{100,-100}},                                                                                                                             lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid),
              Text(
                extent={{-94,64},{-38,96}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="BEox"),
              Text(
                extent={{-92,26},{-36,58}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pCO2"),
              Text(
                extent={{-98,-20},{-42,12}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cAlb"),
              Text(
                extent={{-100,-64},{-44,-32}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cPi"),
              Text(
                extent={{-92,-100},{-36,-68}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="Temp")}));
      end BaseBEINV;

      model plasmaBEINV
        extends BaseBEINV;
        Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints1 annotation(Placement(transformation(extent={{38,44},
                  {96,76}})));
        plasmaBEox plasmaBEox1
          annotation (Placement(transformation(extent={{-4,-28},{68,26}})));
      equation
        connect(inverseBlockConstraints1.u1, BEox) annotation(Line(points={{35.1,60},
                {-51,60}},                                                                                       color = {0, 0, 127}));
        connect(pH, inverseBlockConstraints1.y1) annotation(Line(points={{114,60},
                {97.45,60}},                                                                                         color = {0, 0, 127}));
        connect(pCO2, plasmaBEox1.pCO2) annotation (Line(points={{-71,39},{
                -46.5,39},{-46.5,23.84},{-7.6,23.84}}, color={0,0,127}));
        connect(cAlb, plasmaBEox1.cAlb) annotation (Line(points={{-88,4},{-76,4},
                {-76,-2.35},{-7.96,-2.35}}, color={0,0,127}));
        connect(plasmaBEox1.cPi, cPi) annotation (Line(points={{-8.32,-14.5},{
                -52,-14.5},{-52,-28},{-86,-28}}, color={0,0,127}));
        connect(plasmaBEox1.Temp, Temp) annotation (Line(points={{-8.68,-26.11},
                {-34,-26.11},{-34,-68},{-78,-68}}, color={0,0,127}));
        connect(plasmaBEox1.BEox, inverseBlockConstraints1.u2) annotation (Line(
              points={{71.6,-1},{80,-1},{80,60},{43.8,60}}, color={0,0,127}));
        connect(plasmaBEox1.pH, inverseBlockConstraints1.y2) annotation (Line(
              points={{-7.6,14.66},{-30,14.66},{-30,36},{84,36},{84,60},{91.65,
                60}}, color={0,0,127}));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent={{-100,
                  -100},{120,100}}),                                                                        graphics={                                Text(extent = {{-84, 22}, {94, -12}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, textString = "BEINV")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent={{-100,
                  -100},{120,100}})));
      end plasmaBEINV;

      model plasmaO2content
        Physiolibrary.Types.RealIO.PressureInput pO2( start=13300) annotation(Placement(transformation(extent={{-118,
                  -30},{-78,10}}),                                                                                            iconTransformation(extent = {{-120, 70}, {-100, 90}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdO2
          "dissolved O2 concentration in plasma" annotation (Placement(transformation(
                extent={{-14,-20},{6,0}}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-20,-110})));
        Physiolibrary.Types.RealIO.TemperatureInput temp annotation (Placement(
              transformation(extent={{-122,-106},{-82,-66}}), iconTransformation(
                extent={{-126,-70},{-100,-44}})));

      Real aO2;
      equation

        //cdO2=OSA.aO2(temp)*pO2
        //aO2= exp(log(0.0105) - 0.0115 * (temp - 37.0) + 0.5 * 0.00042 * (temp - 37.0) ^ 2);
        aO2= exp(log(0.0105) - 0.0115 * (temp - 273.15 - 37.0) + 0.5 * 0.00042 * (temp - 273.15 - 37.0) ^ 2);
        cdO2=aO2*(pO2/1000);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -30,66},{94,-34}},                                                                                                    lineColor=
                    {28,108,200},
                textString="O2 plasma"),
              Text(
                extent={{-96,66},{-40,98}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pO2"),
              Text(
                extent={{-94,-64},{-38,-32}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="Temp"),
              Text(
                extent={{-56,-98},{0,-66}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cdO2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
      end plasmaO2content;

      model plasmaO2CO2
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={5,116}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,80})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox annotation(Placement(transformation(extent={{-124,
                  -28},{-108,-12}}),                                                                                               iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-186,110})));
        Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4) annotation(Placement(transformation(extent={{-7,-7},
                  {7,7}},                                                                                                    rotation = 0, origin={13,-45}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,100})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation(Placement(transformation(extent={{-6,6},{
                  6,-6}},                                                                                                    rotation = 0, origin={-22,-8}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,2})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation(Placement(transformation(extent = {{-7, 7}, {7, -7}}, rotation = 0, origin={5,104}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,-18})));
        Physiolibrary.Types.RealIO.ConcentrationInput ctO2 annotation (Placement(
              transformation(extent={{-160,146},{-120,186}}), iconTransformation(
                extent={{-196,140},{-176,160}})));
        Physiolibrary.Types.RealIO.PressureOutput pO2( start = 13300) annotation (Placement(
              transformation(extent={{-30,162},{-10,182}}), iconTransformation(extent={{56,134},
                  {76,154}})));
        Physiolibrary.Types.RealIO.ConcentrationInput ctCO2 annotation (Placement(
              transformation(extent={{-154,182},{-114,222}}), iconTransformation(
                extent={{-196,120},{-176,140}})));
        Physiolibrary.Types.RealIO.PressureOutput pCO2( start = 5333) annotation (Placement(
              transformation(extent={{-26,194},{-6,214}}), iconTransformation(extent={{56,112},
                  {76,132}})));
        Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints annotation(Placement(transformation(extent={{-76,192},
                  {-36,216}})));
        Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints1 annotation(Placement(transformation(extent={{-76,160},
                  {-36,184}})));
        Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
              transformation(extent={{-192,-108},{-152,-68}}),
              iconTransformation(extent={{-204,-38},{-178,-12}})));
        Physiolibrary.Types.RealIO.ConcentrationInput cPi
          "Concentration of phosphate" annotation (Placement(transformation(extent={{-186,
                  -86},{-146,-46}}),
                                   iconTransformation(extent={{-204,6},{-180,30}})));
        Physiolibrary.Types.RealIO.ConcentrationInput cAlb "Conentration of albumin"
          annotation (Placement(transformation(extent={{-194,-56},{-154,-16}}),
              iconTransformation(extent={{-202,52},{-180,74}})));
        replaceable
        plasmaBEINV plasmaBEINV1
          annotation (Placement(transformation(extent={{-80,-84},{-12,-16}})));
        plasmactCO2content plasmactCO2content1
          annotation (Placement(transformation(extent={{-92,84},{-26,142}})));
        plasmaO2content plasmaO2content2
          annotation (Placement(transformation(extent={{-92,6},{-22,60}})));
      equation
        connect(ctCO2, inverseBlockConstraints.u1) annotation (Line(points={{-134,202},
                {-106,202},{-106,204},{-78,204}}, color={0,0,127}));
        connect(inverseBlockConstraints1.u1, ctO2) annotation (Line(points={{-78,172},
                {-102,172},{-102,166},{-140,166}}, color={0,0,127}));
        connect(inverseBlockConstraints.y1, pCO2)
          annotation (Line(points={{-35,204},{-16,204}}, color={0,0,127}));
        connect(inverseBlockConstraints1.y1, pO2)
          annotation (Line(points={{-35,172},{-20,172}}, color={0,0,127}));
        connect(BEox, plasmaBEINV1.BEox) annotation (Line(points={{-116,-20},{
                -102,-20},{-102,-22.8},{-83.0909,-22.8}}, color={0,0,127}));
        connect(plasmaBEINV1.cPi, cPi) annotation (Line(points={{-83.7091,-67},
                {-110.855,-67},{-110.855,-66},{-166,-66}}, color={0,0,127}));
        connect(plasmaBEINV1.Temp, Temp) annotation (Line(points={{-84.0182,
                -81.62},{-118.009,-81.62},{-118.009,-88},{-172,-88}}, color={0,
                0,127}));
        connect(plasmaBEINV1.pH, pH) annotation (Line(points={{-15.7091,-43.88},
                {-3.85455,-43.88},{-3.85455,-45},{13,-45}}, color={0,0,127}));
        connect(cAlb, plasmaBEINV1.cAlb) annotation (Line(points={{-174,-36},{
                -128,-36},{-128,-51.7},{-83.4,-51.7}}, color={0,0,127}));
        connect(plasmactCO2content1.Temp, Temp) annotation (Line(points={{
                -96.29,86.03},{-132,86.03},{-132,-88},{-172,-88}}, color={0,0,
                127}));
        connect(plasmactCO2content1.cAlb, plasmaBEINV1.cAlb) annotation (Line(
              points={{-95.63,111.55},{-152,111.55},{-152,-36},{-128,-36},{-128,
                -51.7},{-83.4,-51.7}}, color={0,0,127}));
        connect(inverseBlockConstraints.y2, plasmactCO2content1.pCO2)
          annotation (Line(points={{-39,204},{-50,204},{-50,226},{-174,226},{
                -174,136.2},{-95.3,136.2}}, color={0,0,127}));
        connect(plasmaBEINV1.pCO2, plasmactCO2content1.pCO2) annotation (Line(
              points={{-83.0909,-36.4},{-124,-36.4},{-124,-8},{-174,-8},{-174,
                136.2},{-95.3,136.2}}, color={0,0,127}));
        connect(plasmactCO2content1.pH, pH) annotation (Line(points={{-95.3,
                124.6},{-122,124.6},{-122,76},{-4,76},{-4,-44},{-3.85455,-43.88},
                {-3.85455,-45},{13,-45}}, color={0,0,127}));
        connect(plasmactCO2content1.cHCO3, cHCO3) annotation (Line(points={{
                -22.7,113},{-11.35,113},{-11.35,116},{5,116}}, color={0,0,127}));
        connect(plasmactCO2content1.cdCO2p, cdCO2) annotation (Line(points={{
                -22.7,101.4},{-12.35,101.4},{-12.35,104},{5,104}}, color={0,0,
                127}));
        connect(plasmactCO2content1.ctCO2, inverseBlockConstraints.u2)
          annotation (Line(points={{-22.7,124.6},{10,124.6},{10,196},{-58,196},
                {-58,204},{-72,204}}, color={0,0,127}));
        connect(plasmaO2content2.temp, Temp) annotation (Line(points={{-96.55,
                17.61},{-132,17.61},{-132,-88},{-172,-88}}, color={0,0,127}));
        connect(plasmaO2content2.pO2, inverseBlockConstraints1.y2) annotation (
            Line(points={{-95.5,54.6},{-122,54.6},{-122,58},{-168,58},{-168,184},
                {-50,184},{-50,172},{-39,172}}, color={0,0,127}));
        connect(cdO2, plasmaO2content2.cdO2) annotation (Line(points={{-22,-8},
                {-64,-8},{-64,3.3}}, color={0,0,127}));
        connect(inverseBlockConstraints1.u2, plasmaO2content2.cdO2) annotation (
           Line(points={{-72,172},{-66,172},{-66,174},{-52,174},{-52,152},{34,
                152},{34,-4},{-64,-4},{-64,3.3}}, color={0,0,127}));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent={{-180,
                  -100},{60,240}}),                                                                         graphics={  Rectangle(extent={{
                    -180,196},{56,-58}},                                                                                                                               lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -116,64},{44,54}},                                                                                                                                                    lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "sO2"), Text(extent={{
                    -114,86},{46,68}},                                                                                                                                                                                  lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "HCO3"),
                                                                                                                                                                                 Text(extent={{
                    -92,104},{44,94}},                                                                                                                                                                                lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "pH"),  Text(extent = {{-73, 7}, {73, -7}}, lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     origin={
                    -29,145},                                                                                                                                           rotation = 180, fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Right,
                textString="pO2"),                                                                                                                                                   Text(extent = {{-75, 6}, {75, -6}}, lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     origin={
                    -31,120},                                                                                                                                           rotation = 180, fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Right,
                textString="pCO2"),                                                                                                                                                   Text(extent={{
                    -104,92},{6,4}},                                                                                                                                                                                        lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="O2CO2"),                                                                                                                                         Text(extent={{
                    -170,158},{28,148}},                                                                                                                                                                           lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Left,
                textString="ctO2"),                                                                                                                                                Text(extent={{
                    -174,138},{-22,124}},                                                                                                                                                                               lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Left,
                textString="ctCO2"),                                                                                                                                                 Text(extent = {{-74, 8}, {74, -8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -26,0},                                                                                                                                              rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdO2"), Text(extent = {{-78, 7}, {78, -7}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -32,23},                                                                                                                                             rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "ceHb"), Text(extent = {{-80, 11.5}, {80, -11.5}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -30,-19.5},                                                                                                                                            rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdCO2"),
                                                                                                                                                                                    Text(extent={{
                    -174,118},{-26,102}},                                                                                                                                                                                lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "BEox"),
              Text(
                extent={{-168,-44},{-112,-12}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="Temp"),
              Text(
                extent={{-176,2},{-120,34}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cPi"),
              Text(
                extent={{-180,54},{-124,86}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cAlb")}),                                                                                                                                                 Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-180,
                  -100},{60,240}})));
      end plasmaO2CO2;

      function pO2fromDissO2 "concentration of dissolved oxygen in blood"
        input Real dissO2 "dissolved blood oxygen in mmol/l";
        input Real temp;
        output Real returnValue "pO2 in kPa";
      algorithm
        returnValue := dissO2/OSA.aO2(temp);
      end pO2fromDissO2;

      model Measure_pO2fromDissO2
        extends Modelica.Icons.RotationalSensor;

        Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
              transformation(extent={{-110,-2},{-70,38}}),  iconTransformation(
              extent={{-11,-11},{11,11}},
              rotation=90,
              origin={25,-69})));
        Physiolibrary.Types.RealIO.PressureOutput pO2 annotation (Placement(
              transformation(extent={{-86,38},{-66,58}}), iconTransformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={0,74})));
        Physiolibrary.Types.RealIO.ConcentrationInput dissO2 annotation (Placement(
              transformation(extent={{-112,-46},{-72,-6}}), iconTransformation(
              extent={{-11,-11},{11,11}},
              rotation=90,
              origin={-23,-69})));
      algorithm
        pO2 := OSA.pO2fromDissO2(dissO2, Temp - 273.15)*1000;
                                                          //kPa to Pa conversion
      end Measure_pO2fromDissO2;

      model BEINV_by_integration
        Physiolibrary.Types.RealIO.PressureInput pCO2
          "pCO2 at given temperature in Pa"                                             annotation(Placement(transformation(extent={{-69,29},
                  {-53,45}}),                                                                                                                                 iconTransformation(extent = {{-120, 30}, {-100, 50}})));
        Physiolibrary.Types.RealIO.pHOutput pH "plasma pH at given temperature" annotation(Placement(transformation(extent={{0,-8},{
                  20,12}}),                                                                                                      iconTransformation(extent={{100,2},
                  {120,22}})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent={{-112,3},
                  {-94,21}}),                                                                                                                     iconTransformation(extent = {{-120, 70}, {-100, 90}})));
        OSA.bloodBEox vanSlykeEquation
          annotation (Placement(transformation(extent={{16,-32},{96,40}})));
        Physiolibrary.Types.RealIO.FractionInput sO2 "O2 hemoglobin saturation" annotation(Placement(transformation(extent={{-70,-28},
                  {-54,-12}}),                                                                                                    iconTransformation(extent={{-120,
                  -34},{-100,-14}})));
        Modelica.Blocks.Continuous.Integrator integrator(y_start=7.4, k=10000)
          annotation (Placement(transformation(extent={{-54,2},{-34,22}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-84,2},{-64,22}})));
      equation
        connect(vanSlykeEquation.pCO2, pCO2) annotation(Line(points={{12,37.12},
                {-56,37.12},{-56,37},{-61,37}},                                                                           color = {0, 0, 127}));
        connect(vanSlykeEquation.sO2, sO2) annotation(Line(points={{12,-20.48},
                {-44,-20.48},{-44,-20},{-62,-20}},                                                                          color = {0, 0, 127}));
        connect(feedback.y, integrator.u)
          annotation (Line(points={{-65,12},{-56,12}}, color={0,0,127}));
        connect(integrator.y, vanSlykeEquation.pH) annotation (Line(points={{
                -33,12},{-12,12},{-12,24.88},{12,24.88}}, color={0,0,127}));
        connect(pH, vanSlykeEquation.pH) annotation (Line(points={{10,2},{-12,2},
                {-12,24.88},{12,24.88}}, color={0,0,127}));
        connect(feedback.u1, BEox)
          annotation (Line(points={{-82,12},{-103,12}}, color={0,0,127}));
        connect(vanSlykeEquation.BEox, feedback.u2) annotation (Line(points={{
                100,4},{108,4},{108,-54},{-74,-54},{-74,4}}, color={0,0,127}));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent={{-100,
                  -100},{120,100}}),                                                                        graphics={  Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),                                                                                                       Text(extent={{
                    -94,-52},{84,-86}},                                                                                                                                                     lineColor=
                    {28,108,200},                                                                                                                                                                                       fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="BEINV_INTGR"),
              Text(
                extent={{-94,98},{-30,60}},
                lineColor={28,108,200},
                textString="BEox"),
              Text(
                extent={{-92,58},{-28,20}},
                lineColor={28,108,200},
                textString="pCO2"),
              Text(
                extent={{-86,0},{-22,-38}},
                lineColor={28,108,200},
                textString="sO2"),
              Text(
                extent={{36,36},{100,-2}},
                lineColor={28,108,200},
                textString="pH")}),                                                                                                                                           Diagram(coordinateSystem(preserveAspectRatio = false, extent={{-100,
                  -100},{120,100}})));
      end BEINV_by_integration;

      model PO2PCO2_by_integration
        Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={30,-8}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={68,32})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={5,102}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={68,52})));
        Physiolibrary.Types.RealIO.PressureInput pO2 annotation(Placement(transformation(extent={{-118,46},
                  {-106,58}}),                                                                                              iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-152,100})));
        Physiolibrary.Types.RealIO.PressureInput pCO2 annotation(Placement(transformation(extent={{-120,85},
                  {-106,99}}),                                                                                           iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-152,48})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={5,114}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={68,92})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation(Placement(transformation(extent = {{7.5, -7}, {-7.5, 7}}, rotation = 180, origin={-28.5,
                  -14}),                                                                                                                                               iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={68,112})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox annotation(Placement(transformation(extent={{-122,
                  -42},{-106,-26}}),                                                                                               iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-154,2})));
        Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4) annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={8,-54}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={68,72})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation(Placement(transformation(extent={{-6,6},{
                  6,-6}},                                                                                                    rotation = 0, origin={-46,-14}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={68,-26})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation(Placement(transformation(extent = {{-7, 7}, {7, -7}}, rotation = 0, origin={5,90}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={68,-46})));
        ctO2content bloodctO2content
          annotation (Placement(transformation(extent={{-80,-2},{-20,58}})));
        ctCO2content bloodctCO2content
          annotation (Placement(transformation(extent={{-80,72},{-20,132}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
          "effiective concentration of hemoglobin (mmol/l)"                                                   annotation(Placement(transformation(extent = {{-6, 6}, {6, -6}}, rotation = 0, origin={-58,-14}),  iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={68,-6})));
        BEINV_by_integration bEINV_by_integration
          annotation (Placement(transformation(extent={{-76,-84},{-10,-30}})));
      equation
        connect(bloodctCO2content.pCO2, pCO2) annotation(Line(points={{-83,126},
                {-100,126},{-100,92},{-113,92}},                                                       color = {0, 0, 127}));
        connect(bloodctO2content.pCO2, pCO2) annotation(Line(points={{-83,28},{
                -100,28},{-100,92},{-113,92}},                                                                                           color = {0, 0, 127}));
        connect(bloodctO2content.pO2, pO2) annotation(Line(points={{-83,52},{
                -112,52}},                                                                  color = {0, 0, 127}));
        connect(bloodctO2content.totalO2, ctO2) annotation(Line(points={{-44,-5},
                {-44,-14},{-28.5,-14}},                                                                     color = {0, 0, 127}));
        connect(bloodctCO2content.ctCO2, ctCO2) annotation(Line(points={{-17,114},
                {5,114}},                                                                       color = {0, 0, 127}));
        connect(bloodctCO2content.cHCO3, cHCO3) annotation(Line(points={{-17,102},
                {5,102}},                                                                       color = {0, 0, 127}));
        connect(bloodctO2content.ceHb, ceHb) annotation(Line(points={{-68,-5},{
                -68,-14},{-58,-14}},                                                                   color = {0, 0, 127}));
        connect(bloodctCO2content.cdCO2p, cdCO2)
          annotation (Line(points={{-17,90},{5,90}},           color={0,0,127}));
        connect(bloodctO2content.cdO2p, cdO2)
          annotation (Line(points={{-56,-5},{-56,-14},{-46,-14}},
                                                              color={0,0,127}));
        connect(bloodctO2content.sO2, sO2) annotation (Line(points={{-32,-5},{
                -32,-8},{30,-8}}, color={0,0,127}));
        connect(bloodctCO2content.sO2, sO2) annotation (Line(points={{-83,78},{
                -92,78},{-92,64},{18,64},{18,-8},{30,-8}}, color={0,0,127}));
        connect(bEINV_by_integration.pH, pH) annotation (Line(points={{-13,
                -53.76},{-5.5,-53.76},{-5.5,-54},{8,-54}}, color={0,0,127}));
        connect(BEox, bEINV_by_integration.BEox) annotation (Line(points={{-114,
                -34},{-98,-34},{-98,-35.4},{-79,-35.4}}, color={0,0,127}));
        connect(bEINV_by_integration.pCO2, pCO2) annotation (Line(points={{-79,
                -46.2},{-100,-46.2},{-100,92},{-113,92}}, color={0,0,127}));
        connect(bEINV_by_integration.sO2, sO2) annotation (Line(points={{-79,
                -63.48},{-100,-63.48},{-100,-92},{18,-92},{18,-8},{30,-8}},
              color={0,0,127}));
        connect(bEINV_by_integration.pH, bloodctO2content.pH) annotation (Line(
              points={{-13,-53.76},{-8,-53.76},{-8,-24},{-120,-24},{-120,40.6},
                {-83,40.6}}, color={0,0,127}));
        connect(bloodctCO2content.pH, bloodctO2content.pH) annotation (Line(
              points={{-83,114},{-120,114},{-120,40.6},{-83,40.6}}, color={0,0,
                127}));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent={{-140,
                  -100},{40,140}}),                                                                         graphics={  Rectangle(extent={{
                    -142,132},{58,-68}},                                                                                                                               lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -108,36},{52,26}},                                                                                                                                                    lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "sO2"), Text(extent={{
                    -108,58},{52,40}},                                                                                                                                                                                  lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "HCO3"),
                                                                                                                                                                                 Text(extent={{
                    -86,76},{50,66}},                                                                                                                                                                                 lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "pH"),  Text(extent = {{-73, 7}, {73, -7}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -23,113},                                                                                                                                           rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "ctO2"), Text(extent = {{-75, 6}, {75, -6}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -23,90},                                                                                                                                            rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "ctCO2"), Text(extent={{
                    -128,42},{16,-110}},                                                                                                                                                                                    lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="PO2CO2_INTGR"),                                                                                                                                  Text(extent={{
                    -134,104},{64,94}},                                                                                                                                                                            lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "pO2"), Text(extent={{
                    -136,56},{16,42}},                                                                                                                                                                                  lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "pCO2"),  Text(extent = {{-74, 8}, {74, -8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -24,-24},                                                                                                                                            rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdO2"), Text(extent = {{-80, 11.5}, {80, -11.5}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -28,-47.5},                                                                                                                                            rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdCO2"),Text(extent = {{-78, 7}, {78, -7}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -28,-5},                                                                                                                                             rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "ceHb"),Text(extent={{
                    -132,8},{16,-8}},                                                                                                                                                                                    lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "BEox")}), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-140,
                  -100},{40,140}})));
      end PO2PCO2_by_integration;

      model O2CO2_by_integration
        Modelica.Blocks.Continuous.Integrator pCO2input_mmHg(y_start=40, k=10000)
          annotation (Placement(transformation(extent={{-28,62},{-8,82}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-56,62},{-36,82}})));
        Modelica.Blocks.Math.Gain to_Pa(k=133.322365)
          annotation (Placement(transformation(extent={{0,62},{20,82}})));
        ctCO2content bloodctCO2content
          annotation (Placement(transformation(extent={{2,-10},{48,42}})));
        ctO2content bloodctO2content
          annotation (Placement(transformation(extent={{0,-66},{44,-16}})));
        BEINV_by_integration bEINV_by_integration
          annotation (Placement(transformation(extent={{0,-134},{48,-92}})));
        Modelica.Blocks.Continuous.Integrator pO2input_mmHg(y_start=50, k=100000)
          annotation (Placement(transformation(extent={{-30,94},{-10,114}})));
        Modelica.Blocks.Math.Feedback feedback1
          annotation (Placement(transformation(extent={{-70,94},{-50,114}})));
        Modelica.Blocks.Math.Gain to_Pa1(k=133.322365)
          annotation (Placement(transformation(extent={{0,94},{20,114}})));
        Physiolibrary.Types.RealIO.ConcentrationInput ctO2 annotation (Placement(
              transformation(extent={{-98,96},{-80,114}}),    iconTransformation(
                extent={{-120,50},{-100,70}})));
        Physiolibrary.Types.RealIO.ConcentrationInput ctCO2 annotation (Placement(
              transformation(extent={{-98,58},{-72,84}}),     iconTransformation(
                extent={{-118,0},{-98,20}})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox annotation(Placement(transformation(extent={{-30,
                  -104},{-14,-88}}),                                                                                               iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-110,-50})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation(Placement(transformation(extent = {{-7, 7}, {7, -7}}, rotation = 0, origin={71,4}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={110,-100})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation(Placement(transformation(extent={{4,4},{
                  -4,-4}},                                                                                                   rotation = 0, origin={10,-74}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={110,-80})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
          "effiective concentration of hemoglobin (mmol/l)"                                                   annotation(Placement(transformation(extent={{6,6},{
                  -6,-6}},                                                                                                                                                     rotation = 0, origin={-14,-72}),  iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={110,-60})));
        Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={56,-82}),  iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={110,-22})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit="mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={65,18}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={110,-2})));
        Physiolibrary.Types.RealIO.pHOutput pH(start=7.4)   annotation(Placement(transformation(extent={{-7,-7},
                  {7,7}},                                                                                                    rotation = 0, origin={71,-111}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={110,18})));
        Physiolibrary.Types.RealIO.PressureOutput pCO2(start=5333)    annotation (Placement(
              transformation(extent={{46,62},{66,82}}),    iconTransformation(extent={{100,32},
                  {120,52}})));
        Physiolibrary.Types.RealIO.PressureOutput pO2(start=13300)    annotation (Placement(
              transformation(extent={{38,92},{58,112}}),    iconTransformation(extent={{100,52},
                  {120,72}})));
      equation
        connect(feedback.y, pCO2input_mmHg.u)
          annotation (Line(points={{-37,72},{-30,72}}, color={0,0,127}));
        connect(pCO2input_mmHg.y, to_Pa.u)
          annotation (Line(points={{-7,72},{-2,72}}, color={0,0,127}));
        connect(bloodctO2content.sO2, bEINV_by_integration.sO2) annotation (Line(
              points={{35.2,-68.5},{35.2,-82},{-42,-82},{-42,-118.04},{-2.18182,-118.04}},
              color={0,0,127}));
        connect(bloodctCO2content.sO2, bEINV_by_integration.sO2) annotation (Line(
              points={{-0.3,-4.8},{-42,-4.8},{-42,-118.04},{-2.18182,-118.04}}, color=
               {0,0,127}));
        connect(bEINV_by_integration.pH, bloodctO2content.pH) annotation (Line(points={{45.8182,
                -110.48},{58,-110.48},{58,-88},{-28,-88},{-28,-30.5},{-2.2,
                -30.5}},
              color={0,0,127}));
        connect(bloodctCO2content.pH, bloodctO2content.pH) annotation (Line(points={{-0.3,
                26.4},{-28,26.4},{-28,-30.5},{-2.2,-30.5}}, color={0,0,127}));
        connect(bloodctCO2content.ctCO2, feedback.u2) annotation (Line(points={{50.3,26.4},
                {62,26.4},{62,48},{-46,48},{-46,64}}, color={0,0,127}));
        connect(to_Pa.y, bloodctCO2content.pCO2) annotation (Line(points={{21,72},{28,
                72},{28,50},{-20,50},{-20,36.8},{-0.3,36.8}}, color={0,0,127}));
        connect(bloodctO2content.pCO2, bloodctCO2content.pCO2) annotation (Line(
              points={{-2.2,-41},{-22,-41},{-22,36},{-18,36},{-18,36.8},{-0.3,36.8}},
              color={0,0,127}));
        connect(bEINV_by_integration.pCO2, bloodctCO2content.pCO2) annotation (Line(
              points={{-2.18182,-104.6},{-38,-104.6},{-38,34},{-22,34},{-22,36},{-18,36},
                {-18,36.8},{-0.3,36.8}}, color={0,0,127}));
        connect(feedback1.y, pO2input_mmHg.u)
          annotation (Line(points={{-51,104},{-32,104}}, color={0,0,127}));
        connect(pO2input_mmHg.y, to_Pa1.u)
          annotation (Line(points={{-9,104},{-2,104}}, color={0,0,127}));
        connect(to_Pa1.y, bloodctO2content.pO2) annotation (Line(points={{21,104},{34,
                104},{34,46},{-14,46},{-14,-21},{-2.2,-21}}, color={0,0,127}));
        connect(bloodctO2content.totalO2, feedback1.u2) annotation (Line(points={{26.4,
                -68.5},{26.4,-80},{-34,-80},{-34,88},{-60,88},{-60,96}}, color={0,0,127}));
        connect(feedback.u1, ctCO2) annotation (Line(points={{-54,72},{-70,72},{-70,71},
                {-85,71}}, color={0,0,127}));
        connect(feedback1.u1, ctO2) annotation (Line(points={{-68,104},{-78,104},{-78,
                105},{-89,105}}, color={0,0,127}));
        connect(pH, bloodctO2content.pH) annotation (Line(points={{71,-111},{58,-111},
                {58,-88},{-28,-88},{-28,-30.5},{-2.2,-30.5}}, color={0,0,127}));
        connect(bloodctO2content.ceHb, ceHb) annotation (Line(points={{8.8,-68.5},{0.4,
                -68.5},{0.4,-72},{-14,-72}}, color={0,0,127}));
        connect(bloodctO2content.cdO2p, cdO2) annotation (Line(points={{17.6,-68.5},{17.6,
                -74},{10,-74}}, color={0,0,127}));
        connect(pO2, bloodctO2content.pO2) annotation (Line(points={{48,102},{42,102},
                {42,104},{34,104},{34,46},{-14,46},{-14,-21},{-2.2,-21}}, color={0,0,127}));
        connect(pCO2, bloodctCO2content.pCO2) annotation (Line(points={{56,72},{28,72},
                {28,50},{-20,50},{-20,36.8},{-0.3,36.8}}, color={0,0,127}));
        connect(sO2, bEINV_by_integration.sO2) annotation (Line(points={{56,-82},{-42,
                -82},{-42,-118.04},{-2.18182,-118.04}}, color={0,0,127}));
        connect(BEox, bEINV_by_integration.BEox) annotation (Line(points={{-22,-96},{-12,
                -96},{-12,-96.2},{-2.18182,-96.2}}, color={0,0,127}));
        connect(bloodctCO2content.cHCO3, cHCO3) annotation (Line(points={{50.3,16},{56,
                16},{56,18},{65,18}}, color={0,0,127}));
        connect(bloodctCO2content.cdCO2p, cdCO2) annotation (Line(points={{50.3,5.6},{
                54.65,5.6},{54.65,4},{71,4}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-140},
                  {100,140}}), graphics={
              Rectangle(
                extent={{-100,98},{100,-142}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-86,-48},{76,-198}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.None,
                textString="O2CO2_INTGR"),                                                                                                                                   Text(extent={{
                    -90,66},{-58,50}},                                                                                                                                                                             lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                  horizontalAlignment=TextAlignment.Left,
                textString="ctO2"),                                                                                                                                                Text(extent={{
                    -90,20},{-52,-4}},                                                                                                                                                                                  lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                  horizontalAlignment=TextAlignment.Left,
                textString="ctCO2"),                                                                                                                                                Text(extent={{
                    -94,-38},{-56,-58}},                                                                                                                                                                                 lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                  horizontalAlignment=TextAlignment.Left,
                textString="BEox"),
              Text(
                extent={{92,80},{60,56}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.None,
                textString="pO2"),
              Text(
                extent={{94,58},{56,26}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.None,
                textString="pCO2"),
              Text(
                extent={{94,28},{66,10}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.None,
                textString="pH"),
              Text(
                extent={{96,8},{60,-16}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.None,
                textString="HCO3"),
              Text(
                extent={{94,-18},{70,-32}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.None,
                textString="sO2"),
              Text(
                extent={{90,-46},{58,-66}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.None,
                textString="ceHB"),
              Text(
                extent={{92,-68},{60,-90}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.None,
                textString="cdO2"),
              Text(
                extent={{98,-84},{52,-114}},
                lineColor={28,108,200},
                fillColor={255,255,0},
                fillPattern=FillPattern.None,
                textString="cdCO2")}),                                 Diagram(
              coordinateSystem(preserveAspectRatio=false, extent={{-100,-140},{100,140}})));
      end O2CO2_by_integration;

      model AlvEq_by_integration

        Physiolibrary.Types.RealIO.ConcentrationInput CvO2 annotation (Placement(
              transformation(extent={{-24,79},{-8,96}}),  iconTransformation(extent={{-202,10},
                  {-190,22}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CvCO2 annotation (Placement(
              transformation(extent={{-26,64},{-8,82}}),  iconTransformation(extent={{-202,-2},
                  {-190,10}})));
        Physiolibrary.Types.RealIO.PressureOutput PAO2 annotation (Placement(
              transformation(extent={{224,80},{234,91}}),
                                                        iconTransformation(extent={{240,76},
                  {254,90}})));
        Physiolibrary.Types.RealIO.PressureOutput PACO2 annotation (Placement(
              transformation(extent={{240,70},{250,80}}),
                                                        iconTransformation(extent={{240,54},
                  {254,68}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation (Placement(
              transformation(extent={{-26,94},{-8,112}}),  iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,40})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation (Placement(
              transformation(extent={{98,96},{114,112}}),  iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,52})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput VAe annotation (Placement(
              transformation(extent={{230,54},{244,68}}), iconTransformation(
                extent={{240,-94},{256,-78}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
              transformation(extent={{130,16},{142,28}}), iconTransformation(
                extent={{240,-18},{256,-2}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
              transformation(extent={{130,8},{140,18}}),  iconTransformation(
                extent={{240,-36},{256,-20}})));

        OSA.AlvGases alvGases
          annotation (Placement(transformation(extent={{130,48},{202,100}})));
        OSA.O2CO2Balance o2CO2Balance
          annotation (Placement(transformation(extent={{36,38},{100,98}})));
        Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={-52,2}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,6})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={-43,12}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,28})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={-51,60}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,-68})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation(Placement(transformation(extent = {{7.5, -7}, {-7.5, 7}}, rotation = 180, origin={-48.5,84}),
                                                                                                                            iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,-46})));
        Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4) annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={-34,26}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,46})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent={{-188,
                  -23},{-170,-5}}),                                                                                                     iconTransformation(extent={{-210,70},
                  {-190,90}})));
        PO2PCO2_by_integration pO2PCO2_by_integration
          annotation (Placement(transformation(extent={{-152,-66},{-82,58}})));
      initial equation

      equation
        connect(alvGases.PACO2, PACO2) annotation (Line(points={{205.6,82.84},{
                237.6,82.84},{237.6,75},{245,75}}, color={0,0,127}));
        connect(alvGases.PAO2, PAO2) annotation (Line(points={{205.6,88.56},{
                205.6,85.5},{229,85.5}},        color={0,0,127}));
        connect(alvGases.VAe, VAe) annotation (Line(points={{205.6,77.12},{
                205.6,61},{237,61}},        color={0,0,127}));
        connect(o2CO2Balance.VCO2, VCO2) annotation (Line(points={{102.56,63.8},
                {108,63.8},{108,12},{132,12},{132,14},{134,14},{134,13},{135,13}},
                                                            color={0,0,127}));
        connect(o2CO2Balance.VO2, VO2) annotation (Line(points={{102.56,69.2},{
                112,69.2},{112,22},{136,22}},
                                        color={0,0,127}));

        connect(alvGases.VAi, VAi) annotation (Line(points={{127.84,77.12},{
                127.84,103.56},{106,103.56},{106,104}}, color={0,0,127}));
        connect(o2CO2Balance.VCO2, alvGases.VCO2) annotation (Line(points={{
                102.56,63.8},{114.28,63.8},{114.28,63.6},{127.84,63.6}}, color=
                {0,0,127}));
        connect(o2CO2Balance.VO2, alvGases.VO2) annotation (Line(points={{
                102.56,69.2},{114.28,69.2},{114.28,68.8},{127.84,68.8}}, color=
                {0,0,127}));
        connect(Q, o2CO2Balance.Q) annotation (Line(points={{-17,103},{21,103},
                {21,89.6},{32.8,89.6}}, color={0,0,127}));
        connect(CvO2, o2CO2Balance.CvO2) annotation (Line(points={{-16,87.5},{
                17.5,87.5},{17.5,81.2},{32.8,81.2}}, color={0,0,127}));
        connect(CvCO2, o2CO2Balance.CvCO2) annotation (Line(points={{-17,73},{
                19.5,73},{19.5,74},{32.8,74}}, color={0,0,127}));
        connect(pO2PCO2_by_integration.cHCO3, cHCO3) annotation (Line(points={{
                -71.1111,12.5333},{-58.5555,12.5333},{-58.5555,12},{-43,12}},
              color={0,0,127}));
        connect(pO2PCO2_by_integration.ctO2, ctO2) annotation (Line(points={{
                -71.1111,43.5333},{-64,43.5333},{-64,84},{-48.5,84}}, color={0,
                0,127}));
        connect(pO2PCO2_by_integration.ctCO2, ctCO2) annotation (Line(points={{
                -71.1111,33.2},{-60,33.2},{-60,60},{-51,60}}, color={0,0,127}));
        connect(pO2PCO2_by_integration.pH, pH) annotation (Line(points={{
                -71.1111,22.8667},{-50,22.8667},{-50,26},{-34,26}}, color={0,0,
                127}));
        connect(o2CO2Balance.CpcO2, ctO2) annotation (Line(points={{32.8,65.6},
                {-28,65.6},{-28,44},{-64,44},{-64,84},{-48.5,84}}, color={0,0,
                127}));
        connect(o2CO2Balance.CpcCO2, ctCO2) annotation (Line(points={{32.8,58.4},
                {-12,58.4},{-12,34},{-60,34},{-60,60},{-51,60}}, color={0,0,127}));
        connect(pO2PCO2_by_integration.sO2, sO2) annotation (Line(points={{
                -71.1111,2.2},{-64.5555,2.2},{-64.5555,2},{-52,2}}, color={0,0,
                127}));
        connect(pO2PCO2_by_integration.BEox, BEox) annotation (Line(points={{
                -157.444,-13.3},{-164.722,-13.3},{-164.722,-14},{-179,-14}},
              color={0,0,127}));
        connect(pO2PCO2_by_integration.pO2, alvGases.PAO2) annotation (Line(
              points={{-156.667,37.3333},{-182,37.3333},{-182,124},{220,124},{
                220,88.56},{205.6,88.56}}, color={0,0,127}));
        connect(pO2PCO2_by_integration.pCO2, PACO2) annotation (Line(points={{
                -156.667,10.4667},{-190,10.4667},{-190,130},{238,130},{238,82},
                {238,75},{245,75}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -180},{260,140}}),
                         graphics={
              Rectangle(
                extent={{-198,140},{260,-180}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-68,36},{64,-12}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                textString="AlvEq"),
              Text(
                extent={{-24,6},{24,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-160,14},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvO2"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,4},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvCO2"),
              Text(
                extent={{-51,5},{51,-5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={183,-49},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CpcO2"),
              Text(
                extent={{-52,9.5},{52,-9.5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={182,-69.5},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CpcCO2"),
              Text(
                extent={{136,14},{234,2}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="sO2pc"),
              Text(
                extent={{140,36},{234,16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="HCO3pc"),
              Text(
                extent={{118,52},{234,40}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="pHpc"),
              Text(
                extent={{142,72},{234,56}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PACO2"),
              Text(
                extent={{134,86},{234,78}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PAO2"),
              Text(
                extent={{-184,42},{-148,36}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Q"),
              Text(
                extent={{-184,56},{-138,50}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="VAi"),
              Text(
                extent={{168,-82},{234,-92}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VA"),
              Text(
                extent={{132,-6},{234,-16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VO2"),
              Text(
                extent={{112,-24},{234,-34}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VCO2"),
              Text(
                extent={{-186,82},{-140,76}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="BEox")}),
                                    Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-180},{260,140}})));
      end AlvEq_by_integration;

      model plasmaO2CO2_by_integration
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={5,116}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,80})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox annotation(Placement(transformation(extent={{-124,
                  -28},{-108,-12}}),                                                                                               iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-186,110})));
        Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4) annotation(Placement(transformation(extent={{-7,-7},
                  {7,7}},                                                                                                    rotation = 0, origin={13,-45}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,100})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation(Placement(transformation(extent={{-6,6},{
                  6,-6}},                                                                                                    rotation = 0, origin={-46,0}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,2})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation(Placement(transformation(extent = {{-7, 7}, {7, -7}}, rotation = 0, origin={5,104}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,-18})));
        Physiolibrary.Types.RealIO.ConcentrationInput ctO2 annotation (Placement(
              transformation(extent={{-166,204},{-146,224}}), iconTransformation(
                extent={{-196,140},{-176,160}})));
        Physiolibrary.Types.RealIO.PressureOutput pO2( start = 13300) annotation (Placement(
              transformation(extent={{8,204},{28,224}}),    iconTransformation(extent={{56,134},
                  {76,154}})));
        Physiolibrary.Types.RealIO.ConcentrationInput ctCO2 annotation (Placement(
              transformation(extent={{-170,158},{-146,182}}), iconTransformation(
                extent={{-196,120},{-176,140}})));
        Physiolibrary.Types.RealIO.PressureOutput pCO2( start = 5333) annotation (Placement(
              transformation(extent={{12,166},{32,186}}),  iconTransformation(extent={{56,112},
                  {76,132}})));
        Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
              transformation(extent={{-168,-102},{-148,-82}}),
              iconTransformation(extent={{-204,-38},{-178,-12}})));
        Physiolibrary.Types.RealIO.ConcentrationInput cPi
          "Concentration of phosphate" annotation (Placement(transformation(extent={{-134,
                  -88},{-108,-62}}),
                                   iconTransformation(extent={{-204,6},{-180,30}})));
        Physiolibrary.Types.RealIO.ConcentrationInput cAlb "Conentration of albumin"
          annotation (Placement(transformation(extent={{-134,-66},{-110,-42}}),
              iconTransformation(extent={{-202,52},{-180,74}})));
        plasmactCO2content plasmactCO2content1
          annotation (Placement(transformation(extent={{-92,84},{-26,142}})));
        replaceable
        plasmaBEINV_by_integration plasmaBEINV_by_integration1 constrainedby BaseBEINV
          annotation (Placement(transformation(extent={{-92,-94},{-10,-12}})),
            __Dymola_choicesAllMatching=true);
        Modelica.Blocks.Math.Feedback feedback1
          annotation (Placement(transformation(extent={{-134,202},{-114,222}})));
        Modelica.Blocks.Continuous.Integrator pO2input_mmHg(y_start=50, k=
              100000)
          annotation (Placement(transformation(extent={{-94,202},{-74,222}})));
        Modelica.Blocks.Math.Gain to_Pa1(k=133.322365)
          annotation (Placement(transformation(extent={{-64,204},{-44,224}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-120,164},{-100,184}})));
        Modelica.Blocks.Continuous.Integrator pCO2input_mmHg(y_start=40, k=
              10000)
          annotation (Placement(transformation(extent={{-92,164},{-72,184}})));
        Modelica.Blocks.Math.Gain to_Pa(k=133.322365)
          annotation (Placement(transformation(extent={{-64,164},{-44,184}})));
        plasmaO2content plasmaO2content1
          annotation (Placement(transformation(extent={{-90,14},{-28,70}})));
      equation
        connect(plasmactCO2content1.Temp, Temp) annotation (Line(points={{-96.29,
                86.03},{-132,86.03},{-132,-92},{-158,-92}},        color={0,0,
                127}));
        connect(plasmactCO2content1.pH, pH) annotation (Line(points={{-95.3,
                124.6},{-122,124.6},{-122,76},{-4,76},{-4,-44},{-3.85455,-43.88},
                {-3.85455,-45},{13,-45}}, color={0,0,127}));
        connect(plasmactCO2content1.cHCO3, cHCO3) annotation (Line(points={{
                -22.7,113},{-11.35,113},{-11.35,116},{5,116}}, color={0,0,127}));
        connect(plasmactCO2content1.cdCO2p, cdCO2) annotation (Line(points={{
                -22.7,101.4},{-12.35,101.4},{-12.35,104},{5,104}}, color={0,0,
                127}));
        connect(plasmaBEINV_by_integration1.pH, pH) annotation (Line(points={{
                -14.4727,-45.62},{-4,-45.62},{-4,-45},{13,-45}}, color={0,0,127}));
        connect(BEox, plasmaBEINV_by_integration1.BEox) annotation (Line(points={{-116,
                -20},{-106,-20},{-106,-20.2},{-95.7273,-20.2}},       color={0,
                0,127}));
        connect(plasmaBEINV_by_integration1.Temp, Temp) annotation (Line(points={{
                -96.8455,-91.13},{-132,-91.13},{-132,-92},{-158,-92}},  color={
                0,0,127}));
        connect(feedback.u1, ctCO2) annotation (Line(points={{-118,174},{-136,
                174},{-136,170},{-158,170}}, color={0,0,127}));
        connect(feedback.y, pCO2input_mmHg.u)
          annotation (Line(points={{-101,174},{-94,174}}, color={0,0,127}));
        connect(pCO2input_mmHg.y, to_Pa.u)
          annotation (Line(points={{-71,174},{-66,174}}, color={0,0,127}));
        connect(to_Pa.y, pCO2) annotation (Line(points={{-43,174},{-14,174},{
                -14,176},{22,176}}, color={0,0,127}));
        connect(plasmactCO2content1.pCO2, pCO2) annotation (Line(points={{-95.3,
                136.2},{-106,136.2},{-106,150},{-20,150},{-20,174},{-14,174},{
                -14,176},{22,176}}, color={0,0,127}));
        connect(plasmactCO2content1.ctCO2, feedback.u2) annotation (Line(points=
               {{-22.7,124.6},{-10,124.6},{-10,156},{-110,156},{-110,166}},
              color={0,0,127}));
        connect(plasmaBEINV_by_integration1.pCO2, pCO2) annotation (Line(points={{
                -95.7273,-36.6},{-152,-36.6},{-152,150},{-20,150},{-20,174},{
                -14,174},{-14,176},{22,176}}, color={0,0,127}));
        connect(plasmaBEINV_by_integration1.cAlb, cAlb) annotation (Line(points={{-96.1,
                -55.05},{-103.05,-55.05},{-103.05,-54},{-122,-54}},
              color={0,0,127}));
        connect(plasmaBEINV_by_integration1.cPi, cPi) annotation (Line(points={{
                -96.4727,-73.5},{-103.236,-73.5},{-103.236,-75},{-121,-75}},
              color={0,0,127}));
        connect(feedback1.u1, ctO2) annotation (Line(points={{-132,212},{-144,
                212},{-144,214},{-156,214}}, color={0,0,127}));
        connect(feedback1.y, pO2input_mmHg.u)
          annotation (Line(points={{-115,212},{-96,212}}, color={0,0,127}));
        connect(pO2input_mmHg.y, to_Pa1.u) annotation (Line(points={{-73,212},{
                -70,212},{-70,214},{-66,214}}, color={0,0,127}));
        connect(to_Pa1.y, pO2)
          annotation (Line(points={{-43,214},{18,214}}, color={0,0,127}));
        connect(feedback1.u2, cdO2) annotation (Line(points={{-124,204},{-124,
                190},{48,190},{48,8},{-58,8},{-58,0},{-46,0}}, color={0,0,127}));
        connect(plasmactCO2content1.cAlb, cAlb) annotation (Line(points={{
                -95.63,111.55},{-106,111.55},{-106,-54},{-122,-54}}, color={0,0,
                127}));
        connect(plasmaO2content1.cdO2, cdO2) annotation (Line(points={{-65.2,
                11.2},{-65.2,8},{-58,8},{-58,0},{-46,0}}, color={0,0,127}));
        connect(plasmaO2content1.pO2, pO2) annotation (Line(points={{-93.1,64.4},
                {-100,64.4},{-100,72},{42,72},{42,202},{-8,202},{-8,214},{18,
                214}}, color={0,0,127}));
        connect(plasmaO2content1.temp, Temp) annotation (Line(points={{-94.03,
                26.04},{-132,26},{-132,-92},{-158,-92}}, color={0,0,127}));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent={{-180,
                  -100},{60,240}}),                                                                         graphics={  Rectangle(extent={{
                    -180,196},{56,-58}},                                                                                                                               lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -116,64},{44,54}},                                                                                                                                                    lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "sO2"), Text(extent={{
                    -114,86},{46,68}},                                                                                                                                                                                  lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "HCO3"),
                                                                                                                                                                                 Text(extent={{
                    -92,104},{44,94}},                                                                                                                                                                                lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "pH"),  Text(extent = {{-73, 7}, {73, -7}}, lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     origin={
                    -29,145},                                                                                                                                           rotation = 180, fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Right,
                textString="pO2"),                                                                                                                                                   Text(extent = {{-75, 6}, {75, -6}}, lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     origin={
                    -31,120},                                                                                                                                           rotation = 180, fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Right,
                textString="pCO2"),                                                                                                                                                   Text(extent={{
                    -104,92},{6,4}},                                                                                                                                                                                        lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="plasma
O2CO2_INTGR"),                                                                                                                                                               Text(extent={{
                    -170,158},{28,148}},                                                                                                                                                                           lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Left,
                textString="ctO2"),                                                                                                                                                Text(extent={{
                    -174,138},{-22,124}},                                                                                                                                                                               lineColor=
                    {0,0,255},                                                                                                                                                                                                        fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                    12,
                  horizontalAlignment=TextAlignment.Left,
                textString="ctCO2"),                                                                                                                                                 Text(extent = {{-74, 8}, {74, -8}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -26,0},                                                                                                                                              rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdO2"), Text(extent = {{-78, 7}, {78, -7}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -32,23},                                                                                                                                             rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "ceHb"), Text(extent = {{-80, 11.5}, {80, -11.5}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, origin={
                    -30,-19.5},                                                                                                                                            rotation = 180, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Right, textString = "cdCO2"),
                                                                                                                                                                                    Text(extent={{
                    -174,118},{-26,102}},                                                                                                                                                                                lineColor = {0, 0, 255}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid, fontSize = 12,
                  horizontalAlignment =                                                                                                   TextAlignment.Left, textString = "BEox"),
              Text(
                extent={{-168,-44},{-112,-12}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="Temp"),
              Text(
                extent={{-176,2},{-120,34}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cPi"),
              Text(
                extent={{-180,54},{-124,86}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cAlb")}),                                                                                                                                                 Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-180,
                  -100},{60,240}})));
      end plasmaO2CO2_by_integration;

      model plasmaBEINV_by_integration
        extends BaseBEINV;
        plasmaBEox plasmaBEox1
          annotation (Placement(transformation(extent={{-4,-28},{68,26}})));
        Modelica.Blocks.Continuous.Integrator integrator(y_start=7.4, k=10000)
          annotation (Placement(transformation(extent={{-16,64},{4,84}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-56,64},{-36,84}})));
      equation
        connect(feedback.y, integrator.u)
          annotation (Line(points={{-37,74},{-18,74}}, color={0,0,127}));
        connect(plasmaBEox1.BEox, feedback.u2) annotation (Line(points={{71.6,
                -1},{94,-1},{94,48},{-46,48},{-46,66}}, color={0,0,127}));
        connect(pCO2, plasmaBEox1.pCO2) annotation (Line(points={{-71,39},{
                -40.5,39},{-40.5,23.84},{-7.6,23.84}}, color={0,0,127}));
        connect(BEox, feedback.u1) annotation (Line(points={{-51,60},{-66,60},{
                -66,74},{-54,74}}, color={0,0,127}));
        connect(cAlb, plasmaBEox1.cAlb) annotation (Line(points={{-88,4},{-50,4},
                {-50,-2.35},{-7.96,-2.35}}, color={0,0,127}));
        connect(cPi, plasmaBEox1.cPi) annotation (Line(points={{-86,-28},{-48,
                -28},{-48,-14.5},{-8.32,-14.5}}, color={0,0,127}));
        connect(Temp, plasmaBEox1.Temp) annotation (Line(points={{-78,-68},{-44,
                -68},{-44,-26.11},{-8.68,-26.11}}, color={0,0,127}));
        connect(integrator.y, pH) annotation (Line(points={{5,74},{54,74},{54,
                60},{114,60}}, color={0,0,127}));
        connect(plasmaBEox1.pH, pH) annotation (Line(points={{-7.6,14.66},{-26,
                14.66},{-26,60},{114,60}}, color={0,0,127}));
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent={{-100,
                  -100},{120,100}}),                                                                        graphics={  Rectangle(extent={{
                    -102,100},{98,-100}},                                                                                                                              lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -64,-16},{114,-50}},                                                                                                                                                    lineColor=
                    {28,108,200},                                                                                                                                                                                       fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="plasma
BEINV_INTGR"),Text(
                extent={{-94,-100},{-38,-68}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="Temp"),
              Text(
                extent={{-102,-64},{-46,-32}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cPi"),
              Text(
                extent={{-100,-20},{-44,12}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cAlb"),
              Text(
                extent={{-96,64},{-40,96}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="BEox"),
              Text(
                extent={{-94,26},{-38,58}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pCO2")}),                                                                                                                                         Diagram(coordinateSystem(preserveAspectRatio = false, extent={{-100,
                  -100},{120,100}})));
      end plasmaBEINV_by_integration;

      model lg_eq
      /*
function lg_eq
  input Real x;
  output Real result;
algorithm 
  result := log(x) / log(10);
  //it is not necessary, in Modelica exists embeded function log10
*/
        Modelica.Blocks.Interfaces.RealInput x annotation (Placement(transformation(
                extent={{-102,-20},{-62,20}}),iconTransformation(extent={{-106,-12},{-66,
                  28}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{78,-10},{98,10}}),iconTransformation(extent={{90,4},{110,24}})));
        Modelica.Blocks.Math.Log10 log10_1
          annotation (Placement(transformation(extent={{-16,-10},{4,10}})));
      equation
        connect(u, log10_1.u)
          annotation (Line(points={{-82,0},{-18,0}},  color={0,0,127}));
        connect(log10_1.y, y)
          annotation (Line(points={{5,0},{88,0}},  color={0,0,127}));
        annotation (Icon(graphics={Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid), Text(
                extent={{-28,52},{36,-12}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="lg",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-98,-100},{98,-120}},
                lineColor={28,108,200},
                textString="%name")}),                          Diagram(
              graphics={Text(
                extent={{-38,-28},{44,-38}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="y=log10(x);")}));
      end lg_eq;

      model logit_eq
        /*
function logit_eq
  input Real x;
  output Real returnValue;
algorithm 
returnValue := log(x / (1 - x));
*/
        Modelica.Blocks.Interfaces.RealInput x annotation (Placement(transformation(
                extent={{-100,-14},{-60,26}}),iconTransformation(extent={{-118,-6},{-78,
                  34}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{86,-10},{106,10}}),  iconTransformation(extent={{92,8},{112,28}})));
      equation
        y = log(x / (1 - x));
        annotation (Icon(graphics={Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid), Text(
                extent={{-58,42},{64,-10}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="logit_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-98,-104},{100,-120}},
                lineColor={28,108,200},
                textString="%name")}),                          Diagram(
              graphics={Text(
                extent={{-44,58},{70,12}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString=" y = log(x / (1 - x));")}));
      end logit_eq;

      model antilg_eq
      /*
function antilg
  input Real x;
  output Real result;
algorithm 
  result := exp(log(10) * x);
end antilg;
*/
        Modelica.Blocks.Interfaces.RealInput x annotation (Placement(transformation(
                extent={{-124,-2},{-84,38}}), iconTransformation(extent={{-120,-20},{-80,
                  20}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{96,-6},{116,14}}),   iconTransformation(extent={{100,-10},{120,
                  10}})));
      equation
        y=exp(log(10) * x);
        annotation (Icon(graphics={Text(
                extent={{-100,-22},{100,-56}},
                lineColor={28,108,200},
                textStyle={TextStyle.Bold,TextStyle.Italic},
                textString="antilg_eq"), Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,-16},{98,-52}},
                lineColor={28,108,200},
                textString="antilg_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-52,-104},{96,-122}},
                lineColor={28,108,200},
                textString="%name")}),                          Diagram(
              graphics={Text(
                extent={{-60,70},{58,14}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString=" y=exp(log(10) * x);")}));
      end antilg_eq;

      model antilogit_eq
      /*
function antilogit_eq
  input Real x;
  output Real returnValue;
algorithm 
returnValue := exp(x) / (1.0 + exp(x));
*/
        Modelica.Blocks.Interfaces.RealInput x annotation (Placement(
              transformation(extent={{-104,-44},{-64,-4}}), iconTransformation(
                extent={{-120,-20},{-80,20}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(
              transformation(extent={{74,-26},{94,-6}}), iconTransformation(
                extent={{100,-10},{120,10}})));
      equation
        y=exp(x) / (1.0 + exp(x));
        annotation (Icon(graphics={Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid), Text(
                extent={{-100,-22},{100,-56}},
                lineColor={28,108,200},
                textString="antilogit_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic})}), Diagram(
              graphics={Text(
                extent={{-48,-32},{80,-72}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="y=exp(x) / (1.0 + exp(x));")}));
      end antilogit_eq;

      model x_eq
      /* 
function x_eq
  input Real pO2CO;
  input Real a;
  input Real T;
  output Real returnValue;
protected 
  Real p0 = 7.0;
  Real T0 = 37.0;
  Real dbdT = 0.055;
algorithm 
returnValue := log(pO2CO / p0) - a - dbdT * (T - T0);
*/
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{78,-6},{98,14}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput pO2CO annotation (Placement(
              transformation(extent={{-112,56},{-72,96}}), iconTransformation(extent={{-140,58},
                  {-100,98}})));
        Modelica.Blocks.Interfaces.RealInput a annotation (Placement(transformation(
                extent={{-104,-72},{-64,-32}}),
                                              iconTransformation(extent={{-140,
                  -18},{-100,22}})));
        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(transformation(
                extent={{-108,-14},{-68,26}}),iconTransformation(extent={{-138,
                  -86},{-98,-46}})));
      Real p0 = 7.0;
      Real T0 = 37.0;
      Real dbdT = 0.055;
      equation
           y=log(pO2CO / p0) - a - dbdT * (T - T0);
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None),
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-74,26},{96,-16}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="x_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-92,88},{76,70}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="pO2CO"),
              Text(
                extent={{-90,10},{-58,-6}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="a"),
              Text(
                extent={{-88,-56},{-34,-70}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="T")}), Diagram(graphics={Text(
                extent={{-66,60},{48,42}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="y=log(pO2CO / p0) - a - dbdT * (T - T0);")}));
      end x_eq;

      model h_eq
        /*
function h_eq
  input Real a;
  output Real returnValue;
protected 
  Real h0 = 3.5;
algorithm 
  returnValue := h0 + a;
*/

      Real h0=3.5;
        Modelica.Blocks.Interfaces.RealInput a annotation (Placement(transformation(
                extent={{-102,4},{-62,44}}),  iconTransformation(extent={{-140,
                  -18},{-100,22}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{70,10},{90,30}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
      equation
        y=h0+a;
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None),
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-94,12},{-12,-4}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="a"),
              Text(
                extent={{-70,26},{100,-16}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textStyle={TextStyle.Bold,TextStyle.Italic},
                textString="h_eq")}), Diagram(graphics={Text(
                extent={{-52,-4},{34,-28}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="h0 = 3.5;
y=h0+a;")}));
      end h_eq;

      model y_eq
      /*  
function y_eq
  input Real pO2CO;
  input Real a;
  input Real T;
  output Real returnValue;
protected 
  Real y0 = 1.8747;
  Real k = 0.5342857;
algorithm 
  returnValue := y0 + OSA.x(
    pO2CO,
    a,
    T) + h(a)*tanh(k*OSA.x(
    pO2CO,
    a,
    T));
*/

        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{94,0},{114,20}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput pO2CO annotation (Placement(
              transformation(extent={{-124,50},{-84,90}}), iconTransformation(extent={{-140,58},
                  {-100,98}})));
        Modelica.Blocks.Interfaces.RealInput a annotation (Placement(transformation(
                extent={{-128,-20},{-88,20}}),iconTransformation(extent={{-140,-20},{-100,
                  20}})));
        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(transformation(
                extent={{-128,14},{-88,54}}), iconTransformation(extent={{-140,-86},{-100,
                  -46}})));

       parameter Real y0 = 1.8747;
       parameter Real k = 0.5342857;

        x_eq x_eq1 annotation (Placement(transformation(extent={{-60,52},{-40,72}})));
        x_eq x_eq2 annotation (Placement(transformation(extent={{-60,18},{-40,38}})));
        Modelica.Blocks.Math.Tanh tanh
          annotation (Placement(transformation(extent={{0,-32},{20,-12}})));
        Modelica.Blocks.Sources.Constant k_const(k=k)
          annotation (Placement(transformation(extent={{-62,-38},{-42,-18}})));
        Modelica.Blocks.Sources.Constant y0_const(k=y0)
          annotation (Placement(transformation(extent={{20,50},{40,70}})));
        Modelica.Blocks.Math.Add3 add3_1
          annotation (Placement(transformation(extent={{68,0},{88,20}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{-28,-32},{-8,-12}})));
        h_eq h_eq1 annotation (Placement(transformation(extent={{-60,-68},{-40,-48}})));
        Modelica.Blocks.Math.Product product1
          annotation (Placement(transformation(extent={{38,-38},{58,-18}})));
      equation
        //y=y0+x_eq1.y+h_eq1.y*tanh(k*x_eq2.y);

        connect(add3_1.u1, y0_const.y) annotation (Line(points={{66,18},{54,18},{54,60},
                {41,60}}, color={0,0,127}));
        connect(add3_1.u2, x_eq1.y) annotation (Line(points={{66,10},{2,10},{2,62},{-39,
                62}}, color={0,0,127}));
        connect(k_const.y, product.u2)
          annotation (Line(points={{-41,-28},{-30,-28}}, color={0,0,127}));
        connect(product.u1, x_eq2.y) annotation (Line(points={{-30,-16},{-34,-16},{-34,
                28},{-39,28}}, color={0,0,127}));
        connect(tanh.u, product.y)
          annotation (Line(points={{-2,-22},{-7,-22}}, color={0,0,127}));
        connect(tanh.y, product1.u1)
          annotation (Line(points={{21,-22},{36,-22}}, color={0,0,127}));
        connect(h_eq1.y, product1.u2) annotation (Line(points={{-39,-58},{24,-58},{24,
                -34},{36,-34}}, color={0,0,127}));
        connect(product1.y, add3_1.u3) annotation (Line(points={{59,-28},{60,-28},{60,
                2},{66,2}}, color={0,0,127}));
        connect(add3_1.y, y)
          annotation (Line(points={{89,10},{104,10}}, color={0,0,127}));
        connect(h_eq1.a, a) annotation (Line(points={{-62,-57.8},{-68,-57.8},{-68,-58},
                {-78,-58},{-78,0},{-108,0}}, color={0,0,127}));
        connect(x_eq2.a, a) annotation (Line(points={{-62,28.2},{-70,28.2},{-70,28},{-78,
                28},{-78,0},{-108,0}}, color={0,0,127}));
        connect(x_eq1.a, a) annotation (Line(points={{-62,62.2},{-70,62.2},{-70,62},{-78,
                62},{-78,0},{-108,0}}, color={0,0,127}));
        connect(x_eq2.T, T) annotation (Line(points={{-61.8,21.4},{-84,21.4},{-84,34},
                {-108,34}}, color={0,0,127}));
        connect(x_eq1.T, T) annotation (Line(points={{-61.8,55.4},{-84,55.4},{-84,34},
                {-108,34}}, color={0,0,127}));
        connect(x_eq2.pO2CO, pO2CO) annotation (Line(points={{-62,35.8},{-70,35.8},{-70,
                70},{-104,70}}, color={0,0,127}));
        connect(x_eq1.pO2CO, pO2CO)
          annotation (Line(points={{-62,69.8},{-70,70},{-104,70}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None),
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-74,26},{96,-16}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="y_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-90,82},{102,68}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="pO2CO"),
              Text(
                extent={{-88,8},{-58,-6}},
                lineColor={28,108,200},
                textString="a",
                horizontalAlignment=TextAlignment.Left),
              Text(
                extent={{-90,-60},{-66,-72}},
                lineColor={28,108,200},
                textString="T",
                horizontalAlignment=TextAlignment.Left),
              Text(
                extent={{-96,-106},{84,-126}},
                lineColor={28,108,200},
                textString="%name")}),                     Diagram(graphics={Text(
                extent={{-100,-50},{94,-112}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString=
                    "  y = y0 + OSA.x(pO2CO, a, T) + h(a)*tanh(k*OSA.x( pO2CO, a, T));")}));
      end y_eq;

      model aFrom_eq
      /*
function aFrom_eq
  input Real pH;
  input Real pCO2;
  input Real MetHb;
  input Real HbF;
  input Real cDPG;
  output Real returnValue;
protected 
  Real dadpH = -0.88;
  Real dadlnpCO2 = 0.048;
  Real dadxMetHb = -0.7;
  Real dadxHbF = -0.25;
  Real dadcDPG0 = 0.3;
  Real pH0 = 7.40;
  Real pCO20 = 5.33;
  Real dadcDPGxHbF = -0.1;
  Real cDPG0 = 5.0;
algorithm 
  returnValue := dadpH * (pH - pH0) + dadlnpCO2 * log(pCO2 / pCO20) + dadxMetHb * MetHb + dadxHbF * HbF + (dadcDPG0 + dadcDPGxHbF * HbF) * (cDPG / cDPG0 - 1.0);
  
 */
        Modelica.Blocks.Interfaces.RealInput pH annotation (Placement(
              transformation(extent={{-122,-22},{-82,18}}), iconTransformation(
                extent={{-128,64},{-100,92}})));
        Modelica.Blocks.Interfaces.RealInput pCO2 annotation (Placement(
              transformation(extent={{-122,-22},{-82,18}}), iconTransformation(
                extent={{-130,20},{-100,50}})));
        Modelica.Blocks.Interfaces.RealInput MetHb annotation (Placement(
              transformation(extent={{-122,-22},{-82,18}}), iconTransformation(
                extent={{-130,-20},{-100,10}})));
        Modelica.Blocks.Interfaces.RealInput cDPG annotation (Placement(
              transformation(extent={{-122,-22},{-82,18}}), iconTransformation(
                extent={{-128,-98},{-100,-70}})));
        Modelica.Blocks.Interfaces.RealInput HbF annotation (Placement(
              transformation(extent={{-122,-22},{-82,18}}), iconTransformation(
                extent={{-128,-60},{-100,-32}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{90,-8},{110,12}}),   iconTransformation(extent={{100,-10},{120,
                  10}})));
        Real dadpH = -0.88;
        Real dadlnpCO2 = 0.048;
        Real dadxMetHb = -0.7;
        Real dadxHbF = -0.25;
        Real dadcDPG0 = 0.3;
        Real pH0 = 7.40;
        Real pCO20 = 5.33;
        Real dadcDPGxHbF = -0.1;
        Real cDPG0 = 5.0;

      equation
         y = dadpH * (pH - pH0) + dadlnpCO2 * log(pCO2 / pCO20) + dadxMetHb * MetHb + dadxHbF * HbF + (dadcDPG0 + dadcDPGxHbF * HbF) * (cDPG / cDPG0 - 1.0);
        annotation (Diagram(graphics={Text(
                extent={{-78,64},{92,-24}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString=" y = dadpH * (pH - pH0) 
      + dadlnpCO2 * log(pCO2 / pCO20) 
      + dadxMetHb * MetHb + dadxHbF *HbF 
      + (dadcDPG0 + dadcDPGxHbF * HbF) 
        * (cDPG / cDPG0 - 1.0);
",              horizontalAlignment=TextAlignment.Left)}), Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-54,22},{110,-10}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="aFrom_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-92,88},{2,70}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="pH"),
              Text(
                extent={{-92,46},{22,10}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="pCO2
"),           Text(
                extent={{-94,6},{0,-12}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="MetHb"),
              Text(
                extent={{-94,-72},{0,-90}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="cDPG"),
              Text(
                extent={{-94,-36},{0,-54}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="HbF")}));
      end aFrom_eq;

      model sCO_eq
      /*  
function sCO_eq
  input Real FCOHb;
  input Real FMetHb;
  output Real returnValue;
protected 
  Real xFCOHb;
algorithm 
  if FCOHb < 0 then
    xFCOHb := 0;
  else
    xFCOHb := FCOHb;
  end if;
  returnValue := xFCOHb / (1.0 - FMetHb);
  */

        Modelica.Blocks.Interfaces.RealInput FCOHb annotation (Placement(
              transformation(extent={{-116,14},{-76,54}}), iconTransformation(extent={{-132,56},
                  {-100,88}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{96,-16},{116,4}}), iconTransformation(extent={{100,-12},{120,
                  8}})));
        Modelica.Blocks.Interfaces.RealInput FMetHb annotation (Placement(
              transformation(extent={{-114,-50},{-74,-10}}), iconTransformation(
                extent={{-132,16},{-100,48}})));
      Real xFCOHb;
      equation

        if FCOHb < 0 then
          xFCOHb = 0;
        else
          xFCOHb = FCOHb;
        end if;
        y = xFCOHb / (1.0 - FMetHb)
        annotation (Diagram(graphics={Text(
                extent={{-88,-104},{16,-126}},
                lineColor={28,108,200},
                textString="%name")}));

        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-96,-16},{104,-50}},
                lineColor={28,108,200},
                textStyle={TextStyle.Bold,TextStyle.Italic},
                textString="sCO_eq"),
              Text(
                extent={{108,42},{-96,20}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FMetHb"),
              Text(
                extent={{-94,82},{70,60}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FCOHb"),
              Text(
                extent={{-100,-108},{100,-118}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="%name")}));
      end sCO_eq;

      model sO2CO_eq
       /* 
function sO2CO_eq
  input Real pO2CO;
  input Real a;
  input Real T;
  output Real returnValue;
algorithm 
  returnValue := OSA.antilogit(OSA.y(pO2CO,a,T));
  */
        Modelica.Blocks.Interfaces.RealInput pO2CO annotation (Placement(
              transformation(extent={{-106,48},{-66,88}}), iconTransformation(extent={{-132,56},
                  {-100,88}})));
        Modelica.Blocks.Interfaces.RealInput a annotation (Placement(transformation(
                extent={{-104,8},{-64,48}}),    iconTransformation(extent={{-132,0},{-100,
                  32}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{52,22},{72,42}}),  iconTransformation(extent={{100,-12},{120,
                  8}})));
        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(transformation(
                extent={{-108,-38},{-68,2}}),   iconTransformation(extent={{-132,-50},
                  {-100,-18}})));

        y_eq y_eq1
          annotation (Placement(transformation(extent={{-36,22},{-16,42}})));
        antilogit_eq antilogit_eq1
          annotation (Placement(transformation(extent={{14,22},{34,42}})));
      equation
        connect(y_eq1.pO2CO, pO2CO) annotation (Line(points={{-38,39.8},{-56,
                39.8},{-56,68},{-86,68}}, color={0,0,127}));
        connect(a, y_eq1.a) annotation (Line(points={{-84,28},{-48,28},{-48,32},
                {-38,32}}, color={0,0,127}));
        connect(T, y_eq1.T) annotation (Line(points={{-88,-18},{-54,-18},{-54,
                25.4},{-38,25.4}}, color={0,0,127}));
        connect(y_eq1.y, antilogit_eq1.x)
          annotation (Line(points={{-15,32},{14,32}}, color={0,0,127}));
        connect(antilogit_eq1.y, y)
          annotation (Line(points={{35,32},{62,32}}, color={0,0,127}));
         annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-98,-44},{98,-80}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="sO2CO_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-96,84},{68,62}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pO2CO"),
              Text(
                extent={{108,32},{-96,4}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="a"),
              Text(
                extent={{108,-18},{-96,-46}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T")}), Diagram(graphics={Text(
                extent={{-92,-62},{92,-88}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="y= OSA.antilogit(OSA.y(pO2CO,a,T))")}));
      end sO2CO_eq;

      model dydx_eq
      /*  
function dydx_eq
  input Real pO2CO;
  input Real a;
  input Real T;
  output Real returnValue;
protected 
  Real k = 0.5342857;
algorithm 
  returnValue := 1 + OSA.h(a)*k*(1 - tanh(k*OSA.x(pO2CO,a,T))^2);
*/
        Modelica.Blocks.Interfaces.RealInput pO2CO annotation (Placement(
              transformation(extent={{-100,24},{-60,64}}), iconTransformation(extent={
                  {-134,58},{-100,92}})));
        Modelica.Blocks.Interfaces.RealInput a annotation (Placement(transformation(
                extent={{-116,-2},{-76,38}}), iconTransformation(extent={{-134,6},{-100,
                  40}})));
        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(transformation(
                extent={{-64,-12},{-24,28}}), iconTransformation(extent={{-134,-42},{-100,
                  -8}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{90,-6},{110,14}}),   iconTransformation(extent={{100,-10},{120,
                  10}})));
      Real k = 0.5342857;
        h_eq h_eq1
          annotation (Placement(transformation(extent={{-40,-36},{-20,-16}})));
        x_eq x_eq1 annotation (Placement(transformation(extent={{-4,16},{16,36}})));
      equation
        y= 1 + h_eq1.y*k*(1 - tanh(k*x_eq1.y)^2);

        connect(x_eq1.pO2CO, pO2CO) annotation (Line(points={{-6,33.8},{-43,33.8},{-43,
                44},{-80,44}}, color={0,0,127}));
        connect(a, x_eq1.a) annotation (Line(points={{-96,18},{-56,18},{-56,26.2},{-6,
                26.2}}, color={0,0,127}));
        connect(x_eq1.T, T) annotation (Line(points={{-5.8,19.4},{-20,19.4},{-20,8},{-44,
                8}}, color={0,0,127}));
        connect(h_eq1.a, x_eq1.a) annotation (Line(points={{-42,-25.8},{-56,
                -25.8},{-56,26.2},{-6,26.2}},
                                  color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-102,-18},{98,-58}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="dydx_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-96,86},{100,64}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="pO2CO",
                horizontalAlignment=TextAlignment.Left),
              Text(
                extent={{-96,34},{100,12}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="a"),
              Text(
                extent={{-96,-14},{100,-36}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T"),
              Text(
                extent={{-100,-102},{100,-124}},
                lineColor={28,108,200},
                textString="%name")}),
                                   Diagram(graphics={Text(
                extent={{-76,-54},{86,-84}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="y = 1 + OSA.h(a)*k*(1-tanh(k*OSA.x(pO2CO,a,T))^2);")}));
      end dydx_eq;

      model MpCOof_eq
      /*  
function MpCOof_eq
  input Real pO2CO;
  input Real a;
  input Real T;
  input Real FCOHb;
  input Real FMetHb;
  output Real returnValue;
algorithm 
  returnValue := pO2CO/OSA.sO2CO(pO2CO,a,T)*OSA.sCO(FCOHb, FMetHb);
*/

        Modelica.Blocks.Interfaces.RealInput pO2CO annotation (Placement(
              transformation(extent={{-106,-28},{-66,12}}),iconTransformation(extent={
                  {-128,70},{-100,98}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{66,-6},{86,14}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput a annotation (Placement(transformation(
                extent={{-106,-56},{-66,-16}}),
                                              iconTransformation(extent={{-128,36},{-100,
                  64}})));
        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(transformation(
                extent={{-106,-84},{-66,-44}}),
                                              iconTransformation(extent={{-128,2},{-100,
                  30}})));
        Modelica.Blocks.Interfaces.RealInput FCOHb annotation (Placement(
              transformation(extent={{-104,56},{-64,96}}), iconTransformation(extent={
                  {-128,-32},{-100,-4}})));
        Modelica.Blocks.Interfaces.RealInput FMetHb annotation (Placement(
              transformation(extent={{-100,24},{-60,64}}), iconTransformation(extent={
                  {-128,-66},{-100,-38}})));
        sO2CO_eq sO2CO_eq1
          annotation (Placement(transformation(extent={{-28,-42},{-8,-22}})));
        sCO_eq sCO_eq1
          annotation (Placement(transformation(extent={{-26,34},{-6,54}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{32,-6},{52,14}})));
      equation
        connect(sO2CO_eq1.pO2CO, pO2CO) annotation (Line(points={{-29.6,-24.8},{-48,-24.8},
                {-48,-8},{-86,-8}}, color={0,0,127}));
        connect(sO2CO_eq1.a, a) annotation (Line(points={{-29.6,-30.4},{-58,-30.4},{-58,
                -36},{-86,-36}}, color={0,0,127}));
        connect(T, sO2CO_eq1.T) annotation (Line(points={{-86,-64},{-48,-64},{-48,-35.4},
                {-29.6,-35.4}}, color={0,0,127}));
        connect(FMetHb, sCO_eq1.FMetHb) annotation (Line(points={{-80,44},{-44,44},{-44,
                47.2},{-27.6,47.2}}, color={0,0,127}));
        connect(sCO_eq1.FCOHb, FCOHb) annotation (Line(points={{-27.6,51.2},{-42,51.2},
                {-42,76},{-84,76}}, color={0,0,127}));
        connect(sO2CO_eq1.y, product.u2) annotation (Line(points={{-7,-32.2},{10,-32.2},
                {10,-2},{30,-2}}, color={0,0,127}));
        connect(product.u1, sCO_eq1.y) annotation (Line(points={{30,10},{10,10},{10,43.8},
                {-5,43.8}}, color={0,0,127}));

        connect(product.y, y)
          annotation (Line(points={{53,4},{76,4}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-102,-60},{104,-90}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textStyle={TextStyle.Bold,TextStyle.Italic},
                textString="MpCOof_eq"),
              Text(
                extent={{-98,94},{102,74}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="pO2CO",
                horizontalAlignment=TextAlignment.Left),
              Text(
                extent={{-98,60},{108,28}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="a
"),           Text(
                extent={{-98,26},{102,6}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T"),
              Text(
                extent={{-98,-8},{102,-28}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FCOHb"),
              Text(
                extent={{-98,-42},{102,-62}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FMetHb")}), Diagram(graphics={Text(
                extent={{-98,-58},{100,-104}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString=
                    "y= pO2CO/OSA.sO2CO(pO2CO,a,T)*OSA.sCO(FCOHb, FMetHb);")}));
      end MpCOof_eq;

      model sO2fr_eq
       /* 
function sO2fr_eq
  input Real pO2CO;
  input Real a;
  input Real T;
  input Real FCOHb;
  input Real FMetHb;
  output Real returnValue;
protected 
  Real sO2COc;
  Real sCOc;
algorithm 
  sO2COc := OSA.sO2CO(pO2CO,a,T);
  sCOc := OSA.sCO(FCOHb, FMetHb);
  returnValue := (sO2COc - sCOc) / (1 - sCOc);
  */

        Modelica.Blocks.Interfaces.RealInput FCOHb annotation (Placement(
              transformation(extent={{-86,56},{-60,82}}),  iconTransformation(extent={{-128,
                  -44},{-100,-16}})));
        Modelica.Blocks.Interfaces.RealInput FMetHb annotation (Placement(
              transformation(extent={{-84,24},{-60,48}}),  iconTransformation(extent={{-128,
                  -78},{-100,-50}})));
        Modelica.Blocks.Interfaces.RealInput pO2CO annotation (Placement(
              transformation(extent={{-88,-8},{-60,20}}),  iconTransformation(extent={{-126,68},
                  {-100,94}})));
        Modelica.Blocks.Interfaces.RealInput a annotation (Placement(transformation(
                extent={{-88,-28},{-60,0}}),    iconTransformation(extent={{-128,30},{
                  -100,58}})));
        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(transformation(
                extent={{-90,-52},{-60,-22}}),  iconTransformation(extent={{-128,-8},{
                  -100,20}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{52,22},{72,42}}),  iconTransformation(extent={{100,-12},{120,
                  8}})));
        Real sO2COc;
        Real sCOc;
        sO2CO_eq sO2CO_eq_
          annotation (Placement(transformation(extent={{-20,-14},{0,6}})));
        sCO_eq sCO_eq_
          annotation (Placement(transformation(extent={{-20,44},{0,64}})));
      equation
        sO2COc=sO2CO_eq_.y;
        sCOc=sCO_eq_.y;
        y = (sO2COc - sCOc) / (1 - sCOc);

        connect(sCO_eq_.FCOHb, FCOHb) annotation (Line(points={{-21.6,61.2},{-40,61.2},
                {-40,69},{-73,69}}, color={0,0,127}));
        connect(FMetHb, sCO_eq_.FMetHb) annotation (Line(points={{-72,36},{-40,36},{-40,
                57.2},{-21.6,57.2}}, color={0,0,127}));
        connect(sO2CO_eq_.pO2CO, pO2CO) annotation (Line(points={{-21.6,3.2},{-40,3.2},
                {-40,6},{-74,6}}, color={0,0,127}));
        connect(a, sO2CO_eq_.a) annotation (Line(points={{-74,-14},{-46,-14},{-46,-2.4},
                {-21.6,-2.4}}, color={0,0,127}));
        connect(T, sO2CO_eq_.T) annotation (Line(points={{-75,-37},{-40,-37},{-40,-7.4},
                {-21.6,-7.4}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-78,30},{138,-2}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textStyle={TextStyle.Bold,TextStyle.Italic},
                textString="sO2fr_eq"),
              Text(
                extent={{-98,-20},{102,-40}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FCOHb"),
              Text(
                extent={{-98,-54},{102,-74}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FMetHb"),
              Text(
                extent={{-96,96},{68,74}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pO2CO"),
              Text(
                extent={{108,70},{-96,42}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="a"),
              Text(
                extent={{30,26},{-98,-4}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T")}),      Diagram(graphics={Text(
                extent={{-82,-56},{96,-82}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="sO2COc = OSA.sO2CO(pO2CO,a,T);
sCOc = OSA.sCO(FCOHb, FMetHb);
y = (sO2COc - sCOc) / (1 - sCOc);"),
              Text(
                extent={{4,60},{52,48}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="sCOc=sCO_eq_.y;"),
              Text(
                extent={{6,-2},{56,-8}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="sO2COc=sO2CO_eq_.y;")}));
      end sO2fr_eq;

      model ceHbof_eq
       /*
function ceHbof_eq "effective hemoglobin concentration in mmol/l"
  input Real ctHb "concentration of hemoglobin in mmol/l";
  input Real FCOHb "substance fraction of carboxyhemoglobin";
  input Real FMetHb "substance fraction of hemoglobin";
  output Real returnValue "effective contentration of hemoglobin";
algorithm 
  returnValue := ctHb * (1 - FCOHb - FMetHb);

*/

        Modelica.Blocks.Interfaces.RealInput FCOHb annotation (Placement(
              transformation(extent={{-104,56},{-64,96}}), iconTransformation(extent={{-128,6},
                  {-100,34}})));
        Modelica.Blocks.Interfaces.RealInput FMetHb annotation (Placement(
              transformation(extent={{-102,-36},{-62,4}}), iconTransformation(extent={{-128,
                  -36},{-100,-8}})));
        Modelica.Blocks.Interfaces.RealInput ctHb annotation (Placement(
              transformation(extent={{-104,16},{-64,56}}), iconTransformation(
                extent={{-128,56},{-100,84}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{66,-6},{86,14}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
      equation
        y = ctHb * (1 - FCOHb - FMetHb);
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,-36},{100,-70}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="ceHbof_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-98,30},{102,10}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FCOHb"),
              Text(
                extent={{-98,-12},{102,-32}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FMetHb"),
              Text(
                extent={{-98,80},{102,60}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="ctHb")}), Diagram(graphics={Text(
                extent={{-70,-50},{84,-70}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString=" y = ctHb * (1 - FCOHb - FMetHb);")}));
      end ceHbof_eq;

      model aCO2of_eq
      /*  
function aCO2of_eq
  input Real T;
  output Real result;
protected 
  Real aCO2T0 = 0.23;
  //mM/kPa
  Real dlgaCO2dT = -0.0092;
  // lg(mM/kPa)/K
  Real T0 = 37;
algorithm 
   result := aCO2T0*OSA.antilg(dlgaCO2dT*(T - T0));
*/

        //parameter Real aCO2T0 = 0.23;
        //parameter Real dlgaCO2dT = -0.0092;
        //parameter Real T0 = 37;

        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(transformation(
                extent={{-110,-2},{-70,38}}), iconTransformation(extent={{-128,2},{-100,
                  30}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{68,8},{88,28}}),     iconTransformation(extent={{100,-10},{120,
                  10}})));
        antilg_eq antilg_eq1
          annotation (Placement(transformation(extent={{-6,8},{14,28}})));
        Modelica.Blocks.Math.Gain aCO2T0_gain(k=0.23)
          annotation (Placement(transformation(extent={{28,8},{48,28}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-62,8},{-42,28}})));
        Modelica.Blocks.Sources.Constant T0_const(k=37)
          annotation (Placement(transformation(extent={{-88,-28},{-68,-8}})));
        Modelica.Blocks.Math.Gain dlgaCO2dt_gain(k=-0.0092)
          annotation (Placement(transformation(extent={{-36,8},{-16,28}})));
      equation

        connect(T, feedback.u1)
          annotation (Line(points={{-90,18},{-60,18}}, color={0,0,127}));
        connect(T0_const.y, feedback.u2) annotation (Line(points={{-67,-18},{-52,-18},
                {-52,10},{-52,10}}, color={0,0,127}));
        connect(feedback.y, dlgaCO2dt_gain.u)
          annotation (Line(points={{-43,18},{-38,18}}, color={0,0,127}));
        connect(dlgaCO2dt_gain.y, antilg_eq1.x)
          annotation (Line(points={{-15,18},{-6,18}}, color={0,0,127}));
        connect(antilg_eq1.y, aCO2T0_gain.u)
          annotation (Line(points={{15,18},{26,18}}, color={0,0,127}));
        connect(aCO2T0_gain.y, y)
          annotation (Line(points={{49,18},{78,18}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,-4},{102,-34}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="aCO2of_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-98,26},{102,6}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T"),
              Text(
                extent={{-98,-106},{102,-122}},
                lineColor={28,108,200},
                textString="%name")}),
                                   Diagram(graphics={Text(
                extent={{-92,-46},{90,-92}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="aCO2T0 = 0.23; //mM/kPa
dlgaCO2dT = -0.0092; // lg(mM/kPa)/K
T0 = 37;

 y= aCO2T0*OSA.antilg(dlgaCO2dT*(T - T0));",
                horizontalAlignment=TextAlignment.Left)}));
      end aCO2of_eq;

      model aO2_eq
      /*
function aO2_eq
  input Real temp;
  output Real returnValue;
algorithm 
returnValue := exp(log(0.0105) - 0.0115 * (temp - 37.0) + 0.5 * 0.00042 * (temp - 37.0) ^ 2);
*/
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{52,20},{72,40}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput temp annotation (Placement(
              transformation(extent={{-106,8},{-66,48}}),  iconTransformation(extent={
                  {-134,-16},{-100,18}})));
      equation
        y = exp(log(0.0105) - 0.0115 * (temp - 37.0) + 0.5 * 0.00042 * (temp - 37.0) ^ 2);
        annotation (Diagram(graphics={Text(
                extent={{-98,8},{98,-56}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString=
                    "y = exp(log(0.0105) - 0.0115 * (temp - 37.0) + 0.5 * 0.00042 * (temp - 37.0) ^ 2);")}),       Icon(
              graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,-28},{100,-66}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="aO2_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-86,16},{78,-10}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="temp",
                horizontalAlignment=TextAlignment.Left)}));
      end aO2_eq;

      model dissO2_eq
      /*
  
function dissO2_eq "concentration of dissolved oxygen in blood"
  input Real pO2;
  input Real temp;
  output Real returnValue "dissolved blood oxygen in mmol/l";
algorithm 
  returnValue := OSA.aO2(temp)*pO2;
*/
        Modelica.Blocks.Interfaces.RealInput pO2 annotation (Placement(
              transformation(extent={{-96,2},{-56,42}}), iconTransformation(
                extent={{-128,24},{-100,52}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{60,40},{80,60}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput temp annotation (Placement(
              transformation(extent={{-110,44},{-70,84}}), iconTransformation(
                extent={{-128,-14},{-100,14}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{10,40},{30,60}})));
        aO2_eq aO2_eq1
          annotation (Placement(transformation(extent={{-42,54},{-22,74}})));
      equation
        connect(temp, aO2_eq1.temp) annotation (Line(points={{-90,64},{-62,64},
                {-62,64.1},{-43.7,64.1}}, color={0,0,127}));
        connect(aO2_eq1.y, product.u1) annotation (Line(points={{-21,64},{-8,64},
                {-8,56},{8,56}}, color={0,0,127}));
        connect(pO2, product.u2) annotation (Line(points={{-76,22},{-34,22},{
                -34,44},{8,44}}, color={0,0,127}));
        connect(product.y, y)
          annotation (Line(points={{31,50},{70,50}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-96,-16},{102,-46}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="dissO2_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-92,50},{104,28}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="pO2",
                horizontalAlignment=TextAlignment.Left),
              Text(
                extent={{-92,12},{104,-10}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="temp")}), Diagram(graphics={Text(
                extent={{-88,-26},{84,-44}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="y = OSA.aO2(temp)*pO2;")}));
      end dissO2_eq;

      model pKof_eq
      /*  
function pKof_eq
  input Real T;
  output Real result;
protected 
  Real pKT0 = 6.1;
  Real dpKdT = -0.0026;
  Real T0 = 37;
algorithm 
   result := pKT0 + dpKdT * (T - T0);

*/
        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(transformation(
                extent={{-102,-12},{-62,28}}),iconTransformation(extent={{-132,-16},{-100,
                  16}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{68,-10},{88,10}}),   iconTransformation(extent={{100,-10},{120,
                  10}})));
        Real pKT0 = 6.1;
        Real dpKdT = -0.0026;
        Real T0 = 37;

      equation
        y = pKT0 + dpKdT * (T - T0);

        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-102,-22},{106,-62}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="pKof_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-96,18},{102,-16}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="T",
                horizontalAlignment=TextAlignment.Left),
              Text(
                extent={{-98,-106},{102,-124}},
                lineColor={28,108,200},
                textString="%name")}),                     Diagram(graphics={
                Text(
                extent={{-74,-22},{86,-62}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="pKT0 = 6.1;
dpKdT = -0.0026;
T0 = 37;
y = pKT0 + dpKdT * (T - T0);",
                horizontalAlignment=TextAlignment.Left)}));
      end pKof_eq;

      model cHCO3of_eq
      /*
function cHCO3of_eq "calculation of plasma bicarbonate concentration"
  input Real pH "plasma pH at given temperature in mmol/l";
  input Real pCO2 "pCO2 in kPa";
  input Real T "temperature in °C";
  output Real HCO3p "plasma bicarbonate concentration in mmol/l";
algorithm 
  HCO3p := pCO2*OSA.aCO2of(T)*
  OSA.antilg(pH - OSA.pKof(T));
*/

        Modelica.Blocks.Interfaces.RealInput pH annotation (Placement(
              transformation(extent={{-104,32},{-72,64}}),iconTransformation(
                extent={{-130,52},{-100,82}})));
        Modelica.Blocks.Interfaces.RealOutput HCO3p annotation (Placement(
              transformation(extent={{80,24},{100,44}}), iconTransformation(
                extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput pCO2 annotation (Placement(
              transformation(extent={{-6,-12},{26,20}}), iconTransformation(
                extent={{-130,6},{-100,36}})));
        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(
              transformation(extent={{-104,-8},{-72,24}}), iconTransformation(
                extent={{-130,-38},{-100,-8}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-42,38},{-22,58}})));
        pKof_eq pKof_eq1
          annotation (Placement(transformation(extent={{-60,-2},{-40,18}})));
        aCO2of_eq aCO2of_eq1
          annotation (Placement(transformation(extent={{-60,-32},{-40,-12}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{18,32},{38,52}})));
        Modelica.Blocks.Math.Product product1
          annotation (Placement(transformation(extent={{48,24},{68,44}})));
        antilg_eq antilg_eq1
          annotation (Placement(transformation(extent={{-18,38},{2,58}})));
      equation
        connect(pH, feedback.u1)
          annotation (Line(points={{-88,48},{-40,48}}, color={0,0,127}));
        connect(T, pKof_eq1.T)
          annotation (Line(points={{-88,8},{-61.6,8}}, color={0,0,127}));
        connect(pKof_eq1.y, feedback.u2) annotation (Line(points={{-39,8},{-32,
                8},{-32,40}}, color={0,0,127}));
        connect(aCO2of_eq1.T, pKof_eq1.T) annotation (Line(points={{-61.4,-20.4},
                {-70,-20.4},{-70,8},{-61.6,8}}, color={0,0,127}));
        connect(aCO2of_eq1.y, product.u2) annotation (Line(points={{-39,-22},{
                -2,-22},{-2,36},{16,36}}, color={0,0,127}));
        connect(product.y, product1.u1)
          annotation (Line(points={{39,42},{42,42},{42,40},{46,40}},
                                                     color={0,0,127}));
        connect(product1.u2, pCO2) annotation (Line(points={{46,28},{36,28},{36,
                4},{10,4}}, color={0,0,127}));
        connect(product1.y, HCO3p)
          annotation (Line(points={{69,34},{90,34}}, color={0,0,127}));
        connect(feedback.y, antilg_eq1.x)
          annotation (Line(points={{-23,48},{-18,48}}, color={0,0,127}));
        connect(product.u1, antilg_eq1.y)
          annotation (Line(points={{16,48},{3,48}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,-46},{100,-76}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="cHCO3of_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-86,80},{96,58}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="pH",
                horizontalAlignment=TextAlignment.Left),
              Text(
                extent={{-88,34},{94,12}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pCO2"),
              Text(
                extent={{-90,-10},{92,-32}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T"),
              Text(
                extent={{-84,12},{98,-10}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="HCO3p"),
              Text(
                extent={{-84,-102},{104,-132}},
                lineColor={28,108,200},
                textString="%name")}), Diagram(graphics={Text(
                extent={{-98,-40},{100,-62}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString=
                    "  HCO3p = pCO2*OSA.aCO2of(T)*OSA.antilg(pH - OSA.pKof(T));")}));
      end cHCO3of_eq;

      model pH2Oof_eq
        /*
function pH2Oof_eq
  input Real temp "temperature in C";
  output Real vaporPressure "in mmHg";
algorithm 
  if temp < 0 then
    vaporPressure := 0;
  else
    if temp > 100 then
      vaporPressure := 760;
    else
      vaporPressure := exp(18.6686 - 4030.183 / (temp + 235));
    end if;
  end if;
    */

        Modelica.Blocks.Interfaces.RealInput temp annotation (Placement(
              transformation(extent={{-102,10},{-70,42}}),
                                                         iconTransformation(extent={{-130,
                  8},{-100,38}})));
        Modelica.Blocks.Interfaces.RealOutput vaporPressure annotation (Placement(
              transformation(extent={{80,24},{100,44}}), iconTransformation(extent={{100,
                  -10},{120,10}})));
      equation
      if temp < 0 then
          vaporPressure =  0;
        else
          if temp > 100 then
            vaporPressure =  760;
          else
            vaporPressure =  exp(18.6686 - 4030.183 / (temp + 235));
          end if;
      end if;
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-98,36},{84,14}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="temp"),
              Text(
                extent={{-122,12},{98,-10}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="vaporPressure"),
              Text(
                extent={{-114,-42},{110,-76}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="pH2Oof_eq")}), Diagram(graphics={Text(
                extent={{-80,6},{78,-68}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="if temp < 0 then
    vaporPressure = 0;
  else
    if temp > 100 then
      vaporPressure = 760;
    else
      vaporPressure = exp(18.6686 - 4030.183 / (temp + 235));
    end if;
  end if;")}));
      end pH2Oof_eq;

      model BTPS_to_STPD_eq
      /*
function BTPS_to_STPD_eq 
  "coefficient for conversion volume from BTPS to STPD"
  input Real PB "barometric pressure in mmHg";
  input Real temp "temperature in ?C";
  output Real coefficient_BTPS_to_STP
    "from BTPS to STPD conversion coefficient";
protected 
  Real pH2O;
algorithm 
  pH2O := OSA.pH2Oof(temp);
  coefficient_BTPS_to_STP := (PB - pH2O) * 273.15 / (760 * (273.15 + temp));
*/

        Modelica.Blocks.Interfaces.RealInput temp annotation (Placement(
              transformation(extent={{-112,-50},{-80,-18}}), iconTransformation(
                extent={{-130,6},{-100,36}})));
        Modelica.Blocks.Interfaces.RealInput PB annotation (Placement(transformation(
                extent={{-82,34},{-50,66}}), iconTransformation(extent={{-130,50},{-100,
                  80}})));
        Modelica.Blocks.Interfaces.RealOutput coeff_BTPS_to_STP annotation (Placement(
              transformation(extent={{80,-26},{100,-6}}), iconTransformation(extent={{
                  100,-10},{120,10}})));
        pH2Oof_eq pH2Oof_eq1
          annotation (Placement(transformation(extent={{-62,-28},{-32,2}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-36,40},{-16,60}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{-38,-70},{-18,-50}})));
        Modelica.Blocks.Sources.Constant const(k=273.15)
          annotation (Placement(transformation(extent={{-100,-76},{-80,-56}})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{48,-26},{68,-6}})));
        Modelica.Blocks.Math.Gain gain(k=760)
          annotation (Placement(transformation(extent={{12,-70},{32,-50}})));
        Modelica.Blocks.Math.Gain gain1(k=273.15)
          annotation (Placement(transformation(extent={{-2,40},{18,60}})));
      equation

        connect(temp, pH2Oof_eq1.temp) annotation (Line(points={{-96,-34},{-78,-34},{-78,
                -9.55},{-64.25,-9.55}}, color={0,0,127}));
        connect(feedback.u1, PB)
          annotation (Line(points={{-34,50},{-66,50}}, color={0,0,127}));
        connect(pH2Oof_eq1.vaporPressure, feedback.u2) annotation (Line(points={{-30.5,
                -13},{-26,-13},{-26,42}}, color={0,0,127}));
        connect(add.y, gain.u)
          annotation (Line(points={{-17,-60},{10,-60}}, color={0,0,127}));
        connect(gain.y, division.u2) annotation (Line(points={{33,-60},{36,-60},{36,-22},
                {46,-22}}, color={0,0,127}));
        connect(const.y, add.u2)
          annotation (Line(points={{-79,-66},{-40,-66}}, color={0,0,127}));
        connect(add.u1, pH2Oof_eq1.temp) annotation (Line(points={{-40,-54},{-78,-54},
                {-78,-9.55},{-64.25,-9.55}}, color={0,0,127}));
        connect(feedback.y, gain1.u)
          annotation (Line(points={{-17,50},{-4,50}}, color={0,0,127}));
        connect(division.u1, gain1.y) annotation (Line(points={{46,-10},{34,-10},{34,50},
                {19,50}}, color={0,0,127}));
        connect(division.y, coeff_BTPS_to_STP)
          annotation (Line(points={{69,-16},{90,-16}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-104,-42},{104,-64}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textStyle={TextStyle.Bold,TextStyle.Italic},
                textString="BTPS_to_STPD_eq"),
              Text(
                extent={{-88,34},{94,12}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="temp"),
              Text(
                extent={{-86,76},{96,54}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="PB"),
              Text(
                extent={{-90,10},{92,-12}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="coeff_BTPS_to_STP")}), Diagram(graphics={Text(
                extent={{-98,104},{104,64}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString=" pH2O = OSA.pH2Oof(temp);
  coeff_BTPS_to_STP = (PB - pH2O) * 273.15 / (760 * (273.15 + temp));"),       Text(
                extent={{-24,18},{-4,12}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pH2O")}));
      end BTPS_to_STPD_eq;

      model hematocrit
      /* 
function hematocrit "Calculation of hematocrit"
  input Real ctHb "Hemoglobin concentration in mmol/l";
  output Real htc "hematocrit";

  Physiolibrary.Types.RealIO.ConcentrationInput ctHb annotation (Placement(
        transformation(extent={{-118,-18},{-78,22}}), iconTransformation(extent
          ={{-128,-14},{-100,14}})));
  Physiolibrary.Types.RealIO.FractionOutput htc annotation (Placement(
        transformation(extent={{82,-4},{102,16}}), iconTransformation(extent={{100,
            -12},{124,12}})));
protected 
  Real ctHbE = 21;

algorithm 

  htc := ctHb / ctHbE;
  // !! !! it is hematokrit!!!!!!!
  */
      Real ctHbE = 21;
        Physiolibrary.Types.RealIO.ConcentrationInput ctHb
          "Concentration of hemoglobin in mmol/l (=mol/m3)" annotation (
            Placement(transformation(extent={{-88,18},{-48,58}}),
              iconTransformation(extent={{-130,-14},{-102,14}})));
        Physiolibrary.Types.RealIO.FractionOutput htc "hematocrit (fraction)"
          annotation (Placement(transformation(extent={{66,26},{86,46}}),
              iconTransformation(extent={{100,-10},{120,10}})));
      equation
         htc = ctHb / ctHbE;
        annotation (Icon(graphics={
              Rectangle(
                extent={{-102,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-102,-30},{100,-56}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="hematocrit",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-98,8},{100,-6}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="ctHb",
                horizontalAlignment=TextAlignment.Left),
              Text(
                extent={{-102,8},{96,-6}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="htc")}), Diagram(graphics={Text(
                extent={{-58,-14},{42,-32}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="ctHbE = 21;
htc = ctHb / ctHbE;",
                horizontalAlignment=TextAlignment.Left)}));
      end hematocrit;

      model AlveolarGases_eq

      /*
function AlveolarGases_eq 
  "Calculation of partial pressures of O2 and CO2"
  input Real VAi_BTPS "inspired alveolar ventilation in l BTPS/min";
  input Real FiO2 "fraction concentration of O2 in dry inspired gas";
  input Real FiCO2 "fraction concentationo of CO2 in dry inspired gas";
  input Real temp "core body temperature in ?C";
  input Real PB "barometric pressure";
  input Real VO2 "rate of oxygen comsumption [mmol/min]";
  input Real VCO2 "rate of carbon dioxide production [mmol/min]";
  output Real PAO2 "alveolar pO2 [mmHg]";
  output Real PACO2 "alveolar PCO2 [mmHg]";
  output Real VAe_BTPS "expired alveolar ventilation in l BTPS/min";
protected 
  Real VCO2_STPD "rate of carbon dioxide production in l STPD/min";
  Real VO2_STPD "rate of oxygen consumtion in l STPD/min";
  Real kBTPS_to_STPD "conversion factor form BTPS to STPD";
  Real VAi_STPD "inspired alveolar ventilation in l/min STPD";
  Real VO2i_STPD "inspired O2 in l STPD/min";
  Real VCO2i_STPD "inspired CO2 in l STPD/min";
  Real VAe_STPD "expired alveolar ventilation in l/min STPD";
  Real VO2e_STPD "exspired O2 in l STPD/min";
  Real VCO2e_STPD "exspired CO2 in l STPD/min";
  Real FeO2_D "fraction concentationo of O2 in dry expired gas";
  Real FeCO2_D "fraction concentationo of CO2 in dry expired gas";
algorithm 
  //conversion of metabolic gases flow from mmol/min to l STPD/min
  VCO2_STPD := VCO2 * 0.022414;
  VO2_STPD := VO2 * 0.022414;
  //calculation of VAi_STPD
  kBTPS_to_STPD := OSA.BTPS_to_STPD(PB, temp);
  VAi_STPD := VAi_BTPS * kBTPS_to_STPD;
  //l STPD/min
  // calculation of inspired gases flow in l STPD/min
  VO2i_STPD := VAi_STPD * FiO2;
  VCO2i_STPD := VAi_STPD * FiCO2;
  //calculation of expired alveolar ventilation in l STPD/min
  VAe_STPD := VAi_STPD + VCO2_STPD - VO2_STPD;
  //calculation of expired gases flow in STPD
  VO2e_STPD := VO2i_STPD - VO2_STPD;
  VCO2e_STPD := VCO2i_STPD + VCO2_STPD;
  //calculation of FeO2 and FeCO2 in dry expired gas
  FeO2_D := VO2e_STPD / VAe_STPD;
  FeCO2_D := VCO2e_STPD / VAe_STPD;
  //calculation of expired alveolar ventilation in l BTPS/min (VAe_BTPS)
  VAe_BTPS := VAe_STPD / kBTPS_to_STPD;
  //calculation of PAO2 and PACO2 (at BTPS)
  PAO2 := FeO2_D*(PB - OSA.pH2Oof(temp));
  PACO2 := FeCO2_D*(PB - OSA.pH2Oof(temp));
  */
        Modelica.Blocks.Interfaces.RealInput FiCO2 annotation (Placement(
              transformation(extent={{-34,64},{-2,96}}),  iconTransformation(extent={{-120,48},
                  {-100,68}})));
        Modelica.Blocks.Interfaces.RealInput temp annotation (Placement(
              transformation(extent={{-106,-38},{-80,-12}}),
                                                          iconTransformation(extent={{-120,0},
                  {-100,20}})));
        Modelica.Blocks.Interfaces.RealInput PB annotation (Placement(transformation(
                extent={{-110,-4},{-78,28}}),iconTransformation(extent={{-120,-24},{-100,
                  -4}})));
        Modelica.Blocks.Interfaces.RealInput VO2 annotation (Placement(transformation(
                extent={{-66,42},{-34,74}}), iconTransformation(extent={{-120,-48},{-100,
                  -28}})));
        Modelica.Blocks.Interfaces.RealInput VCO2 annotation (Placement(transformation(
                extent={{-106,66},{-74,98}}),iconTransformation(extent={{-120,-72},{-100,
                  -52}})));
        Modelica.Blocks.Interfaces.RealOutput PAO2 annotation (Placement(
              transformation(extent={{80,64},{100,84}}), iconTransformation(extent={{100,46},
                  {120,66}})));
        Modelica.Blocks.Interfaces.RealOutput PACO2 annotation (Placement(
              transformation(extent={{64,78},{84,98}}),  iconTransformation(extent={{100,4},
                  {120,24}})));
        Modelica.Blocks.Interfaces.RealOutput VAe_BTPS annotation (Placement(
              transformation(extent={{44,58},{64,78}}),  iconTransformation(extent={{100,
                  -38},{120,-18}})));
        Real VCO2_STPD "rate of carbon dioxide production in l STPD/min";
        Modelica.Blocks.Interfaces.RealInput VAi_BTPS annotation (Placement(
              transformation(extent={{-70,70},{-42,98}}),   iconTransformation(extent=
                 {{-120,76},{-100,96}})));
        Modelica.Blocks.Interfaces.RealInput FiO2 annotation (Placement(
              transformation(extent={{-96,42},{-64,74}}),    iconTransformation(
                extent={{-120,24},{-100,44}})));
        BTPS_to_STPD_eq btps_to_stpd
          annotation (Placement(transformation(extent={{-70,-26},{-26,18}})));

        Real VO2_STPD "rate of oxygen consumtion in l STPD/min";
        Real kBTPS_to_STPD "conversion factor form BTPS to STPD";
        Real VAi_STPD "inspired alveolar ventilation in l/min STPD";
        Real VO2i_STPD "inspired O2 in l STPD/min";
        Real VCO2i_STPD "inspired CO2 in l STPD/min";
        Real VAe_STPD "expired alveolar ventilation in l/min STPD";
        Real VO2e_STPD "exspired O2 in l STPD/min";
        Real VCO2e_STPD "exspired CO2 in l STPD/min";
        Real FeO2_D "fraction concentationo of O2 in dry expired gas";
        Real FeCO2_D "fraction concentationo of CO2 in dry expired gas";
        Real pH2O "vapor pressure at given temperature";
        pH2Oof_eq ph2o
          annotation (Placement(transformation(extent={{-68,-78},{-28,-38}})));
      equation

        //conversion of metabolic gases flow from mmol/min to l STPD/min
        VCO2_STPD = VCO2 * 0.022414;
        VO2_STPD = VO2 * 0.022414;
        //calculation of VAi_STPD
        //kBTPS_to_STPD = OSA.BTPS_to_STPD(PB, temp);
        kBTPS_to_STPD = btps_to_stpd.coeff_BTPS_to_STP;
        VAi_STPD = VAi_BTPS * kBTPS_to_STPD;
        //l STPD/min
        // calculation of inspired gases flow in l STPD/min
        VO2i_STPD = VAi_STPD * FiO2;
        VCO2i_STPD = VAi_STPD * FiCO2;
        //calculation of expired alveolar ventilation in l STPD/min
        VAe_STPD = VAi_STPD + VCO2_STPD - VO2_STPD;
        //calculation of expired gases flow in STPD
        VO2e_STPD = VO2i_STPD - VO2_STPD;
        VCO2e_STPD = VCO2i_STPD + VCO2_STPD;
        //calculation of FeO2 and FeCO2 in dry expired gas
        FeO2_D = VO2e_STPD / VAe_STPD;
        FeCO2_D = VCO2e_STPD / VAe_STPD;
        //calculation of expired alveolar ventilation in l BTPS/min (VAe_BTPS)
        VAe_BTPS = VAe_STPD / kBTPS_to_STPD;
        //vapor pressure at given temperature calculation
        pH2O=ph2o.vaporPressure;
        //calculation of PAO2 and PACO2 (at BTPS)
        //PAO2 = FeO2_D*(PB - OSA.pH2Oof(temp));
        PAO2 = FeO2_D*(PB - pH2O);
        //PACO2 = FeCO2_D*(PB - OSA.pH2Oof(temp));
        PACO2 = FeCO2_D*(PB - pH2O);
        connect(temp, btps_to_stpd.temp) annotation (Line(points={{-93,-25},{
                -78,-25},{-78,0.62},{-73.3,0.62}},
                                       color={0,0,127}));
        connect(btps_to_stpd.PB, PB) annotation (Line(points={{-73.3,10.3},{-74,
                10.3},{-74,12},{-94,12}},
                                    color={0,0,127}));
        connect(ph2o.temp, btps_to_stpd.temp) annotation (Line(points={{-71,
                -53.4},{-78,-53.4},{-78,0.62},{-73.3,0.62}},
                                                   color={0,0,127}));
       annotation (Icon(coordinateSystem(extent={{-100,-100},{100,100}}),
                        graphics={
              Rectangle(
                extent={{-100,102},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-96,-78},{114,-116}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                textString="AlveolarGases_eq
",              textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-98,70},{84,48}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FiCO2"),
              Text(
                extent={{-100,22},{82,0}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="temp"),
              Text(
                extent={{-96,-2},{86,-24}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="PB"),
              Text(
                extent={{-98,-26},{84,-48}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="VO2"),
              Text(
                extent={{-98,-52},{84,-74}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="VCO2"),
              Text(
                extent={{-82,68},{100,46}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="PAO2"),
              Text(
                extent={{-84,26},{98,4}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="PACO2"),
              Text(
                extent={{-84,-14},{98,-36}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="VAe_BTPS"),
              Text(
                extent={{-98,96},{84,74}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="VAi_BTPS"),
              Text(
                extent={{-98,46},{84,24}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FiO2")}), Diagram(coordinateSystem(extent={{-100,
                  -100},{100,100}}),          graphics={Text(
                extent={{-68,-28},{-20,-36}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                textString="btps_to_stpd"), Text(
                extent={{-74,-80},{-30,-86}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                textString="ph2o"),
              Text(
                extent={{-22,60},{106,-86}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                horizontalAlignment=TextAlignment.Left,
                textString="  VCO2_STPD = VCO2 * 0.022414;
  VO2_STPD = VO2 * 0.022414;
  //calculation of VAi_STPD
  //kBTPS_to_STPD = OSA.BTPS_to_STPD(PB, temp);
  kBTPS_to_STPD = btps_to_stpd.coeff_BTPS_to_STP;
  VAi_STPD = VAi_BTPS * kBTPS_to_STPD;
  //l STPD/min
  // calculation of inspired gases flow in l STPD/min
  VO2i_STPD = VAi_STPD * FiO2;
  VCO2i_STPD = VAi_STPD * FiCO2;
  //calculation of expired alveolar ventilation in l STPD/min
  VAe_STPD = VAi_STPD + VCO2_STPD - VO2_STPD;
  //calculation of expired gases flow in STPD
  VO2e_STPD = VO2i_STPD - VO2_STPD;
  VCO2e_STPD = VCO2i_STPD + VCO2_STPD;
  //calculation of FeO2 and FeCO2 in dry expired gas
  FeO2_D = VO2e_STPD / VAe_STPD;
  FeCO2_D = VCO2e_STPD / VAe_STPD;
  //calculation of expired alveolar ventilation
  // in l BTPS/min (VAe_BTPS)
  VAe_BTPS = VAe_STPD / kBTPS_to_STPD;
  //vapor pressure at given temperature calculation
  pH2O=ph2o.vaporPressure;
  //calculation of PAO2 and PACO2 (at BTPS)
  //PAO2 = FeO2_D*(PB - OSA.pH2Oof(temp));
  PAO2 = FeO2_D*(PB - pH2O);
  //PACO2 = FeCO2_D*(PB - OSA.pH2Oof(temp));
  PACO2 = FeCO2_D*(PB - pH2O);")}));
      end AlveolarGases_eq;

      model pCO22of_eq
      /*  
function pCO22of_eq
  input Real pCO21;
  input Real T1;
  input Real T2;
  input Real cHb;
  input Real cAlb;
  input Real pH1;
  output Real result;
protected 
  Real betaX;
  Real dpHdT1;
  Real pH2;
  Real cHCO3;
  Real dlgpCO2dT1;
  Real pCO22;
  Real dpHdT2;
  Real dlgpCO2dT2;
  Real dpHdTmean;
  Real dlgpCO2dTmean;
  Real cAlbN = 0.66;
algorithm 
  betaX := 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
  dpHdT1 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
    pH1,
    pCO21,
    T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))))/(1 + betaX*(1/(2.3
    *OSA.cHCO3of(
    pH1,
    pCO21,
    T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))));
  pH2 := pH1 + dpHdT1 * (T2 - T1);
  cHCO3 := OSA.cHCO3of(
    pH1,
    pCO21,
    T1);
  dlgpCO2dT1 := (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
  pCO22 := OSA.antilg(OSA.lg(pCO21) +
    dlgpCO2dT1*(T2 - T1));
  dpHdT2 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
    pH2,
    pCO22,
    T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))))/(1 + betaX*(1/(2.3
    *OSA.cHCO3of(
    pH2,
    pCO22,
    T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))));
  dpHdTmean := (dpHdT1 + dpHdT2) / 2;
  pH2 := pH1 + dpHdTmean * (T2 - T1);
  cHCO3 := OSA.cHCO3of(
    pH2,
    pCO22,
    T2);
  dlgpCO2dT2 := (-0.0026) - (-0.0092) - dpHdT2 + 1 / (2.3 * cHCO3) * (betaX * dpHdT2 + betaX * 0.016);
  dlgpCO2dTmean := (dlgpCO2dT1 + dlgpCO2dT2) / 2;
  result := OSA.antilg(OSA.lg(pCO21)
  + dlgpCO2dTmean*(T2 - T1));
  
*/
        Modelica.Blocks.Interfaces.RealInput pCO21 annotation (Placement(
              transformation(extent={{-100,22},{-84,38}}), iconTransformation(extent={{-118,72},
                  {-100,90}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{66,-6},{86,14}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput T1 annotation (Placement(transformation(
                extent={{-94,12},{-78,28}}), iconTransformation(extent={{-118,44},{-100,
                  62}})));
        Modelica.Blocks.Interfaces.RealInput T2 annotation (Placement(transformation(
                extent={{-44,40},{-24,60}}),    iconTransformation(extent={{-118,20},{
                  -100,38}})));
        Modelica.Blocks.Interfaces.RealInput cHb annotation (Placement(transformation(
                extent={{-54,66},{-26,94}}),iconTransformation(extent={{-118,-8},{-100,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput cAlb annotation (Placement(
              transformation(extent={{-100,56},{-78,78}}), iconTransformation(extent={
                  {-118,-34},{-100,-16}})));
        Modelica.Blocks.Interfaces.RealInput pH1 annotation (Placement(transformation(
                extent={{-90,34},{-72,52}}),    iconTransformation(extent={{-118,-60},
                  {-100,-42}})));
        Real betaX;
        Real dpHdT1;
        Real pH2;
        Real pH22;
        Real cHCO3;
        Real dlgpCO2dT1;
        Real pCO22;
        Real dpHdT2;
        Real dlgpCO2dT2;
        Real dpHdTmean;
        Real dlgpCO2dTmean;
        Real aCO2_T1;
        Real x;
        Real xx;
        Real HCO3_T2;
        Real aCO2_T2;
        parameter Real cAlbN = 0.66;
        cHCO3of_eq cHCO3of_1
          annotation (Placement(transformation(extent={{-54,22},{-32,44}})));
        aCO2of_eq aCO2of_1
          annotation (Placement(transformation(extent={{-56,-6},{-36,14}})));
        cHCO3of_eq cHCO3of_2
          annotation (Placement(transformation(extent={{-4,50},{18,72}})));
        aCO2of_eq aCO2of_2
          annotation (Placement(transformation(extent={{-4,22},{16,42}})));
      equation
        betaX = 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
        //cHCO3 = OSA.cHCO3of(pH1, pCO21,T1);
        cHCO3 = cHCO3of_1.HCO3p;
        //aCO2_T1=aCO2of_1(T1);
        aCO2_T1=aCO2of_1.y;
        dpHdT1 = ((-0.0026) - betaX*0.016*(1/(2.3*cHCO3)
        + 1/(2.3*pCO21*aCO2_T1)))/(1 + betaX*(1/(2.3
          *cHCO3) + 1/(2.3*pCO21*aCO2_T1)));
        pH2 = pH1 + dpHdT1 * (T2 - T1);
        dlgpCO2dT1 = (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
        //pCO22 = OSA.antilg(OSA.lg(pCO21) + dlgpCO2dT1*(T2 - T1));
        x=log10(pCO21) + dlgpCO2dT1*(T2 - T1);
        //antilg(x)=exp(log(10) * x);
        pCO22=exp(log(10)*x);

        //HCO3_T2 = OSA.cHCO3of(pH22, pCO22,T2);
        cHCO3of_2.pH=pH22;
        cHCO3of_2.pCO2=pCO22;
        HCO3_T2=cHCO3of_2.HCO3p;

        //aCO2_T2=OSA.aCO2of(T2);
        aCO2_T2=aCO2of_2.y;

        dpHdT2 = ((-0.0026) - betaX*0.016*(1/(2.3*
        HCO3_T2) + 1/(2.3*pCO22*aCO2_T2)))/(1 + betaX*(1/(2.3*
        HCO3_T2) + 1/(2.3*pCO22*aCO2_T2)));
        // OSA.cHCO3of( pH2,pCO22,T2)
        //OSA.cHCO3of(pH2,pCO22,T2)
        dpHdTmean = (dpHdT1 + dpHdT2) / 2;
        pH22 = pH1 + dpHdTmean * (T2 - T1);

        dlgpCO2dT2 = (-0.0026) - (-0.0092) - dpHdT2 + 1 / (2.3 * cHCO3) * (betaX * dpHdT2 + betaX * 0.016);
        dlgpCO2dTmean = (dlgpCO2dT1 + dlgpCO2dT2) / 2;

        //y = OSA.antilg(log10(pCO21)+ dlgpCO2dTmean*(T2 - T1));
        xx=log10(pCO21)+ dlgpCO2dTmean*(T2 - T1);
        //y=OSA.antilg(xx);
        y=exp(log(10)*xx);

        connect(T1, cHCO3of_1.T) annotation (Line(points={{-86,20},{-68,20},{-68,30.47},
                {-55.65,30.47}}, color={0,0,127}));
        connect(pCO21, cHCO3of_1.pCO2) annotation (Line(points={{-92,30},{-72,30},{-72,
                35.31},{-55.65,35.31}}, color={0,0,127}));
        connect(pH1, cHCO3of_1.pH) annotation (Line(points={{-81,43},{-66,43},{-66,40.37},
                {-55.65,40.37}}, color={0,0,127}));
        connect(aCO2of_1.T, cHCO3of_1.T) annotation (Line(points={{-57.4,5.6},{-68,5.6},
                {-68,30.47},{-55.65,30.47}}, color={0,0,127}));
        connect(cHCO3of_2.T, T2) annotation (Line(points={{-5.65,58.47},{-20.825,58.47},
                {-20.825,50},{-34,50}}, color={0,0,127}));
        connect(aCO2of_2.T, T2) annotation (Line(points={{-5.4,33.6},{-20,33.6},{-20,50},
                {-34,50}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-98,94},{102,74}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pCO21"),
              Text(
                extent={{-98,66},{102,46}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T1"),
              Text(
                extent={{-98,42},{102,22}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T2"),
              Text(
                extent={{-98,14},{102,-6}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="cHb"),
              Text(
                extent={{-98,-12},{102,-32}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="cAlb"),
              Text(
                extent={{-98,-38},{102,-58}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pH1"),
              Text(
                extent={{-100,-70},{100,-94}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                textString="pCO22of_eq"),
              Text(
                extent={{-100,-102},{102,-122}},
                lineColor={28,108,200},
                textString="%name")}),      Diagram(graphics={Text(
                extent={{-90,-28},{74,-92}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                horizontalAlignment=TextAlignment.Left,
                textString="betaX = 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
dpHdT1 = ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(pH1,pCO21,T1))
           + 1/(2.3*pCO21*OSA.aCO2of(T1))))/(1 + betaX*(1/(2.3 *OSA.cHCO3of(pH1,pCO21,T1)) 
           + 1/(2.3*pCO21*OSA.aCO2of(T1))));
cHCO3 = OSA.cHCO3of(pH1, pCO21,T1);
pH2 = pH1 + dpHdT1 * (T2 - T1);
dlgpCO2dT1 = (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
pCO22 = OSA.antilg(OSA.lg(pCO21) + dlgpCO2dT1*(T2 - T1));
dpHdT2 = ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of( pH2,pCO22,T2)) 
        + 1/(2.3*pCO22*OSA.aCO2of(T2))))/(1 + betaX*(1/(2.3 *OSA.cHCO3of(pH2,pCO22, T2)) 
        + 1/(2.3*pCO22*OSA.aCO2of(T2))));
HCO3_T2 = OSA.cHCO3of(pH22, pCO22,T2);
dpHdTmean = (dpHdT1 + dpHdT2) / 2;
pH22 = pH1 + dpHdTmean * (T2 - T1);
dlgpCO2dT2 = (-0.0026) - (-0.0092) - dpHdT2 + 1 / (2.3 * cHCO3) * (betaX * dpHdT2 + betaX * 0.016);
dlgpCO2dTmean = (dlgpCO2dT1 + dlgpCO2dT2) / 2;
y = OSA.antilg(OSA.lg(pCO21) + dlgpCO2dTmean*(T2 - T1));
")}));
      end pCO22of_eq;

      model pH2of_eq
       /*
function pH2of_eq
  input Real pH1;
  input Real T1;
  input Real T2;
  input Real cHb;
  input Real cAlb;
  input Real pCO21;
  output Real result;
protected 
  Real betaX;
  Real dpHdT1;
  Real pH2;
  Real cHCO3;
  Real dlgpCO2dT1;
  Real pCO22;
  Real dpHdT2;
  Real dpHdTmean;
  Real cAlbN = 0.66;
algorithm 
  betaX := 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
  dpHdT1 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
    pH1,
    pCO21,
    T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))))/(1 + betaX*(1/(2.3
    *OSA.cHCO3of(
    pH1,
    pCO21,
    T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))));
  pH2 := pH1 + dpHdT1 * (T2 - T1);
  cHCO3 := OSA.cHCO3of(
    pH1,
    pCO21,
    T1);
  dlgpCO2dT1 := (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
  pCO22 := OSA.antilg(OSA.lg(pCO21) +
    dlgpCO2dT1*(T2 - T1));
  dpHdT2 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
    pH2,
    pCO22,
    T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))))/(1 + betaX*(1/(2.3
    *OSA.cHCO3of(
    pH2,
    pCO22,
    T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))));
  dpHdTmean := (dpHdT1 + dpHdT2) / 2;
  result := pH1 + dpHdTmean * (T2 - T1);
 */
        Modelica.Blocks.Interfaces.RealInput pH1 annotation (Placement(transformation(
                extent={{-94,56},{-76,74}}),    iconTransformation(extent={{-118,-60},
                  {-100,-42}})));
        Modelica.Blocks.Interfaces.RealInput pCO21 annotation (Placement(
              transformation(extent={{-90,40},{-74,56}}),  iconTransformation(extent={{-118,72},
                  {-100,90}})));
        Modelica.Blocks.Interfaces.RealInput T1 annotation (Placement(transformation(
                extent={{-94,26},{-78,42}}), iconTransformation(extent={{-118,44},{-100,
                  62}})));
        Modelica.Blocks.Interfaces.RealInput T2 annotation (Placement(transformation(
                extent={{-100,-14},{-80,6}}),   iconTransformation(extent={{-118,20},{
                  -100,38}})));
        Modelica.Blocks.Interfaces.RealInput cHb annotation (Placement(transformation(
                extent={{-54,66},{-32,88}}),iconTransformation(extent={{-118,-8},{-100,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput cAlb annotation (Placement(
              transformation(extent={{-98,74},{-76,96}}),  iconTransformation(extent={
                  {-118,-34},{-100,-16}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{66,-6},{86,14}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
        cHCO3of_eq cHCO3of_1
          annotation (Placement(transformation(extent={{-60,34},{-36,58}})));
        cHCO3of_eq cHCO3of_2
          annotation (Placement(transformation(extent={{-58,2},{-34,26}})));
        aCO2of_eq aCO2of_1
          annotation (Placement(transformation(extent={{-20,18},{0,38}})));
        aCO2of_eq aCO2of_2
          annotation (Placement(transformation(extent={{-20,-20},{0,0}})));
        Real betaX;
        Real dpHdT1;
        Real pH2;
        Real cHCO3;
        Real dlgpCO2dT1;
        Real pCO22;
        Real dpHdT2;
        Real dpHdTmean;
        Real cAlbN = 0.66;
        Real HCO3_T2;
        Real aCO2_T1;
        Real aCO2_T2;
        Real x;
      equation
        //aCO2_T1=OSA.aCO2of(T1);
        aCO2_T1=aCO2of_1.y;
        //aCO2_T2=OSA.aCO2of(T2);
        aCO2_T2=aCO2of_2.y;
        //cHCO3 = OSA.cHCO3of(pH1,pCO21,T1);
        cHCO3=cHCO3of_1.HCO3p;
        //HCO3_T2=OSA.cHCO3of(pH2,pCO22,T2);
        cHCO3of_2.pH=pH2;
        cHCO3of_2.pCO2=pCO22;
        HCO3_T2=cHCO3of_2.HCO3p;

        betaX = 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;

        dpHdT1 = ((-0.0026) - betaX*0.016*(1/(2.3*cHCO3)
               + 1/(2.3*pCO21*aCO2_T1)))/(1 + betaX*(1/(2.3*cHCO3)
               + 1/(2.3*pCO21*aCO2_T1)));
        pH2 = pH1 + dpHdT1 * (T2 - T1);

        dlgpCO2dT1 =  (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
        //pCO22 = OSA.antilg(OSA.lg(pCO21) + dlgpCO2dT1*(T2 - T1));
        //pCO22 = OSA.antilg(log10(pCO21) + dlgpCO2dT1*(T2 - T1));
        //            antilg(x)=exp(log(10)*x)
        x=log10(pCO21) + dlgpCO2dT1*(T2 - T1);
        pCO22 =exp(log(10)*x);
        dpHdT2 = ((-0.0026) - betaX*0.016*(1/(2.3*HCO3_T2) + 1/(2.3*pCO22*aCO2_T2)))/(1 + betaX*(1/(2.3
          *HCO3_T2) + 1/(2.3*pCO22*aCO2_T2)));
        dpHdTmean = (dpHdT1 + dpHdT2) / 2;
        y = pH1 + dpHdTmean * (T2 - T1);
        connect(cHCO3of_1.pCO2, pCO21) annotation (Line(points={{-61.8,48.52},{-68.9,48.52},
                {-68.9,48},{-82,48}}, color={0,0,127}));
        connect(cHCO3of_1.T, T1) annotation (Line(points={{-61.8,43.24},{-70,43.24},{-70,
                34},{-86,34}}, color={0,0,127}));
        connect(cHCO3of_1.pH, pH1) annotation (Line(points={{-61.8,54.04},{-70,54.04},
                {-70,65},{-85,65}}, color={0,0,127}));
        connect(cHCO3of_2.T, T2) annotation (Line(points={{-59.8,11.24},{-74,11.24},{-74,
                -4},{-90,-4}}, color={0,0,127}));
        connect(aCO2of_1.T, T1) annotation (Line(points={{-21.4,29.6},{-70,29.6},{-70,
                34},{-86,34}}, color={0,0,127}));
        connect(aCO2of_2.T, T2) annotation (Line(points={{-21.4,-8.4},{-74,-8.4},{-74,
                -4},{-90,-4}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-98,-70},{100,-94}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                textString="pH2of_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{100,-104},{-100,-122}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-98,-38},{102,-58}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pH1"),
              Text(
                extent={{-98,-12},{102,-32}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="cAlb"),
              Text(
                extent={{-98,14},{102,-6}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="cHb"),
              Text(
                extent={{-98,42},{102,22}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T2"),
              Text(
                extent={{-98,66},{102,46}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T1"),
              Text(
                extent={{-98,94},{102,74}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pCO21")}), Diagram(graphics={Text(
                extent={{-96,-24},{94,-108}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                horizontalAlignment=TextAlignment.Left,
                textString="betaX = 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
dpHdT1 = ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(pH1, pCO21,T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))))/(1 + betaX*(1/(2.3
    *OSA.cHCO3of(pH1,pCO21,T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))));
pH2 = pH1 + dpHdT1 * (T2 - T1);
cHCO3 = OSA.cHCO3of(pH1,pCO21,T1);
dlgpCO2dT1 =  (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
pCO22 = OSA.antilg(OSA.lg(pCO21) + dlgpCO2dT1*(T2 - T1));
dpHdT2 = ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(pH2,pCO22,T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))))/(1 + betaX*(1/(2.3
    *OSA.cHCO3of(pH2,pCO22,T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))));
dpHdTmean = (dpHdT1 + dpHdT2) / 2;
y = pH1 + dpHdTmean * (T2 - T1);")}));
      end pH2of_eq;

      model CO2totalSI_eq
        /*
function CO2totalSI_eq "Calculation of blood total CO2 concentration"
  input Real pH "plasma pH at given temperature";
  input Real pCO2 "pCO2 at given temperatura in Pa";
  input Real T "temperature in K";
  input Real ctHb "Hemoglobin concentration in mmol/l";
  input Real sO2 "O2 hemoglobin saturation";
  output Real ctCO2B "Total blood CO2 concetratoin in mmol/l";
  output Real cHCO3 "plasma concentration of bicarbonate in mmol/l";
  output Real dCO2 "dissolved CO2 concentration in plasma";
protected 
  Real dpHEdpHP = 0.77;
  Real dpHEdsO2 = 0.035;
  Real pHEx = 7.84;
  Real sO2x = 0.06;
  Real aCO2E0 = 0.195;
  Real ctHbE = 21;
  Real pHE0 = 7.19;
  Real pKE0 = 6.125;
  Real pHT0;
  Real pCO2T0;
  Real pKE;
  Real pHE;
  Real ctCO2E;
  Real phiEB;
  Real T0 = 37;
  Real cAlbN = 0.66;
  Real cAlb;
  Real pH0 = 7.40;
  Real aCO2;
  Real tCO2p;
algorithm 
  // pCO2T0 := pCO22of (pCO2, T, T0, ctHb);
  cAlb := cAlbN;
  // albumin has minimal influence on total CO2 concentration
  pCO2T0 := OSA.pCO22of(
    pCO2/1000,
    T - 273.15,
    T0,
    ctHb,
    cAlb,
    pH);
  // pHT0 := pH2of (pH, T, T0, ctHb);
  pHT0 := OSA.pH2of(
    pH,
    T - 273.15,
    T0,
    ctHb,
    cAlb,
    pCO2);
  pHE := pHE0 + dpHEdpHP * (pHT0 - pH0) + dpHEdsO2 * (1 - sO2);
  //or : (pHE - 6.9) = alpha*(pHP - pH0), where alpha = 0.7 + f*(1 - sO2)
  pKE := pKE0 - OSA.lg(1 +
    OSA.antilg(pHE - pHEx - sO2x*sO2));
  ctCO2E := aCO2E0*pCO2T0*(1 + OSA.antilg(pHE - pKE));
  phiEB := ctHb / ctHbE;
  // !! !! it is hematokrit!!!!!!!
  //tCO2p := pCO2T0 * aCO2of(T0)*(1 + antilg(pHT0-pKof(T0)));
  aCO2 := OSA.aCO2of(T0);
  cHCO3 := aCO2*pCO2T0*OSA.antilg(pHT0 -
    OSA.pKof(T0));
  dCO2 := aCO2 * pCO2T0;
  ctCO2B := ctCO2E * phiEB + (dCO2 + cHCO3) * (1 - phiEB);
  //ctCO2B :=  ctCO2E*phiEB + ctCO2Pof( pHT0, pCO2T0, T0)*(1 - phiEB);
  //ctCO2B :=  ctCO2E*phiEB + tCO2p*(1 - phiEB);
  */

        Physiolibrary.Types.RealIO.pHInput pH annotation (Placement(transformation(
                extent={{-110,38},{-70,78}}),    iconTransformation(extent={{-120,76},
                  {-100,96}})));

        Physiolibrary.Types.RealIO.PressureInput pCO2 annotation (Placement(
              transformation(extent={{-62,12},{-22,52}}),    iconTransformation(
                extent={{-120,42},{-100,62}})));
        Physiolibrary.Types.RealIO.TemperatureInput T annotation (Placement(
              transformation(extent={{-104,10},{-64,50}}),  iconTransformation(extent=
                 {{-120,8},{-100,28}})));
        Physiolibrary.Types.RealIO.ConcentrationInput ctHb annotation (Placement(
              transformation(extent={{-76,36},{-36,76}}),   iconTransformation(extent=
                 {{-120,-26},{-100,-6}})));
        Physiolibrary.Types.RealIO.FractionInput sO2 annotation (Placement(
              transformation(extent={{-28,40},{12,80}}),      iconTransformation(
                extent={{-120,-60},{-100,-40}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2B annotation (Placement(
              transformation(extent={{34,56},{54,76}}), iconTransformation(extent={{100,
                  62},{120,82}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3 annotation (Placement(
              transformation(extent={{-34,64},{-14,84}}), iconTransformation(extent={{
                  100,10},{120,30}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput dCO2 annotation (Placement(
              transformation(extent={{-76,66},{-56,86}}), iconTransformation(extent={{
                  100,-38},{120,-18}})));

      /*             
  Real tCO2p;
 */
        Real T0 = 37;
        Real cAlb;
        Real cAlbN = 0.66;
        Real pHE;
        Real pHE0 = 7.19;
        Real pH0 = 7.40;
        Real dpHEdpHP = 0.77;
        Real pHT0;
        Real pKE;
        Real pKE0 = 6.125;
        Real dpHEdsO2 = 0.035;
        Real pHEx = 7.84;
        Real sO2x = 0.06;
        Real phiEB;
        Real ctCO2E;
        Real aCO2;
        Real pCO2T0;
        Real aCO2E0 = 0.195;
        Real ctHbE = 21;
        pH2of_eq pH2of
          annotation (Placement(transformation(extent={{-12,18},{8,38}})));
        pCO22of_eq pCO22of
          annotation (Placement(transformation(extent={{26,32},{46,52}})));
        aCO2of_eq aCO2of
          annotation (Placement(transformation(extent={{62,66},{82,86}})));
        pKof_eq pKof
          annotation (Placement(transformation(extent={{62,30},{82,50}})));
      equation

        cAlb = cAlbN;
        // albumin has minimal influence on total CO2 concentration
        /*
  pCO2T0 = OSA.pCO22of(
    pCO2/1000,
    T - 273.15,
    T0,
    ctHb,
    cAlb,
    pH);
  */
        pCO22of.pCO21=pCO2/1000;
        pCO22of.T1= T - 273.15;
        pCO22of.T2=T0;
        pCO22of.cHb=ctHb;
        pCO22of.cAlb=cAlb;
        pCO22of.pH1=pH;
        pCO2T0=pCO22of.y;

        // pHT0 = pH2of (pH, T, T0, ctHb);
        /*
  pHT0 = OSA.pH2of(
    pH,
    T - 273.15,
    T0,
    ctHb,
    cAlb,
    pCO2/1000);
  */

        pH2of.pH1=pH;
        pH2of.T1=T - 273.15;
        pH2of.T2=T0;
        pH2of.cHb=ctHb;
        pH2of.cAlb=cAlb;
        pH2of.pCO21=pCO2/1000;
        pHT0=pH2of.y;

        pHE = pHE0 + dpHEdpHP * (pHT0 - pH0) + dpHEdsO2 * (1 - sO2);
        //or  (pHE - 6.9) = alpha*(pHP - pH0), where alpha = 0.7 + f*(1 - sO2)
        //pKE = pKE0 - log10(1 +OSA.antilg(pHE - pHEx - sO2x*sO2));
        //                          antilg(x)=exp(log(10)*x)
        pKE = pKE0 - log10(1 +exp(log(10)*(pHE - pHEx - sO2x*sO2)));
        //ctCO2E = aCO2E0*pCO2T0*(1 + OSA.antilg(pHE - pKE));
        //                           antilg(x)=exp(log(10)*x)
        ctCO2E = aCO2E0*pCO2T0*(1 + exp(log(10)*(pHE - pKE)));

        phiEB = ctHb / ctHbE;
        // !! !! it is hematokrit!!!!!!!
        //tCO2p = pCO2T0 * aCO2of(T0)*(1 + antilg(pHT0-pKof(T0)));
        //aCO2 = OSA.aCO2of(T0);
        aCO2of.T=T0;
        aCO2=aCO2of.y;

        //cHCO3 = aCO2*pCO2T0*OSA.antilg(pHT0 - OSA.pKof(T0));
        //                           antilg(x)=exp(log(10)*x)
        pKof.T=T0;
        cHCO3 = aCO2*pCO2T0*exp(log(10)*(pHT0 - pKof.y));
        dCO2 = aCO2 * pCO2T0;
        ctCO2B = ctCO2E * phiEB + (dCO2 + cHCO3) * (1 - phiEB);
        //ctCO2B =  ctCO2E*phiEB + ctCO2Pof( pHT0, pCO2T0, T0)*(1 - phiEB);
        //ctCO2B =  ctCO2E*phiEB + tCO2p*(1 - phiEB);

        annotation (Icon(graphics={Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-98,96},{94,80}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                textString="pH",
                horizontalAlignment=TextAlignment.Left),
              Text(
                extent={{-96,62},{96,46}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pCO2"),
              Text(
                extent={{-96,28},{96,12}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T"),
              Text(
                extent={{-96,-6},{96,-22}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="ctHb"),
              Text(
                extent={{-96,-40},{96,-56}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="sO2"),
              Text(
                extent={{-96,80},{96,64}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="ctCO2B"),
              Text(
                extent={{-96,28},{96,12}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="cHCO3"),
              Text(
                extent={{-96,-20},{96,-36}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Right,
                textString="dCO2"),
              Text(
                extent={{-100,-70},{100,-94}},
                lineColor={28,108,200},
                textString="CO2totalSI_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-104,-102},{102,-118}},
                lineColor={28,108,200},
                textString="%name")}), Diagram(graphics={Text(
                extent={{-66,12},{136,-106}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Left,
                textString="pH2of.pH1=pH;
pH2of.T1=T - 273.15;
pH2of.T2=T0;
pH2of.cHb=ctHb;
pH2of.cAlb=cAlb;
pH2of.pCO21=pCO2/1000;
pHT0=pH2of.y;

pHE = pHE0 + dpHEdpHP * (pHT0 - pH0) + dpHEdsO2 * (1 - sO2);
pKE = pKE0 - log10(1 +exp(log(10)*(pHE - pHEx - sO2x*sO2)));
ctCO2E = aCO2E0*pCO2T0*(1 + exp(log(10)*(pHE - pKE)));
phiEB = ctHb / ctHbE;
aCO2of.T=T0;
aCO2=aCO2of.y;
pKof.T=T0;
cHCO3 = aCO2*pCO2T0*exp(log(10)*(pHT0 - pKof.y));
dCO2 = aCO2 * pCO2T0;
ctCO2B = ctCO2E * phiEB + (dCO2 + cHCO3) * (1 - phiEB);

")}));
      end CO2totalSI_eq;

      model pO2fr_eq
      /*  
function pO2fr_eq
  input Real sO2;
  input Real a;
  input Real T;
  input Real FCOHb;
  input Real FMetHb;
  output Real returnValue;
protected 
  Real pO2CO;
  Real sO2CO;
  Real ym;
  Real yc;
  Real dydxc;
  Real p0 = 7.0;
  Real dbdT = 0.055;
  Real T0 = 37;
  Boolean doit;
  Real Epsilon = 0.000001;
algorithm 
  pO2CO := exp(log(p0) + a + dbdT * (T - T0));
  sO2CO := sO2 + OSA.sCO(FCOHb, FMetHb)*(1 - sO2);
  ym := OSA.logit(sO2CO);
  doit := false;
  while not doit loop
    yc := OSA.y(
      pO2CO,
      a,
      T);
    dydxc := OSA.dydx(
      pO2CO,
      a,
      T);
    pO2CO := exp(log(pO2CO) + (ym - yc) / dydxc);
    doit := abs(ym - yc) < Epsilon;
  end while;
  returnValue := pO2CO - OSA.MpCOof(
    pO2CO,
    a,
    T,
    FCOHb,
    FMetHb);
    */

        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{78,26},{98,46}}),    iconTransformation(extent={{100,-10},{120,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput FMetHb annotation (Placement(
              transformation(extent={{-100,34},{-80,54}}), iconTransformation(extent={
                  {-128,-66},{-100,-38}})));
        Modelica.Blocks.Interfaces.RealInput FCOHb annotation (Placement(
              transformation(extent={{-100,66},{-80,86}}), iconTransformation(extent={
                  {-128,-32},{-100,-4}})));
        Modelica.Blocks.Interfaces.RealInput T annotation (Placement(transformation(
                extent={{-108,-74},{-82,-48}}),
                                              iconTransformation(extent={{-128,2},{-100,
                  30}})));
        Modelica.Blocks.Interfaces.RealInput a annotation (Placement(transformation(
                extent={{-108,-48},{-84,-24}}),
                                              iconTransformation(extent={{-128,36},{-100,
                  64}})));
        Modelica.Blocks.Interfaces.RealInput sO2 annotation (Placement(
              transformation(extent={{-70,88},{-60,98}}),   iconTransformation(
                extent={{-128,70},{-100,98}})));
        sCO_eq sCO annotation (Placement(transformation(extent={{-54,54},{-34,74}})));
        logit_eq logit annotation (Placement(transformation(extent={{0,6},{20,26}})));

        //Real p0 = 7.0;
        //Real T0 = 37;
        //Real dbdT = 0.055;

        //Real pO2COin;
        //Real sO2CO;
        //Real ym;

        y_eq y_
          annotation (Placement(transformation(extent={{-6,-40},{14,-20}})));
        dydx_eq dydx_
          annotation (Placement(transformation(extent={{-8,-68},{12,-48}})));
        Modelica.Blocks.Continuous.Integrator integrator
          annotation (Placement(transformation(extent={{-36,-14},{-20,2}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{76,-20},{96,0}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-60,-16},{-40,4}})));
        Modelica.Blocks.Math.Feedback feedback1
          annotation (Placement(transformation(extent={{22,8},{42,28}})));
        Modelica.Blocks.Math.Division division
          annotation (Placement(transformation(extent={{48,2},{68,22}})));
        Modelica.Blocks.Math.Log log
          annotation (Placement(transformation(extent={{48,-22},{60,-10}})));
        Modelica.Blocks.Math.Exp exp
          annotation (Placement(transformation(extent={{52,-88},{30,-66}})));
        MpCOof_eq mpCOof_eq
          annotation (Placement(transformation(extent={{16,44},{48,76}})));
        Modelica.Blocks.Math.Feedback feedback2
          annotation (Placement(transformation(extent={{54,46},{72,28}})));
        Modelica.Blocks.Math.Add add1
          annotation (Placement(transformation(extent={{-44,82},{-34,92}})));
        Modelica.Blocks.Sources.Constant const(k=-1)
          annotation (Placement(transformation(extent={{-58,78},{-50,86}})));
        Modelica.Blocks.Math.Product product1
          annotation (Placement(transformation(extent={{-24,78},{-16,86}})));
        Modelica.Blocks.Math.Add add2
          annotation (Placement(transformation(extent={{-12,80},{-2,90}})));
        Modelica.Blocks.Sources.Constant const1(k=37)
          annotation (Placement(transformation(extent={{-94,-98},{-86,-90}})));
        Modelica.Blocks.Math.Feedback feedback3
          annotation (Placement(transformation(extent={{-70,-92},{-60,-82}})));
        Modelica.Blocks.Math.Gain gain(k=0.055)
          annotation (Placement(transformation(extent={{-54,-94},{-44,-84}})));
        Modelica.Blocks.Math.Add3 add3_1
          annotation (Placement(transformation(extent={{-36,16},{-24,28}})));
        Modelica.Blocks.Math.Log log1
          annotation (Placement(transformation(extent={{-54,26},{-44,36}})));
        Modelica.Blocks.Sources.Constant const2(k=7)
          annotation (Placement(transformation(extent={{-68,28},{-60,36}})));
        Modelica.Blocks.Math.Exp exp1
          annotation (Placement(transformation(extent={{-56,6},{-64,14}})));
      equation
         // xx=Modelica.Math.log(p0) + a + dbdT * (T - T0);
          //pO2COin = Modelica.Math.exp(xx);
          //sO2CO = sO2 + OSA.sCO(FCOHb, FMetHb)*(1 - sO2);
          //sO2CO = sO2 + sCO.y*(1 - sO2);
          //ym = OSA.logit(sO2CO);

         // logit.x=sO2CO;
         // feedback.u1=pO2COin;

        connect(sCO.FCOHb, FCOHb) annotation (Line(points={{-55.6,71.2},{-60,71.2},{-60,
                76},{-90,76}}, color={0,0,127}));
        connect(sCO.FMetHb, FMetHb) annotation (Line(points={{-55.6,67.2},{-66,67.2},{
                -66,44},{-90,44}}, color={0,0,127}));
        connect(y_.a, a) annotation (Line(points={{-8,-30},{-50,-30},{-50,-36},{-96,-36}},
                            color={0,0,127}));
        connect(y_.T, T) annotation (Line(points={{-8,-36.6},{-50,-36.6},{-50,-61},{-95,
                -61}},           color={0,0,127}));
        connect(dydx_.a, a) annotation (Line(points={{-9.7,-55.7},{-46,-55.7},{-46,-30},
                {-50,-30},{-50,-36},{-96,-36}},          color={0,0,127}));
        connect(dydx_.T, T) annotation (Line(points={{-9.7,-60.5},{-50,-60.5},{-50,-61},
                {-95,-61}},          color={0,0,127}));
        connect(feedback.y, integrator.u)
          annotation (Line(points={{-41,-6},{-37.6,-6}},
                                                       color={0,0,127}));
        connect(y_.pO2CO, integrator.y) annotation (Line(points={{-8,-22.2},{-16,-22.2},
                {-16,-6},{-19.2,-6}},          color={0,0,127}));
        connect(dydx_.pO2CO, integrator.y) annotation (Line(points={{-9.7,-50.5},{-16,
                -50.5},{-16,-6},{-19.2,-6}},    color={0,0,127}));
        connect(y_.y, feedback1.u2) annotation (Line(points={{15,-30},{32,-30},{32,10}},
                          color={0,0,127}));
        connect(feedback1.y, division.u1)
          annotation (Line(points={{41,18},{46,18}}, color={0,0,127}));
        connect(dydx_.y, division.u2) annotation (Line(points={{13,-58},{34,-58},{34,6},
                {46,6}},          color={0,0,127}));
        connect(division.y, add.u1) annotation (Line(points={{69,12},{70,12},{70,-4},{
                74,-4}},       color={0,0,127}));
        connect(log.u, integrator.y) annotation (Line(points={{46.8,-16},{14,-16},{14,
                -6},{-19.2,-6}},   color={0,0,127}));
        connect(log.y, add.u2)
          annotation (Line(points={{60.6,-16},{74,-16}},
                                                       color={0,0,127}));
        connect(add.y, exp.u) annotation (Line(points={{97,-10},{98,-10},{98,-36},{62,
                -36},{62,-77},{54.2,-77}},    color={0,0,127}));
        connect(exp.y, feedback.u2) annotation (Line(points={{28.9,-77},{-58,-77},{-58,
                -22},{-50,-22},{-50,-14}},          color={0,0,127}));
        connect(mpCOof_eq.T, T) annotation (Line(points={{13.76,62.56},{-4,62.56},{-4,
                64},{-20,64},{-20,40},{-76,40},{-76,-61},{-95,-61}},
                                                              color={0,0,127}));
        connect(mpCOof_eq.a, a) annotation (Line(points={{13.76,68},{-24,68},{-24,42},
                {-78,42},{-78,-36},{-96,-36}},     color={0,0,127}));
        connect(mpCOof_eq.FCOHb, FCOHb) annotation (Line(points={{13.76,57.12},{-12,57.12},
                {-12,46},{-64,46},{-64,76},{-90,76}},         color={0,0,127}));
        connect(mpCOof_eq.FMetHb, FMetHb) annotation (Line(points={{13.76,51.68},{8,51.68},
                {8,44},{-90,44}},                             color={0,0,127}));
        connect(mpCOof_eq.y, feedback2.u2) annotation (Line(points={{49.6,60},{63,60},
                {63,44.2}},        color={0,0,127}));
        connect(feedback2.y, y) annotation (Line(points={{71.1,37},{74.55,37},{74.55,36},
                {88,36}},           color={0,0,127}));
        connect(feedback1.u1, logit.y) annotation (Line(points={{24,18},{22,18},{22,17.8},
                {20.2,17.8}},           color={0,0,127}));
        connect(feedback2.u1, integrator.y) annotation (Line(points={{55.8,37},{-16,37},
                {-16,-6},{-19.2,-6}},
                                    color={0,0,127}));
        connect(mpCOof_eq.pO2CO, integrator.y) annotation (Line(points={{13.76,73.44},
                {-16,73.44},{-16,-6},{-19.2,-6}},
                                                color={0,0,127}));
        connect(const.y, add1.u2) annotation (Line(points={{-49.6,82},{-46,82},{-46,84},
                {-45,84}}, color={0,0,127}));
        connect(add1.u1, sO2) annotation (Line(points={{-45,90},{-52,90},{-52,93},{-65,
                93}},      color={0,0,127}));
        connect(add1.y, product1.u1) annotation (Line(points={{-33.5,87},{-28,87},{-28,
                84.4},{-24.8,84.4}}, color={0,0,127}));
        connect(sCO.y, product1.u2) annotation (Line(points={{-33,63.8},{-32,63.8},{-32,
                79.6},{-24.8,79.6}}, color={0,0,127}));
        connect(product1.y, add2.u2)
          annotation (Line(points={{-15.6,82},{-13,82}}, color={0,0,127}));
        connect(add2.u1, sO2) annotation (Line(points={{-13,88},{-18,88},{-18,94},{-52,
                94},{-52,93},{-65,93}},    color={0,0,127}));
        connect(add2.y, logit.x) annotation (Line(points={{-1.5,85},{0,85},{0,32},{-8,
                32},{-8,17.4},{0.2,17.4}}, color={0,0,127}));
        connect(feedback3.u2, const1.y) annotation (Line(points={{-65,-91},{-65,-94},{
                -85.6,-94}}, color={0,0,127}));
        connect(feedback3.u1, T) annotation (Line(points={{-69,-87},{-76,-87},{-76,-61},
                {-95,-61}}, color={0,0,127}));
        connect(gain.u, feedback3.y) annotation (Line(points={{-55,-89},{-57.5,-89},{-57.5,
                -87},{-60.5,-87}}, color={0,0,127}));
        connect(const2.y, log1.u) annotation (Line(points={{-59.6,32},{-58,32},{-58,31},
                {-55,31}}, color={0,0,127}));
        connect(log1.y, add3_1.u1) annotation (Line(points={{-43.5,31},{-41.75,31},{-41.75,
                26.8},{-37.2,26.8}}, color={0,0,127}));
        connect(add3_1.u2, a) annotation (Line(points={{-37.2,22},{-78,22},{-78,-36},{
                -96,-36}}, color={0,0,127}));
        connect(gain.y, add3_1.u3) annotation (Line(points={{-43.5,-89},{-42,-89},{-42,
                -80},{-72,-80},{-72,17.2},{-37.2,17.2}}, color={0,0,127}));
        connect(exp1.u, add3_1.y) annotation (Line(points={{-55.2,10},{-20,10},{-20,22},
                {-23.4,22}}, color={0,0,127}));
        connect(exp1.y, feedback.u1) annotation (Line(points={{-64.4,10},{-70,10},{-70,
                -6},{-58,-6}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-98,-68},{100,-94}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                textString="pO2fr_eq",
                textStyle={TextStyle.Bold,TextStyle.Italic}),
              Text(
                extent={{-98,-42},{102,-62}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FMetHb"),
              Text(
                extent={{-98,-8},{102,-28}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="FCOHb"),
              Text(
                extent={{-98,26},{102,6}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T"),
              Text(
                extent={{-98,60},{108,28}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="a
"),           Text(
                extent={{-98,94},{102,74}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="sO2")}), Diagram(graphics={
              Text(
                extent={{-22,16},{0,12}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Right,
                textString="sO2CO"),
              Text(
                extent={{-24,0},{-2,-4}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Right,
                textString="pO2CO"),
              Text(
                extent={{-10,22},{12,18}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Right,
                textString="pO2CO"),
              Text(
                extent={{-6,80},{16,76}},
                lineColor={28,108,200},
                textString="pO2CO",
                horizontalAlignment=TextAlignment.Right),
              Text(
                extent={{0,24},{30,20}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Right,
                textString="um"),
              Text(
                extent={{0,-24},{30,-28}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Right,
                textString="yc"),
              Text(
                extent={{2,-52},{32,-56}},
                lineColor={28,108,200},
                horizontalAlignment=TextAlignment.Right,
                textString="dydxc")}));
      end pO2fr_eq;

      model plasmaCombinedFigge
        extends BaseBEINV;

        constant Real mmHgToPa(unit="1/Pa") = 1/133;
        constant Real albConversion=1000*10/66500;

       replaceable FullBloodAcidBase.PlasmaElectrochemical.PlasmaFiggeFencl3 plasma(
          SID=SID,
          pCO2=pCO2*mmHgToPa,
          Pi=cPi,
          alb=cAlb*albConversion)
          annotation (Placement(transformation(extent={{-20,20},{0,40}})));

        Real SID;
      Real BE=BEox;
      equation
      //  BEox = BE - 0.2*(1-sO2)*Hb;
        plasma.pH = pH;
        BE = SID - plasma.NSID;

      end plasmaCombinedFigge;

      model BloodABB_Physiomodel
        extends BloodABB_Base;
        Physiolibrary.Types.Constants.ConcentrationConst albumin1(k=
              modelSettings.cAlb)
          annotation (Placement(transformation(extent={{-64,2},{-56,10}})));
        Physiolibrary.Types.Constants.ConcentrationConst Phosphate1(k=
              modelSettings.cPi)
          annotation (Placement(transformation(extent={{-64,-24},{-56,-16}})));
        Package.BloodPhBase veinsPH(_cTHox(start=0), pH(start=7.37))
          annotation (Placement(transformation(extent={{26,-8},{-2,20}})));
        Package.BloodCO2Base bloodCO2Base
          annotation (Placement(transformation(extent={{14,-40},{34,-20}})));
        Physiolibrary.Types.Constants.FractionConst hct(k=modelSettings.ctHb/(
              33.34/6.65*4))
          annotation (Placement(transformation(extent={{68,-30},{60,-22}})));
        Physiolibrary.Types.Constants.MassConcentrationConst cGlob(k=34.16 - 10
              *(modelSettings.cAlb/(0.63/1.45) - 1.45))
          annotation (Placement(transformation(extent={{-64,-10},{-56,-2}})));
        Package.BloodO2Base bloodO2Base
          annotation (Placement(transformation(extent={{18,38},{-2,58}})));
        Physiolibrary.Types.Constants.ConcentrationConst dPG(k=modelSettings.cDPG)
          annotation (Placement(transformation(extent={{-62,50},{-54,58}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb(k=modelSettings.FMetHb)
          annotation (Placement(transformation(extent={{-50,46},{-42,54}})));
        Physiolibrary.Types.Constants.FractionConst FHbF(k=modelSettings.FHbF)
          annotation (Placement(transformation(extent={{-40,42},{-32,50}})));
        Physiolibrary.Types.Constants.PressureConst COpressure(k=133.322387415)
          annotation (Placement(transformation(extent={{-28,38},{-20,46}})));
        Physiolibrary.Types.Constants.FractionConst sO2(k=1)
          annotation (Placement(transformation(extent={{-30,-66},{-22,-58}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=modelSettings.ctHb)
          annotation (Placement(transformation(extent={{-28,-30},{-20,-22}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature1(k=
              modelSettings.Temperature)
          annotation (Placement(transformation(extent={{-64,-40},{-56,-32}})));
        outer Interfaces.ModelSettings modelSettings
          annotation (Placement(transformation(extent={{48,-80},{68,-60}})));
      equation
        connect(sO2.y, veinsPH.sO2) annotation (Line(points={{-21,-62},{-10,-62},
                {-10,-4},{3.6,-4},{3.6,21.4}}, color={0,0,127}));
        connect(veinsPH.cHCO3, bloodCO2Base.cHCO3) annotation (Line(points={{
                -0.6,17.2},{32,17.2},{32,-42}}, color={0,0,127}));
        connect(veinsPH.pH_ery, bloodCO2Base.pH_ery) annotation (Line(points={{
                9.2,-10.8},{9.2,-26},{15,-26}}, color={0,0,127}));
        connect(veinsPH.pH, bloodCO2Base.pH) annotation (Line(points={{14.8,
                -10.8},{16,-10.8},{16,-22},{15,-22}}, color={0,0,127}));
        connect(temperature1.y, bloodCO2Base.T) annotation (Line(points={{-55,
                -36},{-36,-36},{-36,-48},{28,-48},{28,-22},{33,-22}}, color={
                244,125,35}));
        connect(sO2.y, bloodCO2Base.sO2) annotation (Line(points={{-21,-62},{
                -10,-62},{-10,-30},{33,-30}}, color={0,0,127}));
        connect(hct.y, bloodCO2Base.Hct)
          annotation (Line(points={{59,-26},{33,-26}}, color={0,0,127}));
        connect(ctHb.y, veinsPH.ctHb) annotation (Line(points={{-19,-26},{-16,
                -26},{-16,11.6},{-0.6,11.6}}, color={0,0,127}));
        connect(albumin1.y, veinsPH.ctAlb)
          annotation (Line(points={{-55,6},{-0.6,6}}, color={0,0,127}));
        connect(veinsPH.ctGlb, cGlob.y) annotation (Line(points={{-0.6,0.4},{
                -46,0.4},{-46,-6},{-55,-6}}, color={0,0,127}));
        connect(Phosphate1.y, veinsPH.ctPO4) annotation (Line(points={{-55,-20},
                {-42,-20},{-42,-6},{-0.6,-6},{-0.6,-5.2}}, color={0,0,127}));
        connect(veinsPH.pH, bloodO2Base.pH) annotation (Line(points={{14.8,
                -10.8},{14.8,58},{17,58}}, color={0,0,127}));
        connect(bloodCO2Base.pCO2, bloodO2Base.pCO2) annotation (Line(points={{
                28,-42},{28,54},{17,54}}, color={0,0,127}));
        connect(temperature1.y, bloodO2Base.T) annotation (Line(points={{-55,
                -36},{-36,-36},{-36,50},{17,50}}, color={244,125,35}));
        connect(ctHb.y, bloodO2Base.ctHb) annotation (Line(points={{-19,-26},{
                -16,-26},{-16,58},{-1,58}}, color={0,0,127}));
        connect(dPG.y, bloodO2Base.cDPG)
          annotation (Line(points={{-53,54},{-1,54}}, color={0,0,127}));
        connect(fMetHb.y, bloodO2Base.FMetHb)
          annotation (Line(points={{-41,50},{-1,50}}, color={0,0,127}));
        connect(FHbF.y, bloodO2Base.FHbF)
          annotation (Line(points={{-31,46},{-1,46}}, color={0,0,127}));
        connect(COpressure.y, bloodO2Base.pCO)
          annotation (Line(points={{-19,42},{-1,42}}, color={0,0,127}));
        connect(cHCO3, bloodCO2Base.cHCO3) annotation (Line(points={{62,60},{62,
                -42},{32,-42}}, color={0,0,127}));
        connect(dCO2, bloodCO2Base.dCO2) annotation (Line(points={{62,100},{62,
                -56},{24,-56},{24,-42}}, color={0,0,127}));
        connect(tCO2_input, bloodCO2Base.tCO2_input) annotation (Line(points={{-18,100},
                {-18,20},{24,20},{24,-20}},         color={0,0,127}));
        connect(dO2, bloodO2Base.dO2) annotation (Line(points={{22,100},{22,30},
                {0,30},{0,36}}, color={0,0,127}));
        connect(tO2_input, bloodO2Base.tO2_input) annotation (Line(points={{-56,100},
                {-32,100},{-32,58},{8,58}},    color={0,0,127}));
        connect(_BEox, veinsPH._BEox) annotation (Line(points={{-96,100},{-96,
                20},{20.4,20}},
                            color={0,0,127}));
        annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})),
                                                                           Icon(
              coordinateSystem(extent={{-100,-80},{100,100}})));
      end BloodABB_Physiomodel;

      model BloodABB_Base
        Physiolibrary.Types.RealIO.ConcentrationInput _BEox annotation (
            Placement(transformation(rotation=0, extent={{-103,93},{-89,107}}),
              iconTransformation(extent={{-103,93},{-89,107}})));
        Physiolibrary.Types.RealIO.ConcentrationInput tO2_input annotation (
            Placement(transformation(rotation=0, extent={{-63,93},{-49,107}}),
              iconTransformation(extent={{-63,93},{-49,107}})));
        Physiolibrary.Types.RealIO.ConcentrationInput tCO2_input annotation (
            Placement(transformation(rotation=0, extent={{-25,93},{-11,107}}),
              iconTransformation(extent={{-25,93},{-11,107}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput dO2 annotation (
            Placement(transformation(rotation=0, extent={{15,93},{29,107}}),
              iconTransformation(extent={{15,93},{29,107}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput dCO2 annotation (
            Placement(transformation(rotation=0, extent={{55,93},{69,107}}),
              iconTransformation(extent={{55,93},{69,107}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit=
              "mmol/l") annotation (Placement(transformation(rotation=0, extent={{93,93},
                  {107,107}}),       iconTransformation(extent={{93,93},{107,
                  107}})));
      end BloodABB_Base;

      model BloodABB_OSA
        extends BloodABB_Base;
        O2CO2     o2CO2
          annotation (Placement(transformation(extent={{-38,-56},{38,44}})));
        Physiolibrary.Types.RealIO.pHOutput pH annotation (Placement(
              transformation(rotation=0, extent={{99,-1},{113,13}}),
              iconTransformation(extent={{93,-7},{107,7}})));
      equation
        connect(_BEox, o2CO2.BEox) annotation (Line(points={{-96,100},{-96,
                5.76471},{-39.9,5.76471}}, color={0,0,127}));
        connect(tO2_input, o2CO2.ctO2) annotation (Line(points={{-56,100},{-38,
                100},{-38,17.5294},{-39.9,17.5294}},color={0,0,127}));
        connect(tCO2_input, o2CO2.ctCO2) annotation (Line(points={{-18,100},{
                -18,11.6471},{-39.9,11.6471}},
                                           color={0,0,127}));
        connect(o2CO2.cdO2, dO2) annotation (Line(points={{39.9,-26.5882},{22,
                -26.5882},{22,100}},color={0,0,127}));
        connect(o2CO2.cdCO2, dCO2) annotation (Line(points={{39.9,-32.4706},{50,
                -32.4706},{50,100},{62,100}},
                                            color={0,0,127}));
        connect(o2CO2.cHCO3, cHCO3) annotation (Line(points={{39.9,-3.64706},{
                64,-3.64706},{64,-4},{88,-4},{88,100},{100,100}},
                                       color={0,0,127}));
        connect(o2CO2.pH, pH) annotation (Line(points={{39.9,2.23529},{69.95,
                2.23529},{69.95,6},{106,6}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,-100},{100,100}},
                lineColor={28,108,200},
                lineThickness=0.5,
                fillColor={255,170,213},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,0},{100,80}},
                lineColor={28,108,200},
                pattern=LinePattern.Dash,
                lineThickness=0.5,
                textString="OSA"),
              Text(
                extent={{-100,-100},{100,-20}},
                lineColor={28,108,200},
                pattern=LinePattern.Dash,
                lineThickness=0.5,
                textString="acid-base")}));
      end BloodABB_OSA;

      model pCO22of_eq_debug
      /*  
function pCO22of_eq
  input Real pCO21;
  input Real T1;
  input Real T2;
  input Real cHb;
  input Real cAlb;
  input Real pH1;
  output Real result;
protected 
  Real betaX;
  Real dpHdT1;
  Real pH2;
  Real cHCO3;
  Real dlgpCO2dT1;
  Real pCO22;
  Real dpHdT2;
  Real dlgpCO2dT2;
  Real dpHdTmean;
  Real dlgpCO2dTmean;
  Real cAlbN = 0.66;
algorithm 
  betaX := 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
  dpHdT1 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
    pH1,
    pCO21,
    T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))))/(1 + betaX*(1/(2.3
    *OSA.cHCO3of(
    pH1,
    pCO21,
    T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))));
  pH2 := pH1 + dpHdT1 * (T2 - T1);
  cHCO3 := OSA.cHCO3of(
    pH1,
    pCO21,
    T1);
  dlgpCO2dT1 := (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
  pCO22 := OSA.antilg(OSA.lg(pCO21) +
    dlgpCO2dT1*(T2 - T1));
  dpHdT2 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
    pH2,
    pCO22,
    T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))))/(1 + betaX*(1/(2.3
    *OSA.cHCO3of(
    pH2,
    pCO22,
    T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))));
  dpHdTmean := (dpHdT1 + dpHdT2) / 2;
  pH2 := pH1 + dpHdTmean * (T2 - T1);
  cHCO3 := OSA.cHCO3of(
    pH2,
    pCO22,
    T2);
  dlgpCO2dT2 := (-0.0026) - (-0.0092) - dpHdT2 + 1 / (2.3 * cHCO3) * (betaX * dpHdT2 + betaX * 0.016);
  dlgpCO2dTmean := (dlgpCO2dT1 + dlgpCO2dT2) / 2;
  result := OSA.antilg(OSA.lg(pCO21)
  + dlgpCO2dTmean*(T2 - T1));
  
*/
        Modelica.Blocks.Interfaces.RealInput pCO21 annotation (Placement(
              transformation(extent={{-100,22},{-84,38}}), iconTransformation(extent={{-118,72},
                  {-100,90}})));
        Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
                extent={{66,-6},{86,14}}),    iconTransformation(extent={{100,64},{120,
                  84}})));
        Modelica.Blocks.Interfaces.RealInput T1 annotation (Placement(transformation(
                extent={{-94,12},{-78,28}}), iconTransformation(extent={{-118,44},{-100,
                  62}})));
        Modelica.Blocks.Interfaces.RealInput T2 annotation (Placement(transformation(
                extent={{-44,40},{-24,60}}),    iconTransformation(extent={{-118,20},{
                  -100,38}})));
        Modelica.Blocks.Interfaces.RealInput cHb annotation (Placement(transformation(
                extent={{-54,66},{-26,94}}),iconTransformation(extent={{-118,-8},{-100,
                  10}})));
        Modelica.Blocks.Interfaces.RealInput cAlb annotation (Placement(
              transformation(extent={{-100,56},{-78,78}}), iconTransformation(extent={
                  {-118,-34},{-100,-16}})));
        Modelica.Blocks.Interfaces.RealInput pH1 annotation (Placement(transformation(
                extent={{-90,34},{-72,52}}),    iconTransformation(extent={{-118,-60},
                  {-100,-42}})));
        Real betaX;
        Real dpHdT1;
        Real pH2;
        Real pH22;
        Real cHCO3;
        Real dlgpCO2dT1;
        Real pCO22;
        Real dpHdT2;
        Real dlgpCO2dT2;
        Real dpHdTmean;
        Real dlgpCO2dTmean;
        Real aCO2_T1;
        Real x;
        Real xx;
        Real HCO3_T2;
        Real aCO2_T2;
        parameter Real cAlbN = 0.66;
        cHCO3of_eq cHCO3of_1
          annotation (Placement(transformation(extent={{-54,22},{-32,44}})));
        aCO2of_eq aCO2of_1
          annotation (Placement(transformation(extent={{-56,-6},{-36,14}})));
        cHCO3of_eq cHCO3of_2
          annotation (Placement(transformation(extent={{-4,50},{18,72}})));
        aCO2of_eq aCO2of_2
          annotation (Placement(transformation(extent={{-4,22},{16,42}})));
        Modelica.Blocks.Interfaces.RealOutput y_debug annotation (Placement(
              transformation(extent={{66,-6},{86,14}}), iconTransformation(extent={{100,
                  18},{120,38}})));
        Modelica.Blocks.Interfaces.RealOutput dpHdT1_eq  annotation (Placement(
              transformation(extent={{66,-6},{86,14}}), iconTransformation(extent={{100,-6},
                  {120,14}})));
        Modelica.Blocks.Interfaces.RealOutput dpHdT1_debug annotation (Placement(
              transformation(extent={{66,-6},{86,14}}), iconTransformation(extent={{100,
                  -30},{120,-10}})));
        Modelica.Blocks.Interfaces.RealOutput pH2_eq annotation (Placement(
              transformation(extent={{66,-6},{86,14}}), iconTransformation(extent={{100,-60},
                  {120,-40}})));
        Modelica.Blocks.Interfaces.RealOutput pH2_debug    annotation (Placement(
              transformation(extent={{66,-6},{86,14}}), iconTransformation(extent={{100,-84},
                  {120,-64}})));
      equation
        betaX = 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;

        //cHCO3 = OSA.cHCO3of(pH1, pCO21,T1);
        cHCO3 = cHCO3of_1.HCO3p;
        //cHCO3_eq=cHCO3;

        //aCO2_T1=aCO2of_1(T1);
        aCO2_T1=aCO2of_1.y;
        dpHdT1 = ((-0.0026) - betaX*0.016*(1/(2.3*cHCO3)
        + 1/(2.3*pCO21*aCO2_T1)))/(1 + betaX*(1/(2.3
          *cHCO3) + 1/(2.3*pCO21*aCO2_T1)));
        dpHdT1_eq=dpHdT1;
        pH2 = pH1 + dpHdT1 * (T2 - T1);
        pH2_eq=pH2;

        dlgpCO2dT1 = (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
        //pCO22 = OSA.antilg(OSA.lg(pCO21) + dlgpCO2dT1*(T2 - T1));
        x=log10(pCO21) + dlgpCO2dT1*(T2 - T1);
        //antilg(x)=exp(log(10) * x);
        pCO22=exp(log(10)*x);

        //HCO3_T2 = OSA.cHCO3of(pH22, pCO22,T2);
        cHCO3of_2.pH=pH22;
        cHCO3of_2.pCO2=pCO22;
        HCO3_T2=cHCO3of_2.HCO3p;

        //aCO2_T2=OSA.aCO2of(T2);
        aCO2_T2=aCO2of_2.y;

        dpHdT2 = ((-0.0026) - betaX*0.016*(1/(2.3*
        HCO3_T2) + 1/(2.3*pCO22*aCO2_T2)))/(1 + betaX*(1/(2.3*
        HCO3_T2) + 1/(2.3*pCO22*aCO2_T2)));
        // OSA.cHCO3of( pH2,pCO22,T2)
        //OSA.cHCO3of(pH2,pCO22,T2)
        dpHdTmean = (dpHdT1 + dpHdT2) / 2;
        pH22 = pH1 + dpHdTmean * (T2 - T1);

        dlgpCO2dT2 = (-0.0026) - (-0.0092) - dpHdT2 + 1 / (2.3 * cHCO3) * (betaX * dpHdT2 + betaX * 0.016);
        dlgpCO2dTmean = (dlgpCO2dT1 + dlgpCO2dT2) / 2;

        //y = OSA.antilg(log10(pCO21)+ dlgpCO2dTmean*(T2 - T1));
        xx=log10(pCO21)+ dlgpCO2dTmean*(T2 - T1);
        //y=OSA.antilg(xx);
        y=exp(log(10)*xx);

        (y_debug,dpHdT1_debug,pH2_debug) =  pCO22of_debug(pCO21,T1,T2,cHb,cAlb,pH1);
        connect(T1, cHCO3of_1.T) annotation (Line(points={{-86,20},{-68,20},{-68,30.47},
                {-55.65,30.47}}, color={0,0,127}));
        connect(pCO21, cHCO3of_1.pCO2) annotation (Line(points={{-92,30},{-72,30},{-72,
                35.31},{-55.65,35.31}}, color={0,0,127}));
        connect(pH1, cHCO3of_1.pH) annotation (Line(points={{-81,43},{-66,43},{-66,40.37},
                {-55.65,40.37}}, color={0,0,127}));
        connect(aCO2of_1.T, cHCO3of_1.T) annotation (Line(points={{-57.4,5.6},{-68,5.6},
                {-68,30.47},{-55.65,30.47}}, color={0,0,127}));
        connect(cHCO3of_2.T, T2) annotation (Line(points={{-5.65,58.47},{-20.825,58.47},
                {-20.825,50},{-34,50}}, color={0,0,127}));
        connect(aCO2of_2.T, T2) annotation (Line(points={{-5.4,33.6},{-20,33.6},{-20,50},
                {-34,50}}, color={0,0,127}));
        annotation (Icon(graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-98,94},{102,74}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pCO21"),
              Text(
                extent={{-98,66},{102,46}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T1"),
              Text(
                extent={{-98,42},{102,22}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="T2"),
              Text(
                extent={{-98,14},{102,-6}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="cHb"),
              Text(
                extent={{-98,-12},{102,-32}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="cAlb"),
              Text(
                extent={{-98,-38},{102,-58}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.None,
                horizontalAlignment=TextAlignment.Left,
                textString="pH1"),
              Text(
                extent={{-100,-70},{100,-94}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                textString="pCO22of_eq"),
              Text(
                extent={{-100,-102},{102,-122}},
                lineColor={28,108,200},
                textString="%name")}),      Diagram(graphics={Text(
                extent={{-90,-28},{74,-92}},
                lineColor={28,108,200},
                fillColor={255,213,170},
                fillPattern=FillPattern.Solid,
                horizontalAlignment=TextAlignment.Left,
                textString="betaX = 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
dpHdT1 = ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(pH1,pCO21,T1))
           + 1/(2.3*pCO21*OSA.aCO2of(T1))))/(1 + betaX*(1/(2.3 *OSA.cHCO3of(pH1,pCO21,T1)) 
           + 1/(2.3*pCO21*OSA.aCO2of(T1))));
cHCO3 = OSA.cHCO3of(pH1, pCO21,T1);
pH2 = pH1 + dpHdT1 * (T2 - T1);
dlgpCO2dT1 = (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
pCO22 = OSA.antilg(OSA.lg(pCO21) + dlgpCO2dT1*(T2 - T1));
dpHdT2 = ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of( pH2,pCO22,T2)) 
        + 1/(2.3*pCO22*OSA.aCO2of(T2))))/(1 + betaX*(1/(2.3 *OSA.cHCO3of(pH2,pCO22, T2)) 
        + 1/(2.3*pCO22*OSA.aCO2of(T2))));
HCO3_T2 = OSA.cHCO3of(pH22, pCO22,T2);
dpHdTmean = (dpHdT1 + dpHdT2) / 2;
pH22 = pH1 + dpHdTmean * (T2 - T1);
dlgpCO2dT2 = (-0.0026) - (-0.0092) - dpHdT2 + 1 / (2.3 * cHCO3) * (betaX * dpHdT2 + betaX * 0.016);
dlgpCO2dTmean = (dlgpCO2dT1 + dlgpCO2dT2) / 2;
y = OSA.antilg(OSA.lg(pCO21) + dlgpCO2dTmean*(T2 - T1));
")}));
      end pCO22of_eq_debug;

      function pCO22of_debug
        input Real pCO21;
        input Real T1;
        input Real T2;
        input Real cHb;
        input Real cAlb;
        input Real pH1;
        output Real result;
        output Real dpHdT1;
        output Real pH2;

      protected
        Real betaX;
        //Real dpHdT1;
        //Real pH2;
        Real cHCO3;
        Real dlgpCO2dT1;
        Real pCO22;
        Real dpHdT2;
        Real dlgpCO2dT2;
        Real dpHdTmean;
        Real dlgpCO2dTmean;
        Real cAlbN = 0.66;
      algorithm
        betaX := 7.7 + 8 * (cAlb - cAlbN) + 2.3 * cHb;
        dpHdT1 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
                pH1,
                pCO21,
                T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))))/(1 + betaX*(1/(2.3*
          OSA.cHCO3of(
                pH1,
                pCO21,
                T1)) + 1/(2.3*pCO21*OSA.aCO2of(T1))));
        pH2 := pH1 + dpHdT1 * (T2 - T1);
        cHCO3 := OSA.cHCO3of(
                pH1,
                pCO21,
                T1);

        dlgpCO2dT1 := (-0.0026) - (-0.0092) - dpHdT1 + 1 / (2.3 * cHCO3) * (betaX * dpHdT1 + betaX * 0.016);
        pCO22 := OSA.antilg(OSA.lg(pCO21) + dlgpCO2dT1*(T2 - T1));
        dpHdT2 := ((-0.0026) - betaX*0.016*(1/(2.3*OSA.cHCO3of(
                pH2,
                pCO22,
                T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))))/(1 + betaX*(1/(2.3*
          OSA.cHCO3of(
                pH2,
                pCO22,
                T2)) + 1/(2.3*pCO22*OSA.aCO2of(T2))));
        dpHdTmean := (dpHdT1 + dpHdT2) / 2;
        pH2 := pH1 + dpHdTmean * (T2 - T1);
        cHCO3 := OSA.cHCO3of(
                pH2,
                pCO22,
                T2);
        dlgpCO2dT2 := (-0.0026) - (-0.0092) - dpHdT2 + 1 / (2.3 * cHCO3) * (betaX * dpHdT2 + betaX * 0.016);
        dlgpCO2dTmean := (dlgpCO2dT1 + dlgpCO2dT2) / 2;
        result := OSA.antilg(OSA.lg(pCO21) + dlgpCO2dTmean*(T2 - T1));
      end pCO22of_debug;

      package testOsa
        model TestpCO22of
          pCO22of_eq_debug pCO22of_eq_debug1
            annotation (Placement(transformation(extent={{-22,2},{48,72}})));
          Modelica.Blocks.Sources.Constant pCO21(k=4.66628)
            annotation (Placement(transformation(extent={{-86,52},{-66,72}})));
          Modelica.Blocks.Sources.Constant T1(k=38)
            annotation (Placement(transformation(extent={{-92,20},{-72,40}})));
          Modelica.Blocks.Sources.Constant T2(k=37)
            annotation (Placement(transformation(extent={{-94,-10},{-74,10}})));
          Modelica.Blocks.Sources.Constant cHB(k=8.4) annotation (Placement(
                transformation(extent={{-88,-42},{-68,-22}})));
          Modelica.Blocks.Sources.Constant cAlb(k=0.66) annotation (Placement(
                transformation(extent={{-86,-72},{-66,-52}})));
          Modelica.Blocks.Sources.Constant pH1(k=7.2) annotation (Placement(
                transformation(extent={{-82,-100},{-62,-80}})));
        equation
          connect(pH1.y, pCO22of_eq_debug1.pH1) annotation (Line(points={{-61,
                  -90},{-42,-90},{-42,19.15},{-25.15,19.15}}, color={0,0,127}));
          connect(cAlb.y, pCO22of_eq_debug1.cAlb) annotation (Line(points={{-65,
                  -62},{-46,-62},{-46,28.25},{-25.15,28.25}}, color={0,0,127}));
          connect(cHB.y, pCO22of_eq_debug1.cHb) annotation (Line(points={{-67,
                  -32},{-48,-32},{-48,37.35},{-25.15,37.35}}, color={0,0,127}));
          connect(T2.y, pCO22of_eq_debug1.T2) annotation (Line(points={{-73,0},
                  {-50,0},{-50,47.15},{-25.15,47.15}}, color={0,0,127}));
          connect(T1.y, pCO22of_eq_debug1.T1) annotation (Line(points={{-71,30},
                  {-50,30},{-50,55.55},{-25.15,55.55}}, color={0,0,127}));
          connect(pCO21.y, pCO22of_eq_debug1.pCO21) annotation (Line(points={{
                  -65,62},{-46,62},{-46,65.35},{-25.15,65.35}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
        end TestpCO22of;

        model TestCO2total
          CO2totalSI_eq cO2totalSI_eq
            annotation (Placement(transformation(extent={{-10,8},{58,76}})));
          ctCO2content ctCO2content1
            annotation (Placement(transformation(extent={{-22,-78},{46,-12}})));
          inner Interfaces.ModelSettings modelSettings(Temperature=312.15)
            annotation (Placement(transformation(extent={{-96,78},{-76,98}})));
          Physiolibrary.Types.Constants.PressureConst pressure(k=3599.704460205)
            annotation (Placement(transformation(extent={{-82,34},{-74,42}})));
          Physiolibrary.Types.Constants.pHConst pH(k=7.2)
            annotation (Placement(transformation(extent={{-78,-12},{-70,-4}})));
          Physiolibrary.Types.Constants.FractionConst fraction(k=0.68)
            annotation (Placement(transformation(extent={{-86,-68},{-78,-60}})));
          Physiolibrary.Types.Constants.ConcentrationConst concentration(k=8.4)
            annotation (Placement(transformation(extent={{-64,70},{-56,78}})));
          Physiolibrary.Types.Constants.TemperatureConst temperature(k=312.15)
            annotation (Placement(transformation(extent={{-86,8},{-78,16}})));
        equation
          connect(pH.y, ctCO2content1.pH) annotation (Line(points={{-69,-8},{-48,-8},{-48,
                  -31.8},{-25.4,-31.8}}, color={0,0,127}));
          connect(cO2totalSI_eq.pH, ctCO2content1.pH) annotation (Line(points={{-13.4,71.24},
                  {-48,71.24},{-48,-31.8},{-25.4,-31.8}}, color={0,0,127}));
          connect(pressure.y, cO2totalSI_eq.pCO2) annotation (Line(points={{-73,38},{-44,
                  38},{-44,59.68},{-13.4,59.68}}, color={0,0,127}));
          connect(ctCO2content1.pCO2, cO2totalSI_eq.pCO2) annotation (Line(points={{-25.4,
                  -18.6},{-44,-18.6},{-44,59.68},{-13.4,59.68}}, color={0,0,127}));
          connect(fraction.y, ctCO2content1.sO2) annotation (Line(points={{-77,-64},{-52,
                  -64},{-52,-71.4},{-25.4,-71.4}}, color={0,0,127}));
          connect(cO2totalSI_eq.sO2, ctCO2content1.sO2) annotation (Line(points={{-13.4,
                  25},{-42,25},{-42,-72},{-25.4,-71.4}}, color={0,0,127}));
          connect(cO2totalSI_eq.ctHb, concentration.y) annotation (Line(points={{-13.4,36.56},
                  {-34,36.56},{-34,74},{-55,74}}, color={0,0,127}));
          connect(temperature.y, cO2totalSI_eq.T) annotation (Line(points={{-77,12},{-60,
                  12},{-60,48.12},{-13.4,48.12}}, color={0,0,127}));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end TestCO2total;
      end testOsa;

      model AlvEq_dummy

        Physiolibrary.Types.RealIO.ConcentrationInput CvO2 annotation (Placement(
              transformation(extent={{-164,99},{-148,116}}),
                                                          iconTransformation(extent={{-202,10},
                  {-190,22}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CvCO2 annotation (Placement(
              transformation(extent={{-166,84},{-148,102}}),
                                                          iconTransformation(extent={{-202,-2},
                  {-190,10}})));
        Physiolibrary.Types.RealIO.PressureOutput PAO2 annotation (Placement(
              transformation(extent={{136,108},{146,119}}),
                                                        iconTransformation(extent={{240,76},
                  {254,90}})));
        Physiolibrary.Types.RealIO.PressureOutput PACO2 annotation (Placement(
              transformation(extent={{136,92},{146,102}}),
                                                        iconTransformation(extent={{240,54},
                  {254,68}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation (Placement(
              transformation(extent={{-166,114},{-148,132}}),
                                                           iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,40})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation (Placement(
              transformation(extent={{-166,62},{-150,78}}),iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,52})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput VAe annotation (Placement(
              transformation(extent={{120,54},{134,68}}), iconTransformation(
                extent={{240,-94},{256,-78}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
              transformation(extent={{130,16},{142,28}}), iconTransformation(
                extent={{240,-18},{256,-2}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
              transformation(extent={{130,8},{140,18}}),  iconTransformation(
                extent={{240,-36},{256,-20}})));

        Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={168,-80}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,6})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={167,-48}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,28})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={167,-28}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,-68})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation(Placement(transformation(extent = {{7.5, -7}, {-7.5, 7}}, rotation = 180, origin={167.5,
                  -10}),                                                                                                    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,-46})));
        Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4) annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={118,84}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={250,46})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent={{-168,43},
                  {-150,61}}),                                                                                                          iconTransformation(extent={{-210,70},
                  {-190,90}})));
        Physiolibrary.Types.Constants.PressureConst pressure(k=0)
          annotation (Placement(transformation(extent={{78,110},{86,118}})));
        Physiolibrary.Types.Constants.pHConst pH1(k=7.4)
          annotation (Placement(transformation(extent={{78,80},{86,88}})));
        Physiolibrary.Types.Constants.ConcentrationConst concentration(k=0)
          annotation (Placement(transformation(extent={{82,-34},{90,-26}})));
        Physiolibrary.Types.Constants.FractionConst fraction(k=0.01)
          annotation (Placement(transformation(extent={{82,-86},{90,-78}})));
        Physiolibrary.Types.Constants.MolarFlowRateConst molarFlowRate(k=0)
          annotation (Placement(transformation(extent={{80,14},{88,22}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst volumeFlowRate(k=0)
          annotation (Placement(transformation(extent={{80,58},{88,66}})));
      initial equation

      equation

        connect(PAO2, pressure.y) annotation (Line(points={{141,113.5},{114.5,
                113.5},{114.5,114},{87,114}}, color={0,0,127}));
        connect(PACO2, pressure.y) annotation (Line(points={{141,97},{112,97},{
                112,114},{87,114}}, color={0,0,127}));
        connect(pH1.y, pH)
          annotation (Line(points={{87,84},{118,84}}, color={0,0,127}));
        connect(concentration.y, ctO2) annotation (Line(points={{91,-30},{128,
                -30},{128,-10},{167.5,-10}}, color={0,0,127}));
        connect(concentration.y, ctCO2) annotation (Line(points={{91,-30},{128,
                -30},{128,-28},{167,-28}}, color={0,0,127}));
        connect(cHCO3, ctCO2) annotation (Line(points={{167,-48},{128,-48},{128,
                -28},{167,-28}}, color={0,0,127}));
        connect(fraction.y, sO2) annotation (Line(points={{91,-82},{132,-82},{
                132,-80},{168,-80}}, color={0,0,127}));
        connect(molarFlowRate.y, VO2) annotation (Line(points={{89,18},{106,18},
                {106,22},{136,22}}, color={0,0,127}));
        connect(VCO2, VO2) annotation (Line(points={{135,13},{106,13},{106,22},
                {136,22}}, color={0,0,127}));
        connect(volumeFlowRate.y, VAe) annotation (Line(points={{89,62},{104,62},
                {104,61},{127,61}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -180},{260,140}}),
                         graphics={
              Rectangle(
                extent={{-198,140},{248,-178}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-226,36},{288,-8}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                textString="AlvEq_dummy"),
              Text(
                extent={{-24,6},{24,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-160,14},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvO2"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,4},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvCO2"),
              Text(
                extent={{-51,5},{51,-5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={183,-49},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CpcO2"),
              Text(
                extent={{-52,9.5},{52,-9.5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={182,-69.5},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CpcCO2"),
              Text(
                extent={{136,14},{234,2}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="sO2pc"),
              Text(
                extent={{140,36},{234,16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="HCO3pc"),
              Text(
                extent={{118,52},{234,40}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="pHpc"),
              Text(
                extent={{142,72},{234,56}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PACO2"),
              Text(
                extent={{134,86},{234,78}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PAO2"),
              Text(
                extent={{-184,42},{-148,36}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Q"),
              Text(
                extent={{-184,56},{-138,50}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="VAi"),
              Text(
                extent={{168,-82},{234,-92}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VA"),
              Text(
                extent={{132,-6},{234,-16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VO2"),
              Text(
                extent={{112,-24},{234,-34}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VCO2"),
              Text(
                extent={{-186,82},{-140,76}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="BEox")}),
                                    Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-180},{260,140}})));
      end AlvEq_dummy;

      model AlvEq_with_shunts

        Physiolibrary.Types.RealIO.ConcentrationInput CvO2 annotation (Placement(
              transformation(extent={{-126,1},{-110,18}}),iconTransformation(extent={{-202,10},
                  {-190,22}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CvCO2 annotation (Placement(
              transformation(extent={{-136,-30},{-118,-12}}),
                                                          iconTransformation(extent={{-202,-2},
                  {-190,10}})));
        Physiolibrary.Types.RealIO.PressureOutput PAO2 annotation (Placement(
              transformation(extent={{74,42},{84,53}}), iconTransformation(extent={{260,76},
                  {274,90}})));
        Physiolibrary.Types.RealIO.PressureOutput PACO2 annotation (Placement(
              transformation(extent={{80,32},{90,42}}), iconTransformation(extent={{260,54},
                  {274,68}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation (Placement(
              transformation(extent={{-186,102},{-168,120}}),
                                                           iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,40})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation (Placement(
              transformation(extent={{-166,24},{-150,40}}),iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,52})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput VAe annotation (Placement(
              transformation(extent={{64,-48},{78,-34}}), iconTransformation(
                extent={{260,-94},{276,-78}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
              transformation(extent={{74,-10},{86,2}}),   iconTransformation(
                extent={{260,-18},{276,-2}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
              transformation(extent={{100,-16},{110,-6}}),iconTransformation(
                extent={{260,-36},{276,-20}})));

        Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={104,8}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={270,6})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
          "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={95,18}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={270,28})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={141,-42}),   iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={270,-68})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation(Placement(transformation(extent = {{7.5, -7}, {-7.5, 7}}, rotation = 180, origin={139.5,
                  -22}),                                                                                                    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={270,-46})));
        Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4) annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={86,28}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={270,46})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent={{-132,39},
                  {-114,57}}),                                                                                                          iconTransformation(extent={{-210,70},
                  {-190,90}})));
        AlvEq alvEq annotation (Placement(transformation(extent={{-90,-90},{50,78}})));

      //   Physiolibrary.Types.RealIO.FractionInput Fsh "shunt fraction" annotation (
      //       Placement(transformation(extent={{-202,-76},{-162,-36}}),
      //         iconTransformation(extent={{-206,-48},{-188,-30}})));

        Physiolibrary.Types.VolumeFlowRate Qsh=Q*modelSettings.lungShuntFraction;
        Physiolibrary.Types.VolumeFlowRate Qpulm=Q-Qsh;
        outer
        Interfaces.ModelSettings modelSettings
          annotation (Placement(transformation(extent={{-200,120},{-180,140}})));
      initial equation

      equation

        alvEq.Q=Qpulm;
        alvEq.ctO2*Qpulm+CvO2*Qsh=Q*ctO2;
        alvEq.ctCO2*Qpulm+CvCO2*Qsh=Q*ctCO2;

        connect(alvEq.BEox, BEox) annotation (Line(points={{-90,46.5},{-104,46.5},{-104,
                48},{-123,48}}, color={0,0,127}));
        connect(alvEq.VAi, VAi) annotation (Line(points={{-88.7826,31.8},{-120.391,31.8},
                {-120.391,32},{-158,32}}, color={0,0,127}));
        connect(CvO2, alvEq.CvO2) annotation (Line(points={{-118,9.5},{-103,9.5},{-103,
                12.9},{-88.7826,12.9}}, color={0,0,127}));
        connect(alvEq.CvCO2, CvCO2) annotation (Line(points={{-88.7826,6.6},{-104,6.6},
                {-104,-21},{-127,-21}}, color={0,0,127}));
        connect(alvEq.PAO2, PAO2) annotation (Line(points={{46.0435,48.075},{
                61.0217,48.075},{61.0217,47.5},{79,47.5}},
                                           color={0,0,127}));
        connect(alvEq.PACO2, PACO2) annotation (Line(points={{46.0435,36.525},{
                64.0217,36.525},{64.0217,37},{85,37}},
                                               color={0,0,127}));
        connect(alvEq.pH, pH) annotation (Line(points={{46.9565,28.65},{63.4783,
                28.65},{63.4783,28},{86,28}},
                                       color={0,0,127}));
        connect(alvEq.cHCO3, cHCO3) annotation (Line(points={{46.9565,19.2},{
                68.4783,19.2},{68.4783,18},{95,18}},
                                       color={0,0,127}));
        connect(alvEq.sO2, sO2) annotation (Line(points={{46.9565,7.65},{
                72.4783,7.65},{72.4783,8},{104,8}},
                                      color={0,0,127}));
        connect(alvEq.VAe, VAe) annotation (Line(points={{46.3478,-40.65},{
                55.1739,-40.65},{55.1739,-41},{71,-41}},
                                         color={0,0,127}));
        connect(alvEq.VO2, VO2) annotation (Line(points={{46.3478,-0.75},{
                61.1739,-0.75},{61.1739,-4},{80,-4}},
                                       color={0,0,127}));
        connect(alvEq.VCO2, VCO2) annotation (Line(points={{46.3478,-10.2},{
                73.1739,-10.2},{73.1739,-11},{105,-11}},
                                          color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -180},{260,140}}),
                         graphics={
              Rectangle(
                extent={{-200,140},{258,-180}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-76,48},{124,-122}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                textString="AlvEq
with
shunts"),     Text(
                extent={{-24,6},{24,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-160,14},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvO2"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,4},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvCO2"),
              Text(
                extent={{-51,5},{51,-5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={203,-49},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CtO2"),
              Text(
                extent={{-52,9.5},{52,-9.5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={202,-69.5},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CtCO2"),
              Text(
                extent={{156,14},{254,2}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="sO2pc"),
              Text(
                extent={{160,36},{254,16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="HCO3pc"),
              Text(
                extent={{138,52},{254,40}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="pHpc"),
              Text(
                extent={{162,72},{254,56}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PACO2"),
              Text(
                extent={{154,86},{254,78}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PAO2"),
              Text(
                extent={{-184,42},{-148,36}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Q"),
              Text(
                extent={{-184,56},{-138,50}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="VAi"),
              Text(
                extent={{188,-82},{254,-92}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VA"),
              Text(
                extent={{152,-6},{254,-16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VO2"),
              Text(
                extent={{132,-24},{254,-34}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VCO2"),
              Text(
                extent={{-186,82},{-140,76}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="BEox"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-144,-40},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Fsh")}),Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-180},{260,140}})));
      end AlvEq_with_shunts;

      model AlvEq_2units_with_shunts

        Physiolibrary.Types.RealIO.ConcentrationInput CvO2 annotation (Placement(
              transformation(extent={{-170,33},{-154,50}}),
                                                          iconTransformation(extent={{-202,10},
                  {-190,22}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CvCO2 annotation (Placement(
              transformation(extent={{-172,-26},{-154,-8}}),
                                                          iconTransformation(extent={{-202,-2},
                  {-190,10}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation (Placement(
              transformation(extent={{-198,106},{-180,124}}),
                                                           iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,40})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation (Placement(
              transformation(extent={{-194,32},{-178,48}}),iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,52})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput VAe annotation (Placement(
              transformation(extent={{216,-68},{230,-54}}),
                                                          iconTransformation(
                extent={{260,-94},{276,-78}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
              transformation(extent={{194,12},{206,24}}), iconTransformation(
                extent={{260,-18},{276,-2}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
              transformation(extent={{198,-38},{208,-28}}),
                                                          iconTransformation(
                extent={{260,-36},{276,-20}})));

        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={205,44}),    iconTransformation(extent={{-8,-8},
                  {8,8}},                                                                                                                                                                                            rotation = 0, origin={268,-70})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation(Placement(transformation(extent = {{7.5, -7}, {-7.5, 7}}, rotation = 180, origin={207.5,80}),
                                                                                                                            iconTransformation(extent={{-8,-8},
                  {8,8}},                                                                                                                                                       rotation = 0, origin={268,-48})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent={{-166,59},
                  {-148,77}}),                                                                                                          iconTransformation(extent={{-210,70},
                  {-190,90}})));
        AlvEq alvEq1
          annotation (Placement(transformation(extent={{-84,-36},{42,88}})));

      //  Physiolibrary.Types.RealIO.FractionInput Fsh "shunt fraction" annotation (
      //       Placement(transformation(extent={{-202,-76},{-162,-36}}),
      //         iconTransformation(extent={{-206,-48},{-188,-30}})));

      //  Physiolibrary.Types.RealIO.FractionInput F_q1 "alveolar perfusion fraction" annotation (
      //       Placement(transformation(extent={{-202,-110},{-162,-70}}),
      //         iconTransformation(extent={{-206,-84},{-188,-66}})));
      //  Physiolibrary.Types.RealIO.FractionInput F_VAi1 "alveolar ventilation fraction" annotation (
      //       Placement(transformation(extent={{-204,-140},{-164,-100}}),
      //         iconTransformation(extent={{-208,-124},{-190,-106}})));
        AlvEq alvEq2
          annotation (Placement(transformation(extent={{-82,-170},{44,-46}})));

        Physiolibrary.Types.VolumeFlowRate Qsh=Q*modelSettings.lungShuntFraction;
        Physiolibrary.Types.VolumeFlowRate Qpulm=Q-Qsh;
        Physiolibrary.Types.VolumeFlowRate Q_alv1 = Qpulm*modelSettings.perfusionFractionStep;
        Physiolibrary.Types.VolumeFlowRate VAi_alv1 = VAi*modelSettings.ventilationFractionStep;
        Physiolibrary.Types.VolumeFlowRate Q_alv2 = Qpulm-Q_alv1;
        Physiolibrary.Types.VolumeFlowRate VAi_alv2 = VAi-VAi_alv1;
        outer
        Interfaces.ModelSettings modelSettings
          annotation (Placement(transformation(extent={{-200,120},{-180,140}})));
      initial equation

      equation

        alvEq1.Q = Q_alv1;
        alvEq2.Q = Q_alv2;
        alvEq1.VAi=VAi_alv1;
        alvEq2.VAi=VAi_alv2;
        alvEq1.ctO2*Q_alv1 + alvEq2.ctO2*Q_alv2 + CvO2*Qsh = Q*ctO2;
        alvEq1.ctCO2*Q_alv1 + alvEq2.ctCO2*Q_alv2 + CvCO2*Qsh = Q*ctCO2;
        alvEq1.VAe+alvEq2.VAe=VAe;
        alvEq1.VO2+alvEq2.VO2=VO2;
        alvEq1.VCO2+alvEq2.VCO2=VCO2;

        connect(alvEq1.BEox, BEox) annotation (Line(points={{-84,64.75},{-104,64.75},{
                -104,68},{-157,68}}, color={0,0,127}));
        connect(alvEq1.CvCO2, CvCO2) annotation (Line(points={{-82.9043,35.3},{
                -104,35.3},{-104,-17},{-163,-17}},
                                        color={0,0,127}));
        connect(alvEq2.BEox, BEox) annotation (Line(points={{-82,-69.25},{-126,-69.25},
                {-126,68},{-157,68}}, color={0,0,127}));
        connect(alvEq2.CvCO2, CvCO2) annotation (Line(points={{-80.9043,-98.7},
                {-148,-98.7},{-148,-17},{-163,-17}},
                                        color={0,0,127}));
        connect(alvEq1.CvO2, CvO2) annotation (Line(points={{-82.9043,39.95},{
                -138.452,39.95},{-138.452,41.5},{-162,41.5}},
                                                     color={0,0,127}));
        connect(alvEq2.CvO2, CvO2) annotation (Line(points={{-80.9043,-94.05},{
                -138,-94.05},{-138,40},{-138.452,40},{-138.452,41.5},{-162,41.5}},
                                                                      color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -180},{260,140}}),
                         graphics={
              Rectangle(
                extent={{-200,140},{258,-180}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-90,108},{130,-134}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                textString="AlvEq
2 units
with
shunts"),     Text(
                extent={{-24,6},{24,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-160,14},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvO2"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,4},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvCO2"),
              Text(
                extent={{-51,5},{51,-5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={203,-49},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CtO2"),
              Text(
                extent={{-52,9.5},{52,-9.5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={202,-69.5},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CtCO2"),
              Text(
                extent={{156,14},{254,2}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="sO2pc"),
              Text(
                extent={{160,36},{254,16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="HCO3pc"),
              Text(
                extent={{138,52},{254,40}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="pHpc"),
              Text(
                extent={{162,72},{254,56}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PACO2"),
              Text(
                extent={{154,86},{254,78}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PAO2"),
              Text(
                extent={{-184,42},{-148,36}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Q"),
              Text(
                extent={{-184,56},{-138,50}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="VAi"),
              Text(
                extent={{188,-82},{254,-92}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VA"),
              Text(
                extent={{152,-6},{254,-16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VO2"),
              Text(
                extent={{132,-24},{254,-34}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VCO2"),
              Text(
                extent={{-186,82},{-140,76}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="BEox"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-144,-40},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Fsh"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-146,-74},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="F_q1"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,-114},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="F_VAi1")}),
                                    Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-180},{260,140}})));
      end AlvEq_2units_with_shunts;

      model AlvEq_2units_with_shunts_and_mixing

        Physiolibrary.Types.RealIO.ConcentrationInput CvO2 annotation (Placement(
              transformation(extent={{-170,33},{-154,50}}),
                                                          iconTransformation(extent={{-202,10},
                  {-190,22}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CvCO2 annotation (Placement(
              transformation(extent={{-172,-26},{-154,-8}}),
                                                          iconTransformation(extent={{-202,-2},
                  {-190,10}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation (Placement(
              transformation(extent={{-198,106},{-180,124}}),
                                                           iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,40})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation (Placement(
              transformation(extent={{-194,32},{-178,48}}),iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,52})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput VAe annotation (Placement(
              transformation(extent={{196,-128},{210,-114}}),
                                                          iconTransformation(
                extent={{260,-94},{278,-76}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
              transformation(extent={{222,-154},{234,-142}}),
                                                          iconTransformation(
                extent={{260,-18},{278,0}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
              transformation(extent={{224,-168},{234,-158}}),
                                                          iconTransformation(
                extent={{260,-36},{276,-20}})));

        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2a annotation (
            Placement(transformation(
              extent={{-7,-7},{7,7}},
              rotation=0,
              origin={203,-170}), iconTransformation(
              extent={{-9,-9},{9,9}},
              rotation=0,
              origin={269,-65})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctO2a annotation (
            Placement(transformation(
              extent={{7.5,-7},{-7.5,7}},
              rotation=180,
              origin={203.5,-144}), iconTransformation(
              extent={{-9,-9},{9,9}},
              rotation=0,
              origin={269,-47})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent={{-166,59},
                  {-148,77}}),                                                                                                          iconTransformation(extent={{-210,70},
                  {-190,90}})));
        AlvEq alvEq1
          annotation (Placement(transformation(extent={{-84,-36},{42,88}})));

        Physiolibrary.Types.RealIO.FractionInput Fsh "shunt fraction" annotation (
            Placement(transformation(extent={{-202,-76},{-162,-36}}),
              iconTransformation(extent={{-206,-48},{-188,-30}})));

        Physiolibrary.Types.RealIO.FractionInput F_q1 "alveolar perfusion fraction" annotation (
            Placement(transformation(extent={{-202,-110},{-162,-70}}),
              iconTransformation(extent={{-206,-84},{-188,-66}})));
        Physiolibrary.Types.RealIO.FractionInput F_VAi1 "alveolar ventilation fraction" annotation (
            Placement(transformation(extent={{-204,-140},{-164,-100}}),
              iconTransformation(extent={{-208,-124},{-190,-106}})));
        AlvEq alvEq2
          annotation (Placement(transformation(extent={{-82,-170},{44,-46}})));

        Physiolibrary.Types.VolumeFlowRate Qsh=Q*Fsh;
        Physiolibrary.Types.VolumeFlowRate Qpulm=Q-Qsh;
        Physiolibrary.Types.VolumeFlowRate Q_alv1 = Qpulm*F_q1;
        Physiolibrary.Types.VolumeFlowRate VAi_alv1 = VAi*F_VAi1;
        Physiolibrary.Types.VolumeFlowRate Q_alv2 = Qpulm-Q_alv1;
        Physiolibrary.Types.VolumeFlowRate VAi_alv2 = VAi-VAi_alv1;
        O2CO2 artBlood
          annotation (Placement(transformation(extent={{92,-80},{196,60}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput HCO3a annotation (
            Placement(transformation(
              extent={{7.5,-7},{-7.5,7}},
              rotation=180,
              origin={247.5,-4}), iconTransformation(
              extent={{-9,-9},{9,9}},
              rotation=0,
              origin={269,27})));
        Physiolibrary.Types.RealIO.PressureOutput PaO2 annotation (Placement(
              transformation(extent={{214,40},{234,60}}), iconTransformation(
                extent={{260,74},{280,94}})));
        Physiolibrary.Types.RealIO.PressureOutput PaCO2 annotation (Placement(
              transformation(extent={{216,12},{236,32}}), iconTransformation(
                extent={{260,54},{280,74}})));
        Physiolibrary.Types.RealIO.pHOutput pHa annotation (Placement(
              transformation(extent={{212,-8},{232,12}}), iconTransformation(
                extent={{260,34},{280,54}})));
        Physiolibrary.Types.RealIO.FractionOutput sO2a annotation (Placement(
              transformation(extent={{228,-38},{248,-18}}), iconTransformation(
                extent={{260,-2},{280,18}})));
      initial equation

      equation

        alvEq1.Q = Q_alv1;
        alvEq2.Q = Q_alv2;
        alvEq1.VAi=VAi_alv1;
        alvEq2.VAi=VAi_alv2;
        alvEq1.ctO2*Q_alv1 + alvEq2.ctO2*Q_alv2 + CvO2*Qsh =Q*ctO2a;
        alvEq1.ctCO2*Q_alv1 + alvEq2.ctCO2*Q_alv2 + CvCO2*Qsh =Q*ctCO2a;
        alvEq1.VAe+alvEq2.VAe=VAe;
        alvEq1.VO2+alvEq2.VO2=VO2;
        alvEq1.VCO2+alvEq2.VCO2=VCO2;
        artBlood.ctO2=ctO2a;
        artBlood.ctCO2=ctCO2a;

        connect(alvEq1.BEox, BEox) annotation (Line(points={{-84,64.75},{-104,64.75},{
                -104,68},{-157,68}}, color={0,0,127}));
        connect(alvEq1.CvCO2, CvCO2) annotation (Line(points={{-82.9043,35.3},{
                -104,35.3},{-104,-17},{-163,-17}},
                                        color={0,0,127}));
        connect(alvEq2.BEox, BEox) annotation (Line(points={{-82,-69.25},{-126,-69.25},
                {-126,68},{-157,68}}, color={0,0,127}));
        connect(alvEq2.CvCO2, CvCO2) annotation (Line(points={{-80.9043,-98.7},
                {-148,-98.7},{-148,-17},{-163,-17}},
                                        color={0,0,127}));
        connect(alvEq1.CvO2, CvO2) annotation (Line(points={{-82.9043,39.95},{
                -138.452,39.95},{-138.452,41.5},{-162,41.5}},
                                                     color={0,0,127}));
        connect(alvEq2.CvO2, CvO2) annotation (Line(points={{-80.9043,-94.05},{
                -138,-94.05},{-138,40},{-138.452,40},{-138.452,41.5},{-162,41.5}},
                                                                      color={0,0,127}));
        connect(artBlood.BEox, BEox) annotation (Line(points={{89.4,6.47059},{
                66,6.47059},{66,118},{-126,118},{-126,68},{-157,68}},
                                                          color={0,0,127}));
        connect(artBlood.pO2, PaO2) annotation (Line(points={{198.6,19.6471},{
                204,19.6471},{204,50},{224,50}}, color={0,0,127}));
        connect(artBlood.pCO2, PaCO2) annotation (Line(points={{198.6,11.4118},
                {210,11.4118},{210,22},{226,22}}, color={0,0,127}));
        connect(artBlood.pH, pHa) annotation (Line(points={{198.6,1.52941},{
                207.3,1.52941},{207.3,2},{222,2}}, color={0,0,127}));
        connect(artBlood.sO2, sO2a) annotation (Line(points={{198.6,-14.9412},{
                214.3,-14.9412},{214.3,-28},{238,-28}}, color={0,0,127}));
        connect(artBlood.cHCO3, HCO3a) annotation (Line(points={{198.6,-6.70588},
                {219.3,-6.70588},{219.3,-4},{247.5,-4}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -180},{260,140}}),
                         graphics={
              Rectangle(
                extent={{-200,140},{260,-178}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,126},{140,-164}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                textString="AlvEq
2 units
with
shunts
and mixing"), Text(
                extent={{-24,6},{24,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-160,14},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvO2"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,4},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvCO2"),
              Text(
                extent={{-51,5},{51,-5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={203,-49},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CtO2"),
              Text(
                extent={{-52,9.5},{52,-9.5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={202,-69.5},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CtCO2"),
              Text(
                extent={{156,14},{254,2}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="sO2a"),
              Text(
                extent={{160,36},{254,16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="HCO3a"),
              Text(
                extent={{138,52},{254,40}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="pHa"),
              Text(
                extent={{162,72},{254,56}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PaCO2"),
              Text(
                extent={{154,86},{254,78}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PaO2"),
              Text(
                extent={{-184,42},{-148,36}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Q"),
              Text(
                extent={{-184,56},{-138,50}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="VAi"),
              Text(
                extent={{188,-82},{254,-92}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=11,
                horizontalAlignment=TextAlignment.Right,
                textString="VAe"),
              Text(
                extent={{152,-6},{254,-16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VO2"),
              Text(
                extent={{132,-24},{254,-34}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VCO2"),
              Text(
                extent={{-186,82},{-140,76}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="BEox"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-144,-40},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Fsh"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-146,-74},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="F_q1"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,-114},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="F_VAi1")}),
                                    Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-180},{260,140}})));
      end AlvEq_2units_with_shunts_and_mixing;

      model AlvEq_2units_with_shunts_and_mixing_connectors

        Physiolibrary.Types.RealIO.ConcentrationInput CvO2 annotation (Placement(
              transformation(extent={{-170,33},{-154,50}}),
                                                          iconTransformation(extent={{-202,10},
                  {-190,22}})));
        Physiolibrary.Types.RealIO.ConcentrationInput CvCO2 annotation (Placement(
              transformation(extent={{-172,-26},{-154,-8}}),
                                                          iconTransformation(extent={{-202,-2},
                  {-190,10}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation (Placement(
              transformation(extent={{-198,106},{-180,124}}),
                                                           iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,40})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation (Placement(
              transformation(extent={{-194,32},{-178,48}}),iconTransformation(
              extent={{-6,-6},{6,6}},
              rotation=0,
              origin={-196,52})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput VAe annotation (Placement(
              transformation(extent={{196,-128},{210,-114}}),
                                                          iconTransformation(
                extent={{260,-94},{278,-76}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
              transformation(extent={{222,-154},{234,-142}}),
                                                          iconTransformation(
                extent={{260,-18},{278,0}})));
        Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
              transformation(extent={{224,-168},{234,-158}}),
                                                          iconTransformation(
                extent={{260,-36},{276,-20}})));

        Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2a annotation (
            Placement(transformation(
              extent={{-7,-7},{7,7}},
              rotation=0,
              origin={203,-170}), iconTransformation(
              extent={{-9,-9},{9,9}},
              rotation=0,
              origin={269,-65})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctO2a annotation (
            Placement(transformation(
              extent={{7.5,-7},{-7.5,7}},
              rotation=180,
              origin={203.5,-144}), iconTransformation(
              extent={{-9,-9},{9,9}},
              rotation=0,
              origin={269,-47})));
        Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l" annotation(Placement(transformation(extent={{-166,59},
                  {-148,77}}),                                                                                                          iconTransformation(extent={{-210,70},
                  {-190,90}})));
        AlvEq alvEq1
          annotation (Placement(transformation(extent={{-84,-36},{42,88}})));

        Physiolibrary.Types.RealIO.FractionInput Fsh "shunt fraction" annotation (
            Placement(transformation(extent={{-202,-76},{-162,-36}}),
              iconTransformation(extent={{-206,-48},{-188,-30}})));

        Physiolibrary.Types.RealIO.FractionInput F_q1 "alveolar perfusion fraction" annotation (
            Placement(transformation(extent={{-202,-110},{-162,-70}}),
              iconTransformation(extent={{-206,-84},{-188,-66}})));
        Physiolibrary.Types.RealIO.FractionInput F_VAi1 "alveolar ventilation fraction" annotation (
            Placement(transformation(extent={{-204,-140},{-164,-100}}),
              iconTransformation(extent={{-208,-124},{-190,-106}})));
        AlvEq alvEq2
          annotation (Placement(transformation(extent={{-82,-170},{44,-46}})));

        Physiolibrary.Types.VolumeFlowRate Qsh=Q*Fsh;
        Physiolibrary.Types.VolumeFlowRate Qpulm=Q-Qsh;
        Physiolibrary.Types.VolumeFlowRate Q_alv1 = Qpulm*F_q1;
        Physiolibrary.Types.VolumeFlowRate VAi_alv1 = VAi*F_VAi1;
        Physiolibrary.Types.VolumeFlowRate Q_alv2 = Qpulm-Q_alv1;
        Physiolibrary.Types.VolumeFlowRate VAi_alv2 = VAi-VAi_alv1;
        O2CO2 artBlood
          annotation (Placement(transformation(extent={{92,-80},{196,60}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput HCO3a annotation (
            Placement(transformation(
              extent={{7.5,-7},{-7.5,7}},
              rotation=180,
              origin={247.5,-4}), iconTransformation(
              extent={{-9,-9},{9,9}},
              rotation=0,
              origin={269,27})));
        Physiolibrary.Types.RealIO.PressureOutput PaO2 annotation (Placement(
              transformation(extent={{214,40},{234,60}}), iconTransformation(
                extent={{260,74},{280,94}})));
        Physiolibrary.Types.RealIO.PressureOutput PaCO2 annotation (Placement(
              transformation(extent={{216,12},{236,32}}), iconTransformation(
                extent={{260,54},{280,74}})));
        Physiolibrary.Types.RealIO.pHOutput pHa annotation (Placement(
              transformation(extent={{212,-8},{232,12}}), iconTransformation(
                extent={{260,34},{280,54}})));
        Physiolibrary.Types.RealIO.FractionOutput sO2a annotation (Placement(
              transformation(extent={{228,-38},{248,-18}}), iconTransformation(
                extent={{260,-2},{280,18}})));
        Interfaces.BloodPort_in bloodPort_in
          annotation (Placement(transformation(extent={{-210,-10},{-190,10}})));
        Interfaces.BloodPort_out bloodPort_out
          annotation (Placement(transformation(extent={{250,-10},{270,10}})));

          Real p = bloodPort_in.pressure;
         // Real BEox = inStream(bloodPort_in.BEox);
         // Real CO2_c = bloodPort_in.conc;

      initial equation
      equation
        // connector - hydraulics

        alvEq1.Q = Q_alv1;
        alvEq2.Q = Q_alv2;
        alvEq1.VAi=VAi_alv1;
        alvEq2.VAi=VAi_alv2;
        alvEq1.ctO2*Q_alv1 + alvEq2.ctO2*Q_alv2 + CvO2*Qsh =Q*ctO2a;
        alvEq1.ctCO2*Q_alv1 + alvEq2.ctCO2*Q_alv2 + CvCO2*Qsh =Q*ctCO2a;
        alvEq1.VAe+alvEq2.VAe=VAe;
        alvEq1.VO2+alvEq2.VO2=VO2;
        alvEq1.VCO2+alvEq2.VCO2=VCO2;
        artBlood.ctO2=ctO2a;
        artBlood.ctCO2=ctCO2a;

        connect(alvEq1.BEox, BEox) annotation (Line(points={{-84,64.75},{-104,64.75},{
                -104,68},{-157,68}}, color={0,0,127}));
        connect(alvEq1.CvCO2, CvCO2) annotation (Line(points={{-82.9043,35.3},{
                -104,35.3},{-104,-17},{-163,-17}},
                                        color={0,0,127}));
        connect(alvEq2.BEox, BEox) annotation (Line(points={{-82,-69.25},{-126,-69.25},
                {-126,68},{-157,68}}, color={0,0,127}));
        connect(alvEq2.CvCO2, CvCO2) annotation (Line(points={{-80.9043,-98.7},
                {-148,-98.7},{-148,-17},{-163,-17}},
                                        color={0,0,127}));
        connect(alvEq1.CvO2, CvO2) annotation (Line(points={{-82.9043,39.95},{
                -138.452,39.95},{-138.452,41.5},{-162,41.5}},
                                                     color={0,0,127}));
        connect(alvEq2.CvO2, CvO2) annotation (Line(points={{-80.9043,-94.05},{
                -138,-94.05},{-138,40},{-138.452,40},{-138.452,41.5},{-162,41.5}},
                                                                      color={0,0,127}));
        connect(artBlood.BEox, BEox) annotation (Line(points={{89.4,6.47059},{
                66,6.47059},{66,118},{-126,118},{-126,68},{-157,68}},
                                                          color={0,0,127}));
        connect(artBlood.pO2, PaO2) annotation (Line(points={{198.6,19.6471},{
                204,19.6471},{204,50},{224,50}}, color={0,0,127}));
        connect(artBlood.pCO2, PaCO2) annotation (Line(points={{198.6,11.4118},
                {210,11.4118},{210,22},{226,22}}, color={0,0,127}));
        connect(artBlood.pH, pHa) annotation (Line(points={{198.6,1.52941},{
                207.3,1.52941},{207.3,2},{222,2}}, color={0,0,127}));
        connect(artBlood.sO2, sO2a) annotation (Line(points={{198.6,-14.9412},{
                214.3,-14.9412},{214.3,-28},{238,-28}}, color={0,0,127}));
        connect(artBlood.cHCO3, HCO3a) annotation (Line(points={{198.6,-6.70588},
                {219.3,-6.70588},{219.3,-4},{247.5,-4}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                  -180},{260,140}}),
                         graphics={
              Rectangle(
                extent={{-200,140},{260,-178}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-100,126},{140,-164}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                textString="AlvEq
2 units
with
shunts
and mixing"), Text(
                extent={{-24,6},{24,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-160,14},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvO2"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,4},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="CvCO2"),
              Text(
                extent={{-51,5},{51,-5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={203,-49},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CtO2"),
              Text(
                extent={{-52,9.5},{52,-9.5}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={202,-69.5},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="CtCO2"),
              Text(
                extent={{156,14},{254,2}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="sO2a"),
              Text(
                extent={{160,36},{254,16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="HCO3a"),
              Text(
                extent={{138,52},{254,40}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="pHa"),
              Text(
                extent={{162,72},{254,56}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PaCO2"),
              Text(
                extent={{154,86},{254,78}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="PaO2"),
              Text(
                extent={{-184,42},{-148,36}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Q"),
              Text(
                extent={{-184,56},{-138,50}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="VAi"),
              Text(
                extent={{188,-82},{254,-92}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=11,
                horizontalAlignment=TextAlignment.Right,
                textString="VAe"),
              Text(
                extent={{152,-6},{254,-16}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VO2"),
              Text(
                extent={{132,-24},{254,-34}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Right,
                textString="VCO2"),
              Text(
                extent={{-186,82},{-140,76}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="BEox"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-144,-40},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="Fsh"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-146,-74},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="F_q1"),
              Text(
                extent={{-36,6},{36,-6}},
                lineColor={0,0,255},
                fillColor={255,255,0},
                fillPattern=FillPattern.Solid,
                origin={-148,-114},
                rotation=180,
                fontSize=12,
                horizontalAlignment=TextAlignment.Left,
                textString="F_VAi1")}),
                                    Diagram(coordinateSystem(preserveAspectRatio=false,
                extent={{-200,-180},{260,140}})));
      end AlvEq_2units_with_shunts_and_mixing_connectors;

      model plasmaHCO3
        Physiolibrary.Types.RealIO.PressureInput pCO2(start = 5330)
          "pCO2 in Pa"                                                           annotation(Placement(transformation(extent = {{-120, 20}, {-80, 60}}), iconTransformation(extent = {{-120, 70}, {-100, 90}})));
        Physiolibrary.Types.RealIO.pHInput pH annotation(Placement(transformation(extent = {{-120, 70}, {-80, 110}}), iconTransformation(extent = {{-120, 30}, {-100, 50}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3
          "plasma HCO3 concentration (in mmol/l)"                                                    annotation(Placement(transformation(extent = {{100, 60}, {120, 80}}), iconTransformation(extent = {{100, -10}, {120, 10}})));
        Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
              transformation(extent={{-122,-106},{-82,-66}}),
              iconTransformation(extent={{-126,-106},{-100,-80}})));
      algorithm
        (cHCO3) := OSA.cHCO3of(
                pH,
                pCO2/1000,
                Temp-273.15);
        annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                  fillPattern =                                                                                                   FillPattern.Solid), Text(extent={{
                    -68,-6},{80,-78}},                                                                                                    lineColor=
                    {28,108,200},                                                                                                    fillColor=
                    {255,255,0},
                  fillPattern=FillPattern.Solid,
                textString="HCO3"),
              Text(
                extent={{-96,66},{-40,98}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pCO2"),
              Text(
                extent={{-98,30},{-42,62}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="pH"),
              Text(
                extent={{40,-16},{96,16}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="cHCO3"),
              Text(
                extent={{-94,-100},{-38,-68}},
                lineColor={0,0,0},
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                textString="Temp")}));
      end plasmaHCO3;
    end OSA;

    model MembraneVariableCharges
      "Donnan's equilibrium of electrolytes usable for glomerular membrane, open/leak membrane channels, pores, ..."
      extends Physiolibrary.Icons.Membrane;
      extends Physiolibrary.Chemical.Interfaces.ConditionalHeatPort;

      parameter Integer NumberOfParticles = 1
        "Number of penetrating particle types";

      parameter Integer Charges[NumberOfParticles] = zeros(NumberOfParticles)
        "Elementary charges of particles"
        annotation (Dialog(enable=not useChargesInput));
      parameter AcidBaseBalance.Interfaces.IonChargeTypesEnum FixedCharges[:] = AcidBaseBalance.Interfaces.IonChargeTypes "TODO - when not useChargesInput then use charges as a default"
        annotation (Dialog(enable= useChargesInput));

      parameter Boolean useChargesInput = false
        "=true, if external permeability value is used"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
      Physiolibrary.Types.RealIO.ConcentrationInput charge[NumberOfParticles]=chrgs if
           useChargesInput
        "The charges in meq/l, which is numerically equal to concentrations mmol/l"
        annotation (Placement(transformation(
            extent={{20,-20},{-20,20}},
            rotation=270,
            origin={0,-100})));

      parameter Physiolibrary.Types.DiffusionPermeability Permeabilities[
        NumberOfParticles]=zeros(NumberOfParticles)
        "Permeabilities of particles through membrane chanel"
        annotation (Dialog(enable=not usePermeabilityInput));
      parameter Boolean usePermeabilityInput = false
        "=true, if external permeability value is used"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
      Physiolibrary.Types.RealIO.DiffusionPermeabilityInput permeability[
        NumberOfParticles]=p if usePermeabilityInput annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,100})));

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a particlesInside[
        NumberOfParticles] "inner side of membrane, solution"
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b particlesOutside[
        NumberOfParticles] "outer side of membrane, solution"
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));

      Physiolibrary.Types.GasSolubility kH[NumberOfParticles]
        "Concentration ratio at equilibrium";

      parameter Physiolibrary.Types.GasSolubility kH_T0[NumberOfParticles]=ones(
          NumberOfParticles)
        "Equilibrated concentration ratio at temperature T0 - can be estimated by Henry's law coefficient ratios (kH1/kH2)"
        annotation (HideResult=true, Dialog(tab="Different solubilities"));
      parameter Physiolibrary.Types.Temperature T0=298.15
        "Base temperature for kH_T0"
        annotation (HideResult=true, Dialog(tab="Temperature dependence"));
      parameter Physiolibrary.Types.Temperature C[NumberOfParticles](displayUnit="K")=
         zeros(NumberOfParticles)
        "Specific constant difference (C1-C2) for Van't Hoff's change of kH"
        annotation (HideResult=true, Dialog(tab="Temperature dependence"));

      parameter Physiolibrary.Types.Fraction solventFractionInside=1
        "Free solvent fraction inside (i.e. 'mol/mol' ratio between current solution and pure solvent in one liter; e.g. in plasma=0.96, in RBC=0.717)";
      parameter Physiolibrary.Types.Fraction solventFractionOutside=1
        "Free solvent fraction outside (i.e. 'mol/mol' ratio between current solution and pure solvent in one liter; e.g. in plasma=0.96, in RBC=0.717)";

    protected
       Real KAdjustment
        "=(Cations-AnionLessProteins)/(Cations+AnionLessProteins)";
       Physiolibrary.Types.DiffusionPermeability p[NumberOfParticles];
       Real chrgs[NumberOfParticles] "[meq/mol] charge of the particle in meq";
    equation
      if not usePermeabilityInput then
        p=Permeabilities;
      end if;
      if not useChargesInput then
        chrgs = Charges;
      end if;

        //no accumulation of particles:
       particlesInside.q + particlesOutside.q = zeros(NumberOfParticles); //nothing lost inside

       //electroneutrality:
       if abs(chrgs.*chrgs*p)<=Modelica.Constants.eps then
         KAdjustment=0; //no penetrating electrolytes => KAdjustment and electroneutrality of flux is not needed
       else
         chrgs*particlesInside.q = 0; //electroneutrality of flux through membrane
       end if;

       //diffusion, penetration, particle movement:
       for i in 1:NumberOfParticles loop
         if FixedCharges[i]== AcidBaseBalance.Interfaces.IonChargeTypesEnum.NoCharge then //normal diffusion only if the particle is of no charge type
           particlesInside[i].q = p[i] * (particlesInside[i].conc/solventFractionInside - kH[i]*particlesOutside[i].conc/solventFractionOutside);
         else
           // if it is charged, then it can depend on chrgs input
           if chrgs[i]>0 then //cation goes to Donnan's equilibrium
             particlesInside[i].q = p[i] * (particlesInside[i].conc/solventFractionInside - (1+KAdjustment)*kH[i]*particlesOutside[i].conc/solventFractionOutside);
           else //anion goes to Donnan's equilibrium
             particlesInside[i].q = p[i] * (particlesInside[i].conc/solventFractionInside - (1-KAdjustment)*kH[i]*particlesOutside[i].conc/solventFractionOutside);
           end if;
         end if;
       end for;

       //different solubilities:
       kH = kH_T0 .* Modelica.Math.exp(C * (1/T_heatPort - 1/T0));
       lossHeat = Modelica.Constants.R* C*particlesOutside.q; //negative = heat are comsumed when change from liquid to gas

      annotation ( Documentation(info="<html>
<p><u><b><font style=\"color: #008000; \">Filtration throught semipermeable membrane.</font></b></u></p>
<p>The penetrating particles are driven by electric and chemical gradient to reach Donnan&apos;s equilibrium. The permeabilities of particles are used only in dynamic simulation with non-zero fluxes. If zero-flow Donnan&apos;s equilibrium is reached, it is independent on the permeabilities. </p>
<p>This class can be used for glomerular membrane, open(leak) channels (pores) of cellular (or any lipid bilayer) membrane, chloride schift, ...</p>
<p><br>The membrane permeabilities depends on <code>(D/membrameThicknes)*membraneArea</code>, where D is Fick&apos;s diffusion coefficient.<code> </code></p>
<p>................................</p>
<h4><span style=\"color:#008000\">Filtration example of tree particles</span></h4>
<p>ALP .. small penetrating anion</p>
<p>P .. nonpenetrating protein with negative charge</p>
<p>C .. small penetrating cation</p>
<p>In outer side of membrane are not protein P (it leaves inside). </p>
<p>In equilibrium 4 concentration are unknown:</p>
<p>ALP_in, ALP_out, C_in, C_out.</p>
<p>Closed system equilibrium equations:</p>
<p>tALP = ALP_in + ALP_out ... total amount of ALP </p>
<p>tC = C_in + C_out ... total amount of C</p>
<p>P + ALP_in = C_in ... electroneutrality inside</p>
<p>ALP_out = C_out ... electroneutrality outside</p>
<p>----------------------------------------------------</p>
<p>It is possible to write these equations also in form of KAdjustment, which connect also more than tree type of particles with Donnan&apos;s equilibrium equations:</p>
<p>ALP_in/ALP_out = (1-KAdjustment) </p>
<p>C_in/C_out = (1+KAdjustment) </p>
<p>where KAdjustment = P/(2*C_in-P) and C_out=ALP_out=(2*C_in-P)/2, because ALP_in/ALP_out = (C_in - P)/C_out = (2C_in-2P)/(2C_in-P) = 1 - P/(2C_in-P) = 1-KAdjustment and C_in/C_out = (2C_in)/(2C_in-P) = 1 + P/(2C_in-P) = 1+KAdjustment .</p>
<p><br><h4><span style=\"color:#008000\">Problem with different solubilities/Henry constants/ (kH1, kH2)</span></h4></p>
<p>Equilibrated is chemical potential, not concentrations (c1,c2)!</p>
<p>Equality of chemical potential is approximated by equality of partial pressure (p1,p2): </p>
<p>p1=kH1*c1 </p>
<p>p2=kH2*c2</p>
<p><br>c2 = (kH1/kH2) * c1</p>
<p>Henry constant between both side can be defined as<b> kH_T0 = kH1/kH2</b> at temperature T0, where kH1 is Henry constant in first side of membrane and kH2 is Henry constant in second side of membrane.</p>
<h4><span style=\"color:#008000\">Temperature dependence of Henry constants by Van't Hoff</span></h4>
<p><code>kH1&nbsp;=&nbsp;kH1_T0&nbsp;*<font style=\"color: #ff0000; \">&nbsp;Modelica.Math.exp</font>(C1*&nbsp;(1/T&nbsp;-&nbsp;1/T0))</code></p>
<p><code>kH2&nbsp;=&nbsp;kH2_T0&nbsp;*<font style=\"color: #ff0000; \">&nbsp;Modelica.Math.exp</font>(C2*&nbsp;(1/T&nbsp;-&nbsp;1/T0))</code></p>
<p>kH1/kH2 = <code>kH_T0&nbsp;*<font style=\"color: #ff0000; \">&nbsp;Modelica.Math.exp</font>(C *&nbsp;(1/T&nbsp;-&nbsp;1/T0))</code></p>
<p>Specific&nbsp;constant&nbsp;for&nbsp;Van&apos;t&nbsp;Hoff&apos;s&nbsp;change&nbsp;of&nbsp;kH_T0 can be defined as<b> C = C1-C2</b>, where C1 is specific constant in first side of membrane and C2 is specific constant in second side of membrane.</p>
</html>"));
    end MembraneVariableCharges;

    model Donnan
      Physiolibrary.Chemical.Components.Substance plasma[Ions.IonsEnum](each
          useNormalizedVolume=true, solute_start={0.001,0.002,0,0.001})
        annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
      Physiolibrary.Chemical.Components.Substance ISF[Ions.IonsEnum](each
          useNormalizedVolume=true)
        annotation (Placement(transformation(extent={{40,0},{60,20}})));
      Acidbase.MembraneVariableCharges membraneVariableCharges(
        useChargesInput=true,
        NumberOfParticles=4,
        Permeabilities={1.6666666666667e-8,1.6666666666667e-8,0,0})
        annotation (Placement(transformation(extent={{-6,4},{14,24}})));
      Ions.IonCharges ionCharges
        annotation (Placement(transformation(extent={{-32,-52},{-12,-32}})));
    equation
      connect(ionCharges.concentration, membraneVariableCharges.charge)
        annotation (Line(points={{-12,-42},{4,-42},{4,4}}, color={0,0,127}));
      connect(plasma.q_out, membraneVariableCharges.particlesInside) annotation (
          Line(
          points={{-50,10},{-28,10},{-28,14},{-6,14}},
          color={107,45,134},
          thickness=1));
      connect(membraneVariableCharges.particlesOutside, ISF.q_out) annotation (Line(
          points={{14,14},{32,14},{32,10},{50,10}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Donnan;

    model DonnanInit
     extends Donnan( ISF(each Simulation=Physiolibrary.Types.SimulationType.NoInit));
     Real p[:] = {12, 3, 0, 9};
     Real isf[size(p, 1)](start = isf_default);
     constant Real isf_default[:] = {3, 3, 0, 0};
     constant Real charges[:] = {1, -1, 0, -1};
     constant Real permeant[:] = {1, 1, 0, 0};
     Real r "THE ratio";
    initial equation
     ISF.state = isf;
    equation
      for i in 1:size(p, 1) loop
        if permeant[i] == 0 or charges[i] == 0 then
          isf[i] = isf_default[i];
        elseif charges[i] > 0 then
          p[i]/isf[i] = r;
        else
          isf[i]/p[i] = r;
        end if;
      end for;
      sum(charges.*isf) = 0;


    end DonnanInit;

    model SAoriginal
      "Our complex polynomial fit to original SA data (Jezek & Kofranek, Theor Biol Med Model 2018)"
      parameter Real Hb(unit="g/dl") = Hct*33.34;
      parameter Real Hct(unit="1") = 15/33.34;
      parameter Real BEox(displayUnit="meq/l") = 0;
      parameter Real sO2(unit="1") = 1;
      parameter Real pCO2torr(displayUnit="mmHg") = 40;
      parameter Physiolibrary.Types.Pressure pCO2 = pCO2torr*133.32;
      parameter Real pH(start=7.4, fixed = false);

    protected
      constant Real pco2BBCoef[:]={2.1125e-009,-640.9926e-009,72.7649e-006,-3.2862e-003,
          -38.1749e-003,8.2352e+000,-97.0551e+000};
      constant Real pco2BECoef[:]={8.3975e-009,-513.9503e-009,3.8105e-006,
          231.6888e-006,-46.5581e-003,353.7105e-003,39.9871e+000};
      constant Real pHBBCoef[:]={40.8936e-012,-13.0063e-009,1.6780e-006,-111.7919e-006,
          4.0776e-003,-67.8274e-003,7.2888e+000};
      constant Real pHBECoef[:]={131.3315e-009,2.5027e-006,175.6144e-006,
          11.9273e-003,7.4001e+000};
    public
      parameter Real pCO2BB(start=96) = pco2BBCoef[1]*BB^6 + pco2BBCoef[2]*BB^5 +
        pco2BBCoef[3]*BB^4 + pco2BBCoef[4]*BB^3 + pco2BBCoef[5]*BB^2 +
        pco2BBCoef[6]*BB + pco2BBCoef[7];
      parameter Real pCO2BE(start=40) = pco2BECoef[1]*BE^6 + pco2BECoef[2]*BE^5 +
        pco2BECoef[3]*BE^4 + pco2BECoef[4]*BE^3 + pco2BECoef[5]*BE^2 +
        pco2BECoef[6]*BE + pco2BECoef[7];
      parameter Real pHBB(start=7) = pHBBCoef[1]*BB^6 + pHBBCoef[2]*BB^5 + pHBBCoef[3]*BB
        ^4 + pHBBCoef[4]*BB^3 + pHBBCoef[5]*BB^2 + pHBBCoef[6]*BB + pHBBCoef[7];
      parameter Real pHBE(start=7) = pHBECoef[1]*BE^4 + pHBECoef[2]*BE^3 + pHBECoef[3]*BE
        ^2 + pHBECoef[4]*BE + pHBECoef[5];

      parameter Real BB=BE + 0.42*Hb + 41.7;
      parameter Real BE=BEox + 0.2*(1 - sO2)*Hb;

      parameter Real pK= 6.1 + (-0.0026)*(T-310.15);
      parameter Real aCO2 = 0.00023 * 10^(-0.0092*(T-310.15)); //solubility depends on temperature
      parameter Physiolibrary.Types.Concentration cdCO2(displayUnit="mmol/l")=
        aCO2*pCO2;
      parameter Real cHCO3(displayUnit="mmol/l") = cdCO2 * 10^(pH-pK) "outgoing concentration of HCO3";
      parameter Real T = 37+273.15;
      parameter Real tCO2 = cHCO3 + cdCO2;

    initial equation
      pH =(log10(pCO2torr) - log10(pCO2BB))*(pHBB - pHBE)/(log10(pCO2BB) - log10(
        pCO2BE)) + pHBB;

    end SAoriginal;

    package FullBloodAcidbase
      package PlasmaElectrochemical

        package Auxilliary

          partial model PlasmaElectrochemicalBase
            //   Real SID(displayUnit="meq/l") "Strong ion difference. Normal value 39";
            //   Real pCO2(displayUnit="mmHg") "CO2 partial pressure. Normal value 40";
            //   Real Pi(unit="mmol/l") "Total phosphate. Normal value 1.15";
            //   Real alb(unit="g/dl") "Albumin concentration. Normal value 4.4";

            input Real SID(displayUnit="meq/l")
              "Strong ion difference. Normal value 39";
            input Real pCO2(displayUnit="mmHg")
              "CO2 partial pressure. Normal value 40";
            input Real Pi(unit="mmol/l") "Total phosphate. Normal value 1.15";
            input Real alb(unit="g/dl") "Albumin concentration. Normal value 4.4";
            // Real Alb(unit="mmol/l") = alb*10/66500*1000;
            Real pH(start=10, unit="1");
          //  Real HCO3;
            annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)));
          end PlasmaElectrochemicalBase;

          model FiggeFencl3
            "Base class for plasma acidbase after Figge and Fencl 3.0, missing inputs for SID, PCO2, total Pi and total albumin. Not meant to be run independently. Implemented after [Figge, 2013]"
            extends
              AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.Auxilliary.PlasmaElectrochemicalBase;

            /*
Rem: Figge-Fencl Quantitative Physicochemical Model
Rem: of Human Acid-Base Physiology Version 3.0 (8 October, 2012; www.Figge-Fencl.org).
Rem:
Rem: Copyright 2003 - 2013 James J. Figge. Update published 28 April, 2013;
Rem: Update published 27 October, 2013.
Rem: 
Rem: The program may be downloaded free of charge for academic and educational use only.
Rem: This program is not intended for clinical use or for the care of human subjects in clinical trials.
Rem: This program applies to plasma-like solutions containing albumin. 
Rem: The program does not account for the contribution of plasma globulins, and has not been tested with clinical data; hence 
Rem: the program is not suitable for clinical use.


Implemented in Modelica by Filip Jezek, FEE CTU in Prague, 2016
*/
            // only constants here
          protected
            constant Real kw=0.000000000000044;

            constant Real Kc1=0.0000000000244
              "Kc1 is derived from the parameters in the Henderson-Hasselbalch equation. pK = 6.1; a = 0.230 mM / kPa; 1 Torr = 0.13332236842105 kPa. The value of Kc1 is 2.44E-11 (Eq / L)^2 / Torr.";
            constant Real Kc2=0.00000000011
              "Kc2 is calculated from Harned and Scholes (1941) for 37 degrees C and ionic strength 0.15 M. The value of Kc2 is 5.5E-11 mol / L x 2 = 1.1E-10 Eq / L.";

            constant Real K1=0.0122
              "K1, K2, and K3 for the phosphoric acid - phosphate system are from Sendroy and Rem: Hastings (1927). pK1 = 1.915; pK2 = 6.66; pK3 = 11.78.";
            constant Real K2=0.000000219
              "K1, K2, and K3 for the phosphoric acid - phosphate system are from Sendroy and Hastings (1927). pK1 = 1.915; pK2 = 6.66; pK3 = 11.78.";
            constant Real K3=0.00000000000166
              "K1, K2, and K3 for the phosphoric acid - phosphate system are from Sendroy and Hastings (1927). pK1 = 1.915; pK2 = 6.66; pK3 = 11.78.";

            //Rem: Enter desired values for SID, PCO2, [ Pi tot ], and [ Albumin ] in the next four lines.
            //   input Real SID(displayUnit="meq/l") "Strong ion difference. Normal value 39";
            //   input Real pCO2(displayUnit="mmHg") "CO2 partial pressure. Normal value 40";
            //   input Real Pi(unit="mmol/l") "Total phosphate. Normal value 1.15";
            //   input Real alb(unit="g/dl") "Albumin concentration. Normal value 4.4";

          public
            Real H(displayUnit="eq/l") = 10^(-pH);
            Real HO(displayUnit="eq/l") = kw/H;
            Real HCO3(displayUnit="eq/l") = Kc1*pCO2/H;
            Real CO3(displayUnit="eq/l") = Kc2*HCO3/H;

          protected
            Real FNX=K1*H^2 + 2*K1*K2*H + 3*K1*K2*K3;
            Real FNY=H^3 + K1*H^2 + K1*K2*H + K1*K2*K3;
            Real FNZ=FNX/FNY;
          public
            Real P(displayUnit="meq/l") = Pi*FNZ;
            Real Netcharge=SID + 1000*(H - HO - HCO3 - CO3) - P;

            Real NB=0.4*(1 - (1/(1 + 10^(pH - 6.9))))
              "NB accounts for histidine pK shift due to the NB transition";

            // constant Real albuminResidues[:] = cat(1,{-1 /*cysteine */,-98/*glutamic acid*/,-18/*tyrosine*/,+24/*arginine */, /* lysine >>>*/ 2, 2, 2, 2, 1, 50} ,ones(16) /*histidine residues*/,/* amino terminus and carboxyl terminus*/{1, 1});
          protected
            Real albConversion=1000*10*alb/66500;
            constant Real albuminResidues[:]=cat(
                      1,
                      {-1,-98,-18,+24,2,2,2,2,1,50},
                      ones(16),
                      {1,-1});
            // Real albuminPks[:] = {8.5 /* CYST*/,3.9 /* GLUT*/,11.7 /* TYR*/,12.5 /* ARG*/,/*LYS >>>*/5.8, 6.15, 7.51, 7.685, 7.86, 10.3,/*HIST>>>*/7.12 - NB, 7.22 - NB, 7.1 - NB, 7.49 - NB, 7.01 - NB, 7.31, 6.75, 6.36, 4.85, 5.76, 6.17, 6.73, 5.82, 5.1, 6.7, 6.2, 8/* amino terminus */,3.1 /*carboxyl terminus*/};
            Real albuminPks[:]={8.5,3.9,11.7,12.5,5.8,6.15,7.51,7.685,7.86,10.3,
                7.12 - NB,7.22 - NB,7.1 - NB,7.49 - NB,7.01 - NB,7.31,6.75,6.36,
                4.85,5.76,6.17,6.73,5.82,5.1,6.7,6.2,8,3.1};
            Real albChrg[n](each displayUnit="meq/l") "charge of albumin per unit";
            constant Integer n=size(albuminResidues, 1);
          public
            Real atch=sum(albChrg)*albConversion
              "albumin total charge. Normal value -12.2678";

          equation
            Netcharge + atch = 0;

            for i in 1:n loop
              if albuminResidues[i] > 0 then
                // positive charge
                albChrg[i] = albuminResidues[i]*(1/(1 + 10^(pH - albuminPks[i])));
              else
                // negative charge
                albChrg[i] = albuminResidues[i]*(1/(1 + 10^(-pH + albuminPks[i])));
              end if;
            end for;

            /* 
  // debug
  alb2 = -1 * (1 / (1 + 10 ^ (-(pH - 8.5))))
  - 98 * (1 / (1 + 10 ^ (-(pH - 3.9))))
  - 18 * (1 / (1 + 10 ^ (-(pH - 11.7))))
  + 24 * (1 / (1 + 10 ^ (pH - 12.5)))
  + 2 * (1 / (1 + 10 ^ (pH - 5.8)))
  + 2 * (1 / (1 + 10 ^ (pH - 6.15)))
  + 2 * (1 / (1 + 10 ^ (pH - 7.51)))
  + 2 * (1 / (1 + 10 ^ (pH - 7.685)))
  + 1 * (1 / (1 + 10 ^ (pH - 7.86)))
  + 50 * (1 / (1 + 10 ^ (pH - 10.3)))
  + (1 / (1 + 10 ^ (pH - 7.12 + NB)))
  + (1 / (1 + 10 ^ (pH - 7.22 + NB)))
  + (1 / (1 + 10 ^ (pH - 7.1 + NB)))
  + (1 / (1 + 10 ^ (pH - 7.49 + NB)))
  + (1 / (1 + 10 ^ (pH - 7.01 + NB)))
  + (1 / (1 + 10 ^ (pH - 7.31)))
  + (1 / (1 + 10 ^ (pH - 6.75)))
  + (1 / (1 + 10 ^ (pH - 6.36)))
  + (1 / (1 + 10 ^ (pH - 4.85)))
  + (1 / (1 + 10 ^ (pH - 5.76)))
  + (1 / (1 + 10 ^ (pH - 6.17)))
  + (1 / (1 + 10 ^ (pH - 6.73)))
  + (1 / (1 + 10 ^ (pH - 5.82)))
  + (1 / (1 + 10 ^ (pH - 5.1)))
  + (1 / (1 + 10 ^ (pH - 6.7)))
  + (1 / (1 + 10 ^ (pH - 6.2)))
  + (1 / (1 + 10 ^ (pH - 8)))
  - 1 * (1 / (1 + 10 ^ (-(pH - 3.1))));
*/
            annotation (Documentation(info="<html>
<pre><font style=\"color: #006400; \">Rem:&nbsp;Figge-Fencl&nbsp;Quantitative&nbsp;Physicochemical&nbsp;Model</font>
<font style=\"color: #006400; \">Rem:&nbsp;of&nbsp;Human&nbsp;Acid-Base&nbsp;Physiology&nbsp;Version&nbsp;3.0&nbsp;(8&nbsp;October,&nbsp;2012;&nbsp;www.Figge-Fencl.org).</font>
<font style=\"color: #006400; \">Rem:</font>
<font style=\"color: #006400; \">Rem:&nbsp;Copyright&nbsp;2003&nbsp;-&nbsp;2013&nbsp;James&nbsp;J.&nbsp;Figge.&nbsp;Update&nbsp;published&nbsp;28&nbsp;April,&nbsp;2013;</font>
<font style=\"color: #006400; \">Rem:&nbsp;Update&nbsp;published&nbsp;27&nbsp;October,&nbsp;2013.</font>
<font style=\"color: #006400; \">Rem:&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;The&nbsp;program&nbsp;may&nbsp;be&nbsp;downloaded&nbsp;free&nbsp;of&nbsp;charge&nbsp;for&nbsp;academic&nbsp;and&nbsp;educational&nbsp;use&nbsp;only.</font>
<font style=\"color: #006400; \">Rem:&nbsp;This&nbsp;program&nbsp;is&nbsp;not&nbsp;intended&nbsp;for&nbsp;clinical&nbsp;use&nbsp;or&nbsp;for&nbsp;the&nbsp;care&nbsp;of&nbsp;human&nbsp;subjects&nbsp;in&nbsp;clinical&nbsp;trials.</font>
<font style=\"color: #006400; \">Rem:&nbsp;This&nbsp;program&nbsp;applies&nbsp;to&nbsp;plasma-like&nbsp;solutions&nbsp;containing&nbsp;albumin.&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;The&nbsp;program&nbsp;does&nbsp;not&nbsp;account&nbsp;for&nbsp;the&nbsp;contribution&nbsp;of&nbsp;plasma&nbsp;globulins,&nbsp;and&nbsp;has&nbsp;not&nbsp;been&nbsp;tested&nbsp;with&nbsp;clinical&nbsp;data;&nbsp;hence&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;the&nbsp;program&nbsp;is&nbsp;not&nbsp;suitable&nbsp;for&nbsp;clinical&nbsp;use.</font>
<p><br><br><code><font style=\"color: #006400; \">I</font>mplemented in Modelica by Filip Jezek, FEE CTU in Prague, 2016</code></p>
</html>",     revisions="<html>
<pre><font style=\"color: #006400; \">Filip Jezek, 2016</font></pre>
</html>"));
          end FiggeFencl3;

          model FiggeFencl3Detailed
            "Extension for investigation of detailed albumin balance"
            extends Auxilliary.FiggeFencl3;
          protected
            Real albPositivePart[n], albNegativePart[n];
            Real albTotalPlusPart[n], albTotalMinusPart[n];
          public
            Real HCO3mEqL=HCO3*1000;
            Real albHAPlus=albConversion*sum(albPositivePart) "A0 + H+ = HA+";
            Real albAMinus=-albConversion*sum(albNegativePart) "A- + H+ = HA0";
            Real albA0=(ATotPlus - albHAPlus) "A0 + H+ = HA+";
            Real albHA0=(ATotMinus - albAMinus) "HA0 = A- + H+";
            Real ATotPlus=albConversion*sum(albTotalPlusPart)
              "Part of albumin, which could be positive";
            Real ATotMinus=-albConversion*sum(albTotalMinusPart)
              "Part of albumin, which could be negative.";

            Real ach=sum(albChrg);
            Real atch0=-12.2678 "to demonstrate the low buffer strength of albumin";
            Real atot1=albHAPlus + albA0;
            Real atot2=albAMinus + albHA0;
            Real test=atot1 + atot2;

            Real barGraphAlb1=albHA0;
            Real barGraphAlb2=albHA0 + albAMinus;
            Real barGraphAlb3=albHA0 + albAMinus + albHAPlus;
            Real barGraphAlb4=albHA0 + albAMinus + albHAPlus + albA0;
            Real barGraphHCO3Alb1=P;
            Real barGraphHCO3Alb2=P - atch;
            Real barGraphHCO3Alb3=P - atch + 1000*HCO3;
            discrete Real dHCO3s, dHCO3e, dHCO3;
            discrete Real dAlbs, dAlbe, dAlb;
            Real diff=dHCO3 - dAlb;
            Real outofcobntrol=albHAPlus - albAMinus;
            parameter Real p=1;
            parameter Real a=1;
            parameter Real b=1;
            parameter Real c=1;
            Real AlbXMinus=-(0.148*pH - 0.818)*(alb*10) "Total albumin charge";
            Real PXminus=-(0.309*pH - 0.469)*Pi;
            Real Pminus=-P;
            Real totalDiff=AlbXMinus - atch + PXminus - Pminus;

          equation

            // POSSIBLE OPENMODELICA INCOMPATIBILITY
            // IN OPENMODELICA USE ELSEWHEN instead of end when; and when terminal.. lines
            when initial() then
              dHCO3s = 1000*HCO3;
              dAlbs = albHAPlus - albAMinus - p*P - 1000*CO3*a - 1000*HO*b + 1000*H
                *c;
            end when;
            when terminal() then
              // elsewhen terminal() then
              dHCO3e = 1000*HCO3;
              dHCO3 = dHCO3e - dHCO3s;
              dAlbe = albHAPlus - albAMinus - p*P - 1000*CO3*a - 1000*HO*b + 1000*H
                *c;
              dAlb = dAlbe - dAlbs;
            end when;

            for i in 1:n loop
              if albuminResidues[i] > 0 then
                // positive charge
                albPositivePart[i] = albChrg[i];
                albNegativePart[i] = 0;
                albTotalPlusPart[i] = albuminResidues[i];
                albTotalMinusPart[i] = 0;
              else
                // negative charge
                albPositivePart[i] = 0;
                albNegativePart[i] = albChrg[i];
                albTotalPlusPart[i] = 0;
                albTotalMinusPart[i] = albuminResidues[i];
              end if;
            end for;
            annotation (Documentation(info="<html>
<pre><font style=\"color: #006400; \">Rem:&nbsp;Figge-Fencl&nbsp;Quantitative&nbsp;Physicochemical&nbsp;Model</font>
<font style=\"color: #006400; \">Rem:&nbsp;of&nbsp;Human&nbsp;Acid-Base&nbsp;Physiology&nbsp;Version&nbsp;3.0&nbsp;(8&nbsp;October,&nbsp;2012;&nbsp;www.Figge-Fencl.org).</font>
<font style=\"color: #006400; \">Rem:</font>
<font style=\"color: #006400; \">Rem:&nbsp;Copyright&nbsp;2003&nbsp;-&nbsp;2013&nbsp;James&nbsp;J.&nbsp;Figge.&nbsp;Update&nbsp;published&nbsp;28&nbsp;April,&nbsp;2013;</font>
<font style=\"color: #006400; \">Rem:&nbsp;Update&nbsp;published&nbsp;27&nbsp;October,&nbsp;2013.</font>
<font style=\"color: #006400; \">Rem:&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;The&nbsp;program&nbsp;may&nbsp;be&nbsp;downloaded&nbsp;free&nbsp;of&nbsp;charge&nbsp;for&nbsp;academic&nbsp;and&nbsp;educational&nbsp;use&nbsp;only.</font>
<font style=\"color: #006400; \">Rem:&nbsp;This&nbsp;program&nbsp;is&nbsp;not&nbsp;intended&nbsp;for&nbsp;clinical&nbsp;use&nbsp;or&nbsp;for&nbsp;the&nbsp;care&nbsp;of&nbsp;human&nbsp;subjects&nbsp;in&nbsp;clinical&nbsp;trials.</font>
<font style=\"color: #006400; \">Rem:&nbsp;This&nbsp;program&nbsp;applies&nbsp;to&nbsp;plasma-like&nbsp;solutions&nbsp;containing&nbsp;albumin.&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;The&nbsp;program&nbsp;does&nbsp;not&nbsp;account&nbsp;for&nbsp;the&nbsp;contribution&nbsp;of&nbsp;plasma&nbsp;globulins,&nbsp;and&nbsp;has&nbsp;not&nbsp;been&nbsp;tested&nbsp;with&nbsp;clinical&nbsp;data;&nbsp;hence&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;the&nbsp;program&nbsp;is&nbsp;not&nbsp;suitable&nbsp;for&nbsp;clinical&nbsp;use.</font>
<p><br><br><code><font style=\"color: #006400; \">I</font>mplemented in Modelica by Filip Jezek, FEE CTU in Prague, 2016</code></p>
</html>",     revisions="<html>
<pre><font style=\"color: #006400; \">Filip Jezek, 2016</font></pre>
</html>"));
          end FiggeFencl3Detailed;

          model Fencl
            "Simple albumin and Pi calculations, according to [Fencl, 2000]"
            extends
              AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.Auxilliary.PlasmaElectrochemicalBase;

            /*
Rem: Figge-Fencl Quantitative Physicochemical Model
Rem: of Human Acid-Base Physiology Version 3.0 (8 October, 2012; www.Figge-Fencl.org).
Rem:
Rem: Copyright 2003 - 2013 James J. Figge. Update published 28 April, 2013;
Rem: Update published 27 October, 2013.
Rem: 
Rem: The program may be downloaded free of charge for academic and educational use only.
Rem: This program is not intended for clinical use or for the care of human subjects in clinical trials.
Rem: This program applies to plasma-like solutions containing albumin. 
Rem: The program does not account for the contribution of plasma globulins, and has not been tested with clinical data; hence 
Rem: the program is not suitable for clinical use.


Implemented in Modelica by Filip Jezek, FEE CTU in Prague, 2016
*/
            // only constants here
          protected
            constant Real Kc1=0.0000000000244
              "Kc1 is derived from the parameters in the Henderson-Hasselbalch equation. pK = 6.1; a = 0.230 mM / kPa; 1 Torr = 0.13332236842105 kPa. The value of Kc1 is 2.44E-11 (Eq / L)^2 / Torr.";
            // Real H(displayUnit="eq/l") = 10^(-pH);
          public
            Real HCO3(displayUnit="mmol/l") = 1000*Kc1*pCO2/10^(-pH);
            Real P(displayUnit="meq/l") = -Pi*(0.309*pH - 0.469);
            Real atch=-(alb*10)*(0.123*pH - 0.631) "albumin total charge";
          equation
            SID + P + atch - HCO3 = 0;
            annotation (Documentation(info="<html>
<pre><font style=\"color: #006400; \">Rem:&nbsp;Figge-Fencl&nbsp;Quantitative&nbsp;Physicochemical&nbsp;Model</font>
<font style=\"color: #006400; \">Rem:&nbsp;of&nbsp;Human&nbsp;Acid-Base&nbsp;Physiology&nbsp;Version&nbsp;3.0&nbsp;(8&nbsp;October,&nbsp;2012;&nbsp;www.Figge-Fencl.org).</font>
<font style=\"color: #006400; \">Rem:</font>
<font style=\"color: #006400; \">Rem:&nbsp;Copyright&nbsp;2003&nbsp;-&nbsp;2013&nbsp;James&nbsp;J.&nbsp;Figge.&nbsp;Update&nbsp;published&nbsp;28&nbsp;April,&nbsp;2013;</font>
<font style=\"color: #006400; \">Rem:&nbsp;Update&nbsp;published&nbsp;27&nbsp;October,&nbsp;2013.</font>
<font style=\"color: #006400; \">Rem:&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;The&nbsp;program&nbsp;may&nbsp;be&nbsp;downloaded&nbsp;free&nbsp;of&nbsp;charge&nbsp;for&nbsp;academic&nbsp;and&nbsp;educational&nbsp;use&nbsp;only.</font>
<font style=\"color: #006400; \">Rem:&nbsp;This&nbsp;program&nbsp;is&nbsp;not&nbsp;intended&nbsp;for&nbsp;clinical&nbsp;use&nbsp;or&nbsp;for&nbsp;the&nbsp;care&nbsp;of&nbsp;human&nbsp;subjects&nbsp;in&nbsp;clinical&nbsp;trials.</font>
<font style=\"color: #006400; \">Rem:&nbsp;This&nbsp;program&nbsp;applies&nbsp;to&nbsp;plasma-like&nbsp;solutions&nbsp;containing&nbsp;albumin.&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;The&nbsp;program&nbsp;does&nbsp;not&nbsp;account&nbsp;for&nbsp;the&nbsp;contribution&nbsp;of&nbsp;plasma&nbsp;globulins,&nbsp;and&nbsp;has&nbsp;not&nbsp;been&nbsp;tested&nbsp;with&nbsp;clinical&nbsp;data;&nbsp;hence&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;the&nbsp;program&nbsp;is&nbsp;not&nbsp;suitable&nbsp;for&nbsp;clinical&nbsp;use.</font>
<p><br><br><code><font style=\"color: #006400; \">I</font>mplemented in Modelica by Filip Jezek, FEE CTU in Prague, 2016</code></p>
</html>",     revisions="<html>
<pre><font style=\"color: #006400; \">Filip Jezek, 2016</font></pre>
</html>"));
          end Fencl;

          model Wolf
            "Simple albumin and Pi calculations, according to [Wolf, 2011]"
            extends
              AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.Auxilliary.PlasmaElectrochemicalBase;
            import Modelica.SIunits.*;

            type cont = enumeration(
                Na,
                K,
                Ca,
                Mg,
                Cl,
                Pi,
                Alb,
                im,
                Lac) "Contents of erythrocyte";

            constant Real Vp0ByVp=0.98468;
            constant Real fpw=0.9406 "fraction plasma water - Vpw/Vp";

            parameter Concentration Na=140;
            parameter Concentration K=4;
            parameter Concentration Ca=2.4;
            parameter Concentration Mg=0.8;
            // already inherited
            //  parameter Concentration Pi=1.2;
            Real AlbPwGPerL=alb*10*Vp0ByVp "g/lpw";
            Concentration Cl;
            Concentration Alb=AlbPwGPerL/66.5 "mmol/Lpw";
            parameter Concentration im=11.87;
            parameter Concentration Lac=1.5;
            Concentration SO4pw=0.33/fpw "mmol/Lpw";
            Concentration volume_c[cont]={Na,K,Ca,Mg,Cl,Pi,Alb/Vp0ByVp,im,Lac}
              "concentration in one liter";
            Concentration water_c[cont]=volume_c/fpw*Vp0ByVp
              "Actual concentration recalculated to water fraction in one liter (initially 0.96)";

            Real CaPPBound=(3.98)/(3.98 + Hh)*water_c[cont.Ca] "1.257";
            Real MgPPBound=CaPPBound/2;
            Real ZCaBindPerAlb=CaPPBound/water_c[cont.Alb];
            Real ZClBindPerAlb=6.46/(6.46 + Hh)*6 + 4 "Anstey";
            Real CaIon=water_c[cont.Ca]*2 - CaPPBound "mEq/Lpw";
            Real MgIon=water_c[cont.Mg]*2 - MgPPBound "mEq/Lpw";
            //charge on inpermeable solutes
            Real ZPi=(-1) - 10^(pH - 6.87)/(1 + 10^(pH - 6.87));
            Real ZFigge=(-10.65) - 16*(10^(pH - 7.418)/(1 + 10^(pH - 7.418)));
            Real ZAlbBnd=-ZClBindPerAlb + ZCaBindPerAlb + ZCaBindPerAlb/2;
            Real ZAlb=ZFigge + ZAlbBnd;
            Real Hh=H/fpw*1e8;

            //   parameter Real Zim ;//= -5.3 "Charge of ALL impermeable solutes";//test
            // Real Zim = -5.3 "Charge of ALL impermeable solutes";//test
            parameter Real Zim=-0.6349 "Charge of ALL impermeable solutes";

            //   Real fi[cont]={0.93,0.93,1,1,0.93,0.93,1,1,-9999};
            // Alb has osmotic coefficient of 1???
            //   Real CaOsm=water_c[cont.Ca] - CaPPBound*0.5;
            //   Real MgOsm=water_c[cont.Mg] - MgPPBound*0.5;
            //   Real OsmPart=SO4pw + CaOsm + MgOsm + sum(water_c[{cont.Na,cont.K,cont.Cl,cont.Lac}])
            //        + water_c[cont.Pi] + HCO3 + CO3;
            //   Real Osm=OsmPart*0.93 + permeableParticles " = 284.084";

            //   Real Z[cont]={1,1,2,2,-1,ZPi,ZAlb,0,1};
            //   Real Chrgs[cont]=water_c .* Z;

            Real atch=water_c[cont.Alb]*ZFigge;
            Real charge=Zim + SID + water_c[cont.Alb]*ZAlb + water_c[cont.Pi]*ZPi
                 - HCO3 - 2*CO3 - SO4pw*2;

            Concentration HCO3=0.0306*pCO2mmHg*10^(pH - 6.103)/fpw;
            Concentration CO3=HCO3*10^(pH - 10.2);
            //  Real pH(start=7.37); = -log10(H);

            Real pCO2mmHg(unit="1") = pCO2;
            Real H(
              start=10^(-7.37),
              min=0,
              max=1) = 10^(-pH);
            Real Hw=H/fpw;
            Concentration permeableParticles=(5 + 5)/fpw
              "glucose and urea concentration in PLasma water";
          equation
            //  SID = HCO3 + P + atch;
            charge = 0;
            SID = sum(water_c[{cont.Na,cont.K}]) - water_c[cont.Cl] + 2*sum(water_c[
              {cont.Ca,cont.Mg}]) - CaPPBound - MgPPBound - water_c[cont.Lac];
            annotation (Documentation(info="<html>
<pre><font style=\"color: #006400; \">Rem:&nbsp;Figge-Fencl&nbsp;Quantitative&nbsp;Physicochemical&nbsp;Model</font>
<font style=\"color: #006400; \">Rem:&nbsp;of&nbsp;Human&nbsp;Acid-Base&nbsp;Physiology&nbsp;Version&nbsp;3.0&nbsp;(8&nbsp;October,&nbsp;2012;&nbsp;www.Figge-Fencl.org).</font>
<font style=\"color: #006400; \">Rem:</font>
<font style=\"color: #006400; \">Rem:&nbsp;Copyright&nbsp;2003&nbsp;-&nbsp;2013&nbsp;James&nbsp;J.&nbsp;Figge.&nbsp;Update&nbsp;published&nbsp;28&nbsp;April,&nbsp;2013;</font>
<font style=\"color: #006400; \">Rem:&nbsp;Update&nbsp;published&nbsp;27&nbsp;October,&nbsp;2013.</font>
<font style=\"color: #006400; \">Rem:&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;The&nbsp;program&nbsp;may&nbsp;be&nbsp;downloaded&nbsp;free&nbsp;of&nbsp;charge&nbsp;for&nbsp;academic&nbsp;and&nbsp;educational&nbsp;use&nbsp;only.</font>
<font style=\"color: #006400; \">Rem:&nbsp;This&nbsp;program&nbsp;is&nbsp;not&nbsp;intended&nbsp;for&nbsp;clinical&nbsp;use&nbsp;or&nbsp;for&nbsp;the&nbsp;care&nbsp;of&nbsp;human&nbsp;subjects&nbsp;in&nbsp;clinical&nbsp;trials.</font>
<font style=\"color: #006400; \">Rem:&nbsp;This&nbsp;program&nbsp;applies&nbsp;to&nbsp;plasma-like&nbsp;solutions&nbsp;containing&nbsp;albumin.&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;The&nbsp;program&nbsp;does&nbsp;not&nbsp;account&nbsp;for&nbsp;the&nbsp;contribution&nbsp;of&nbsp;plasma&nbsp;globulins,&nbsp;and&nbsp;has&nbsp;not&nbsp;been&nbsp;tested&nbsp;with&nbsp;clinical&nbsp;data;&nbsp;hence&nbsp;</font>
<font style=\"color: #006400; \">Rem:&nbsp;the&nbsp;program&nbsp;is&nbsp;not&nbsp;suitable&nbsp;for&nbsp;clinical&nbsp;use.</font>
<p><br><br><code><font style=\"color: #006400; \">I</font>mplemented in Modelica by Filip Jezek, FEE CTU in Prague, 2016</code></p>
</html>",     revisions="<html>
<pre><font style=\"color: #006400; \">Filip Jezek, 2016</font></pre>
</html>"));
          end Wolf;

          model FiggeFenclNSID "Calculation of normal SID using plasma figge fencl"
            parameter Real pH0(displayUnit="mmHg") = 7.4;
            input Real pCO20(displayUnit="mmHg") = 40;
            input Real Pi0(unit="mmol/l");
            //= 1.15;
            input Real alb0(unit="g/dl");
            //= 4.4;
            Real SID;
            // = figgeFencl3.SID;

            Auxilliary.FiggeFencl3 figgeFencl3(
              pH=pH0,
              pCO2=pCO20,
              Pi=Pi0,
              alb=alb0,
              SID=SID)
              annotation (Placement(transformation(extent={{-58,0},{-38,20}})));
          end FiggeFenclNSID;
        end Auxilliary;

        model PlasmaFiggeFencl3
          "Implementation of FF3 [Figge, 2013] together with NSID"
          extends
            AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.Auxilliary.FiggeFencl3;

          constant Real pH0(displayUnit="mmHg") = 7.4;
          constant Real pCO20(displayUnit="mmHg") = 40;
          Real NSID;
          //  input Real BE=SID - NSID;
          //input Real Pi;
          //input Real alb;
        protected
          AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.Auxilliary.FiggeFencl3
            normalPlasmaSID(
            pCO2=pCO20,
            Pi=Pi,
            alb=alb,
            SID=NSID)
            annotation (Placement(transformation(extent={{-58,0},{-38,20}})));

        equation

          normalPlasmaSID.pH = pH0;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end PlasmaFiggeFencl3;

        model PlasmaFencl
          "Implementation of Fencl [Fencl, 2000] together with NSID"
          extends
            AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.Auxilliary.Fencl;

          constant Real pH0(displayUnit="mmHg") = 7.4;
          constant Real pCO20(displayUnit="mmHg") = 40;
          Real NSID;
          //  Real BE=SID - NSID;
          //   input Real Pi;
          //   input Real alb;
        protected
          AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.Auxilliary.Fencl
            normalPlasmaSID(
            pCO2=pCO20,
            Pi=Pi,
            alb=alb,
            SID=NSID)
            annotation (Placement(transformation(extent={{-58,0},{-38,20}})));

        equation

          normalPlasmaSID.pH = pH0;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end PlasmaFencl;

        model PlasmaWolf
          "Implementation of Wolf model of plasma [Wolf, 2011] together with NSID"
          extends
            AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.Auxilliary.Wolf;

          constant Real pH0(displayUnit="mmHg") = 7.4;
          constant Real pCO20(displayUnit="mmHg") = 40;
          Real NSID;
          //  Real BE=SID - NSID;
          //   input Real Pi;
          //   input Real alb;
        protected
          AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.Auxilliary.Wolf
            normalPlasmaSID(
            pCO2=pCO20,
            Pi=Pi,
            alb=alb,
            SID=NSID)
            annotation (Placement(transformation(extent={{-58,0},{-38,20}})));

        equation

          normalPlasmaSID.pH = pH0;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end PlasmaWolf;

        package Tests
          extends Modelica.Icons.ExamplesPackage;
          model Plasma_pCO2 "Change of pH while changing pCO2"
            extends Modelica.Icons.Example;

            AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.PlasmaFiggeFencl3
              ff(
              SID=ff.NSID + BE,
              pCO2=pCO2,
              Pi=Pi,
              alb=alb) annotation (Placement(transformation(extent={{-60,20},{-40,
                      40}})));
            AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.PlasmaFencl
              fe(
              SID=fe.NSID + BE,
              pCO2=pCO2,
              Pi=Pi,
              alb=alb) annotation (Placement(transformation(extent={{-60,20},{-40,
                      40}})));

            AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.PlasmaWolf
              wo(
              SID=wo.NSID + BE,
              pCO2=pCO2,
              Pi=Pi,
              alb=alb) annotation (Placement(transformation(extent={{-60,20},{-40,
                      40}})));

            //parameter Real SID=39;
            //   Real SID=39 - 15 + time*30;
            //   Real pCO2=40;
            parameter Real BE=0;
            Real pCO2=time*40 + 20;
            parameter Real Pi=1.15;
            parameter Real alb=4.4;
            output Real pHFF=ff.pH;
            output Real pHFe=fe.pH;
            output Real pHWo=wo.pH;
          equation
            //  BE =
            annotation (experiment(Tolerance=1e-006),
                __Dymola_experimentSetupOutput);
          end Plasma_pCO2;

          model Plasma_BE "Change of pH while changing pCO2"
            extends Modelica.Icons.Example;

            AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.PlasmaFiggeFencl3
              ff(
              SID=ff.NSID + BE,
              pCO2=pCO2,
              Pi=Pi,
              alb=alb) annotation (Placement(transformation(extent={{-60,20},{-40,
                      40}})));
            AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.PlasmaFencl
              fe(
              SID=fe.NSID + BE,
              pCO2=pCO2,
              Pi=Pi,
              alb=alb) annotation (Placement(transformation(extent={{-60,20},{-40,
                      40}})));

            AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.PlasmaWolf
              wo(
              SID=wo.NSID + BE,
              pCO2=pCO2,
              Pi=Pi,
              alb=alb) annotation (Placement(transformation(extent={{-60,20},{-40,
                      40}})));

            //parameter Real SID=39;
            //   Real SID=39 - 15 + time*30;
            //   Real pCO2=40;
            Real BE=-15 + time*30;
            parameter Real pCO2=40;
            parameter Real Pi=1.15;
            parameter Real alb=4.4;
            output Real pHFF=ff.pH;
            output Real pHFe=fe.pH;
            output Real pHWo=wo.pH;
          equation
            //  BE =
            annotation (experiment(Tolerance=1e-006),
                __Dymola_experimentSetupOutput);
          end Plasma_BE;
        end Tests;
      end PlasmaElectrochemical;

      package FullBloodEmpirical
        package Auxiliary
          partial model FullBloodEmpiricalBase
            Real Hb(unit="g/dl") = Hct*33.34;
            input Real Hct(unit="1") = 15/33.34;
            input Real BEox(displayUnit="meq/l") = 0;
            input Real sO2(unit="1") = 1;
            input Real pCO2(displayUnit="mmHg") = 40;
            Real pH(start=7.4);
          end FullBloodEmpiricalBase;
        end Auxiliary;

        model SAVanSlyke77
          "original Van Slyke equation according to SA 1977 DOI: 10.3109/00365517709098927"
          extends Auxiliary.FullBloodEmpiricalBase;
          Real a(unit="mmol/l") "bicarbonate concentration in plasma/(mmol/l)";
          Real b(unit="mmol/l") = Hb*0.6206
            "hemoglobin concentration in blood/(mmol/l)";
          Real c(unit="1") = pH "pH of plasma at 37 degrees C";
          Real d(displayUnit="mEq/l") = BEox - 0.3*(1 - sO2)
            "base excess concentration in blood/(mmol/l)";

        equation
          a - 24.4 = -(2.3*b + 7.7)*(c - 7.40) + d/(1 - 0.023*b);
          pH = 6.1 + log10(a/(0.230*pCO2*133/1000));
        end SAVanSlyke77;

        model Zander1995 "Implementation according to [Zander, 1995]"
          extends Auxiliary.FullBloodEmpiricalBase;
          Real BE=(1 - 0.0143*Hb)*((0.0304*pCO2*(10^(pH - 6.1)) - 24.26) + (9.5 +
              1.63*Hb)*(pH - 7.4)) - 0.2*Hb*(1 - sO2);
        equation
          BE = BEox + 0.2*(1 - sO2)*Hb;
        end Zander1995;

        model SAVanSlyke
          "The Van Slyke equation by Sigaard-Andersen, taken from http://www.siggaard-andersen.dk/OsaTextbook.htm"
          extends Auxiliary.FullBloodEmpiricalBase;
          //    parameter Real Hct = 15/33.34;
          //    Real BEox = 0;
          //    parameter Real sO2 = 1;
          //    parameter Real pCO2 = 40;

          Real ctH=-(1 - (1 - rc)*fiEB)*((cHCO3 - cHCO30) + buf*(pH - 7.4))
            "concentration of titratable hydrogen ion";

          // Real rc = 0.57; // cHCO3e/cHCO3p from web pages
          Real rc=0.57 - 0.28*dpH - 0.082*dpH^2;
          // said to be from siggaard-andersen, 1974: The acid-base status of the blood
          Real dpH=-(pH - 7.4);

          //parameter Real fiEB = 0.7;//15/33.34;// Hct;// ctHbB/cHBE
          Real fiEB=Hct;
          // ctHbB/cHBE
          Real ctHbE(unit="mmol/l") = 21;
          Real cHCO30(unit="mmol/l") = 24.5;
          Real buf=2.3*ctHb + BetaP;
          Real ctHb=Hb*0.6206
            "Hb*4 SA is considering the monomer of hemoglobin tetramer";
          //Hct*33.34; // recompute the hematocrit to mmol/l - BUT IS THAT COMPATIBLE? TODO!
          Real BetaP=5.8 + 8.0*(cAlb - 0.66);
          // Real BetaP = 7.7 + 8.0 * (cAlb - 0.66);
          Real cAlb(unit="mmol/l") = Alb/6.6;
          //0.66;
          input Real Alb(unit="g/dl") = 4.4;

          Real BE=-ctH;
          Real cHCO3(start=24.5);
        equation
          BEox = BE + 0.3*(1 - sO2);

          pH = 6.1 + log10(cHCO3/(0.230*pCO2*133/1000));

        end SAVanSlyke;

        model Kofr2009 "[Kofranek, 2009]"
          extends Auxiliary.FullBloodEmpiricalBase;

          Real a[:]={996.35 - 10.35*Hb,35.16875 + 0.25875*Hb,-82.41 + 2.01*Hb,-5.27625
               - (5.025e-2)*Hb,121 - Hb,2.625 + 0.025*Hb,-2.556 - 0.0944*Hb,
              13.87634 + 0.186653*Hb + 0.00534936*Hb^2,0.548 - 0.0274*Hb,0.274 -
              0.0137*Hb};

        public
          Real BE=BEox + 0.2*(1 - sO2)*Hb;
          Real Y=a[7] + sqrt(a[8] + a[9]*BE);

        equation
          pH = (a[1]*a[10] + a[2]*Y + (a[3]*a[10] + a[4]*Y)*log10(pCO2))/(a[5]*a[10]
             + a[6]*Y);

        end Kofr2009;

        model SAoriginal
          "Our complex polynomial fit to original SA data, used as a reference"
          extends Auxiliary.FullBloodEmpiricalBase;

        protected
          constant Real pco2BBCoef[:]={2.1125e-009,-640.9926e-009,72.7649e-006,-3.2862e-003,
              -38.1749e-003,8.2352e+000,-97.0551e+000};
          constant Real pco2BECoef[:]={8.3975e-009,-513.9503e-009,3.8105e-006,
              231.6888e-006,-46.5581e-003,353.7105e-003,39.9871e+000};
          constant Real pHBBCoef[:]={40.8936e-012,-13.0063e-009,1.6780e-006,-111.7919e-006,
              4.0776e-003,-67.8274e-003,7.2888e+000};
          constant Real pHBECoef[:]={131.3315e-009,2.5027e-006,175.6144e-006,
              11.9273e-003,7.4001e+000};
        public
          Real pCO2BB(start=96) = pco2BBCoef[1]*BB^6 + pco2BBCoef[2]*BB^5 +
            pco2BBCoef[3]*BB^4 + pco2BBCoef[4]*BB^3 + pco2BBCoef[5]*BB^2 +
            pco2BBCoef[6]*BB + pco2BBCoef[7];
          Real pCO2BE(start=40) = pco2BECoef[1]*BE^6 + pco2BECoef[2]*BE^5 +
            pco2BECoef[3]*BE^4 + pco2BECoef[4]*BE^3 + pco2BECoef[5]*BE^2 +
            pco2BECoef[6]*BE + pco2BECoef[7];
          Real pHBB(start=7) = pHBBCoef[1]*BB^6 + pHBBCoef[2]*BB^5 + pHBBCoef[3]*BB
            ^4 + pHBBCoef[4]*BB^3 + pHBBCoef[5]*BB^2 + pHBBCoef[6]*BB + pHBBCoef[7];
          Real pHBE(start=7) = pHBECoef[1]*BE^4 + pHBECoef[2]*BE^3 + pHBECoef[3]*BE
            ^2 + pHBECoef[4]*BE + pHBECoef[5];

          Real BB=BE + 0.42*Hb + 41.7;
          Real BE=BEox + 0.2*(1 - sO2)*Hb;

        equation
          pH = (log10(pCO2) - log10(pCO2BB))*(pHBB - pHBE)/(log10(pCO2BB) - log10(
            pCO2BE)) + pHBB;

        end SAoriginal;

        package Tests
          extends Modelica.Icons.ExamplesPackage;
          model Blood_pCO2
            "pH dependent on varying pCO2 by different approximations. We take our implementation of SA nomogram as reference. Compare the object's pH"
            extends Modelica.Icons.Example;
            parameter Real Hct=15/33.34;
            parameter Real BEox=0;
            parameter Real sO2=1;
            output Real pHZander=zander1995.pH;
            output Real pHNomogram=sAoriginal.pH;
            output Real pHVanSlyke=sAVanSlyke.pH;
            output Real pHVanSlyke77=sAVanSlyke77.pH;
            input Real pCO2=time*40 + 20;
            FullBloodEmpirical.Zander1995 zander1995(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2) annotation (Placement(transformation(extent={{-100,40},{
                      -80,60}})));
            FullBloodEmpirical.Kofr2009 kofr2009(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2)
              annotation (Placement(transformation(extent={{-20,40},{0,60}})));
            FullBloodEmpirical.SAoriginal sAoriginal(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2)
              annotation (Placement(transformation(extent={{34,40},{54,60}})));
            FullBloodEmpirical.SAVanSlyke sAVanSlyke(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2)
              annotation (Placement(transformation(extent={{80,40},{100,60}})));
            FullBloodEmpirical.SAVanSlyke77 sAVanSlyke77(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2) annotation (Placement(transformation(extent={{-60,40},{-40,
                      60}})));
            annotation (
              experiment(Tolerance=0.001),
              __Dymola_experimentSetupOutput,
              __Dymola_Commands(file="def.mos" "def"));
          end Blood_pCO2;

          model Blood_BE
            "pH dependent on varying pCO2 by different approximations. We take our implementation of SA nomogram as reference. Compare the object's pH"
            extends Modelica.Icons.Example;
            parameter Real Hct=15/33.34;
            Real BEox=-15 + time*30;
            parameter Real sO2=1;
            output Real pHZander=zander1995.pH;
            output Real pHNomogram=sAoriginal.pH;
            output Real pHVanSlyke=sAVanSlyke.pH;
            output Real pHVanSlyke77=sAVanSlyke77.pH;
            parameter Real pCO2=40;
            //time*40 + 20;
            FullBloodEmpirical.Zander1995 zander1995(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2) annotation (Placement(transformation(extent={{-100,40},{
                      -80,60}})));
            FullBloodEmpirical.Kofr2009 kofr2009(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2)
              annotation (Placement(transformation(extent={{-20,40},{0,60}})));
            FullBloodEmpirical.SAoriginal sAoriginal(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2)
              annotation (Placement(transformation(extent={{34,40},{54,60}})));
            FullBloodEmpirical.SAVanSlyke sAVanSlyke(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2)
              annotation (Placement(transformation(extent={{80,40},{100,60}})));
            FullBloodEmpirical.SAVanSlyke77 sAVanSlyke77(
              pCO2=pCO2,
              BEox=BEox,
              Hct=Hct,
              sO2=sO2) annotation (Placement(transformation(extent={{-60,40},{-40,
                      60}})));
            annotation (
              experiment(Tolerance=0.001),
              __Dymola_experimentSetupOutput,
              __Dymola_Commands(file="def.mos" "def"));
          end Blood_BE;
        end Tests;
        annotation (Documentation(info="<html>
<h4>References:</h4>
<p>Fencl, V., Jabor, A., Kazda, A., &amp; Figge, J. (2000). Appendix of Diagnosis of Metabolic Acid&ndash;Base Disturbances in Critically Ill Patients. American Journal of Respiratory and Critical Care Medicine, 162(6), 2246&ndash;2251.</p>
<p>Figge, J. (27 October, 2013). The Figge-Fencl Quantitative Physicochemical Model of Human Acid-Base Physiology (Version 3.0). Retrieved June 22, 2016, from http://www.figge-fencl.org/model.html</p>
<p>Kofr&aacute;nek, J. (2009). KOMPLEXN&Iacute; MODEL ACIDOBAZICK&Eacute; ROVNOV&Aacute;HY KRVE. Medsoft 2009. Retrieved from http://www.physiome.cz/references/Medsoft09a.pdf</p>
<p>Raftos, J. E., Bulliman, B. T., &amp; Kuchel, P. W. (1990). Evaluation of an electrochemical model of erythrocyte pH buffering using 31P nuclear magnetic resonance data. The Journal of General Physiology, 95(6), 1183&ndash;1204.</p>
<p>Siggaard-Andersen, O. (1977). The van Slyke equation. Scandinavian Journal of Clinical and Laboratory Investigation. Supplementum, 146, 15&ndash;20.</p>
<p>Siggaard-Andersen, O., &amp; Fogh-Andersen, N. (1995). Base excess or buffer base (strong ion difference) as measure of a non-respiratory acid-base disturbance. Acta Anaesthesiologica Scandinavica. Supplementum, 107, 123&ndash;128.</p>
<p>Wolf, M. B. (2013). Whole body acid-base and fluid-electrolyte balance: a mathematical model. American Journal of Physiology. Renal Physiology, 305(8), F1118&ndash;31.</p>
<p>Wolf, M. B. (2015). Comprehensive diagnosis of whole-body acid-base and fluid-electrolyte disorders using a mathematical model and whole-body base excess. Journal of Clinical Monitoring and Computing, 29(4), 475&ndash;490.</p>
<p>Wolf, M. B., &amp; DeLand, E. C. (2011). A comprehensive, computer-model-based approach for diagnosis and treatment of complex acid&ndash;base disorders in critically-ill patients. Journal of Clinical Monitoring and Computing, 25(6), 353&ndash;364.</p>
<p>Wolf, M. B., &amp; Deland, E. C. (2011). A mathematical model of blood-interstitial acid-base balance: application to dilution acidosis and acid-base status. Journal of Applied Physiology, 110(4), 988&ndash;1002.</p>
<p>Zander, R. (1995). Die korrekte Bestimmung des Base Excess (BE, mmol/l) im Blut. AINS-An&auml;sthesiologie- Intensivmedizin- Notfallmedizin- Schmerztherapie, 30(S 1), S36&ndash;S38.</p>
</html>"));
      end FullBloodEmpirical;

      package FullBloodCombined
        extends Modelica.Icons.ExamplesPackage;

        model CombinedModel
          "Test combined model of Figge-fencl plasma and SA full hemoatocrite"
          replaceable FullBloodAcidBase.PlasmaElectrochemical.PlasmaFiggeFencl3
            plasma(
            SID=SID,
            pCO2=pCO2,
            Pi=Pi,
            alb=alb) constrainedby
            FullBloodAcidBase.PlasmaElectrochemical.Auxilliary.PlasmaElectrochemicalBase(
            SID=SID,
            pCO2=pCO2,
            Pi=Pi,
            alb=alb)
            annotation (Placement(transformation(extent={{-20,20},{0,40}})));

          replaceable FullBloodAcidBase.FullBloodEmpirical.SAoriginal fullErythrocyte(
            Hct=1,
            BEox=BEe,
            pCO2=pCO2) constrainedby
            FullBloodAcidBase.FullBloodEmpirical.Auxiliary.FullBloodEmpiricalBase(
            Hct=1,
            BEox=BEe,
            pCO2=pCO2)
            annotation (Placement(transformation(extent={{20,20},{40,40}})));
          constant Real fullHb=33.34;
          input Real Hb=15;
          input Real Hct=Hb/fullHb;

          Real BEp(unit="meq/l") = BE + mHCO3/Hct;
          Real BEe(unit="meq/l") = BE - mHCO3/(1 - Hct);

          Real mHCO3;

          Real SID;
          input Real BE=0;
          input Real pCO2=40;
          input Real Pi=1.15;
          input Real alb=4.4;
          output Real pH=fullErythrocyte.pH;
        equation
          plasma.pH = fullErythrocyte.pH;
          BEp = SID - plasma.NSID;

          annotation (experiment(
              StopTime=1,
              __Dymola_NumberOfIntervals=500,
              Tolerance=1e-003));
        end CombinedModel;

        model SimplestCombinedListing
          "Provides simplest combined model, listed as a lucid flat modelica implementation. The Zander's model is however not very precise for this usage."
          extends Modelica.Icons.Example;

          // INPUT PARAMETERS
          Real BEox(displayUnit="meq/l") = 0;
          // Real BEox(displayUnit="meq/l") = time "set the start and end time of simulation to desired range";
          Real Pi(unit="mmol/l") = 1.15 "Total phosphate. Normal value 1.15";
          Real alb(unit="g/dl") = 4.4 "Albumin concentration. Normal value 4.4";
          Real Hb(unit="g/dl") = 15;
          Real sO2(unit="1") = 1;
          Real pCO2(displayUnit="mmHg") = 40
            "CO2 partial pressure. Normal value 40";

          Real BE=BEox + 0.2*(1 - sO2)*Hb
            "BE in full blood - correction for oxygen saturation";
          Real Hct(unit="1") = Hb/33.34 "estimation of hematocrit";

          // These two are unknown
          Real X "Cl for HCO exchange, meq/l";
          Real pH(start=10, unit="1") "pH of whole blood";

          // ERYTHROCYTE PROPERTIES (Zander, 1995)
          Real BEe(unit="meq/l") = (1 - 0.0143*Hb)*((0.0304*pCO2*(10^(pH - 6.1)) -
            24.26) + (9.5 + 1.63*Hb)*(pH - 7.4)) "Zander equation for BE";

          // PLASMA PROPERTIES
          Real BEp(unit="meq/l") = SID - NSID "BE in plasma is obtained from NSID";
          Real SID(displayUnit="meq/l") = -(P + atch - HCO3)
            "Strong ion difference given by electroneutrality of plasma compartment. Normal value 39";
          Real HCO3(displayUnit="mmol/l") = 24.4e-9*pCO2/10^(-pH)
            "Total HCO3 (Figge)";
          Real P(displayUnit="meq/l") = -Pi*(0.309*pH - 0.469)
            "Total charge of phosphates (Fencl)";
          Real atch=-(alb*10)*(0.123*pH - 0.631) "albumin total charge (Fencl)";

          // NORMAL SID
          Real NSID=-(NP_P + NP_atch - NP_HCO3)
            "SID as would be in pH 7.4 and pCO2 40 torr";
          Real NP_HCO3(displayUnit="mmol/l") = 24.4e-9*40/10^(-7.4)
            "Total HCO3 in normal plasma (Figge)";
          Real NP_P(displayUnit="meq/l") = -Pi*(0.309*7.4 - 0.469)
            "Total charge of phosphates in normal plasma (Fencl)";
          Real NP_atch=-(alb*10)*(0.123*7.4 - 0.631)
            "albumin total charge in normal plasma(Fencl)";
        equation

          BEp = BE - X/(1 - Hct);
          BEe = BE + X/Hct;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end SimplestCombinedListing;

        model PolynomialCombinedListing
          "Provides simple combined model with polynomial description of the behavioral HCT1 compartment. Provides good precision, yet good performance as well."
          extends Modelica.Icons.Example;

          // INPUT PARAMETERS
          Real BEox(displayUnit="meq/l") = 0;
          // Real BEox(displayUnit="meq/l") = time "set the start and end time of simulation to desired range";
          Real Pi(unit="mmol/l") = 1.15 "Total phosphate. Normal value 1.15";
          Real alb(unit="g/dl") = 4.4 "Albumin concentration. Normal value 4.4";
          Real Hb(unit="g/dl") = 15;
          Real sO2(unit="1") = 1;
          Real pCO2(displayUnit="mmHg") = 40
            "CO2 partial pressure. Normal value 40";

          Real BE=BEox + 0.2*(1 - sO2)*Hb
            "BE in full blood - correction for oxygen saturation";
          Real Hct(unit="1") = Hb/33.34 "estimation of hematocrit";

          // These two are unknown
          Real X "Cl for HCO exchange, meq/l";
          Real pH(start=10, unit="1") "pH of whole blood";

          // ERYTHROCYTE PROPERTIES - polynomial approximation

        protected
          constant Real pco2BBCoef[:]={2.1125e-009,-640.9926e-009,72.7649e-006,-3.2862e-003,
              -38.1749e-003,8.2352e+000,-97.0551e+000};
          constant Real pco2BECoef[:]={8.3975e-009,-513.9503e-009,3.8105e-006,
              231.6888e-006,-46.5581e-003,353.7105e-003,39.9871e+000};
          constant Real pHBBCoef[:]={40.8936e-012,-13.0063e-009,1.6780e-006,-111.7919e-006,
              4.0776e-003,-67.8274e-003,7.2888e+000};
          constant Real pHBECoef[:]={131.3315e-009,2.5027e-006,175.6144e-006,
              11.9273e-003,7.4001e+000};
        public
          Real pCO2BB(start=96) = pco2BBCoef[1]*BB^6 + pco2BBCoef[2]*BB^5 +
            pco2BBCoef[3]*BB^4 + pco2BBCoef[4]*BB^3 + pco2BBCoef[5]*BB^2 +
            pco2BBCoef[6]*BB + pco2BBCoef[7];
          Real pCO2BE(start=40) = pco2BECoef[1]*BEe^6 + pco2BECoef[2]*BEe^5 +
            pco2BECoef[3]*BEe^4 + pco2BECoef[4]*BEe^3 + pco2BECoef[5]*BEe^2 +
            pco2BECoef[6]*BEe + pco2BECoef[7];
          Real pHBB(start=7) = pHBBCoef[1]*BB^6 + pHBBCoef[2]*BB^5 + pHBBCoef[3]*BB
            ^4 + pHBBCoef[4]*BB^3 + pHBBCoef[5]*BB^2 + pHBBCoef[6]*BB + pHBBCoef[7];
          Real pHBE(start=7) = pHBECoef[1]*BEe^4 + pHBECoef[2]*BEe^3 + pHBECoef[3]*
            BEe^2 + pHBECoef[4]*BEe + pHBECoef[5];

          Real BB=BEe + 0.42*Hb + 41.7;
          Real BEe;

          // PLASMA PROPERTIES
          Real BEp(unit="meq/l") = SID - NSID "BE in plasma is obtained from NSID";
          Real SID(displayUnit="meq/l") = -(P + atch - HCO3)
            "Strong ion difference given by electroneutrality of plasma compartment. Normal value 39";
          Real HCO3(displayUnit="mmol/l") = 24.4e-9*pCO2/10^(-pH)
            "Total HCO3 (Figge)";
          Real P(displayUnit="meq/l") = -Pi*(0.309*pH - 0.469)
            "Total charge of phosphates (Fencl)";
          Real atch=-(alb*10)*(0.123*pH - 0.631) "albumin total charge (Fencl)";

          // NORMAL SID
          Real NSID=-(NP_P + NP_atch - NP_HCO3)
            "SID as would be in pH 7.4 and pCO2 40 torr";
          Real NP_HCO3(displayUnit="mmol/l") = 24.4e-9*40/10^(-7.4)
            "Total HCO3 in normal plasma (Figge)";
          Real NP_P(displayUnit="meq/l") = -Pi*(0.309*7.4 - 0.469)
            "Total charge of phosphates in normal plasma (Fencl)";
          Real NP_atch=-(alb*10)*(0.123*7.4 - 0.631)
            "albumin total charge in normal plasma(Fencl)";
        equation
          pH = (log10(pCO2) - log10(pCO2BB))*(pHBB - pHBE)/(log10(pCO2BB) - log10(
            pCO2BE)) + pHBB;

          BEp = BE - X/(1 - Hct);
          BEe = BE + X/Hct;

          annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
                coordinateSystem(preserveAspectRatio=false)));
        end PolynomialCombinedListing;
      end FullBloodCombined;
    end FullBloodAcidbase;
  end Acidbase;

  package BloodComponents
    model BloodResistor
      extends Package.BloodOnePort;
      extends Physiolibrary.Icons.HydraulicResistor;
        parameter Physiolibrary.Types.HydraulicResistance Resistance;
      Physiolibrary.Hydraulic.Components.Resistor resistor(Resistance=
            Resistance)
        annotation (Placement(transformation(extent={{-20,0},{0,20}})));

    equation
      connect(bloodPort_in_Extension.bloodFlow, resistor.q_in) annotation (Line(
          points={{-50,10},{-20,10}},
          color={0,0,0},
          thickness=1));
      connect(resistor.q_out, flowMeasure.q_in) annotation (Line(
          points={{0,10},{20,10}},
          color={0,0,0},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}),
                       graphics={Text(
              extent={{-220,-40},{200,-80}},
              lineColor={0,0,255},
              fillColor={58,117,175},
              fillPattern=FillPattern.Solid,
              textString="%name")}),
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"));
    end BloodResistor;

    model BloodConductor
      extends Package.BloodOnePort;
      extends Physiolibrary.Icons.HydraulicResistor;

      Physiolibrary.Hydraulic.Components.Conductor conductor(useConductanceInput=true)
        annotation (Placement(transformation(extent={{-10,0},{10,20}})));

    // conditional conductance construction
      parameter Boolean useConductanceInput = false
        "=true, if external conductance value is used"
        annotation(Evaluate=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
    //    annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
      parameter Physiolibrary.Types.HydraulicConductance   Conductance=1e-6
        "Hydraulic conductance if useConductanceInput=false"
        annotation (Dialog(enable=not useConductanceInput));

        Physiolibrary.Types.RealIO.HydraulicConductanceInput cond(start=Conductance)=c if useConductanceInput
                                                       annotation (Placement(
            transformation(extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,66})));
    protected
         Physiolibrary.Types.HydraulicConductance c;
    equation
      if not useConductanceInput then
        c=Conductance;
      end if;
      conductor.cond = c;

      connect(conductor.q_out, flowMeasure.q_in) annotation (Line(
          points={{10,10},{20,10}},
          color={0,0,0},
          thickness=1));
      connect(conductor.q_in, bloodPort_in_Extension.bloodFlow) annotation (Line(
          points={{-10,10},{-50,10}},
          color={0,0,0},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}),
                       graphics={Text(
              extent={{-220,-40},{200,-80}},
              lineColor={0,0,255},
              fillColor={58,117,175},
              fillPattern=FillPattern.Solid,
              textString="%name")}),
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"),
        Diagram(graphics={Line(
              points={{0,16},{0,60}},
              color={28,108,200},
              pattern=LinePattern.Dash,
              thickness=0.5)}));
    end BloodConductor;

    model BloodElasticVesselCompliance
      extends BloodVessel;
      extends Physiolibrary.Icons.ElasticBalloon;

      parameter Physiolibrary.Types.Volume ZeroPressureVolume = 0;
      parameter Physiolibrary.Types.Pressure ExternalPressure=0
        "External pressure. Set zero if internal pressure is relative to external. Valid only if useExternalPressureInput=false."
        annotation (Dialog(enable=not useExternalPressureInput));
      parameter Boolean useExternalPressureInput = false
        "=true, if external pressure input is used"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

     Physiolibrary.Types.RealIO.PressureInput externalPressure(start=ExternalPressure) = ep if useExternalPressureInput
                                                       annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
            rotation=270,
            origin={82,100})));

      parameter Physiolibrary.Types.HydraulicCompliance Compliance = 1
        "Compliance if useComplianceInput=false"
        annotation (Dialog(enable=not useComplianceInput));

        parameter Boolean useComplianceInput = false
        "=true, if compliance input is used"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput compliance(start=Compliance) = c if useComplianceInput
                                                            annotation (Placement(
            transformation(extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,100})));

     // parameter Physiolibrary.Types.Concentration O2_startConcentration;
     // parameter Physiolibrary.Types.Concentration CO2_startConcentration;
     // parameter Physiolibrary.Types.Concentration BEox_startConcentration;
                                                                        //=Blood_volume_start* CO2_startConcentration;
                                                                         //=Blood_volume_start* BEox_startConcentration;

      Physiolibrary.Hydraulic.Components.ElasticVessel elasticVesselCompliance(
        ZeroPressureVolume=ZeroPressureVolume,
        volume_start=volume_start,
        useExternalPressureInput=true,
        useComplianceInput=true)
        annotation (Placement(transformation(extent={{14,38},{34,58}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure3
        annotation (Placement(transformation(extent={{42,41},{64,19}})));

    protected
      Physiolibrary.Types.Pressure ep;
      Physiolibrary.Types.HydraulicCompliance c;
    equation
      if not useComplianceInput then
        c=Compliance;
      end if;
      if not useExternalPressureInput then
        ep=ExternalPressure;
      end if;
      elasticVesselCompliance.externalPressure =  ep;
      elasticVesselCompliance.compliance = c;

      connect(elasticVesselCompliance.volume, O2.solutionVolume) annotation (Line(
            points={{30,38},{30,-2},{10,-2}},            color={0,0,127}));
      connect(elasticVesselCompliance.volume, CO2.solutionVolume)
        annotation (Line(points={{30,38},{30,-26},{10,-26}}, color={0,0,127}));
      connect(elasticVesselCompliance.volume, BEox.solutionVolume)
        annotation (Line(points={{30,38},{30,-50},{10,-50}}, color={0,0,127}));
      connect(flowMeasure.q_out, flowMeasure3.q_in) annotation (Line(
          points={{6,30},{42,30}},
          color={0,0,0},
          thickness=1));
      connect(elasticVesselCompliance.q_in, flowMeasure3.q_in) annotation (Line(
          points={{24,48},{24,30},{42,30}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure3.volumeFlow, O2flow1.solutionFlow) annotation (Line(
            points={{53,16.8},{53,-7.6},{46,-7.6},{46,1}},     color={0,0,127}));
      connect(flowMeasure3.volumeFlow, CO2flow1.solutionFlow) annotation (Line(
            points={{53,16.8},{53,-21.6},{46,-21.6},{46,-23}}, color={0,0,127}));
      connect(flowMeasure3.volumeFlow, BEoxflow1.solutionFlow) annotation (Line(
            points={{53,16.8},{53,-46.6},{46,-46.6},{46,-47}}, color={0,0,127}));
      connect(flowMeasure3.q_out, bloodPort_out_Extension.bloodFlow)
        annotation (Line(
          points={{64,30},{68,30},{68,10},{72,10}},
          color={0,0,0},
          thickness=1));
      connect(oneToMany1.u, elasticVesselCompliance.volume)
        annotation (Line(points={{20,-76},{30,-76},{30,38}}, color={0,0,127}));
      connect(flowMeasure3.volumeFlow, oneToMany2.u) annotation (Line(points={{53,16.8},
              {53,-64},{52,-64},{52,-76}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={
                                      Text(
              extent={{-318,-140},{160,-100}},
              textString="%name",
              lineColor={0,0,255})}),
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}),
                        graphics={Line(points={{38,58},{82,58},{82,84}}, color={28,
                  108,200},
              pattern=LinePattern.Dash,
              thickness=0.5), Line(
              points={{-2,90},{-2,58},{20,58}},
              color={28,108,200},
              pattern=LinePattern.Dash,
              thickness=0.5)}));
    end BloodElasticVesselCompliance;

    model BloodElasticVesselElastance
      extends AcidBaseBalance.BloodComponents.BloodElasticVesselCompliance(
                                                                   Compliance=1/Elastance);
      parameter Physiolibrary.Types.HydraulicElastance Elastance;
    end BloodElasticVesselElastance;

    model BloodValve
      extends Package.BloodOnePort;
      parameter Physiolibrary.Types.HydraulicConductance _Goff=1.2501026264094e-12;
      parameter Physiolibrary.Types.Pressure Pknee=0;
      parameter Physiolibrary.Types.HydraulicResistance _Ron= 79.993432449
        "forward state resistance";

      Physiolibrary.Hydraulic.Components.IdealValveResistance
        idealValveResistance(
        _Goff=_Goff,
        _Ron=_Ron,
        Pknee=Pknee)
        annotation (Placement(transformation(extent={{-12,0},{8,20}})));
    equation
      connect(bloodPort_in_Extension.bloodFlow, idealValveResistance.q_in)
        annotation (Line(
          points={{-50,10},{-12,10}},
          color={0,0,0},
          thickness=1));
      connect(idealValveResistance.q_out, flowMeasure.q_in) annotation (Line(
          points={{8,10},{20,10}},
          color={0,0,0},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={
                                       Polygon(
              points={{-76,66},{-76,-82},{34,-10},{34,12},{-66,68},{-76,74},{
                  -76,66}},
              lineColor={0,0,127},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid), Rectangle(
              extent={{40,96},{68,-94}},
              lineColor={0,0,127},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-188,-96},{192,-118}},
              lineColor={255,0,0},
              fillPattern=FillPattern.Sphere,
              fillColor={255,85,85},
              textString="%name")}),
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"));
    end BloodValve;

    model BloodInertia
      extends Package.BloodOnePort;
      extends Physiolibrary.Icons.Inertance;
      parameter Physiolibrary.Types.HydraulicInertance I;
      parameter Physiolibrary.Types.VolumeFlowRate volumeFlow_start=0.3
        "Volumetric flow start value"
         annotation (Dialog(group="Initialization"));

      Physiolibrary.Hydraulic.Components.Inertia inertia(volumeFlow_start=
            volumeFlow_start, I=I)
        annotation (Placement(transformation(extent={{-14,0},{6,20}})));
    equation

      connect(bloodPort_in_Extension.bloodFlow, inertia.q_in) annotation (Line(
          points={{-50,10},{-14,10}},
          color={0,0,0},
          thickness=1));
      connect(inertia.q_out, flowMeasure.q_in) annotation (Line(
          points={{6,10},{20,10}},
          color={0,0,0},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={
                                      Text(
              extent={{-248,-140},{230,-100}},
              textString="%name",
              lineColor={0,0,255})}),
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"));
    end BloodInertia;

    model Pump
      extends Package.BloodOnePort;
      Physiolibrary.Hydraulic.Components.Pump pump(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-20,0},{0,20}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput volumeFlowRate annotation (
         Placement(transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,108}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,40})));
    equation
      connect(volumeFlowRate, pump.solutionFlow)
        annotation (Line(points={{0,108},{0,17},{-10,17}}, color={0,0,127}));
      connect(bloodPort_in_Extension.bloodFlow, pump.q_in) annotation (Line(
          points={{-50,10},{-20,10}},
          color={0,0,0},
          thickness=1));
      connect(pump.q_out, flowMeasure.q_in) annotation (Line(
          points={{0,10},{20,10}},
          color={0,0,0},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-100,-50},{100,50}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-80,25},{80,0},{-80,-25},{-80,25}},
              lineColor={0,0,0},
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-150,-94},{150,-54}},
              textString="%name",
              lineColor={0,0,255})}), Diagram(coordinateSystem(
              preserveAspectRatio=false)));
    end Pump;

    model PressureMeasure "Hydraulic pressure at port"
      extends Physiolibrary.Icons.PressureMeasure;
      Physiolibrary.Types.RealIO.PressureOutput pressure = bloodPort_in.pressure "Pressure" annotation (
          Placement(transformation(extent={{60,30},{100,70}}), iconTransformation(
              extent={{38,-48},{78,-8}})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-112,26},{-92,46}}), iconTransformation(extent={{-62,-82},
                {-36,-58}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput concO2 = inStream(bloodPort_in.conc[1]) annotation (Placement(
            transformation(extent={{60,-80},{80,-60}}),
                                                      iconTransformation(extent={{80,
                80},{100,100}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput concCO2 = inStream(bloodPort_in.conc[2]) annotation (Placement(
            transformation(extent={{60,-60},{80,-40}}),iconTransformation(extent={{80,
                40},{100,60}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput concBEox = inStream(bloodPort_in.conc[3]) annotation (Placement(
            transformation(extent={{60,-40},{80,-20}}), iconTransformation(extent={{
                80,0},{100,20}})));
    equation
      bloodPort_in.bloodFlow = 0;
      bloodPort_in.conc = zeros(size(bloodPort_in.conc, 1));
      bloodPort_in.ions = zeros(size(bloodPort_in.ions, 1));
     annotation (
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),     Icon(graphics={
            Text(
              extent={{70,80},{10,100}},
              lineColor={28,108,200},
              textString="O2",
              horizontalAlignment=TextAlignment.Right),
            Text(
              extent={{70,40},{10,60}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Right,
              textString="CO2"),
            Text(
              extent={{70,0},{10,20}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Right,
              textString="BEox")}));
    end PressureMeasure;

    model FlowMeasure "Volumetric flow between ports"
      //extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      //extends Icons.FlowMeasure;
      extends Modelica.Icons.RotationalSensor;

      Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeFlow
        "Actual volume flow rate" annotation (Placement(transformation(
            extent={{-9,-9},{9,9}},
            rotation=0,
            origin={-1,69}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={0,120})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-102,-8},{-82,12}}), iconTransformation(extent={{-100,-10},
                {-80,10}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{64,-14},{84,6}}), iconTransformation(extent=
               {{80,-10},{100,10}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput O2flow annotation (Placement(
            transformation(extent={{4,-34},{24,-14}}), iconTransformation(
            extent={{-17,-17},{17,17}},
            rotation=270,
            origin={-53,-117})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput CO2flow annotation (Placement(
            transformation(extent={{6,-70},{26,-50}}), iconTransformation(
            extent={{-17,-17},{17,17}},
            rotation=270,
            origin={63,-117})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{-26,30},{-6,50}})));
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-72,-8},{-52,12}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{34,-14},{54,6}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure
        annotation (Placement(transformation(extent={{-24,-8},{-4,12}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1
        annotation (Placement(transformation(extent={{-18,-48},{2,-28}})));
    equation

      connect(bloodPort_in_Extension.bloodPort_in, bloodPort_in) annotation (Line(
          points={{-72,2},{-92,2}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.bloodFlow, flowMeasure.q_in) annotation (Line(
          points={{-52,12},{-52,40},{-26,40}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_out_Extension.bloodFlow, flowMeasure.q_out) annotation (
          Line(
          points={{34,6},{34,40},{-6,40}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_in_Extension.O2, molarFlowMeasure.q_in) annotation (Line(
          points={{-52,4},{-38,4},{-38,2},{-24,2}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_out, bloodPort_out_Extension.O2) annotation (Line(
          points={{-4,2},{16,2},{16,-2},{34,-2}},
          color={107,45,134},
          thickness=1));
      connect(flowMeasure.volumeFlow, volumeFlow)
        annotation (Line(points={{-16,52},{-16,69},{-1,69}}, color={0,0,127}));
      connect(O2flow, molarFlowMeasure.molarFlowRate) annotation (Line(points={{14,-24},
              {2,-24},{2,-26},{-14,-26},{-14,-6}}, color={0,0,127}));
      connect(bloodPort_in_Extension.CO2, molarFlowMeasure1.q_in) annotation (Line(
          points={{-52,-0.2},{-40,-0.2},{-40,-2},{-28,-2},{-28,-38},{-18,-38}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out, bloodPort_out_Extension.CO2) annotation (
          Line(
          points={{2,-38},{26,-38},{26,-6},{34,-6}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.molarFlowRate, CO2flow)
        annotation (Line(points={{-8,-46},{-8,-60},{16,-60}}, color={0,0,127}));
      connect(bloodPort_in_Extension.BEox, bloodPort_out_Extension.BEox)
        annotation (Line(
          points={{-52,-4},{-44,-4},{-44,-76},{32,-76},{32,-10},{34,-10}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_out_Extension.bloodPort_out, bloodPort_out) annotation (
          Line(
          points={{54,-4},{74,-4}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.ions, bloodPort_out_Extension.ions)
        annotation (Line(
          points={{-52,-8},{-46,-8},{-46,-82},{34,-82},{34,-14}},
          color={107,45,134},
          thickness=1));
      annotation (
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),     Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={
            Line(
              points={{-60,80},{80,80},{62,60}},
              color={0,0,255}),
            Line(
              points={{62,100},{80,80}},
              color={0,0,255}),
            Text(
              extent={{-25,-11},{34,-70}},
              lineColor={0,0,0},
              textString="V'"),
            Text(
              extent={{-42,-96},{-102,-76}},
              lineColor={28,108,200},
              textString="O2",
              horizontalAlignment=TextAlignment.Right),
            Text(
              extent={{78,-96},{18,-76}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Right,
              textString="CO2")}));
    end FlowMeasure;

    model FlowConcentrationMeasure "Volumetric flow between ports"
      //extends Physiolibrary.Hydraulic.Interfaces.OnePort;
      //extends Icons.FlowMeasure;
      extends Modelica.Icons.RotationalSensor;

      Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeFlow
        "Actual volume flow rate" annotation (Placement(transformation(
            extent={{-9,-9},{9,9}},
            rotation=0,
            origin={-1,69}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={0,120})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-102,-8},{-82,12}}), iconTransformation(extent={{-100,-10},
                {-80,10}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{64,-14},{84,6}}), iconTransformation(extent=
               {{80,-10},{100,10}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{-26,30},{-6,50}})));
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-72,-8},{-52,12}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{34,-14},{54,6}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure
        O2_concentrationMeasure annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-24,14})));
      Physiolibrary.Types.RealIO.ConcentrationOutput O2_conc annotation (
          Placement(transformation(extent={{-6,14},{14,34}}),
            iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-80,-120})));
      Physiolibrary.Types.RealIO.ConcentrationOutput CO2_conc annotation (
          Placement(transformation(extent={{-10,-26},{10,-6}}),
            iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={3.55271e-15,-120})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure
        CO2_concentrationMeasure annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-18,-28})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure
        BEox_concentrationMeasure annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-16,-60})));
      Physiolibrary.Types.RealIO.ConcentrationOutput BEox_conc annotation (
          Placement(transformation(extent={{-2,-56},{18,-36}}),
            iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={80,-120})));
    equation

      connect(bloodPort_in_Extension.bloodPort_in, bloodPort_in) annotation (Line(
          points={{-72,2},{-92,2}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.bloodFlow, flowMeasure.q_in) annotation (Line(
          points={{-52,12},{-52,40},{-26,40}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_out_Extension.bloodFlow, flowMeasure.q_out) annotation (
          Line(
          points={{34,6},{34,40},{-6,40}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure.volumeFlow, volumeFlow)
        annotation (Line(points={{-16,52},{-16,69},{-1,69}}, color={0,0,127}));
      connect(bloodPort_out_Extension.bloodPort_out, bloodPort_out) annotation (
          Line(
          points={{54,-4},{74,-4}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.O2, O2_concentrationMeasure.q_in)
        annotation (Line(
          points={{-52,4},{-38,4},{-38,14},{-24,14}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_out_Extension.O2, O2_concentrationMeasure.q_in)
        annotation (Line(
          points={{34,-2},{4,-2},{4,14},{-24,14}},
          color={107,45,134},
          thickness=1));
      connect(O2_concentrationMeasure.concentration, O2_conc)
        annotation (Line(points={{-24,22},{-24,24},{4,24}}, color={0,0,127}));
      connect(CO2_concentrationMeasure.concentration, CO2_conc) annotation (
          Line(points={{-18,-20},{-18,-16},{0,-16}}, color={0,0,127}));
      connect(bloodPort_in_Extension.CO2, CO2_concentrationMeasure.q_in)
        annotation (Line(
          points={{-52,-0.2},{-44,-0.2},{-44,-2},{-32,-2},{-32,-28},{-18,-28}},
          color={107,45,134},
          thickness=1));

      connect(CO2_concentrationMeasure.q_in, bloodPort_out_Extension.CO2)
        annotation (Line(
          points={{-18,-28},{18,-28},{18,-6},{34,-6}},
          color={107,45,134},
          thickness=1));
      connect(BEox_concentrationMeasure.concentration, BEox_conc) annotation (
          Line(points={{-16,-52},{-16,-46},{8,-46}}, color={0,0,127}));
      connect(bloodPort_in_Extension.BEox, BEox_concentrationMeasure.q_in)
        annotation (Line(
          points={{-52,-4},{-46,-4},{-46,-60},{-16,-60}},
          color={107,45,134},
          thickness=1));
      connect(BEox_concentrationMeasure.q_in, bloodPort_out_Extension.BEox)
        annotation (Line(
          points={{-16,-60},{26,-60},{26,-10},{34,-10}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.ions, bloodPort_out_Extension.ions)
        annotation (Line(
          points={{-52,-8},{-52,-70},{32,-70},{32,-14},{34,-14}},
          color={107,45,134},
          thickness=1));
      annotation (
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),     Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={
            Line(
              points={{-60,80},{80,80},{62,60}},
              color={0,0,255}),
            Line(
              points={{62,100},{80,80}},
              color={0,0,255}),
            Text(
              extent={{-25,-11},{34,-70}},
              lineColor={0,0,0},
              textString="V'"),
            Text(
              extent={{-76,-96},{-136,-76}},
              lineColor={28,108,200},
              textString="O2",
              horizontalAlignment=TextAlignment.Right),
            Text(
              extent={{24,-96},{-36,-76}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Right,
              textString="CO2"),
            Text(
              extent={{100,-96},{40,-76}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Right,
              textString="BEox")}));
    end FlowConcentrationMeasure;

    partial model BloodVessel
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=O2_concentration*volume_start)
        annotation (Placement(transformation(extent={{4,-16},{24,4}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=CO2_concentration*volume_start)
        annotation (Placement(transformation(extent={{4,-40},{24,-20}})));
      Physiolibrary.Chemical.Components.Substance BEox(useNormalizedVolume=false,
          solute_start=BEox_concentration*volume_start)
        annotation (Placement(transformation(extent={{4,-64},{24,-44}})));
      Physiolibrary.Chemical.Components.Stream O2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-28,-16},{-8,4}})));
      Physiolibrary.Chemical.Components.Stream CO2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-28,-40},{-8,-20}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-28,-64},{-8,-44}})));
      Physiolibrary.Chemical.Components.Stream O2flow1(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{36,-16},{56,4}})));
      Physiolibrary.Chemical.Components.Stream CO2flow1(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{36,-40},{56,-20}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow1(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{36,-64},{56,-44}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{72,-10},{92,10}})));
      Physiolibrary.Chemical.Components.Stream ionsFlow[Ions.IonsEnum](each
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-28,-102},{-8,-82}})));
      Physiolibrary.Chemical.Components.Substance ions[Ions.IonsEnum](each
          useNormalizedVolume=false, solute_start=ion_start*volume_start) if
        useIons
        annotation (Placement(transformation(extent={{4,-102},{24,-82}})));
      Physiolibrary.Chemical.Components.Stream ionsFlow1[Ions.IonsEnum](each
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{36,-102},{56,-82}})));
      Interfaces.OneToMany oneToMany
        annotation (Placement(transformation(extent={{-10,-78},{-18,-70}})));
      Interfaces.OneToMany oneToMany1 if useIons
        annotation (Placement(transformation(extent={{20,-78},{12,-70}})));
      Interfaces.OneToMany oneToMany2
        annotation (Placement(transformation(extent={{52,-78},{44,-70}})));
      Interfaces.BloodPort_in bloodPort_in(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-108,-10},{-88,10}}),
            iconTransformation(extent={{-108,-10},{-88,10}})));
      Interfaces.BloodPort_out bloodPort_out(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{90,-10},{110,10}}), iconTransformation(
              extent={{90,-10},{110,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_O2 if useO2_input
        annotation (
          Placement(transformation(extent={{34,-134},{54,-114}}),
            iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-100})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_CO2 if useCO2_input
        annotation (
          Placement(transformation(extent={{20,-136},{40,-116}}),
            iconTransformation(extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-20,-100})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_BEox if useBEox_input
        annotation (
          Placement(transformation(extent={{0,-136},{20,-116}}),
            iconTransformation(extent={{10,-110},{30,-90}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_ions[Ions.IonsEnum] if
           useIons_input annotation (Placement(transformation(extent={{-18,-136},
                {2,-116}}), iconTransformation(extent={{88,-110},{108,-90}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{-16,41},{6,19}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_Flow if useFlow_input
       annotation (
          Placement(transformation(extent={{14,90},{34,110}}),
            iconTransformation(extent={{-12,-12},{12,12}},
            rotation=180,
            origin={-100,-100})));
      parameter Physiolibrary.Types.Concentration ion_start[Ions.IonsEnum]=
          zeros(size(ion_start, 1));
      parameter Physiolibrary.Types.Volume volume_start=1e-3;
      parameter Physiolibrary.Types.Concentration O2_concentration = 0;
      parameter Physiolibrary.Types.Concentration CO2_concentration = 0;
      parameter Physiolibrary.Types.Concentration BEox_concentration = 0;
      parameter Boolean useO2_input=false
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
      parameter Boolean useCO2_input=false
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
      parameter Boolean useBEox_input=false
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
      parameter Boolean useFlow_input=false
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
      parameter Boolean useFlowMeasureOutput= false
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));


      parameter Boolean useIons_input=false
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs", enable = useIons));

      parameter Boolean useIons = true "if false, the ions are omitted in this block" annotation(Evaluate=true, HideResult=true, choices(checkBox=true));

      Physiolibrary.Types.RealIO.VolumeFlowRateOutput
                                        volumeFlow if useFlowMeasureOutput
                                                   "Actual volume flow rate"
                             annotation (Placement(transformation(extent={{-20,-20},
                {20,20}},
            rotation=0,
            origin={-80,60}),iconTransformation(
            extent={{20,-20},{-20,20}},
            rotation=0,
            origin={-100,-40})));
    equation
      connect(bloodPort_in,bloodPort_in_Extension. bloodPort_in) annotation (
          Line(
          points={{-98,0},{-70,0}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.O2,O2flow. q_in) annotation (Line(
          points={{-50,2},{-36,2},{-36,-6},{-28,-6}},
          color={107,45,134},
          thickness=1));
      connect(O2flow.q_out,O2. q_out) annotation (Line(
          points={{-8,-6},{14,-6}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.CO2,CO2flow. q_in) annotation (Line(
          points={{-50,-2.2},{-38,-2.2},{-38,-30},{-28,-30}},
          color={107,45,134},
          thickness=1));
      connect(CO2flow.q_out,CO2. q_out) annotation (Line(
          points={{-8,-30},{14,-30}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_out,BEox. q_out) annotation (Line(
          points={{-8,-54},{14,-54}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_in,bloodPort_in_Extension. BEox) annotation (Line(
          points={{-28,-54},{-40,-54},{-40,-6},{-50,-6}},
          color={107,45,134},
          thickness=1));
      connect(flowMeasure.volumeFlow,O2flow. solutionFlow) annotation (Line(points={{-5,16.8},
              {-5,-4},{-18,-4},{-18,1}},               color={0,0,127}));
      connect(flowMeasure.volumeFlow,CO2flow. solutionFlow)
        annotation (Line(points={{-5,16.8},{-5,-23},{-18,-23}}, color={0,0,127}));
      connect(flowMeasure.volumeFlow,BEoxflow. solutionFlow)
        annotation (Line(points={{-5,16.8},{-5,-47},{-18,-47}}, color={0,0,127}));
      connect(O2.q_out,O2flow1. q_in) annotation (Line(
          points={{14,-6},{36,-6}},
          color={107,45,134},
          thickness=1));
      connect(CO2.q_out,CO2flow1. q_in) annotation (Line(
          points={{14,-30},{36,-30}},
          color={107,45,134},
          thickness=1));
      connect(BEox.q_out,BEoxflow1. q_in) annotation (Line(
          points={{14,-54},{36,-54}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_out,bloodPort_out_Extension. bloodPort_out) annotation (
         Line(
          points={{100,0},{92,0}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_out_Extension.O2,O2flow1. q_out) annotation (Line(
          points={{72,2},{64,2},{64,-6},{56,-6}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_out_Extension.CO2,CO2flow1. q_out) annotation (Line(
          points={{72,-2},{66,-2},{66,-30},{56,-30}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_out_Extension.BEox,BEoxflow1. q_out) annotation (Line(
          points={{72,-6},{68,-6},{68,-54},{56,-54}},
          color={107,45,134},
          thickness=1));
      connect(oneToMany.y,ionsFlow. solutionFlow)
        annotation (Line(points={{-18,-76},{-18,-85}}, color={0,0,127}));
      connect(oneToMany1.y,ions. solutionVolume)
        annotation (Line(points={{12,-76},{12,-88},{10,-88}}, color={0,0,127}));
      connect(oneToMany2.y,ionsFlow1. solutionFlow) annotation (Line(points={{44,-76},
              {44,-80},{46,-80},{46,-85}}, color={0,0,127}));
      connect(oneToMany.u,flowMeasure. volumeFlow) annotation (Line(points={{-10,-76},
              {-8,-76},{-8,-78},{-5,-78},{-5,16.8}}, color={0,0,127}));
      connect(ionsFlow1.q_out,bloodPort_out_Extension. ions) annotation (Line(
          points={{56,-92},{72,-92},{72,-10}},
          color={107,45,134},
          thickness=1));
      connect(ionsFlow.q_in,bloodPort_in_Extension. ions) annotation (Line(
          points={{-28,-92},{-50,-92},{-50,-10}},
          color={107,45,134},
          thickness=1));
      connect(port_O2,O2flow1. q_in) annotation (Line(
          points={{44,-124},{44,-66},{36,-66},{36,-6}},
          color={107,45,134},
          thickness=1));
      connect(port_CO2,CO2. q_out) annotation (Line(
          points={{30,-126},{26,-126},{26,-30},{14,-30}},
          color={107,45,134},
          thickness=1));
      connect(port_BEox,BEox. q_out) annotation (Line(
          points={{10,-126},{10,-54},{14,-54}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.bloodFlow,flowMeasure. q_in) annotation (
          Line(
          points={{-50,10},{-34,10},{-34,30},{-16,30}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure.q_out,port_Flow)  annotation (Line(
          points={{6,30},{24,30},{24,100}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure.volumeFlow, volumeFlow)
        annotation (Line(points={{-5,16.8},{-80,16.8},{-80,60}}, color={0,0,127}));
      connect(ionsFlow.q_out, port_ions) annotation (Line(
          points={{-8,-92},{-8,-126}},
          color={107,45,134},
          thickness=1));
      connect(ionsFlow.q_out, ions.q_out) annotation (Line(
          points={{-8,-92},{14,-92}},
          color={107,45,134},
          thickness=1));
      connect(ionsFlow.q_out, ionsFlow1.q_in) annotation (Line(
          points={{-8,-92},{36,-92}},
          color={107,45,134},
          thickness=1));
    end BloodVessel;

    model BloodVesselConstVolume
      extends BloodComponents.BloodVessel;
    //  parameter Physiolibrary.Types.Volume vesselVolume;

      Physiolibrary.Types.Constants.VolumeConst volume(k=volume_start)
        annotation (Placement(transformation(extent={{-8,50},{0,58}})));
    equation
      connect(flowMeasure.q_out, bloodPort_out_Extension.bloodFlow) annotation (
          Line(
          points={{6,30},{72,30},{72,10}},
          color={0,0,0},
          thickness=1));
      connect(volume.y, O2.solutionVolume)
        annotation (Line(points={{1,54},{10,54},{10,-2}}, color={0,0,127}));
      connect(volume.y, CO2.solutionVolume)
        annotation (Line(points={{1,54},{10,54},{10,-26}}, color={0,0,127}));
      connect(volume.y, BEox.solutionVolume)
        annotation (Line(points={{1,54},{10,54},{10,-50}}, color={0,0,127}));
      connect(volume.y, oneToMany1.u) annotation (Line(points={{1,54},{10,54},{10,-70},
              {20,-70},{20,-76}}, color={0,0,127}));
      connect(flowMeasure.volumeFlow, O2flow1.solutionFlow)
        annotation (Line(points={{-5,16.8},{46,16.8},{46,1}}, color={0,0,127}));
      connect(CO2flow1.solutionFlow, O2flow1.solutionFlow)
        annotation (Line(points={{46,-23},{46,1}}, color={0,0,127}));
      connect(BEoxflow1.solutionFlow, O2flow1.solutionFlow)
        annotation (Line(points={{46,-47},{46,1}}, color={0,0,127}));
      connect(oneToMany2.u, O2flow1.solutionFlow) annotation (Line(points={{52,-76},
              {54,-76},{54,-66},{46,-66},{46,1}}, color={0,0,127}));
      annotation (Icon(graphics={Rectangle(
              extent={{-80,80},{80,-80}},
              fillColor={162,29,33},
              fillPattern=FillPattern.Solid,
              lineThickness=1,
              pattern=LinePattern.None),
                                 Rectangle(
              extent={{-60,60},{60,-60}},
              fillColor={240,233,6},
              fillPattern=FillPattern.Solid,
              lineThickness=1,
              pattern=LinePattern.None)}));
    end BloodVesselConstVolume;

    package Infusions
      model Infusion
        Interfaces.BloodPort_out_Extension bloodPort_b_Extension
          annotation (Placement(transformation(extent={{42,50},{62,70}})));
        Physiolibrary.Chemical.Components.Stream O2flow(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{8,30},{28,50}})));
        Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
          annotation (Placement(transformation(extent={{16,80},{36,60}})));
        Physiolibrary.Chemical.Components.Stream CO2flow(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{8,0},{28,20}})));
        Physiolibrary.Chemical.Components.Stream BEoxflow(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{8,-30},{28,-10}})));
        Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
            useSolutionFlowInput=true, SolutionFlow=1.6666666666667e-5)
          annotation (Placement(transformation(extent={{-24,60},{-4,80}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
          unlimitedSolutionStorageO2(Conc=0)
          annotation (Placement(transformation(extent={{-24,30},{-4,50}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
          unlimitedSolutionStorageCO2(Conc=0)
          annotation (Placement(transformation(extent={{-24,0},{-4,20}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
          unlimitedSolutionStorageBEox(Conc=0)
          annotation (Placement(transformation(extent={{-24,-30},{-4,-10}})));
        Physiolibrary.Chemical.Components.Stream ionFlow[AcidBaseBalance.Ions.IonsEnum](
           each useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{8,-60},{28,-40}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ionUS[
          AcidBaseBalance.Ions.IonsEnum](Conc=ion_start)
          annotation (Placement(transformation(extent={{-24,-60},{-4,-40}})));
        Interfaces.OneToMany oneToMany annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={28,-36})));
        Interfaces.BloodPort_out bloodPort_out annotation (Placement(
              transformation(rotation=0, extent={{90,50},{110,70}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateInput solutionFlow(start=
              unlimitedPump.SolutionFlow) annotation (Placement(transformation(
                rotation=0, extent={{-70,90},{-50,110}})));

        parameter Physiolibrary.Types.Concentration ion_start[AcidBaseBalance.Ions.IonsEnum];
      equation
        connect(flowMeasure.q_out,bloodPort_b_Extension. bloodFlow) annotation (
            Line(
            points={{36,70},{42,70}},
            color={0,0,0},
            thickness=1));
        connect(O2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
              points={{18,47},{18,48},{26,48},{26,58}},                  color={0,
                0,127}));
        connect(CO2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
              points={{18,17},{18,18},{26,18},{26,58}},    color={0,0,127}));
        connect(BEoxflow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
              points={{18,-13},{18,-12},{26,-12},{26,58}},   color={0,0,127}));
        connect(O2flow.q_out,bloodPort_b_Extension. O2) annotation (Line(
            points={{28,40},{36,40},{36,62},{42,62}},
            color={107,45,134},
            thickness=1));
        connect(CO2flow.q_out,bloodPort_b_Extension. CO2) annotation (Line(
            points={{28,10},{38,10},{38,58},{42,58}},
            color={107,45,134},
            thickness=1));
        connect(BEoxflow.q_out,bloodPort_b_Extension. BEox) annotation (Line(
            points={{28,-20},{40,-20},{40,54},{42,54}},
            color={107,45,134},
            thickness=1));
        connect(unlimitedPump.q_out,flowMeasure. q_in) annotation (Line(
            points={{-4,70},{16,70}},
            color={0,0,0},
            thickness=1));
        connect(unlimitedSolutionStorageO2.q_out,O2flow. q_in) annotation (Line(
            points={{-4,40},{8,40}},
            color={107,45,134},
            thickness=1));
        connect(unlimitedSolutionStorageCO2.q_out,CO2flow. q_in) annotation (Line(
            points={{-4,10},{8,10}},
            color={107,45,134},
            thickness=1));
        connect(unlimitedSolutionStorageBEox.q_out,BEoxflow. q_in) annotation (
            Line(
            points={{-4,-20},{8,-20}},
            color={107,45,134},
            thickness=1));
        connect(ionUS.q_out,ionFlow. q_in) annotation (Line(
            points={{-4,-50},{8,-50}},
            color={107,45,134},
            thickness=1));
        connect(ionFlow.q_out,bloodPort_b_Extension. ions) annotation (Line(
            points={{28,-50},{42,-50},{42,50}},
            color={107,45,134},
            thickness=1));
        connect(flowMeasure.volumeFlow,oneToMany. u)
          annotation (Line(points={{26,58},{26,-32}},     color={0,0,127}));
        connect(ionFlow.solutionFlow,oneToMany. y) annotation (Line(points={{18,-43},{
                18,-40},{26,-40}},      color={0,0,127}));
        connect(solutionFlow, unlimitedPump.solutionFlow)
          annotation (Line(points={{-60,100},{-14,100},{-14,77}}, color={0,0,127}));
        connect(bloodPort_b_Extension.bloodPort_out, bloodPort_out) annotation (
           Line(
            points={{62,60},{100,60}},
            color={28,108,200},
            thickness=0.5));
      end Infusion;

      model SodiumLactate "Dummy type of infusion - it should contain presets, used in the simulators"
        extends Infusion(ion_start={1});
      end SodiumLactate;
    end Infusions;
  end BloodComponents;

  package Circulation
    package PulsatileCirculation
      model HemodynamicsSmith
            extends Cardiovascular.Icons.Runnable_Shallow;
        import Physiolibrary.Hydraulic.Components.*;
      //  Physiolibrary.Types.Volume leftVentricleInitVol = ventricularInteraction.rightVentricle.ventricle.volume_start;
          parameter Physiolibrary.Types.Concentration arterialO2_start = 8.28362;
          parameter Physiolibrary.Types.Concentration arterialCO2_start=22.6;
          parameter Physiolibrary.Types.Concentration venousO2_start = 6.11;
          parameter Physiolibrary.Types.Concentration venousCO2_start=24.6;

        BloodComponents.BloodElasticVesselElastance aorta(
          ZeroPressureVolume=0,
          O2_concentration=arterialO2_start,
          volume_start=0.0001241,
          CO2_concentration=arterialCO2_start,
          Elastance=92165766.41999) annotation (Placement(transformation(extent=
                 {{-156,-40},{-136,-20}})));
        BloodComponents.BloodElasticVesselElastance venaCava(
          ZeroPressureVolume=0,
          Elastance(displayUnit="mmHg/ml") = 786602.0857485,
          volume_start=0.0002952,
          O2_concentration=venousO2_start,
          CO2_concentration=venousCO2_start)
          annotation (Placement(transformation(extent={{-152,22},{-132,42}})));
        BloodComponents.BloodValve aorticValve(Pknee=0, _Ron(displayUnit=
                "(mmHg.s)/ml") = 2399802.97347) annotation (Placement(
              transformation(extent={{-106,-40},{-126,-20}})));
        BloodComponents.BloodResistor Rsys(Resistance(displayUnit="(mmHg.s)/ml")=
               145054757.50752) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-170,-18})));
        BloodComponents.BloodValve tricuspidValve(Pknee=0, _Ron(displayUnit=
                "(mmHg.s)/ml") = 3159740.5817355)
          annotation (Placement(transformation(extent={{-92,22},{-72,42}})));
        BloodComponents.BloodInertia Lav(I(displayUnit="mmHg.s2/ml")=
            16250.665802014, volumeFlow_start(displayUnit="m3/s") = -1.4e-8)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-84,-30})));
        BloodComponents.BloodInertia Ltc(I(displayUnit="mmHg.s2/ml")=
            10678.18997523, volumeFlow_start(displayUnit="m3/s") = 0.0001372)
          annotation (Placement(transformation(extent={{-122,22},{-102,42}})));
        BloodComponents.BloodInertia Lpv(I(displayUnit="mmHg.s2/ml")=
            19822.372560862, volumeFlow_start(displayUnit="m3/s") = -1.9e-9)
          annotation (Placement(transformation(extent={{140,34},{160,54}})));
        BloodComponents.BloodValve pulmonaryValve(Pknee=0, _Ron(displayUnit=
                "(mmHg.s)/ml") = 733273.1307825)
          annotation (Placement(transformation(extent={{172,34},{192,54}})));
        BloodComponents.BloodElasticVesselElastance pulmonaryArteries(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          Elastance(displayUnit="Pa/m3") = 49195960.956135,
          volume_start=3.904e-5,
          O2_concentration=venousO2_start,
          CO2_concentration=venousCO2_start)
          annotation (Placement(transformation(extent={{202,34},{222,54}})));
        BloodComponents.BloodResistor Rpul(Resistance(displayUnit="(mmHg.s)/ml")=
               20691634.526808) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={250,30})));
        BloodComponents.BloodElasticVesselElastance pulmonaryVeins(
          ZeroPressureVolume=0,
          useExternalPressureInput=true,
          Elastance(displayUnit="mmHg/ml") = 973253.4281295,
          O2_concentration=arterialO2_start,
          volume_start=0.0008269,
          CO2_concentration=arterialCO2_start,
          BEox_concentration=0)
          annotation (Placement(transformation(extent={{222,-40},{202,-20}})));
        BloodComponents.BloodValve mitralValve(Pknee=0, _Ron(displayUnit=
                "(mmHg.s)/ml") = 2106493.721157)
          annotation (Placement(transformation(extent={{158,-40},{138,-20}})));
        BloodComponents.BloodInertia Lmt(I(displayUnit="mmHg.s2/ml")=
            10261.557514558, volumeFlow_start(displayUnit="m3/s") = 0.0001141)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={182,-30})));
        Physiolibrary.Types.Constants.PressureConst IntraThoracicPressure(k=-533.28954966)
          annotation (Placement(transformation(extent={{70,12},{82,20}})));
        Interfaces.BloodPort_in_Extension bloodPort_in_Extension
          annotation (Placement(transformation(extent={{-58,54},{-38,34}})));
        Physiolibrary.Chemical.Components.Substance rightVentricleO2(
            useNormalizedVolume=false, solute_start=venousO2_start*104.2e-6)
          annotation (Placement(transformation(extent={{16,98},{36,118}})));
        Physiolibrary.Chemical.Components.Substance rightVentricleCO2(
            useNormalizedVolume=false, solute_start=venousCO2_start*104.2e-6)
          annotation (Placement(transformation(extent={{16,74},{36,94}})));
        Physiolibrary.Chemical.Components.Substance BEox(useNormalizedVolume=false,
            solute_start=0)
          annotation (Placement(transformation(extent={{16,50},{36,70}})));
        Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
          annotation (Placement(transformation(extent={{-14,23},{8,45}})));
        Physiolibrary.Chemical.Components.Stream O2flow(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{-16,98},{4,118}})));
        Physiolibrary.Chemical.Components.Stream CO2flow(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{-16,74},{4,94}})));
        Physiolibrary.Chemical.Components.Stream BEoxflow(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{-14,48},{6,68}})));
        Physiolibrary.Chemical.Components.Stream O2flow1(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{58,98},{78,118}})));
        Physiolibrary.Chemical.Components.Stream CO2flow1(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{58,74},{78,94}})));
        Physiolibrary.Chemical.Components.Stream BEoxflow1(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{58,50},{78,70}})));
        Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure3
          annotation (Placement(transformation(extent={{64,23},{86,45}})));
        Interfaces.BloodPort_out_Extension bloodPort_out_Extension
          annotation (Placement(transformation(extent={{94,54},{114,34}})));
        Cardiovascular.Model.Smith2004.Parts.VentricularInteraction
          ventricularInteraction
          annotation (Placement(transformation(extent={{20,-14},{60,26}})));
        Interfaces.BloodPort_in_Extension bloodPort_in_Extension1
          annotation (Placement(transformation(extent={{-54,-40},{-34,-20}})));
        Physiolibrary.Chemical.Components.Substance leftVentricleO2(
            useNormalizedVolume=false, solute_start=arterialO2_start*104.2e-6)
          annotation (Placement(transformation(extent={{42,-62},{22,-42}})));
        Physiolibrary.Chemical.Components.Substance leftVentricleCO2(
            useNormalizedVolume=false, solute_start=arterialCO2_start*104.2e-6)
          annotation (Placement(transformation(extent={{42,-86},{22,-66}})));
        Physiolibrary.Chemical.Components.Substance BEox1(useNormalizedVolume=false,
            solute_start=0)
          annotation (Placement(transformation(extent={{42,-110},{22,-90}})));
        Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure1
          annotation (Placement(transformation(extent={{22,-9},{0,-31}})));
        Physiolibrary.Chemical.Components.Stream O2flow2(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{10,-62},{-10,-42}})));
        Physiolibrary.Chemical.Components.Stream CO2flow2(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{10,-86},{-10,-66}})));
        Physiolibrary.Chemical.Components.Stream BEoxflow2(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{12,-110},{-8,-90}})));
        Physiolibrary.Chemical.Components.Stream O2flow3(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{74,-62},{54,-42}})));
        Physiolibrary.Chemical.Components.Stream CO2flow3(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{74,-86},{54,-66}})));
        Physiolibrary.Chemical.Components.Stream BEoxflow3(useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{74,-110},{54,-90}})));
        Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure2
          annotation (Placement(transformation(extent={{80,-9},{58,-31}})));
        Interfaces.BloodPort_out_Extension bloodPort_out_Extension1
          annotation (Placement(transformation(extent={{88,-40},{108,-20}})));
        Physiolibrary.Types.Constants.FrequencyConst HR(k=1.2)
          annotation (Placement(transformation(extent={{-18,0},{-2,14}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
            SoluteFlow=0.00016666666666667)
          annotation (Placement(transformation(extent={{-120,0},{-140,20}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
          O2_MetabolicConsumption(SoluteFlow=0.00018333333333333)
          annotation (Placement(transformation(extent={{-140,-16},{-120,4}})));
        Package.AlveolocapillaryUnit_bad alveolocapillaryUnit annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={244,-2})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit="ml/min")=
               8.19588e-5)
          annotation (Placement(transformation(extent={{221,2},{229,8}})));
        inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
          annotation (Placement(transformation(extent={{-200,100},{-180,120}})));
        Package.Junction_T junction_T(useO2_input=true, useCO2_input=true)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-170,8})));
      equation
        connect(aorticValve.bloodPort_in, Lav.bloodPort_out) annotation (Line(
            points={{-107,-30},{-93,-30}},
            color={28,108,200},
            thickness=0.5));
        connect(aorta.bloodPort_out, aorticValve.bloodPort_out) annotation (Line(
            points={{-136,-30},{-125,-30}},
            color={28,108,200},
            thickness=0.5));
        connect(aorta.bloodPort_in, Rsys.bloodPort_in) annotation (Line(
            points={{-155.8,-30},{-170,-30},{-170,-27}},
            color={28,108,200},
            thickness=0.5));
        connect(venaCava.bloodPort_out, Ltc.bloodPort_in) annotation (Line(
            points={{-132,32},{-126,32},{-121,32}},
            color={28,108,200},
            thickness=0.5));
        connect(Ltc.bloodPort_out, tricuspidValve.bloodPort_in) annotation (Line(
            points={{-103,32},{-91,32}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonaryVeins.externalPressure,IntraThoracicPressure. y)
          annotation (Line(
            points={{203.8,-20},{203.8,16},{83.5,16}},
            color={0,190,190},
            smooth=Smooth.None));
        connect(IntraThoracicPressure.y,pulmonaryArteries. externalPressure)
          annotation (Line(points={{83.5,16},{204,16},{204,54},{220.2,54}},
              color={0,0,127}));
        connect(pulmonaryArteries.bloodPort_out,Rpul. bloodPort_in) annotation (
            Line(
            points={{222,44},{250,44},{250,39}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonaryArteries.bloodPort_in,pulmonaryValve. bloodPort_out)
          annotation (Line(
            points={{202.2,44},{191,44}},
            color={28,108,200},
            thickness=0.5));
        connect(Lpv.bloodPort_out,pulmonaryValve. bloodPort_in) annotation (Line(
            points={{159,44},{173,44}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonaryVeins.bloodPort_out,Lmt. bloodPort_in) annotation (Line(
            points={{202,-30},{191,-30}},
            color={28,108,200},
            thickness=0.5));
        connect(mitralValve.bloodPort_in,Lmt. bloodPort_out) annotation (Line(
            points={{157,-30},{173,-30}},
            color={28,108,200},
            thickness=0.5));
        connect(bloodPort_in_Extension.bloodFlow,flowMeasure. q_in) annotation (
            Line(
            points={{-38,34},{-14,34}},
            color={0,0,0},
            thickness=1));
        connect(bloodPort_in_Extension.O2,O2flow. q_in) annotation (Line(
            points={{-38,42},{-38,108},{-16,108}},
            color={107,45,134},
            thickness=1));
        connect(O2flow.q_out, rightVentricleO2.q_out) annotation (Line(
            points={{4,108},{26,108}},
            color={107,45,134},
            thickness=1));
        connect(bloodPort_in_Extension.CO2,CO2flow. q_in) annotation (Line(
            points={{-38,46.2},{-20,46.2},{-20,84},{-16,84}},
            color={107,45,134},
            thickness=1));
        connect(CO2flow.q_out, rightVentricleCO2.q_out) annotation (Line(
            points={{4,84},{26,84}},
            color={107,45,134},
            thickness=1));
        connect(BEoxflow.q_out,BEox. q_out) annotation (Line(
            points={{6,58},{6,60},{26,60}},
            color={107,45,134},
            thickness=1));
        connect(BEoxflow.q_in,bloodPort_in_Extension. BEox) annotation (Line(
            points={{-14,58},{-22,58},{-22,50},{-38,50}},
            color={107,45,134},
            thickness=1));
        connect(flowMeasure.volumeFlow,O2flow. solutionFlow) annotation (Line(points={{-3,47.2},
                {-3,124},{-6,124},{-6,115}},             color={0,0,127}));
        connect(flowMeasure.volumeFlow,CO2flow. solutionFlow)
          annotation (Line(points={{-3,47.2},{-3,91},{-6,91}},    color={0,0,127}));
        connect(flowMeasure.volumeFlow,BEoxflow. solutionFlow)
          annotation (Line(points={{-3,47.2},{-3,65},{-4,65}},    color={0,0,127}));
        connect(rightVentricleO2.q_out, O2flow1.q_in) annotation (Line(
            points={{26,108},{58,108}},
            color={107,45,134},
            thickness=1));
        connect(rightVentricleCO2.q_out, CO2flow1.q_in) annotation (Line(
            points={{26,84},{58,84}},
            color={107,45,134},
            thickness=1));
        connect(BEox.q_out,BEoxflow1. q_in) annotation (Line(
            points={{26,60},{58,60}},
            color={107,45,134},
            thickness=1));
        connect(flowMeasure.q_out,flowMeasure3. q_in) annotation (Line(
            points={{8,34},{64,34}},
            color={0,0,0},
            thickness=1));
        connect(flowMeasure3.volumeFlow,CO2flow1. solutionFlow) annotation (Line(
              points={{75,47.2},{75,90.4},{68,90.4},{68,91}},    color={0,0,127}));
        connect(flowMeasure3.volumeFlow,BEoxflow1. solutionFlow) annotation (Line(
              points={{75,47.2},{75,67.4},{68,67.4},{68,67}},    color={0,0,127}));
        connect(flowMeasure3.q_out,bloodPort_out_Extension. bloodFlow)
          annotation (Line(
            points={{86,34},{94,34}},
            color={0,0,0},
            thickness=1));
        connect(bloodPort_out_Extension.O2,O2flow1. q_out) annotation (Line(
            points={{94,42},{94,108},{78,108}},
            color={107,45,134},
            thickness=1));
        connect(bloodPort_out_Extension.CO2,CO2flow1. q_out) annotation (Line(
            points={{94,46},{94,84},{78,84}},
            color={107,45,134},
            thickness=1));
        connect(bloodPort_out_Extension.BEox,BEoxflow1. q_out) annotation (Line(
            points={{94,50},{94,60},{78,60}},
            color={107,45,134},
            thickness=1));
        connect(flowMeasure1.volumeFlow, O2flow2.solutionFlow)
          annotation (Line(points={{11,-33.2},{11,-45},{0,-45}}, color={0,0,127}));
        connect(flowMeasure1.volumeFlow, CO2flow2.solutionFlow)
          annotation (Line(points={{11,-33.2},{11,-69},{0,-69}}, color={0,0,127}));
        connect(flowMeasure1.volumeFlow, BEoxflow2.solutionFlow)
          annotation (Line(points={{11,-33.2},{11,-93},{2,-93}}, color={0,0,127}));
        connect(flowMeasure2.volumeFlow,O2flow3. solutionFlow) annotation (Line(
              points={{69,-33.2},{69,-45},{64,-45}},             color={0,0,127}));
        connect(flowMeasure2.volumeFlow,CO2flow3. solutionFlow) annotation (Line(
              points={{69,-33.2},{69,-69},{64,-69}},             color={0,0,127}));
        connect(flowMeasure2.volumeFlow,BEoxflow3. solutionFlow) annotation (Line(
              points={{69,-33.2},{69,-93},{64,-93}},             color={0,0,127}));
        connect(O2flow3.q_in, bloodPort_out_Extension1.O2) annotation (Line(
            points={{74,-52},{80,-52},{80,-28},{88,-28}},
            color={107,45,134},
            thickness=1));
        connect(CO2flow3.q_in, bloodPort_out_Extension1.CO2) annotation (Line(
            points={{74,-76},{82,-76},{82,-32},{88,-32}},
            color={107,45,134},
            thickness=1));
        connect(BEoxflow3.q_in, bloodPort_out_Extension1.BEox) annotation (Line(
            points={{74,-100},{84,-100},{84,-36},{88,-36}},
            color={107,45,134},
            thickness=1));
        connect(leftVentricleO2.q_out, O2flow3.q_out) annotation (Line(
            points={{32,-52},{54,-52}},
            color={107,45,134},
            thickness=1));
        connect(leftVentricleCO2.q_out, CO2flow3.q_out) annotation (Line(
            points={{32,-76},{54,-76}},
            color={107,45,134},
            thickness=1));
        connect(BEox1.q_out, BEoxflow3.q_out) annotation (Line(
            points={{32,-100},{54,-100}},
            color={107,45,134},
            thickness=1));
        connect(BEox1.q_out, BEoxflow2.q_in) annotation (Line(
            points={{32,-100},{12,-100}},
            color={107,45,134},
            thickness=1));
        connect(CO2flow2.q_in, leftVentricleCO2.q_out) annotation (Line(
            points={{10,-76},{32,-76}},
            color={107,45,134},
            thickness=1));
        connect(O2flow2.q_in, leftVentricleO2.q_out) annotation (Line(
            points={{10,-52},{32,-52}},
            color={107,45,134},
            thickness=1));
        connect(O2flow2.q_out, bloodPort_in_Extension1.O2) annotation (Line(
            points={{-10,-52},{-16,-52},{-16,-28},{-34,-28}},
            color={107,45,134},
            thickness=1));
        connect(bloodPort_in_Extension1.CO2, CO2flow2.q_out) annotation (Line(
            points={{-34,-32.2},{-26,-32.2},{-26,-34},{-18,-34},{-18,-76},{-10,
                -76}},
            color={107,45,134},
            thickness=1));

        connect(bloodPort_in_Extension1.BEox, BEoxflow2.q_out) annotation (Line(
            points={{-34,-36},{-22,-36},{-22,-100},{-8,-100}},
            color={107,45,134},
            thickness=1));
        connect(ventricularInteraction.rvflow, flowMeasure3.q_in) annotation (Line(
            points={{40,26},{40,34},{64,34}},
            color={0,0,0},
            thickness=1));
        connect(Lav.bloodPort_in, bloodPort_in_Extension1.bloodPort_in) annotation (
            Line(
            points={{-75,-30},{-54,-30}},
            color={28,108,200},
            thickness=0.5));
        connect(tricuspidValve.bloodPort_out, bloodPort_in_Extension.bloodPort_in)
          annotation (Line(
            points={{-73,32},{-66,32},{-66,44},{-58,44}},
            color={28,108,200},
            thickness=0.5));
        connect(bloodPort_out_Extension.bloodPort_out, Lpv.bloodPort_in) annotation (
            Line(
            points={{114,44},{141,44}},
            color={28,108,200},
            thickness=0.5));
        connect(bloodPort_out_Extension1.bloodPort_out, mitralValve.bloodPort_out)
          annotation (Line(
            points={{108,-30},{139,-30}},
            color={28,108,200},
            thickness=0.5));
        connect(ventricularInteraction.leftVentricleVolume, leftVentricleO2.solutionVolume)
          annotation (Line(points={{52,-12},{52,-48},{36,-48}}, color={0,0,127}));
        connect(ventricularInteraction.leftVentricleVolume, leftVentricleCO2.solutionVolume)
          annotation (Line(points={{52,-12},{52,-72},{36,-72}}, color={0,0,127}));
        connect(ventricularInteraction.leftVentricleVolume, BEox1.solutionVolume)
          annotation (Line(points={{52,-12},{52,-94},{36,-94},{36,-96}}, color={0,0,127}));
        connect(flowMeasure2.q_in, bloodPort_out_Extension1.bloodFlow) annotation (
            Line(
            points={{80,-20},{88,-20}},
            color={0,0,0},
            thickness=1));
        connect(flowMeasure2.q_out, ventricularInteraction.lvflow) annotation (Line(
            points={{58,-20},{40,-20},{40,-14}},
            color={0,0,0},
            thickness=1));
        connect(flowMeasure1.q_out, bloodPort_in_Extension1.bloodFlow) annotation (
            Line(
            points={{0,-20},{-34,-20}},
            color={0,0,0},
            thickness=1));
        connect(flowMeasure1.q_in, flowMeasure2.q_out) annotation (Line(
            points={{22,-20},{58,-20}},
            color={0,0,0},
            thickness=1));
        connect(ventricularInteraction.rightVentricleVolume, BEox.solutionVolume)
          annotation (Line(points={{28,24},{28,64},{22,64}}, color={0,0,127}));
        connect(ventricularInteraction.rightVentricleVolume, rightVentricleCO2.solutionVolume)
          annotation (Line(points={{28,24},{28,88},{22,88}}, color={0,0,127}));
        connect(ventricularInteraction.rightVentricleVolume, rightVentricleO2.solutionVolume)
          annotation (Line(points={{28,24},{28,112},{22,112}}, color={0,0,127}));
        connect(flowMeasure3.volumeFlow, O2flow1.solutionFlow) annotation (Line(
              points={{75,47.2},{75,115},{68,115}}, color={0,0,127}));
        connect(ventricularInteraction.frequency, HR.y) annotation (Line(points={
                {24,7.6},{12,7.6},{12,7},{0,7}}, color={0,0,127}));
        connect(IntraThoracicPressure.y, ventricularInteraction.Pth) annotation (
            Line(points={{83.5,16},{92,16},{92,7.6},{56,7.6}}, color={0,0,127}));
        connect(VAi.y,alveolocapillaryUnit. VAi) annotation (Line(points={{230,5},{230,
                5.7},{243.3,5.7}},          color={0,0,127}));
        connect(pulmonaryVeins.bloodPort_in, alveolocapillaryUnit.bloodPort_out)
          annotation (Line(
            points={{221.8,-30},{250,-30},{250.2,-4.4}},
            color={28,108,200},
            thickness=0.5));
        connect(alveolocapillaryUnit.bloodPort_in, Rpul.bloodPort_out) annotation (
            Line(
            points={{250,1.4},{250,21}},
            color={28,108,200},
            thickness=0.5));
        connect(Rsys.bloodPort_out, junction_T.bloodPort_in) annotation (Line(
            points={{-170,-9},{-170,-1.8}},
            color={28,108,200},
            thickness=0.5));
        connect(venaCava.bloodPort_in, junction_T.bloodPort_out) annotation (Line(
            points={{-151.8,32},{-170,32},{-170,18}},
            color={28,108,200},
            thickness=0.5));
        connect(junction_T.port_O2, O2_MetabolicConsumption.q_in) annotation (
            Line(
            points={{-170,1.8},{-158,1.8},{-158,-6},{-140,-6}},
            color={107,45,134},
            thickness=1));
        connect(CO2_MetabolicProduction.q_out, junction_T.port_CO2) annotation (
            Line(
            points={{-140,10},{-158,10},{-158,5.4},{-170,5.4}},
            color={107,45,134},
            thickness=1));
        annotation (
          Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-200,-120},{280,
                  120}})),
          Icon(coordinateSystem(extent={{-200,-120},{280,120}})),
          Documentation(info="<html>
<p>Cardiovascular model implemented per description of Smith et al.</p>
<p>[12] B. W. Smith, J. G. Chase, R. I. Nokes, G. M. Shaw, G. Wake, Minimal Haemodynamic System Model Including Ventricular Interaction and Valve Dynamics., Medical Engineering &AMP; Physics 26 (2) (2004) 131&ndash;139. doi:10.1016/j.medengphy.2003.10.001.</p>
<p>[13] CellML implementation at URL:  http://models.cellml.org/exposure/9d046663ba5cac5c8a61ac146183614b/smith_chase_nokes_shaw_wake_2004.cellml/view</p>
</html>"),experiment(StopTime=5));
      end HemodynamicsSmith;

      model HemodynamicsMeurs
        extends Physiolibrary.Icons.CardioVascular;
          parameter Physiolibrary.Types.Concentration arterialO2_start = 8.28362;
          parameter Physiolibrary.Types.Concentration arterialCO2_start=22.6;
          parameter Physiolibrary.Types.Concentration venousO2_start = 6.11;
          parameter Physiolibrary.Types.Concentration venousCO2_start=24.6;
        Physiolibrary.Hydraulic.Examples.MeursModel2011.Parts.AtrialElastance LAtrialElastance(
          Tav(displayUnit="s"),
          EMIN=15998686.4898,
          EMAX=37330268.4762)
          annotation (Placement(transformation(extent={{56,92},{94,124}})));
        Physiolibrary.Hydraulic.Examples.MeursModel2011.Parts.VentricularElastance LVentricularElastance(EMIN=
              11999014.86735, EMAX=533289549.66)
          annotation (Placement(transformation(extent={{122,92},{158,124}})));
        Physiolibrary.Hydraulic.Examples.MeursModel2011.Parts.AtrialElastance RAtrialElastance(EMIN=
              6666119.37075, EMAX=19998358.11225)
          annotation (Placement(transformation(extent={{-244,86},{-206,118}})));
        Physiolibrary.Hydraulic.Examples.MeursModel2011.Parts.VentricularElastance RVentricularElastance(EMIN=
              7599376.082655, EMAX=65327969.83335)
          annotation (Placement(transformation(extent={{-180,88},{-150,122}})));
        replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin={-241,
                  148.5},                                                                                                    extent = {{-11, -6.5}, {11, 6.5}}, rotation = 0)));
        BloodComponents.BloodElasticVesselElastance intrathoracicArteries(
          ZeroPressureVolume=0.00014,
          ExternalPressure=-533.28954966,
          volume_start=0.000204,
          O2_concentration=arterialO2_start,
          CO2_concentration=arterialCO2_start,
          Elastance=190651014.00345) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={188,0})));
        BloodComponents.BloodInertia aorticFlowInertia(I(displayUnit=
                "mmHg.s2/ml") = 93325.6711905, volumeFlow_start(displayUnit=
                "ml/min") = 5e-9) annotation (Placement(transformation(
              extent={{12,-8},{-12,8}},
              rotation=0,
              origin={146,0})));
        BloodComponents.BloodResistor pulmonaryVenousResistance(Resistance(
              displayUnit="(mmHg.s)/ml") = 399967.162245)
          annotation (Placement(transformation(extent={{10,50},{30,70}})));
        BloodComponents.BloodValve AorticValve(
          _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245,
          _Goff=0,
          Pknee=0)
          annotation (Placement(transformation(extent={{196,30},{216,50}})));
        BloodComponents.BloodResistor extrathoracicArterialResistance(
            Resistance(displayUnit="(mmHg.s)/ml") = 7999343.2449) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={108,0})));
        BloodComponents.BloodElasticVesselElastance extrathoracicArteries(
          ExternalPressure=0,
          ZeroPressureVolume=0.00037,
          volume_start=0.000526,
          O2_concentration=arterialO2_start,
          CO2_concentration=arterialCO2_start,
          Elastance=74127247.40274) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={66,0})));
        BloodComponents.BloodResistor systemicArterioalResistance(Resistance(
              displayUnit="(mmHg.s)/ml") = 106657909.932) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={32,0})));
        BloodComponents.BloodElasticVesselElastance systemicTissues(
          ExternalPressure=0,
          ZeroPressureVolume=0.000185,
          volume_start=0.000283,
          O2_concentration=venousO2_start,
          CO2_concentration=venousCO2_start,
          Elastance=34930465.50273) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-30,0})));
        BloodComponents.BloodResistor smallVenuleResistance(Resistance(
              displayUnit="(mmHg.s)/ml") = 26664477.483) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-58,0})));
        BloodComponents.BloodElasticVesselElastance extrathoracicVeins(
          ExternalPressure=0,
          ZeroPressureVolume=0.001,
          volume_start=0.00153,
          O2_concentration=venousO2_start,
          CO2_concentration=venousCO2_start,
          Elastance=2253148.3473135) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-100,0})));
        BloodComponents.BloodResistor venousResistance(Resistance(displayUnit=
                "(mmHg.s)/ml") = 11999014.86735) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-140,0})));
        BloodComponents.BloodElasticVesselElastance intrathoracicVeins(
          ZeroPressureVolume=0.00119,
          ExternalPressure=-533.28954966,
          volume_start=0.00148,
          O2_concentration=venousO2_start,
          CO2_concentration=venousCO2_start,
          Elastance=2426467.450953) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-182,0})));
        BloodComponents.BloodResistor centralVenousResistance(Resistance(
              displayUnit="(mmHg.s)/ml") = 399967.162245) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-236,0})));
        BloodComponents.BloodValve TricuspidValve(
          _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245,
          _Goff=0,
          Pknee=0)
          annotation (Placement(transformation(extent={{-218,51},{-194,29}})));
        BloodComponents.BloodValve PulmonaryValve(_Ron(displayUnit=
                "(mmHg.s)/ml") = 399967.162245)
          annotation (Placement(transformation(extent={{-140,30},{-120,50}})));
        BloodComponents.BloodElasticVesselElastance pulmonaryArteries(
          ZeroPressureVolume=5e-5,
          ExternalPressure=-533.28954966,
          volume_start=0.000106,
          O2_concentration=venousO2_start,
          CO2_concentration=venousCO2_start,
          Elastance=31064116.267695)
          annotation (Placement(transformation(extent={{-94,50},{-74,70}})));
        BloodComponents.BloodResistor pulmonaryResistance(Resistance(
              displayUnit="(mmHg.s)/ml") = 14665462.61565)
          annotation (Placement(transformation(extent={{-62,50},{-42,70}})));
        BloodComponents.BloodElasticVesselElastance pulmonaryVeins(
          ZeroPressureVolume=0.00035,
          ExternalPressure=-533.28954966,
          volume_start=0.000518,
          O2_concentration=arterialO2_start,
          CO2_concentration=arterialCO2_start,
          Elastance=6066168.6273825)
          annotation (Placement(transformation(extent={{-20,50},{0,70}})));
        BloodComponents.BloodValve MitralValve(
          _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245,
          _Goff=0,
          Pknee=0)
          annotation (Placement(transformation(extent={{100,30},{120,50}})));
        BloodComponents.BloodElasticVesselCompliance LeftVentricle(
          useComplianceInput=true,
          ZeroPressureVolume=6e-5,
          ExternalPressure=-533.28954966,
          volume_start=0.000144,
          O2_concentration=arterialO2_start,
          CO2_concentration=arterialCO2_start)
          annotation (Placement(transformation(extent={{160,30},{180,50}})));
        BloodComponents.BloodElasticVesselCompliance RightAtrium(
          useComplianceInput=true,
          ZeroPressureVolume=3e-5,
          ExternalPressure=-533.28954966,
          volume_start=0.000135,
          O2_concentration=venousO2_start,
          CO2_concentration=venousCO2_start)
          annotation (Placement(transformation(extent={{-252,30},{-232,50}})));
        BloodComponents.BloodElasticVesselCompliance RightVentricle(
          useComplianceInput=true,
          ZeroPressureVolume=4e-5,
          ExternalPressure=-533.28954966,
          volume_start=0.000131,
          O2_concentration=venousO2_start,
          CO2_concentration=venousCO2_start)
          annotation (Placement(transformation(extent={{-178,30},{-158,50}})));
        BloodComponents.BloodElasticVesselCompliance leftAtrium(
          useComplianceInput=true,
          ZeroPressureVolume=3e-5,
          ExternalPressure=-533.28954966,
          volume_start=9.31e-5,
          O2_concentration=arterialO2_start,
          CO2_concentration=arterialCO2_start)
          annotation (Placement(transformation(extent={{66,30},{86,50}})));
        Package.AlveolocapillaryUnit alveolocapillaryUnit annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-30,54})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit="ml/min")=
               8.19588e-5)
          annotation (Placement(transformation(extent={{-53,38},{-45,44}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
            SoluteFlow=0.00016666666666667)
          annotation (Placement(transformation(extent={{32,26},{12,46}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
          O2_MetabolicConsumption(SoluteFlow=0.00018333333333333)
          annotation (Placement(transformation(extent={{12,10},{32,30}})));
        inner Interfaces.ModelSettings modelSettings annotation (Placement(
              transformation(extent={{-280,140},{-260,160}})));
        Package.Junction_T junction_T(useO2_input=true, useCO2_input=true)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-4,0})));
      equation
        connect(HeartRate.y,RAtrialElastance. HR) annotation(Line(points={{-227.25,148.5},
                {-225,148.5},{-225,114.8}},                                                                                  color = {0, 0, 127}, smooth = Smooth.None));
        connect(RVentricularElastance.HR, HeartRate.y) annotation(Line(points={{-165,118.6},
                {-165,148.5},{-227.25,148.5}},                                                                                    color = {0, 0, 127}, smooth = Smooth.None));
        connect(LAtrialElastance.HR, HeartRate.y) annotation (Line(
            points={{75,120.8},{75,148.5},{-227.25,148.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LVentricularElastance.HR, HeartRate.y) annotation (Line(
            points={{140,120.8},{140,148.5},{-227.25,148.5}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PulmonaryValve.bloodPort_out, pulmonaryArteries.bloodPort_in)
          annotation (Line(
            points={{-121,40},{-106,40},{-106,60},{-93.8,60}},
            color={28,108,200},
            thickness=0.5));
        connect(MitralValve.bloodPort_out, LeftVentricle.bloodPort_in)
          annotation (Line(
            points={{119,40},{160.2,40}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonaryVenousResistance.bloodPort_out, leftAtrium.bloodPort_in)
          annotation (Line(
            points={{29,60},{48,60},{48,40},{66.2,40}},
            color={28,108,200},
            thickness=0.5));
        connect(TricuspidValve.bloodPort_out, RightVentricle.bloodPort_in)
          annotation (Line(
            points={{-195.2,40},{-177.8,40},{-177.8,40}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonaryArteries.bloodPort_out, pulmonaryResistance.bloodPort_in)
          annotation (Line(
            points={{-74,60},{-61,60}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonaryVenousResistance.bloodPort_in, pulmonaryVeins.bloodPort_out)
          annotation (Line(
            points={{11,60},{0,60}},
            color={28,108,200},
            thickness=0.5));
        connect(MitralValve.bloodPort_in, leftAtrium.bloodPort_out) annotation (
            Line(
            points={{101,40},{86,40}},
            color={28,108,200},
            thickness=0.5));
        connect(AorticValve.bloodPort_in, LeftVentricle.bloodPort_out)
          annotation (Line(
            points={{197,40},{180,40}},
            color={28,108,200},
            thickness=0.5));
        connect(AorticValve.bloodPort_out, intrathoracicArteries.bloodPort_in)
          annotation (Line(
            points={{215,40},{230,40},{230,-1.77636e-15},{197.8,-1.77636e-15}},
            color={28,108,200},
            thickness=0.5));
        connect(aorticFlowInertia.bloodPort_in, intrathoracicArteries.bloodPort_out)
          annotation (Line(
            points={{156.8,0},{168,0},{168,6.66134e-16},{178,6.66134e-16}},
            color={28,108,200},
            thickness=0.5));
        connect(extrathoracicArterialResistance.bloodPort_in, aorticFlowInertia.bloodPort_out)
          annotation (Line(
            points={{117,-1.55431e-15},{126,-1.55431e-15},{126,0},{135.2,0}},
            color={28,108,200},
            thickness=0.5));
        connect(extrathoracicArteries.bloodPort_in,
          extrathoracicArterialResistance.bloodPort_out) annotation (Line(
            points={{75.8,-1.77636e-15},{88,-1.77636e-15},{88,0},{99,0}},
            color={28,108,200},
            thickness=0.5));
        connect(systemicArterioalResistance.bloodPort_in, extrathoracicArteries.bloodPort_out)
          annotation (Line(
            points={{41,-1.55431e-15},{48,-1.55431e-15},{48,7.21645e-16},{56,
                7.21645e-16}},
            color={28,108,200},
            thickness=0.5));

        connect(smallVenuleResistance.bloodPort_in, systemicTissues.bloodPort_out)
          annotation (Line(
            points={{-49,0},{-42,0},{-42,6.66134e-16},{-40,6.66134e-16}},
            color={28,108,200},
            thickness=0.5));
        connect(extrathoracicVeins.bloodPort_in, smallVenuleResistance.bloodPort_out)
          annotation (Line(
            points={{-90.2,-1.72085e-15},{-78,-1.72085e-15},{-78,5.55112e-16},{-67,
                5.55112e-16}},
            color={28,108,200},
            thickness=0.5));

        connect(venousResistance.bloodPort_in, extrathoracicVeins.bloodPort_out)
          annotation (Line(
            points={{-131,-1.55431e-15},{-120,-1.55431e-15},{-120,7.21645e-16},{-110,
                7.21645e-16}},
            color={28,108,200},
            thickness=0.5));

        connect(intrathoracicVeins.bloodPort_in, venousResistance.bloodPort_out)
          annotation (Line(
            points={{-172.2,-1.77636e-15},{-160,-1.77636e-15},{-160,4.44089e-16},
                {-149,4.44089e-16}},
            color={28,108,200},
            thickness=0.5));
        connect(centralVenousResistance.bloodPort_in, intrathoracicVeins.bloodPort_out)
          annotation (Line(
            points={{-227,-1.77636e-15},{-200,-1.77636e-15},{-200,0},{-192,0}},
            color={28,108,200},
            thickness=0.5));
        connect(RightVentricle.bloodPort_out, PulmonaryValve.bloodPort_in)
          annotation (Line(
            points={{-158,40},{-139,40}},
            color={28,108,200},
            thickness=0.5));
        connect(centralVenousResistance.bloodPort_out, RightAtrium.bloodPort_in)
          annotation (Line(
            points={{-245,4.44089e-16},{-256,4.44089e-16},{-256,0},{-268,0},{-268,
                40},{-251.8,40}},
            color={28,108,200},
            thickness=0.5));
        connect(RightAtrium.bloodPort_out, TricuspidValve.bloodPort_in)
          annotation (Line(
            points={{-232,40},{-216.8,40}},
            color={28,108,200},
            thickness=0.5));
        connect(leftAtrium.compliance, LAtrialElastance.Ct) annotation (Line(
              points={{76,50},{78,50},{78,70},{108,70},{108,107.84},{97.61,
                107.84}},
              color={0,0,127}));
        connect(LVentricularElastance.Ct, LeftVentricle.compliance) annotation (
            Line(points={{161.42,111.68},{170,111.68},{170,50}}, color={0,0,127}));
        connect(RightVentricle.compliance, RVentricularElastance.Ct) annotation (
            Line(points={{-168,50},{-168,76},{-130,76},{-130,108.91},{-147.15,
                108.91}}, color={0,0,127}));
        connect(RightAtrium.compliance, RAtrialElastance.Ct) annotation (Line(
              points={{-242,50},{-242,70},{-196,70},{-196,101.84},{-202.39,
                101.84}},
              color={0,0,127}));
        connect(VAi.y,alveolocapillaryUnit. VAi) annotation (Line(points={{-44,41},
                {-44,53.3},{-37.7,53.3}},   color={0,0,127}));
        connect(pulmonaryResistance.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
          annotation (Line(
            points={{-43,60},{-33.4,60}},
            color={28,108,200},
            thickness=0.5));
        connect(alveolocapillaryUnit.bloodPort_out, pulmonaryVeins.bloodPort_in)
          annotation (Line(
            points={{-27.6,60.2},{-23.7,60.2},{-23.7,60},{-19.8,60}},
            color={28,108,200},
            thickness=0.5));
        connect(O2_MetabolicConsumption.q_in,junction_T. port_O2) annotation (
            Line(
            points={{12,20},{4,20},{4,-6.66134e-16},{2.2,-6.66134e-16}},
            color={107,45,134},
            thickness=1));
        connect(junction_T.port_CO2,CO2_MetabolicProduction. q_out) annotation (
            Line(
            points={{-1.4,-2.22045e-16},{0,-2.22045e-16},{0,36},{12,36}},
            color={107,45,134},
            thickness=1));
        connect(systemicTissues.bloodPort_in, junction_T.bloodPort_out)
          annotation (Line(
            points={{-20.2,0},{-14,0}},
            color={28,108,200},
            thickness=0.5));
        connect(junction_T.bloodPort_in, systemicArterioalResistance.bloodPort_out)
          annotation (Line(
            points={{5.8,0},{23,0}},
            color={28,108,200},
            thickness=0.5));
        annotation(Diagram(coordinateSystem(extent={{-280,-20},{280,160}},       preserveAspectRatio=false)),             Icon(coordinateSystem(extent={{-280,
                  -20},{280,160}},                                                                                                     preserveAspectRatio = false), graphics),
          Documentation(info="<html>
<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it.</p>
<ul>
<li>J. A. Goodwin, W. L. van Meurs, C. D. Sa Couto, J. E. W.Beneken, S. A. Graves, A model for educational simulation of infant cardiovascular physiology., Anesthesia and analgesia 99 (6)(2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</li>
<li>C. D. Sa Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen,A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</li>
<li>W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</li>
</ul>
</html>",       revisions="<html>
<ul>
<li><i>Jul 2015 </i>by Tomas Kulhanek: Created. </li>
</ul>
</html>"),experiment(StopTime=5));
      end HemodynamicsMeurs;

    end PulsatileCirculation;

    package SimpleCirculation
    model SimplestCircBase
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
        BloodComponents.BloodVesselConstVolume pulmonaryVeinsAndLeftAtrium(
          volume_start(displayUnit="l") = 0.0004,
          O2_concentration=8.29769,
          CO2_concentration=21.6053,
          useFlow_input=false)
          annotation (Placement(transformation(extent={{40,100},{60,120}})));
        BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
                "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
          annotation (Placement(transformation(extent={{6,120},{26,100}})));
        BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
                "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={16,-36})));
        BloodComponents.Pump leftHeart
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={72,32})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{104,28},{96,36}})));
        BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure1
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={72,4})));
        inner Interfaces.ModelSettings modelSettings(PB(displayUnit="Pa"),
            ISFHCO3_start=22) annotation (Placement(transformation(extent={{-122,
                  120},{-102,140}})));
        Acidbase.OSA.O2CO2 o2CO2
          annotation (Placement(transformation(extent={{92,-24},{136,20}})));
      Physiolibrary.Types.Constants.FractionConst VAi_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-60,90},{-52,98}})));
      Physiolibrary.Types.Constants.FractionConst Perfusion_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-42,82},{-34,90}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-36,72},{-28,80}})));
      Package.Alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        annotation (Placement(transformation(extent={{-28,88},{6,116}})));
        Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0)
          annotation (Placement(transformation(extent={{146,-10},{166,10}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{133,-38},{141,-32}})));
        BloodComponents.BloodElasticVesselCompliance veins(
          volume_start(displayUnit="l") = 0.00325,
          ZeroPressureVolume(displayUnit="l") = 0.00295,
          Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
          O2_concentration=6.02579,
          CO2_concentration=23.6461,
          useO2_input=true,
          useCO2_input=true,
          useBEox_input=true) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-62,-36})), __Dymola_choicesAllMatching=true);
    equation

      connect(leftHeart.bloodPort_out, flowConcentrationMeasure1.bloodPort_in)
        annotation (Line(
          points={{72,23},{72,13}},
          color={28,108,200},
          thickness=0.5));

      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{84,12},{98,12},{98,8.35294},{90.9,8.35294}}, color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{90.9,5.76471},{98.45,5.76471},{98.45,4},{84,4}}, color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{90.9,3.17647},{90.9,-4},{84,-4}}, color={0,0,127}));
      connect(Perfusion_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_q1)
        annotation (Line(points={{-33,86},{-26,86},{-26,97.38},{-23.07,97.38}},
            color={0,0,127}));
      connect(VAi_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_VAi1)
        annotation (Line(points={{-51,94},{-30,94},{-30,100.18},{-23.07,100.18}},
            color={0,0,127}));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.Fsh,
        shuntFraction.y) annotation (Line(points={{-16.95,91.22},{-24,91.22},{-24,
              76},{-27,76}}, color={0,0,127}));
      connect(alveolarVentilation.VA,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.VAi)
        annotation (Line(points={{167,3},{168,3},{168,134},{-22,134},{-22,
              105.78},{-21.03,105.78}}, color={0,0,127}));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{142,-35},
              {144,-35},{144,-6.4},{146,-6.4}},   color={0,0,127}));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{
              146,8},{142,8},{142,7.31765},{137.1,7.31765}}, color={0,0,127}));
      connect(o2CO2.pCO2, alveolarVentilation.pCO2a) annotation (Line(points={{
              137.1,4.72941},{141.55,4.72941},{141.55,3.8},{146,3.8}}, color={0,
              0,127}));
      connect(o2CO2.pH, alveolarVentilation.pHa) annotation (Line(points={{
              137.1,1.62353},{141.55,1.62353},{141.55,-1.2},{146,-1.2}}, color=
              {0,0,127}));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_in, pulmonary.bloodPort_out)
        annotation (Line(
          points={{40.2,110},{25,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_out,
        pulmonary.bloodPort_in) annotation (Line(
          points={{-6.92,110.68},{0,110.68},{0,110},{7,110}},
          color={28,108,200},
          thickness=0.5));
      connect(LNormalCO.y, leftHeart.volumeFlowRate)
        annotation (Line(points={{95,32},{76,32}},         color={0,0,127}));
      connect(leftHeart.bloodPort_in, pulmonaryVeinsAndLeftAtrium.bloodPort_out)
        annotation (Line(
          points={{72,41},{72,110},{60,110}},
          color={28,108,200},
          thickness=0.5));
      connect(nonMuscle.bloodPort_in, flowConcentrationMeasure1.bloodPort_out)
        annotation (Line(
          points={{25,-36},{72,-36},{72,-5}},
          color={28,108,200},
          thickness=0.5));
        connect(
          alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_in,
          veins.bloodPort_out) annotation (Line(
            points={{-16.78,110.4},{-108,110.4},{-108,-36},{-72,-36}},
            color={28,108,200},
            thickness=0.5));
        connect(veins.bloodPort_in, nonMuscle.bloodPort_out) annotation (Line(
            points={{-52.2,-36},{7,-36}},
            color={28,108,200},
            thickness=0.5));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{160,140}})),            Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{160,140}})));
    end SimplestCircBase;

    model SimplestCirc
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
        BloodComponents.BloodVesselConstVolume pulmonaryVeinsAndLeftAtrium(
          volume_start(displayUnit="l") = 0.0004,
          O2_concentration=8.29769,
          CO2_concentration=21.6053,
          useFlow_input=false)
          annotation (Placement(transformation(extent={{40,100},{60,120}})));
        BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
                "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
          annotation (Placement(transformation(extent={{6,120},{26,100}})));
        BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
                "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={16,-36})));
        BloodComponents.Pump leftHeart
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=270,
              origin={72,32})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{104,28},{96,36}})));
        BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure1
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={72,4})));
        inner Interfaces.ModelSettings modelSettings(PB(displayUnit="Pa"),
            ISFHCO3_start=22) annotation (Placement(transformation(extent={{-122,
                  120},{-102,140}})));
        Acidbase.OSA.O2CO2 o2CO2
          annotation (Placement(transformation(extent={{92,-24},{136,20}})));
      Physiolibrary.Types.Constants.FractionConst VAi_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-60,90},{-52,98}})));
      Physiolibrary.Types.Constants.FractionConst Perfusion_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-42,82},{-34,90}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-36,72},{-28,80}})));
      Package.Alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        annotation (Placement(transformation(extent={{-28,88},{6,116}})));
        Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0)
          annotation (Placement(transformation(extent={{146,-10},{166,10}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{133,-38},{141,-32}})));
        BloodComponents.BloodElasticVesselCompliance veins(
          volume_start(displayUnit="l") = 0.00325,
          ZeroPressureVolume(displayUnit="l") = 0.00295,
          Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
          O2_concentration=6.02579,
          CO2_concentration=23.6461,
          useO2_input=true,
          useCO2_input=true,
          useBEox_input=true) annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-62,-36})), __Dymola_choicesAllMatching=true);
        Tissues.TissuesOld tissues annotation (Placement(transformation(
                rotation=0, extent={{-40,-80},{18,-56}})));
    equation

      connect(leftHeart.bloodPort_out, flowConcentrationMeasure1.bloodPort_in)
        annotation (Line(
          points={{72,23},{72,13}},
          color={28,108,200},
          thickness=0.5));

      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{84,12},{98,12},{98,8.35294},{90.9,8.35294}}, color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{90.9,5.76471},{98.45,5.76471},{98.45,4},{84,4}}, color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{90.9,3.17647},{90.9,-4},{84,-4}}, color={0,0,127}));
      connect(Perfusion_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_q1)
        annotation (Line(points={{-33,86},{-26,86},{-26,97.38},{-23.07,97.38}},
            color={0,0,127}));
      connect(VAi_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_VAi1)
        annotation (Line(points={{-51,94},{-30,94},{-30,100.18},{-23.07,100.18}},
            color={0,0,127}));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.Fsh,
        shuntFraction.y) annotation (Line(points={{-16.95,91.22},{-24,91.22},{-24,
              76},{-27,76}}, color={0,0,127}));
      connect(alveolarVentilation.VA,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.VAi)
        annotation (Line(points={{167,3},{168,3},{168,134},{-22,134},{-22,
              105.78},{-21.03,105.78}}, color={0,0,127}));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{142,-35},
              {144,-35},{144,-6.4},{146,-6.4}},   color={0,0,127}));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{
              146,8},{142,8},{142,7.31765},{137.1,7.31765}}, color={0,0,127}));
      connect(o2CO2.pCO2, alveolarVentilation.pCO2a) annotation (Line(points={{
              137.1,4.72941},{141.55,4.72941},{141.55,3.8},{146,3.8}}, color={0,
              0,127}));
      connect(o2CO2.pH, alveolarVentilation.pHa) annotation (Line(points={{
              137.1,1.62353},{141.55,1.62353},{141.55,-1.2},{146,-1.2}}, color=
              {0,0,127}));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_in, pulmonary.bloodPort_out)
        annotation (Line(
          points={{40.2,110},{25,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_out,
        pulmonary.bloodPort_in) annotation (Line(
          points={{-6.92,110.68},{0,110.68},{0,110},{7,110}},
          color={28,108,200},
          thickness=0.5));
      connect(LNormalCO.y, leftHeart.volumeFlowRate)
        annotation (Line(points={{95,32},{76,32}},         color={0,0,127}));
      connect(leftHeart.bloodPort_in, pulmonaryVeinsAndLeftAtrium.bloodPort_out)
        annotation (Line(
          points={{72,41},{72,110},{60,110}},
          color={28,108,200},
          thickness=0.5));
      connect(nonMuscle.bloodPort_in, flowConcentrationMeasure1.bloodPort_out)
        annotation (Line(
          points={{25,-36},{72,-36},{72,-5}},
          color={28,108,200},
          thickness=0.5));
        connect(
          alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_in,
          veins.bloodPort_out) annotation (Line(
            points={{-16.78,110.4},{-108,110.4},{-108,-36},{-72,-36}},
            color={28,108,200},
            thickness=0.5));
        connect(veins.bloodPort_in, nonMuscle.bloodPort_out) annotation (Line(
            points={{-52.2,-36},{7,-36}},
            color={28,108,200},
            thickness=0.5));
      connect(veins.port_O2,tissues. tO2) annotation (Line(
          points={{-56,-46},{-56,-46},{-56,-58.4},{-40,-58.4}},
          color={107,45,134},
          thickness=1));
      connect(tissues.tCO2, veins.port_CO2) annotation (Line(
          points={{-40,-63.2},{-60,-63.2},{-60,-46}},
          color={107,45,134},
          thickness=1));
      connect(tissues.BE, veins.port_BEox) annotation (Line(
          points={{-40,-68},{-64,-68},{-64,-46}},
          color={107,45,134},
          thickness=1));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{160,140}})),            Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{160,140}})));
    end SimplestCirc;

    model SimplestCircWithUA
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
        BloodComponents.BloodVesselConstVolume pulmonaryVeinsAndLeftAtrium(
          volume_start(displayUnit="l") = 0.0004,
          O2_concentration=8.29769,
          CO2_concentration=21.6053,
          useFlow_input=false)
          annotation (Placement(transformation(extent={{40,100},{60,120}})));
        BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
                "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
          annotation (Placement(transformation(extent={{6,120},{26,100}})));
        BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
                "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={16,-36})));
        BloodComponents.Pump leftHeart
          annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
        BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure1
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={72,4})));
        inner Interfaces.ModelSettings modelSettings(PB(displayUnit="Pa"),
            ISFHCO3_start=22) annotation (Placement(transformation(extent={{-122,
                  120},{-102,140}})));
        Acidbase.OSA.O2CO2 o2CO2
          annotation (Placement(transformation(extent={{92,-24},{136,20}})));
      Physiolibrary.Types.Constants.FractionConst VAi_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-60,90},{-52,98}})));
      Physiolibrary.Types.Constants.FractionConst Perfusion_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-42,82},{-34,90}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-36,72},{-28,80}})));
      Package.Alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        annotation (Placement(transformation(extent={{-28,88},{6,116}})));
        Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0)
          annotation (Placement(transformation(extent={{146,-10},{166,10}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{129,-32},{137,-26}})));
        BloodComponents.BloodElasticVesselCompliance veins(
          volume_start(displayUnit="l") = 0.00325,
          ZeroPressureVolume(displayUnit="l") = 0.00295,
          Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
          O2_concentration=6.02579,
          CO2_concentration=23.6461,
          useO2_input=true,
          useCO2_input=true,
          useBEox_input=true,
          useIons_input=true) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-32,-36})), __Dymola_choicesAllMatching=true);
        Tissues.TissuesOldWithUAProduction tissuesWithUAProduction annotation (
            Placement(transformation(
              rotation=270,
              extent={{25.5,-10.5},{-25.5,10.5}},
              origin={-34.5,36.5})));
        Interfaces.IonSelector ionSelector(selectedIon=AcidBaseBalance.Ions.IonsEnum.UA)
          annotation (Placement(transformation(
              extent={{8,-7},{-8,7}},
              rotation=270,
              origin={-42,-13})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorage(Conc=100)
        annotation (Placement(transformation(extent={{-78,-26},{-70,-18}})));
        Kidney.KidneyMetabolicCompensation ammoniumExcretion
          annotation (Placement(transformation(extent={{-98,-14},{-62,8}})));
    equation

      connect(leftHeart.bloodPort_out, flowConcentrationMeasure1.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));

      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{84,12},{98,12},{98,8.35294},{90.9,8.35294}}, color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{90.9,5.76471},{98.45,5.76471},{98.45,4},{84,4}}, color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{90.9,3.17647},{90.9,-4},{84,-4}}, color={0,0,127}));
      connect(Perfusion_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_q1)
        annotation (Line(points={{-33,86},{-26,86},{-26,97.38},{-23.07,97.38}},
            color={0,0,127}));
      connect(VAi_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_VAi1)
        annotation (Line(points={{-51,94},{-30,94},{-30,100.18},{-23.07,100.18}},
            color={0,0,127}));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.Fsh,
        shuntFraction.y) annotation (Line(points={{-16.95,91.22},{-24,91.22},{-24,
              76},{-27,76}}, color={0,0,127}));
      connect(alveolarVentilation.VA,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.VAi)
        annotation (Line(points={{167,3},{168,3},{168,134},{-22,134},{-22,
              105.78},{-21.03,105.78}}, color={0,0,127}));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{138,-29},
                {144,-29},{144,-6.4},{146,-6.4}}, color={0,0,127}));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{
              146,8},{142,8},{142,7.31765},{137.1,7.31765}}, color={0,0,127}));
      connect(o2CO2.pCO2, alveolarVentilation.pCO2a) annotation (Line(points={{
              137.1,4.72941},{141.55,4.72941},{141.55,3.8},{146,3.8}}, color={0,
              0,127}));
      connect(o2CO2.pH, alveolarVentilation.pHa) annotation (Line(points={{
              137.1,1.62353},{141.55,1.62353},{141.55,-1.2},{146,-1.2}}, color=
              {0,0,127}));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_in, pulmonary.bloodPort_out)
        annotation (Line(
          points={{40.2,110},{25,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_out,
        pulmonary.bloodPort_in) annotation (Line(
          points={{-6.92,110.68},{0,110.68},{0,110},{7,110}},
          color={28,108,200},
          thickness=0.5));
      connect(LNormalCO.y, leftHeart.volumeFlowRate)
        annotation (Line(points={{21,46},{26,46},{26,20}}, color={0,0,127}));
      connect(leftHeart.bloodPort_in, pulmonaryVeinsAndLeftAtrium.bloodPort_out)
        annotation (Line(
          points={{17,16},{4,16},{4,86},{76,86},{76,110},{60,110}},
          color={28,108,200},
          thickness=0.5));
      connect(nonMuscle.bloodPort_in, flowConcentrationMeasure1.bloodPort_out)
        annotation (Line(
          points={{25,-36},{72,-36},{72,-5}},
          color={28,108,200},
          thickness=0.5));
        connect(
          alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_in,
          veins.bloodPort_out) annotation (Line(
            points={{-16.78,110.4},{-108,110.4},{-108,-36},{-42,-36}},
            color={28,108,200},
            thickness=0.5));
        connect(veins.bloodPort_in, nonMuscle.bloodPort_out) annotation (Line(
            points={{-22.2,-36},{7,-36}},
            color={28,108,200},
            thickness=0.5));
        connect(veins.port_O2, tissuesWithUAProduction.tO2) annotation (Line(
            points={{-26,-26},{-26,-26},{-26,11},{-26.1,11}},
            color={107,45,134},
            thickness=1));
        connect(tissuesWithUAProduction.tCO2, veins.port_CO2) annotation (Line(
            points={{-30.3,11},{-30,11},{-30,-26}},
            color={107,45,134},
            thickness=1));
        connect(tissuesWithUAProduction.BE, veins.port_BEox) annotation (Line(
            points={{-34.5,11},{-34,11},{-34,-26}},
            color={107,45,134},
            thickness=1));
        connect(ionSelector.port_a, veins.port_ions) annotation (Line(
            points={{-42,-21},{-42,-26},{-41.8,-26}},
            color={107,45,134},
            thickness=1));
      connect(unlimitedSolutionStorage.q_out,ammoniumExcretion. Cl_outflow)
        annotation (Line(
          points={{-70,-22},{-62.2769,-22},{-62.2769,-5.75}},
          color={107,45,134},
          thickness=1));
        connect(ionSelector.port_b, tissuesWithUAProduction.UA) annotation (
            Line(
            points={{-42,-5},{-42,11},{-40.8,11}},
            color={107,45,134},
            thickness=1));
        connect(ammoniumExcretion.UA_outflow, tissuesWithUAProduction.UA)
          annotation (Line(
            points={{-62.2769,-0.25},{-56,-0.25},{-56,0},{-42,0},{-42,11},{
                -40.8,11}},
            color={107,45,134},
            thickness=1));
        connect(ammoniumExcretion.hco3_outflow, veins.port_BEox) annotation (
            Line(
            points={{-62,8},{-34,8},{-34,-26}},
            color={107,45,134},
            thickness=1));
        connect(o2CO2.pH, ammoniumExcretion.pH) annotation (Line(points={{137.1,
                1.62353},{142,1.62353},{142,-58},{-118,-58},{-118,8},{-96.6154,
                8}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{160,140}})),            Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{160,140}})));
    end SimplestCircWithUA;

    model SimplestCircWithTissues2
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
        BloodComponents.BloodVesselConstVolume pulmonaryVeinsAndLeftAtrium(
          volume_start(displayUnit="l") = 0.0004,
          O2_concentration=8.29769,
          CO2_concentration=21.6053,
          useFlow_input=false,
          ion_start=modelSettings.IonConcentration)
          annotation (Placement(transformation(extent={{40,100},{60,120}})));
        BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
                "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
          annotation (Placement(transformation(extent={{6,120},{26,100}})));
        BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
                "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={16,-36})));
        BloodComponents.Pump leftHeart
          annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
        BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure1
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={72,4})));
        inner Interfaces.ModelSettings modelSettings(PB(displayUnit="Pa"),
            ISFHCO3_start=22) annotation (Placement(transformation(extent={{-122,
                  120},{-102,140}})));
        Acidbase.OSA.O2CO2 o2CO2
          annotation (Placement(transformation(extent={{92,-24},{136,20}})));
      Physiolibrary.Types.Constants.FractionConst VAi_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-60,90},{-52,98}})));
      Physiolibrary.Types.Constants.FractionConst Perfusion_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-42,82},{-34,90}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-36,72},{-28,80}})));
      Package.Alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        annotation (Placement(transformation(extent={{-28,88},{6,116}})));
        Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0)
          annotation (Placement(transformation(extent={{146,-10},{166,10}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{129,-32},{137,-26}})));
        BloodComponents.BloodElasticVesselCompliance veins(
          volume_start(displayUnit="l") = 0.00325,
          ZeroPressureVolume(displayUnit="l") = 0.00295,
          Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
          O2_concentration=6.02579,
          CO2_concentration=23.6461,
          useO2_input=true,
          useCO2_input=true,
          useBEox_input=true,
          useIons_input=true,
          ion_start=modelSettings.IonConcentration)
                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-32,-36})), __Dymola_choicesAllMatching=true);
        Tissues.Tissues2 tissues(isf_ionChargeCorrection(elementaryCharges=
                modelSettings.IonElemChrgs), plasma_ionChargeCorrection(
              elementaryCharges=modelSettings.IonElemChrgs)) annotation (
            Placement(transformation(
              rotation=270,
              extent={{13.5,-8.5},{-13.5,8.5}},
              origin={-34.5,24.5})));

      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorage(Conc=100)
        annotation (Placement(transformation(extent={{-78,-30},{-70,-22}})));
        Kidney.KidneyMetabolicCompensation ammoniumExcretion
          annotation (Placement(transformation(extent={{-98,-16},{-62,6}})));
        Interfaces.IonSelector ionSelector(selectedIon=AcidBaseBalance.Ions.IonsEnum.Ua)
          annotation (Placement(transformation(extent={{-44,-10},{-58,4}})));
        Tissues.SimpleCells cells annotation (Placement(transformation(
              extent={{-8.5,9},{8.5,-9}},
              rotation=90,
              origin={-32.5,55})));
    equation

      connect(leftHeart.bloodPort_out, flowConcentrationMeasure1.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));

      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{84,12},{98,12},{98,8.35294},{90.9,8.35294}}, color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{90.9,5.76471},{98.45,5.76471},{98.45,4},{84,4}}, color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{90.9,3.17647},{90.9,-4},{84,-4}}, color={0,0,127}));
      connect(Perfusion_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_q1)
        annotation (Line(points={{-33,86},{-26,86},{-26,97.38},{-23.07,97.38}},
            color={0,0,127}));
      connect(VAi_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_VAi1)
        annotation (Line(points={{-51,94},{-30,94},{-30,100.18},{-23.07,100.18}},
            color={0,0,127}));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.Fsh,
        shuntFraction.y) annotation (Line(points={{-16.95,91.22},{-24,91.22},{-24,
              76},{-27,76}}, color={0,0,127}));
      connect(alveolarVentilation.VA,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.VAi)
        annotation (Line(points={{167,3},{168,3},{168,134},{-22,134},{-22,
              105.78},{-21.03,105.78}}, color={0,0,127}));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{138,-29},
                {144,-29},{144,-6.4},{146,-6.4}}, color={0,0,127}));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{
              146,8},{142,8},{142,7.31765},{137.1,7.31765}}, color={0,0,127}));
      connect(o2CO2.pCO2, alveolarVentilation.pCO2a) annotation (Line(points={{
              137.1,4.72941},{141.55,4.72941},{141.55,3.8},{146,3.8}}, color={0,
              0,127}));
      connect(o2CO2.pH, alveolarVentilation.pHa) annotation (Line(points={{
              137.1,1.62353},{141.55,1.62353},{141.55,-1.2},{146,-1.2}}, color=
              {0,0,127}));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_in, pulmonary.bloodPort_out)
        annotation (Line(
          points={{40.2,110},{25,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_out,
        pulmonary.bloodPort_in) annotation (Line(
          points={{-6.92,110.68},{0,110.68},{0,110},{7,110}},
          color={28,108,200},
          thickness=0.5));
      connect(LNormalCO.y, leftHeart.volumeFlowRate)
        annotation (Line(points={{21,46},{26,46},{26,20}}, color={0,0,127}));
      connect(leftHeart.bloodPort_in, pulmonaryVeinsAndLeftAtrium.bloodPort_out)
        annotation (Line(
          points={{17,16},{4,16},{4,86},{76,86},{76,110},{60,110}},
          color={28,108,200},
          thickness=0.5));
      connect(nonMuscle.bloodPort_in, flowConcentrationMeasure1.bloodPort_out)
        annotation (Line(
          points={{25,-36},{72,-36},{72,-5}},
          color={28,108,200},
          thickness=0.5));
        connect(
          alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_in,
          veins.bloodPort_out) annotation (Line(
            points={{-16.78,110.4},{-108,110.4},{-108,-36},{-42,-36}},
            color={28,108,200},
            thickness=0.5));
        connect(veins.bloodPort_in, nonMuscle.bloodPort_out) annotation (Line(
            points={{-22.2,-36},{7,-36}},
            color={28,108,200},
            thickness=0.5));
        connect(veins.port_O2, tissues.tO2) annotation (Line(
            points={{-26,-26},{-26,-26},{-26,11},{-28.8333,11}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tCO2, veins.port_CO2) annotation (Line(
            points={{-31.6667,11},{-30,11},{-30,-26}},
            color={107,45,134},
            thickness=1));
        connect(tissues.BE, veins.port_BEox) annotation (Line(
            points={{-34.5,11},{-34,11},{-34,-26}},
            color={107,45,134},
            thickness=1));
      connect(unlimitedSolutionStorage.q_out,ammoniumExcretion. Cl_outflow)
        annotation (Line(
          points={{-70,-26},{-62.2769,-26},{-62.2769,-7.75}},
          color={107,45,134},
          thickness=1));
        connect(ammoniumExcretion.hco3_outflow, veins.port_BEox) annotation (
            Line(
            points={{-62,6},{-34,6},{-34,-26}},
            color={107,45,134},
            thickness=1));
        connect(o2CO2.pH, ammoniumExcretion.pH) annotation (Line(points={{137.1,
                1.62353},{142,1.62353},{142,-58},{-118,-58},{-118,6},{-96.6154,
                6}}, color={0,0,127}));
        connect(tissues.ions_plasma, veins.port_ions) annotation (Line(
            points={{-40.1667,11},{-40.1667,-7.5},{-41.8,-7.5},{-41.8,-26}},
            color={107,45,134},
            thickness=1));
        connect(ammoniumExcretion.hco3_outflow, tissues.BE) annotation (Line(
            points={{-62,6},{-34.5,6},{-34.5,11}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tO2_ISF, cells.O2) annotation (Line(
            points={{-28.8333,38},{-28,38},{-28,46.5},{-27.1,46.5}},
            color={107,45,134},
            thickness=1));
        connect(cells.CO2, tissues.tCO2_ISF) annotation (Line(
            points={{-30.7,46.5},{-31.6667,46.5},{-31.6667,38}},
            color={107,45,134},
            thickness=1));
        connect(tissues.HCO3_ISF, cells.HCO3) annotation (Line(
            points={{-34.5,38},{-34.3,38},{-34.3,46.5}},
            color={107,45,134},
            thickness=1));
        connect(tissues.ions_ISF, cells.ions) annotation (Line(
            points={{-40.1667,38},{-41.5,38},{-41.5,46.5}},
            color={107,45,134},
            thickness=1));
        connect(ammoniumExcretion.UA_outflow, ionSelector.port_b) annotation (
            Line(
            points={{-62.2769,-2.25},{-60.1384,-2.25},{-60.1384,-3},{-58,-3}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_ions, ionSelector.port_a) annotation (Line(
            points={{-41.8,-26},{-41.8,-3},{-44,-3}},
            color={107,45,134},
            thickness=1));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{160,140}})),            Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{160,140}})));
    end SimplestCircWithTissues2;
    end SimpleCirculation;

    model SimplestCirculation
        BloodComponents.BloodVesselConstVolume pulmonaryVeins(
        volume_start(displayUnit="l") = 0.0004,
        useFlow_input=false,
        ion_start=modelSettings.IonConcentration,
        O2_concentration=modelSettings.arterialO2conc_start,
        CO2_concentration=modelSettings.arterialCO2conc_start)
        annotation (Placement(transformation(extent={{20,80},{40,60}})));
        BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
                "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
          annotation (Placement(transformation(extent={{-20,80},{0,60}})));
        BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
                "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={30,30})));
        BloodComponents.Pump leftHeart
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=0,
            origin={60,70})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{72,80},{64,88}})));
        BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure1
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=270,
              origin={80,50})));
        BloodComponents.BloodElasticVesselCompliance veins(
          volume_start(displayUnit="l") = 0.00325,
          ZeroPressureVolume(displayUnit="l") = 0.00295,
          Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
          ion_start=modelSettings.IonConcentration,
        useO2_input=false,
        useCO2_input=false,
        useBEox_input=false,
        useFlow_input=false,
        useIons_input=false,
        O2_concentration=modelSettings.venousO2conc_start,
        CO2_concentration=modelSettings.venousCO2conc_start)
                              annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-10,30})),  __Dymola_choicesAllMatching=true);
        inner Interfaces.ModelSettings modelSettings
                              annotation (Placement(transformation(extent={{-100,80},
                {-80,100}})));
    equation
      connect(leftHeart.bloodPort_out,flowConcentrationMeasure1. bloodPort_in)
        annotation (Line(
          points={{69,70},{80,70},{80,59}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeins.bloodPort_in, pulmonary.bloodPort_out) annotation (
         Line(
          points={{20.2,70},{-1,70}},
          color={28,108,200},
          thickness=0.5));
      connect(LNormalCO.y,leftHeart. volumeFlowRate)
        annotation (Line(points={{63,84},{60,84},{60,74}}, color={0,0,127}));
      connect(leftHeart.bloodPort_in, pulmonaryVeins.bloodPort_out) annotation (
         Line(
          points={{51,70},{40,70}},
          color={28,108,200},
          thickness=0.5));
      connect(nonMuscle.bloodPort_in,flowConcentrationMeasure1. bloodPort_out)
        annotation (Line(
          points={{39,30},{80,30},{80,41}},
          color={28,108,200},
          thickness=0.5));
        connect(veins.bloodPort_in,nonMuscle. bloodPort_out) annotation (Line(
            points={{-0.2,30},{21,30}},
            color={28,108,200},
            thickness=0.5));
      connect(veins.bloodPort_out, pulmonary.bloodPort_in) annotation (Line(
          points={{-20,30},{-40,30},{-40,70},{-19,70}},
          color={28,108,200},
          thickness=1));
    end SimplestCirculation;
  end Circulation;

  package Icons
    model Alveolus
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Bitmap(extent={{
                  99,98},{-99,-98}},
                imageSource =                                                                                                    "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "", fileName = "modelica://NewBloodyMary/../../ikony/alveolus.png",
              origin={-1,0},
              rotation=180)}));
    end Alveolus;
  end Icons;

  package Ions
    package Tests

      model TestISFInit
        ISF_initialization iSF_initialization(permeabilities=modelSettings.IonPermeabilities,
            elementary_charges=modelSettings.IonElemChrgs,
          isf_volume=modelSettings.ISFvolume_start)
          annotation (Placement(transformation(extent={{0,-100},{20,-80}})));
          inner Interfaces.ModelSettings modelSettings(PB(displayUnit="Pa"),
            ISFHCO3_start=22,
          IonPermeabilities={100,100,50,0})
                                annotation (Placement(transformation(extent={{-100,80},
                  {-80,100}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ions[IonsEnum](
            useConcentrationInput=false, Conc=modelSettings.IonConcentration)
          annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-90,-68})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage HCO3(
            useConcentrationInput=false, Conc=26) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-90,-28})));
        IonChargeCorrection ionChargeCorrection(elementaryCharges=modelSettings.IonElemChrgs)
          annotation (Placement(transformation(extent={{-40,-60},{-20,-40}})));
        Physiolibrary.Types.Constants.pHConst     pH(k=7.2)
          annotation (Placement(transformation(extent={{-74,-50},{-66,-42}})));
        Tissues.Tissues2 tissues(iSF_initialization(isf_dCO2=5))
          annotation (Placement(transformation(extent={{32,-72},{62,-52}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage tCO2(
            useConcentrationInput=false, Conc=modelSettings.venousCO2conc_start)
          annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-90,30})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage tO2(
            useConcentrationInput=false, Conc=modelSettings.venousO2conc_start)
          annotation (Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-90,60})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage BE(
            useConcentrationInput=false, Conc=0) annotation (Placement(
              transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-90,0})));
      equation
        connect(ions.q_out, iSF_initialization.plasma_conc) annotation (Line(
            points={{-80,-68},{-60,-68},{-60,-90},{0,-90}},
            color={107,45,134},
            thickness=1));
        connect(HCO3.q_out, iSF_initialization.HCO3) annotation (Line(
            points={{-80,-28},{0,-28},{0,-80}},
            color={107,45,134},
            thickness=1));
        connect(ionChargeCorrection.port_a, ions.q_out) annotation (Line(
            points={{-40,-50},{-60,-50},{-60,-68},{-80,-68}},
            color={107,45,134},
            thickness=1));
        connect(ionChargeCorrection.HCO3, HCO3.q_out) annotation (Line(
            points={{-40,-40},{-60,-40},{-60,-28},{-80,-28}},
            color={107,45,134},
            thickness=1));
        connect(ionChargeCorrection.pH, pH.y)
          annotation (Line(points={{-40,-46},{-65,-46}}, color={0,0,127}));
        connect(tO2.q_out, tissues.tO2) annotation (Line(
            points={{-80,60},{26,60},{26,-54},{32,-54}},
            color={107,45,134},
            thickness=1));
        connect(tCO2.q_out, tissues.tCO2) annotation (Line(
            points={{-80,30},{22,30},{22,-58},{32,-58}},
            color={107,45,134},
            thickness=1));
        connect(BE.q_out, tissues.BE) annotation (Line(
            points={{-80,0},{18,0},{18,-62},{32,-62}},
            color={107,45,134},
            thickness=1));
        connect(ions.q_out, tissues.ions_plasma) annotation (Line(
            points={{-80,-68},{32,-68}},
            color={107,45,134},
            thickness=1));
        connect(pH.y, iSF_initialization.pH) annotation (Line(points={{-65,-46},
                {-46,-46},{-46,-84},{0,-84}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end TestISFInit;

      model TestIonValues
        Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure3
          annotation (Placement(transformation(
              extent={{-4,4},{4,-4}},
              rotation=180,
              origin={-80,26})));
        Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure4
          annotation (Placement(transformation(
              extent={{-4,4},{4,-4}},
              rotation=180,
              origin={-76,-28})));
        Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure5
          annotation (Placement(transformation(
              extent={{-4,4},{4,-4}},
              rotation=180,
              origin={-88,-48})));
        Acidbase.OSA.BloodABB_OSA bloodABB_OSA annotation (Placement(
              transformation(rotation=0, extent={{-84,-84},{-64,-64}})));
        inner Interfaces.ModelSettings modelSettings
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
        IonValues ionValues(
          Ions=modelSettings.IonConcentration,
          elem_chrgs=modelSettings.IonElemChrgs,
          unknownIon=AcidBaseBalance.Ions.IonsEnum.Ua)
          annotation (Placement(transformation(extent={{-22,-52},{-2,-72}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_dO2(
            useConcentrationInput=false, Conc=modelSettings.venousO2conc_start)
          "dissolved O2" annotation (Placement(transformation(
              extent={{6,-6},{-6,6}},
              rotation=180,
              origin={-98,40})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_dCO2(
            useConcentrationInput=false, Conc=modelSettings.venousCO2conc_start)
          "dissolved CO2" annotation (Placement(transformation(
              extent={{6,-6},{-6,6}},
              rotation=180,
              origin={-98,20})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_BE(
            useConcentrationInput=false, Conc=0) annotation (Placement(
              transformation(
              extent={{6,-6},{-6,6}},
              rotation=180,
              origin={-98,-2})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ions[IonsEnum](
            useConcentrationInput=false, Conc=modelSettings.IonConcentration)
          annotation (Placement(transformation(
              extent={{6,-6},{-6,6}},
              rotation=180,
              origin={6,-30})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_HCO3(Conc=0,
            useConcentrationInput=true) annotation (Placement(transformation(
              extent={{6,-6},{-6,6}},
              rotation=180,
              origin={-44,-20})));
        ISF_initialization iSF_initialization(permeabilities=modelSettings.IonPermeabilities,
            elementary_charges=modelSettings.IonElemChrgs)
          annotation (Placement(transformation(extent={{40,-40},{60,-20}})));
      equation
        connect(bloodABB_OSA.tO2_input,concentrationMeasure3. concentration)
          annotation (Line(points={{-79.6,-64},{-79.6,-58},{-80,-58},{-80,22.8}},
                         color={0,0,127}));
        connect(bloodABB_OSA._BEox,concentrationMeasure5. concentration)
          annotation (Line(points={{-83.6,-64},{-83.6,-66},{-88,-66},{-88,-51.2}},
              color={0,0,127}));
        connect(bloodABB_OSA.tCO2_input,concentrationMeasure4. concentration)
          annotation (Line(points={{-75.8,-64},{-75.8,-62},{-76,-62},{-76,-31.2}},
                          color={0,0,127}));
        connect(ionValues.HCO3, bloodABB_OSA.cHCO3) annotation (Line(points={{
                -21.8,-62},{-64,-62},{-64,-64}}, color={0,0,127}));
        connect(bloodABB_OSA.pH, ionValues.pH) annotation (Line(points={{-64,
                -74},{-44,-74},{-44,-70},{-21.8,-70}}, color={0,0,127}));
        connect(concentrationMeasure5.q_in, plasma_BE.q_out) annotation (Line(
            points={{-88,-48},{-88,-2},{-92,-2}},
            color={107,45,134},
            thickness=1));
        connect(plasma_dO2.q_out, concentrationMeasure3.q_in) annotation (Line(
            points={{-92,40},{-80,40},{-80,26}},
            color={107,45,134},
            thickness=1));
        connect(plasma_dCO2.q_out, concentrationMeasure4.q_in) annotation (Line(
            points={{-92,20},{-76,20},{-76,-28}},
            color={107,45,134},
            thickness=1));
        connect(bloodABB_OSA.cHCO3, plasma_HCO3.concentration) annotation (Line(
              points={{-64,-64},{-64,-20},{-50,-20}}, color={0,0,127}));
        connect(ions.q_out, iSF_initialization.plasma_conc) annotation (Line(
            points={{12,-30},{40,-30}},
            color={107,45,134},
            thickness=1));
        connect(plasma_HCO3.q_out, iSF_initialization.HCO3) annotation (Line(
            points={{-38,-20},{40,-20}},
            color={107,45,134},
            thickness=1));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end TestIonValues;
    end Tests;

      block AlbuminCharge
      input Physiolibrary.Types.pH pH;
      output Real charge = -1/1000*6500*(0.123*pH - 0.631) "[meq/l] according to Figge";
      end AlbuminCharge;

  type IonsEnum = enumeration(
        Na,
        Cl,
        Ua,
        Albumin);
    model ISF_initialization
      import AcidBaseBalance.Ions.*;
    // output Real IonsInitialConcentrations[:] = isf[1:end-1];
     Physiolibrary.Types.Concentration isf_HCO3;
     Physiolibrary.Types.Concentration isf[IonsEnum](start = isf_default);
     Physiolibrary.Types.Concentration isf_tCO2 = (isf_HCO3 + isf_dHCO3) + isf_dCO2 + cdCO2;

     Physiolibrary.Types.AmountOfSubstance isf_HCO3_solute = (isf_HCO3 + isf_dHCO3)*isf_volume;
     Physiolibrary.Types.AmountOfSubstance isf_solutes[IonsEnum] = isf .*isf_volume;
     Physiolibrary.Types.AmountOfSubstance isf_tCO2_solute = isf_tCO2 *isf_volume;
    // Physiolibrary.Types.AmountOfSubstance isf_tO2


     parameter Real permeabilities[IonsEnum] "to know additional zero permeabilities. Otherwise specified separately";
     parameter Integer elementary_charges[IonsEnum] "Elementary charges of the particles AND HCO3";
     parameter Physiolibrary.Types.Volume isf_volume;
     parameter Physiolibrary.Types.pH pHisf = 7.358;

     parameter Real isf_dCO2 = 2 "A hard setting of dissolved CO2 to prevent an error. May be computed more precisely in the future";
     parameter Real isf_dHCO3 = 3.1 "a correction for CO2 inflow, setting lower pH";
     Physiolibrary.Types.Concentration cdCO2 = (isf_HCO3 + isf_dHCO3) / (10^(pHisf - 6.1));

      Real r(start = 1)  "THE ratio";
      Real totalCharges[IonsEnum];
    //  AcidBaseBalance.Ions.AlbuminCharge albumin_plasma( pH = pH);
      AcidBaseBalance.Ions.AlbuminCharge albumin_isf( pH = pHisf);

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a plasma_conc[IonsEnum]
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3
        annotation (Placement(transformation(extent={{-110,90},{-90,110}})));

    Real totalCharge = 0;

    //   Modelica.Blocks.Interfaces.RealInput pH
    //     annotation (Placement(transformation(extent={{-120,40},{-80,80}}),
    //         iconTransformation(
    //         extent={{20,-20},{-20,20}},
    //         rotation=0,
    //         origin={100,100})));
    protected
      parameter Real isf_default[:]=ones(NumberOfIons)
        "lets start in positive numbers to avoid initialization error warnings";
      parameter Integer NumberOfIons=size(plasma_conc, 1)
        "Number of ions plus HCO3 ";
    equation
      plasma_conc.q = zeros(NumberOfIons);
      HCO3.q = 0;

      // the fro loop is only for the ions, the HCO3 is separate below
      for i in IonsEnum loop
        if i == IonsEnum.Albumin then
            isf[i] = plasma_conc[i].conc/3;
            totalCharges[i] = albumin_isf.charge * isf[i];
        elseif permeabilities[i] == 0 then
            isf[i] = isf_default[i];
            totalCharges[i] = elementary_charges[i]*isf[i];
        elseif elementary_charges[i] == 0 then
            isf[i] = isf_default[i];
            totalCharges[i] = 0;
        elseif elementary_charges[i] > 0 then
          plasma_conc[i].conc/isf[i] = r;
            totalCharges[i] = elementary_charges[i]*isf[i];
        else
          isf[i]/plasma_conc[i].conc = r;
            totalCharges[i] = elementary_charges[i]*isf[i];
        end if;
      end for;

      // HCO3 is a negative ion, therefore same as for negatives
      isf_HCO3/HCO3.conc = r;

      sum(totalCharges) + isf_HCO3*(-1) = totalCharge;

      annotation (Icon(graphics={Rectangle(
              extent={{-100,-100},{100,100}},
              lineColor={28,108,200},
              lineThickness=0.5,
              fillColor={170,255,170},
              fillPattern=FillPattern.Solid), Text(
              extent={{-100,-80},{100,80}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash,
              lineThickness=0.5,
              textString="ISF
initialization")}));
    end ISF_initialization;

    model IonCharges
      /*
  Modelica.Blocks.Interfaces.RealInput pH
    annotation (Placement(transformation(extent={{-100,60},{-60,100}}),
        iconTransformation(
        extent={{-20,-20},{20,20}},
        rotation=270,
        origin={0,100})));
   */
       Real pH = 7.4;
      Physiolibrary.Types.RealIO.ConcentrationOutput concentration[:] = charges annotation (
          Placement(transformation(extent={{80,-20},{120,20}}), iconTransformation(
              extent={{80,-20},{120,20}})));

    //  Real charges[:] = {if i == Ions.Albumin then albuminCharge else DefaultIonCharges[i] for i in Ions};
      constant AcidBaseBalance.Ions.IonsEnum ions[:]={j for j in
          AcidBaseBalance.Ions.IonsEnum};
    //  constant IonChargeTypesEnum ie[:]={j for j in IonChargeTypesEnum};
      Real charges[:]={if Interfaces.IonChargeTypes
                                        [i] ==Interfaces.IonChargeTypesEnum.Positive1
           then 1 elseif Interfaces.IonChargeTypes
                                       [i] ==Interfaces.IonChargeTypesEnum.Negative1
           then -1 elseif Interfaces.IonChargeTypes
                                        [i] ==Interfaces.IonChargeTypesEnum.NoCharge
           then 0 else (if i == AcidBaseBalance.Ions.IonsEnum.Albumin then
          albuminCharge else Modelica.Constants.inf) for i in AcidBaseBalance.Ions.IonsEnum}
        "A default charges of ions, complementary to as specified in the AcidBaseBalance.Interfaces.IonChargeTypes constant. Exceptions, such as Albumin, must be defined here!";
      Real albuminCharge = -1/1000*6500*(0.123*pH - 0.631) "[meq/l] according to Figge";
    //  String s[:] = {String(i) for i in Ions};
    equation
      assert(size(ions, 1) == size(Interfaces.IonChargeTypes, 1),
        "Some problem in the definition of ion charges in AcidBaseBalance.Interfaces.IonCharges");
          assert(max(charges) < Modelica.Constants.inf, "Some problem in the definition of ion charges in AcidBaseBalance.Interfaces.IonCharges");
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Text(
              extent={{-60,20},{100,80}},
              lineColor={0,0,127},
              fillColor={240,233,6},
              fillPattern=FillPattern.Solid,
              horizontalAlignment=TextAlignment.Right,
              textString="meq/l")}),            Diagram(coordinateSystem(
              preserveAspectRatio=false)));
    end IonCharges;

    model IonChargeCorrection
      "corrects the concentration of albumin (or other volatile substances) to absolute (non-negative) value of meq/l"
      import AcidBaseBalance.Ions.*;
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_a[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b port_b[AcidBaseBalance.Ions.IonsEnum
         + 1] annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      Modelica.Blocks.Interfaces.RealInput pH
        annotation (Placement(transformation(extent={{-120,40},{-80,80}}),
            iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-100,40})));
     //constant IonsEnum ions[:]={j for j in IonsEnum};
    //  constant IonChargeTypesEnum ie[:]={j for j in IonChargeTypesEnum};
      Real DABG[:]={if i == AcidBaseBalance.Ions.IonsEnum.Albumin then
          abs(albuminCharge.charge) else 1 for i in AcidBaseBalance.Ions.IonsEnum}
        "diassociated acid/base groups - correction concentration of the acid-groups/base groups, or correction to concentration so it equals it charge in meq/l";
      //Real albuminCharge = -1/1000*6500*(0.123*pH - 0.631) "[meq/l] according to Figge";
      AlbuminCharge albuminCharge(pH = pH);

    //  String s[:] = {String(i) for i in Ions};
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3
        annotation (Placement(transformation(extent={{-110,90},{-90,110}})));
      parameter Real elementaryCharges[AcidBaseBalance.Ions.IonsEnum];
        Real charges[:] = port_a.conc .* DABG .* elementaryCharges "control sum, should be zero or close to zero.";
        Real charge = sum(charges) + HCO3.conc*(-1);
        Real sumOfParticles = sum(port_b.conc);
       Physiolibrary.Types.RealIO.OsmolarityOutput osmolarity = sumOfParticles annotation (Placement(
            transformation(extent={{90,-110},{110,-90}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={100,-100})));
    equation
      // ions
      for i in AcidBaseBalance.Ions.IonsEnum loop
        port_b[i].conc = port_a[i].conc * DABG[i];
        port_a[i].q + port_b[i].q = 0;
      end for;

    // HCO3 extension
       port_b[end].conc = HCO3.conc;
       HCO3.q + port_b[end].q = 0;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(extent={{-100,100},{100,-100}}, lineColor={28,108,200},
              fillColor={255,255,170},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-100,0},{20,60}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Left,
              textString="mmol/l"),
            Text(
              extent={{-38,-60},{100,0}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Right,
              textString="meq/l"),
            Line(
              points={{-80,0},{80,0}},
              color={102,44,145},
              thickness=0.5,
              arrow={Arrow.Open,Arrow.Open}),
            Line(
              points={{-80,100},{80,10}},
              color={102,44,145},
              thickness=0.5,
              arrow={Arrow.Open,Arrow.Open})}),                      Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end IonChargeCorrection;

    model IonValues "vAlues taken from http://book.bionumbers.org/what-are-the-concentrations-of-different-ions-in-cells/ "
      Physiolibrary.Types.RealIO.pHInput  pH annotation (Placement(
            transformation(rotation=0, extent={{-105,73},{-91,87}}),
            iconTransformation(extent={{-105,73},{-91,87}})));
      Physiolibrary.Types.RealIO.ConcentrationInput HCO3 annotation (Placement(
            transformation(rotation=0, extent={{-105,73},{-91,87}}),
            iconTransformation(extent={{-105,-7},{-91,7}})));
      parameter Physiolibrary.Types.Concentration Ions[IonsEnum];
      parameter Real elem_chrgs[IonsEnum];

      AlbuminCharge albuminCharge(pH = pH);
      Real DABG[:]={if i == IonsEnum.Albumin then
          abs(albuminCharge.charge) else 1 for i in IonsEnum};

      parameter IonsEnum unknownIon;
      Real ionCharges[:] = elem_chrgs .* DABG .*IonCorrected;
      Physiolibrary.Types.Concentration IonCorrected[:] = {if i == unknownIon then X else Ions[i] for i in IonsEnum};
      output Physiolibrary.Types.Concentration X;



    equation
      sum(ionCharges) + HCO3*(-1) = 0;

     // Physiolibrary.Types.pH pH;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end IonValues;

    model ISF_initialization2
     import AcidBaseBalance.Ions.*;
    // output Real IonsInitialConcentrations[:] = isf[1:end-1];
     parameter Physiolibrary.Types.Concentration plasma_conc[IonsEnum] = ones(NumberOfIons);
     parameter Physiolibrary.Types.Concentration plasma_HCO3 = 26;
     parameter Real pH = 7.2;
     parameter Real permeabilities[IonsEnum] "to know additional zero permeabilities. Otherwise specified separately";
     parameter Integer elementary_charges[IonsEnum] "Elementary charges of the particles AND HCO3";
     parameter Physiolibrary.Types.Volume ISFvolume_start "modelSettings.ISFvolume_start";



     parameter Physiolibrary.Types.Concentration isf_hco3_solute = isf_HCO3 * ISFvolume_start;
     parameter Physiolibrary.Types.Concentration isf_solute[:] = isf .* ISFvolume_start;


    protected
     parameter Real isf_HCO3(start=plasma_HCO3, fixed=false);
     parameter Real isf[IonsEnum](start = isf_default, fixed = false);
     parameter Real r(start = 1, fixed= false)  "THE ratio";
     parameter Real totalCharges[IonsEnum](start = isf_default.*elementary_charges, fixed = false);

     parameter Real albumin = -1* (-1/1000*6500*(0.123*pH - 0.631)) "[meq/l] according to Figge";

    protected
      parameter Real isf_default[:]=ones(NumberOfIons)
        "lets start in positive numbers to avoid initialization error warnings";
      parameter Integer NumberOfIons=size(plasma_conc, 1)
        "Number of ions plus HCO3 ";

    initial equation
      // the fro loop is only for the ions, the HCO3 is separate below
      for i in IonsEnum loop
        if i == IonsEnum.Albumin then
            isf[i] = plasma_conc[i]/3;
            totalCharges[i] = albumin * isf[i];
        elseif permeabilities[i] == 0 then
            isf[i] = isf_default[i];
            totalCharges[i] = elementary_charges[i]*isf[i];
        elseif elementary_charges[i] == 0 then
            isf[i] = isf_default[i];
            totalCharges[i] = 0;
        elseif elementary_charges[i] > 0 then
          plasma_conc[i]/isf[i] = r;
            totalCharges[i] = elementary_charges[i]*isf[i];
        else
          isf[i]/plasma_conc[i] = r;
            totalCharges[i] = elementary_charges[i]*isf[i];
        end if;
      end for;

      // HCO3 is a negative ion, therefore same as for negatives
      isf_HCO3/plasma_HCO3 = r;

      sum(totalCharges) + isf_HCO3*(-1) = 0;

    end ISF_initialization2;

    model albuminRecirculation
      parameter Physiolibrary.Types.MolarFlowRate AlbQ0 = 2.75753e-09;
      Real cAlb = plasmaAlbumin.q_out.conc*66.5/10 "g/dl, normal value is 4.4";
      Physiolibrary.Chemical.Components.Substance plasmaAlbumin(useNormalizedVolume=
           false, solute_start(displayUnit="mmol") = 0.00188)
        annotation (Placement(transformation(extent={{-80,0},{-60,20}})));
      Physiolibrary.Chemical.Components.Substance ISFAlbumin(useNormalizedVolume=false,
          solute_start(displayUnit="mmol") = 0.00189)
        annotation (Placement(transformation(extent={{0,0},{20,20}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=2.5E-08)
        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
      Physiolibrary.Chemical.Components.Stream Stream(SolutionFlow(displayUnit=
              "l/day") = 5.787037037037e-8)
        annotation (Placement(transformation(extent={{-20,40},{-40,60}})));
      Synthesis                 synthesis(SynthesisBasic(
            displayUnit="mmol/day"))
        annotation (Placement(transformation(extent={{-20,-90},{-40,-70}})));
      Degradation                 degradation(
          DegradationBasic(displayUnit="mmol/day"))
        annotation (Placement(transformation(extent={{-40,-70},{-20,-50}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.003)
        annotation (Placement(transformation(extent={{-98,64},{-90,72}})));
      Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      Physiolibrary.Types.Constants.VolumeConst volume1(k=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{18,64},{10,72}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure
        annotation (Placement(transformation(extent={{-66,-70},{-46,-50}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1
        annotation (Placement(transformation(extent={{-66,-70},{-46,-90}})));
      Modelica.Blocks.Math.Add add(k1=+1, k2=+1)
        annotation (Placement(transformation(extent={{-8,-80},{12,-60}})));
      AlbChrg albChrg
        annotation (Placement(transformation(extent={{28,-80},{48,-60}})));
      Physiolibrary.Types.Constants.pHConst     pH(k=7.4)
        annotation (Placement(transformation(extent={{14,-54},{22,-46}})));
      Modelica.Blocks.Continuous.Integrator chargeDifference
        annotation (Placement(transformation(extent={{80,-80},{100,-60}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        unlimitedSolutePumpOut(useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-30,-48},{-10,-28}})));
      Modelica.Blocks.Sources.Pulse pulse(
        nperiod=1,
        startTime=3456000.0,
        amplitude=1.15741E-08,
        width=100,
        period=345600.0)
        annotation (Placement(transformation(extent={{24,-30},{4,-10}})));
      Modelica.Blocks.Continuous.Integrator AlbuminCatabolism
        annotation (Placement(transformation(extent={{82,-16},{102,4}})));
      Modelica.Blocks.Continuous.Integrator AlbuminDifference
        annotation (Placement(transformation(extent={{28,-110},{48,-90}})));
    equation
      connect(Stream.q_in, ISFAlbumin.q_out) annotation (Line(
          points={{-20,50},{10,50},{10,10}},
          color={107,45,134},
          thickness=1));
      connect(Stream.q_out, plasmaAlbumin.q_out) annotation (Line(
          points={{-40,50},{-70,50},{-70,10}},
          color={107,45,134},
          thickness=1));
      connect(plasmaAlbumin.q_out, diffusion.q_in) annotation (Line(
          points={{-70,10},{-40,10}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, ISFAlbumin.q_out) annotation (Line(
          points={{-20,10},{10,10}},
          color={107,45,134},
          thickness=1));
      connect(volume.y, plasmaAlbumin.solutionVolume)
        annotation (Line(points={{-89,68},{-74,68},{-74,14}}, color={0,0,127}));
      connect(ISFAlbumin.solutionVolume, volume1.y)
        annotation (Line(points={{6,14},{6,68},{9,68}}, color={0,0,127}));
      connect(degradation.q_in, molarFlowMeasure.q_out) annotation (Line(
          points={{-40,-60},{-46,-60}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_in, plasmaAlbumin.q_out) annotation (Line(
          points={{-66,-60},{-70,-60},{-70,10}},
          color={107,45,134},
          thickness=1));
      connect(synthesis.q_out, molarFlowMeasure1.q_out) annotation (Line(
          points={{-40,-80},{-46,-80}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_in, plasmaAlbumin.q_out) annotation (Line(
          points={{-66,-80},{-70,-80},{-70,10}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.molarFlowRate, add.u1) annotation (Line(points={
              {-56,-68},{-16,-68},{-16,-64},{-10,-64}}, color={0,0,127}));
      connect(molarFlowMeasure1.molarFlowRate, add.u2) annotation (Line(points=
              {{-56,-72},{-16,-72},{-16,-76},{-10,-76}}, color={0,0,127}));
      connect(add.y, albChrg.albFlow) annotation (Line(points={{13,-70},{28,-70},
              {28,-70.2},{29,-70.2}}, color={0,0,127}));
      connect(albChrg.pH, pH.y) annotation (Line(points={{28,-61},{26,-61},{26,
              -50},{23,-50}}, color={0,0,127}));
      connect(albChrg.HCO3Flow, chargeDifference.u)
        annotation (Line(points={{47,-70},{78,-70}}, color={0,0,127}));
      connect(unlimitedSolutePumpOut.q_in, degradation.q_in) annotation (Line(
          points={{-30,-38},{-40,-38},{-40,-60}},
          color={107,45,134},
          thickness=1));
      connect(pulse.y, unlimitedSolutePumpOut.soluteFlow) annotation (Line(
            points={{3,-20},{-16,-20},{-16,-34}}, color={0,0,127}));
      connect(pulse.y, AlbuminCatabolism.u) annotation (Line(points={{3,-20},{2,
              -20},{2,-6},{80,-6}}, color={0,0,127}));
      connect(AlbuminDifference.u, albChrg.albFlow) annotation (Line(points={{
              26,-100},{18,-100},{18,-70},{28,-70},{28,-70.2},{29,-70.2}},
            color={0,0,127}));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio=false)),
        Diagram(coordinateSystem(preserveAspectRatio=false)),
        Documentation(info="<html>
<p>Albumin recirulation through lymph - given the lymph flow of 5 l/day (<span style=\"font-family: sans-serif; color: #222222; background-color: #eaf3ff;\">&nbsp;</span><i>Guyton and Hall Textbook of Medical Physiology. Saunders. 2010. pp.&nbsp;186, 187.&nbsp;<span style=\"font-family: sans-serif;\"><a href=\"https://en.wikipedia.org/wiki/International_Standard_Book_Number\">ISBN</a><span style=\"color: #222222;\">&nbsp;<a href=\"https://en.wikipedia.org/wiki/Special:BookSources/978-1416045748\">978-1416045748</a>.</span></i> ) and the ISF content of albumin around 1/3 of the plasmatic concentration, the tissue diffusion has been identified to be 1.5 ml/min.</p>
</html>"));
    end albuminRecirculation;

    model AlbChrg
      Physiolibrary.Types.RealIO.MolarFlowRateOutput HCO3Flow "meq/s "
        annotation (Placement(transformation(extent={{80,-10},{100,10}})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput albFlow
        annotation (Placement(transformation(extent={{-100,-12},{-80,8}})));
      Physiolibrary.Types.RealIO.pHInput pH
        annotation (Placement(transformation(extent={{-120,70},{-80,110}})));
      Real albChrgFlowRate=albFlow*65000* atch
        "meq/s: mol/s * (g/mol)";
      Real atch= -(0.123*pH - 0.631) "meq/g albumin total charge acc to Fencl& Figge";
    equation
      HCO3Flow = albChrgFlowRate;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end AlbChrg;

    model Synthesis
    //  parameter Physiolibrary.Types.MassFlowRate  SynthesisBasic "10 mg/min";
      parameter Physiolibrary.Types.MolarFlowRate SynthesisBasic = 2.75753e-09
      "10 mg/min";
      parameter Real[:,3] data =  {{ 20.0,  3.0,  0.0}, { 28.0,  1.0,  -0.2}, { 40.0,  0.0,  0.0}}
      "COPEffect";
    Physiolibrary.Blocks.Interpolation.Curve c(
      x=data[:, 1],
      y=data[:, 2],
      slope=data[:, 3],
      Xscale=101325/760);
      constant Real protToAlb = (0.63/1.45) "recalculation mmol/l of proteins to mmoll of albumin (from Physiomodel.Proteins.ProteinDivision)";
    Physiolibrary.Chemical.Interfaces.ChemicalPort_b q_out annotation (extent=[
          -10,-110; 10,-90], Placement(transformation(extent={{90,-10},{110,10}})));

      Physiolibrary.Types.Pressure COP;
    //  Physiolibrary.Types.AmountOfSubstance  synthetizedAmount(start=0);
    //  Physiolibrary.Types.Mass  synthetizedMass(start=0);
    //protected
    //  constant Physiolibrary.Types.Time sec=1;
    //  constant Physiolibrary.Types.Volume ghostPlasmaVol=3.02e-3
    //    "Strange dependence derived from original HumMod";
    equation
      COP =  q_out.conc/protToAlb * Modelica.Constants.R * 310.15;
      c.u=COP;
      q_out.q = -SynthesisBasic * c.val;

    //TODO: state
    //der(synthetizedAmount) = -q_out.q;
    //  ProteinsMass2AmountOfSubstance(synthetizedMass,ghostPlasmaVol) = synthetizedAmount;
     annotation (
        defaultComponentName="synthesis",
        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                100,100}}), graphics={Rectangle(
              extent={{-100,-50},{100,50}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid), Text(
              extent={{-100,-50},{90,50}},
              lineColor={0,0,255},
              textString="%name")}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
    end Synthesis;

    model Degradation
    //  parameter Physiolibrary.Types.MassFlowRate  DegradationBasic "10 mg/min";
    //  parameter Real[:,3] data =  {{ 0.00,  0.0,  0.0}, { 0.07,  1.0,  40.0}, { 0.09,  6.0,  0.0}}
    //    "ProteinEffect";
       parameter Physiolibrary.Types.MolarFlowRate DegradationBasic = 2.75753e-09
      "10 mg/min";
       parameter Real[:,3] data =  {{ 0.00,  0.0,  0.0}, { 1.45,  1.0,  1.59}, { 1.97,  6.0,  0.0}}
      "ProteinEffect";

    Physiolibrary.Blocks.Interpolation.Curve c(
      x=data[:, 1],
      y=data[:, 2],
      slope=data[:, 3]);
      constant Real protToAlb = (0.63/1.45) "recalculation mmol/l of proteins to mmoll of albumin (from Physiomodel.Proteins.ProteinDivision)";

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a q_in annotation (Placement(
          transformation(extent={{-100,0},{-60,40}}), iconTransformation(extent=
             {{-110,-10},{-90,10}})));

    //  Physiolibrary.Types.AmountOfSubstance  degradedAmount(start=0);
    //  Physiolibrary.Types.Mass  degradedMass(start=0);
    //protected
    //  constant Physiolibrary.Types.Time sec=1;
    //  constant Physiolibrary.Types.Volume ghostPlasmaVol=3.02e-3
    //    "Strange dependence derived from original HumMod";
    equation
    //  ProteinsMassConcentration2Concentration(c.u*1000) = q_in.conc;
      c.u = q_in.conc/protToAlb;
      q_in.q = DegradationBasic * c.val;
    //  q_in.q =ProteinsMass2AmountOfSubstance(DegradationBasic*c.val*sec,ghostPlasmaVol)/sec;

    //TODO: state
    //der(degradedAmount) = q_in.q;
    //  ProteinsMass2AmountOfSubstance(degradedMass,ghostPlasmaVol) = degradedAmount;
     annotation (
        defaultComponentName="degradation",
        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                100,100}}), graphics={Rectangle(
              extent={{-100,-50},{100,50}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid), Text(
              extent={{-88,-50},{100,50}},
              lineColor={0,0,255},
              textString="%name")}),        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"));
    end Degradation;

    model AlbuminHCO3Complement
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b
                                                     HCO3Flow "meq/s "
        annotation (Placement(transformation(extent={{-10,90},{10,110}})));
      Physiolibrary.Types.RealIO.pHInput pH
        annotation (Placement(transformation(extent={{-120,80},{-80,120}}),
            iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-100,100})));
      Real albChrgFlowRate=port_a.q*65000/1000* atch
        "meq/s: mol/s * (g/mol)";
      Real atch= -(0.123*pH - 0.631) "meq/g albumin total charge acc to Fencl& Figge";
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_a
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b port_b
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));
    equation
      HCO3Flow.q + albChrgFlowRate = 0;
      port_a.q + port_b.q = 0;
      port_a.conc = port_b.conc;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(
              points={{-88,0},{80,0}},
              color={28,108,200},
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{0,0},{0,32},{0,90}},
              color={28,108,200},
              smooth=Smooth.Bezier,
              arrow={Arrow.Filled,Arrow.None}),
            Text(
              extent={{0,-40},{100,0}},
              lineColor={0,140,72},
              textString="alb-"),
            Text(
              extent={{20,80},{120,120}},
              lineColor={0,140,72},
              textString="HCO3-"),
            Text(
              extent={{-100,-40},{0,0}},
              lineColor={0,140,72},
              textString="Alb"),
            Rectangle(extent={{100,-100},{-100,100}}, lineColor={28,108,200}),
            Text(
              extent={{-100,-100},{100,-60}},
              lineColor={28,108,200},
              textString="HCO3 complement")}),                       Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end AlbuminHCO3Complement;

    model AlbuminAcidBase
      parameter Physiolibrary.Types.MolarFlowRate AlbQ0 = 2.75753e-09;
      Real cAlb = plasmaAlbumin.q_out.conc*66.5/10 "g/dl, normal value is 4.4";
      Real cAlbISF = ISFAlbumin.q_out.conc*66.5/10 "g/dl, normal value is 4.4/3";
      Physiolibrary.Chemical.Components.Substance plasmaAlbumin(useNormalizedVolume=
           false, solute_start(displayUnit="mmol") = 0.002)
        annotation (Placement(transformation(extent={{-80,38},{-60,58}})));
      Physiolibrary.Chemical.Components.Substance ISFAlbumin(useNormalizedVolume=false,
          solute_start(displayUnit="mmol") = 0.002)
        annotation (Placement(transformation(extent={{0,38},{20,58}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=2.5E-08)
        annotation (Placement(transformation(extent={{-40,38},{-20,58}})));
      Physiolibrary.Chemical.Components.Stream Stream(SolutionFlow(displayUnit=
              "l/day") = 5.787037037037e-8)
        annotation (Placement(transformation(extent={{-20,80},{-40,100}})));
      Synthesis                 synthesis(SynthesisBasic(displayUnit="mmol/day") = 5.787037037037e-9)
        annotation (Placement(transformation(extent={{68,-60},{48,-40}})));
      Degradation                 degradation(
          DegradationBasic(displayUnit="mmol/day"))
        annotation (Placement(transformation(extent={{48,-30},{68,-10}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.003)
        annotation (Placement(transformation(extent={{-88,60},{-80,68}})));
      Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-98,78},{-78,98}})));
      Physiolibrary.Types.Constants.VolumeConst volume1(k=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{-8,60},{0,68}})));
      Physiolibrary.Types.Constants.pHConst     pH(k=7.4)
        annotation (Placement(transformation(extent={{32,-14},{24,-6}})));
      AlbuminHCO3Complement albuminHCO3Complement annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={10,-50})));
      AlbuminHCO3Complement albuminHCO3Complement1 annotation (Placement(
            transformation(
            extent={{10,-10},{-10,10}},
            rotation=0,
            origin={-30,-20})));
      Physiolibrary.Chemical.Components.Substance HCO3(useNormalizedVolume=false,
          solute_start(displayUnit="mol") = 0)
        annotation (Placement(transformation(extent={{-20,0},{0,20}})));
      Physiolibrary.Types.Constants.VolumeConst bodyVolume(k(displayUnit="l")=
             modelSettings.ISFvolume_start + 0.003)
        annotation (Placement(transformation(extent={{-34,20},{-26,28}})));
      Physiolibrary.Chemical.Components.Clearance clearance(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{48,-10},{68,10}})));
      Modelica.Blocks.Sources.Pulse pulse1(
        width=100,
        period(displayUnit="d") = 604800,
        nperiod=1,
        startTime(displayUnit="d") = 864000,
        amplitude=1.15741E-06)
        annotation (Placement(transformation(extent={{88,18},{68,38}})));
    equation
      connect(Stream.q_in, ISFAlbumin.q_out) annotation (Line(
          points={{-20,90},{10,90},{10,48}},
          color={107,45,134},
          thickness=1));
      connect(Stream.q_out, plasmaAlbumin.q_out) annotation (Line(
          points={{-40,90},{-70,90},{-70,48}},
          color={107,45,134},
          thickness=1));
      connect(plasmaAlbumin.q_out, diffusion.q_in) annotation (Line(
          points={{-70,48},{-40,48}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, ISFAlbumin.q_out) annotation (Line(
          points={{-20,48},{10,48}},
          color={107,45,134},
          thickness=1));
      connect(volume.y, plasmaAlbumin.solutionVolume)
        annotation (Line(points={{-79,64},{-74,64},{-74,52}}, color={0,0,127}));
      connect(ISFAlbumin.solutionVolume, volume1.y)
        annotation (Line(points={{6,52},{6,64},{1,64}}, color={0,0,127}));
      connect(synthesis.q_out, albuminHCO3Complement.port_a) annotation (Line(
          points={{48,-50},{20,-50}},
          color={107,45,134},
          thickness=1));
      connect(degradation.q_in, albuminHCO3Complement1.port_a) annotation (Line(
          points={{48,-20},{-20,-20}},
          color={107,45,134},
          thickness=1));
      connect(HCO3.q_out, albuminHCO3Complement1.HCO3Flow) annotation (Line(
          points={{-10,10},{-30,10},{-30,-10}},
          color={107,45,134},
          thickness=1));
      connect(albuminHCO3Complement.HCO3Flow, HCO3.q_out) annotation (Line(
          points={{10,-40},{10,10},{-10,10}},
          color={107,45,134},
          thickness=1));
      connect(bodyVolume.y, HCO3.solutionVolume)
        annotation (Line(points={{-25,24},{-14,24},{-14,14}},    color={0,0,127}));
      connect(pH.y, albuminHCO3Complement1.pH)
        annotation (Line(points={{23,-10},{-20,-10}},color={0,0,127}));
      connect(pH.y, albuminHCO3Complement.pH)
        annotation (Line(points={{23,-10},{20,-10},{20,-40}},
                                                           color={0,0,127}));
      connect(clearance.q_in, albuminHCO3Complement1.port_a) annotation (Line(
          points={{48,0},{38,0},{38,-20},{-20,-20}},
          color={107,45,134},
          thickness=1));
      connect(clearance.solutionFlow, pulse1.y)
        annotation (Line(points={{58,7},{58,28},{67,28}},     color={0,0,127}));
      connect(albuminHCO3Complement1.port_b, plasmaAlbumin.q_out) annotation (
          Line(
          points={{-40,-20},{-70,-20},{-70,48}},
          color={107,45,134},
          thickness=1));
      connect(albuminHCO3Complement.port_b, plasmaAlbumin.q_out) annotation (
          Line(
          points={{0,-50},{-70,-50},{-70,48}},
          color={107,45,134},
          thickness=1));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio=false)),
        Diagram(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-46,30},{34,-64}},
              lineColor={0,140,72},
              lineThickness=1,
              pattern=LinePattern.Dot),
            Line(
              points={{-48,-48},{-66,-48}},
              color={0,140,72},
              thickness=0.5,
              arrow={Arrow.None,Arrow.Filled}),
            Text(
              extent={{-64,-46},{-50,-42}},
              lineColor={0,140,72},
              lineThickness=0.5,
              textString="alb-"),
            Text(
              extent={{-64,-16},{-50,-12}},
              lineColor={0,140,72},
              lineThickness=0.5,
              textString="alb-"),
            Line(
              points={{-66,-18},{-48,-18}},
              color={0,140,72},
              thickness=0.5,
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{-9,0},{9,0}},
              color={0,140,72},
              thickness=0.5,
              arrow={Arrow.None,Arrow.Filled},
              origin={-33,2},
              rotation=90),
            Line(
              points={{-6,1},{8,1}},
              color={0,140,72},
              thickness=0.5,
              arrow={Arrow.None,Arrow.Filled},
              origin={7,-30},
              rotation=270),
            Text(
              extent={{-7,-2},{7,2}},
              lineColor={0,140,72},
              lineThickness=0.5,
              textString="HCO3-",
              origin={5,-30},
              rotation=90),
            Text(
              extent={{-7,-2},{7,2}},
              lineColor={0,140,72},
              lineThickness=0.5,
              textString="HCO3-",
              origin={-37,2},
              rotation=90)}),
        Documentation(info="<html>
<p>Albumin recirulation through lymph - given the lymph flow of 5 l/day (<span style=\"font-family: sans-serif; color: #222222; background-color: #eaf3ff;\">&nbsp;</span><i>Guyton and Hall Textbook of Medical Physiology. Saunders. 2010. pp.&nbsp;186, 187.&nbsp;<span style=\"font-family: sans-serif;\"><a href=\"https://en.wikipedia.org/wiki/International_Standard_Book_Number\">ISBN</a><span style=\"color: #222222;\">&nbsp;<a href=\"https://en.wikipedia.org/wiki/Special:BookSources/978-1416045748\">978-1416045748</a>.</span></i> ) and the ISF content of albumin around 1/3 of the plasmatic concentration, the tissue diffusion has been identified to be 1.5 ml/min.</p>
</html>"),
        experiment(StopTime=2592000, __Dymola_NumberOfIntervals=5000));
    end AlbuminAcidBase;

    model vomiting
      parameter Physiolibrary.Types.AmountOfSubstance totalHCO3Amount = 0;
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{34,-10},{14,10}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{14,-90},{34,-70}})));
      Modelica.Blocks.Sources.Pulse pulse(
        width=100,
        period(displayUnit="h") = 3600,
        nperiod=1,
        startTime(displayUnit="d") = 864000,
        amplitude=totalHCO3Amount/(pulse.period*pulse.width/100))
        annotation (Placement(transformation(extent={{78,34},{58,54}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_a[IonsEnum]
        annotation (Placement(transformation(extent={{-110,-90},{-90,-70}})));
      Interfaces.IonSelector ionSelector(selectedIon=AcidBaseBalance.Ions.IonsEnum.Cl)
        annotation (Placement(transformation(extent={{-80,-90},{-60,-70}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=
            1.6666666666667e-5)
        annotation (Placement(transformation(extent={{-48,-90},{-28,-70}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=
            1.6666666666667e-5)
        annotation (Placement(transformation(extent={{-48,-10},{-28,10}})));
    equation
      connect(pulse.y, unlimitedSolutePump.soluteFlow)
        annotation (Line(points={{57,44},{20,44},{20,4}}, color={0,0,127}));
      connect(pulse.y, unlimitedSolutePumpOut.soluteFlow)
        annotation (Line(points={{57,44},{28,44},{28,-76}},
                                                          color={0,0,127}));
      connect(port_a, ionSelector.port_a) annotation (Line(
          points={{-100,-80},{-80,-80}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector.port_b, diffusion.q_in) annotation (Line(
          points={{-60,-80},{-48,-80}},
          color={107,45,134},
          thickness=1));
      connect(HCO3, diffusion1.q_in) annotation (Line(
          points={{-100,0},{-48,0}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, unlimitedSolutePump.q_out) annotation (Line(
          points={{-28,0},{14,0}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, unlimitedSolutePumpOut.q_in) annotation (Line(
          points={{-28,-80},{14,-80}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                             Bitmap(extent={{-100,-100},{100,
                  100}}, fileName=
                  "modelica://Physiolibrary/Resources/Icons/siluetaVaznejsiStav.png"),
            Polygon(
              points={{62,-56},{64,-70},{46,-76},{26,-106},{84,-104},{88,-90},{
                  104,-110},{118,-94},{118,-74},{92,-82},{118,-58},{84,-68},{86,
                  -54},{62,-56}},
              lineColor={0,140,72},
              lineThickness=0.5,
              smooth=Smooth.Bezier,
              fillColor={0,140,72},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-100,40},{100,100}},
              lineColor={28,108,200},
              lineThickness=0.5,
              fillColor={0,140,72},
              fillPattern=FillPattern.None,
              textString="vomiting")}),                              Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end vomiting;

    model IonRegulation
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage Clunlim(
          useConcentrationInput=false, Conc=100)
        annotation (Placement(transformation(extent={{-60,-30},{-40,-10}})));
      Physiolibrary.Chemical.Components.Diffusion cldiff(Conductance(
            displayUnit="ml/min") = 1.6666666666667e-7)
        annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage UAunlim(
          useConcentrationInput=false, Conc=5)
        annotation (Placement(transformation(extent={{-60,10},{-40,30}})));
      Physiolibrary.Chemical.Components.Diffusion uadiff(Conductance(
            displayUnit="ml/min") = 1.6666666666667e-7)
        annotation (Placement(transformation(extent={{-20,10},{0,30}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b q_out[AcidBaseBalance.Ions.IonsEnum]
        "Ions concentrations"
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        Interfaces.IonSelector ionSelector1(selectedIon=AcidBaseBalance.Ions.IonsEnum.Cl)
          annotation (Placement(transformation(extent={{60,-20},{40,0}})));
        Interfaces.IonSelector ionSelector(selectedIon=AcidBaseBalance.Ions.IonsEnum.Ua)
          annotation (Placement(transformation(extent={{60,0},{40,20}})));
    equation
      connect(ionSelector.port_a, q_out) annotation (Line(
          points={{60,10},{80,10},{80,0},{100,0}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector1.port_a, q_out) annotation (Line(
          points={{60,-10},{80,-10},{80,0},{100,0}},
          color={107,45,134},
          thickness=1));
      connect(UAunlim.q_out, uadiff.q_in) annotation (Line(
          points={{-40,20},{-20,20}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector.port_b, uadiff.q_out) annotation (Line(
          points={{40,10},{20,10},{20,20},{0,20}},
          color={107,45,134},
          thickness=1));
      connect(cldiff.q_in, Clunlim.q_out) annotation (Line(
          points={{-20,-20},{-40,-20}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector1.port_b, cldiff.q_out) annotation (Line(
          points={{40,-10},{20,-10},{20,-20},{0,-20}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                             Bitmap(extent={{-56,0},{44,100}},
                          fileName="modelica://Physiolibrary/Resources/Icons/Lactate.png"),
                                             Bitmap(extent={{-100,-66},{-20,12}},
                         fileName="modelica://Physiolibrary/Resources/Icons/Na.png"),
                                             Bitmap(extent={{4,-64},{100,36}},
                         fileName="modelica://Physiolibrary/Resources/Icons/Cl.png"),
            Rectangle(extent={{-100,100},{100,-100}}, lineColor={28,108,200})}),
          Diagram(coordinateSystem(preserveAspectRatio=false)));
    end IonRegulation;
  end Ions;

  package Interfaces
    connector BloodPort
      "Hydraulical connector with pressure and volumetric flow"

      constant Integer numberOfSubstances=3;

      Physiolibrary.Types.Pressure pressure "Pressure";
      flow Physiolibrary.Types.VolumeFlowRate bloodFlow "Volume flow";

      stream Physiolibrary.Types.Concentration conc[numberOfSubstances]
        "Solute concentration";

      stream Physiolibrary.Types.Concentration ions[AcidBaseBalance.Ions.IonsEnum];

      annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
                                                Diagram(coordinateSystem(
              preserveAspectRatio=false)));
    end BloodPort;

    connector BloodPort_in
       extends Interfaces.BloodPort
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));

      annotation (Icon(graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              lineThickness=1)}),   Diagram(graphics={
                      Rectangle(
              extent={{-40,40},{40,-40}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid),
       Text(extent={{-102,102},{98,42}},   lineColor = {107,45,134}, textString = "%name")}));
    end BloodPort_in;

    connector BloodPort_out
       extends Interfaces.BloodPort
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));

      annotation (Icon(graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid,
              lineThickness=1)}),   Diagram(graphics={
       Text(  extent={{-102,102},{98,42}},
              lineColor={107,45,134},
              textString="%name",
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid),
                      Rectangle(
              extent={{-40,40},{40,-40}},
              lineColor={107,45,134},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid)}));
    end BloodPort_out;

    model BloodPort_in_Extension

      Interfaces.BloodPort_in bloodPort_in(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-106,-10},{-86,10}}),
            iconTransformation(extent={{-110,-10},{-90,10}})));

      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a bloodFlow annotation (
          Placement(transformation(extent={{84,86},{104,106}}),iconTransformation(
              extent={{90,90},{110,110}})));

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a O2 annotation (Placement(
            transformation(extent={{86,-10},{106,10}}),iconTransformation(extent={{90,10},
                {110,30}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a CO2 annotation (Placement(
            transformation(extent={{86,-50},{106,-30}}),
                                                       iconTransformation(extent={{90,-32},
                {110,-12}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BEox annotation (Placement(
            transformation(extent={{86,-90},{106,-70}}),
                                                       iconTransformation(extent={{90,-70},
                {110,-50}})));

     // Physiolibrary.Types.Concentration O2_concentration, CO2_concentration, BEox_concentration;

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a ions[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(extent={{86,-114},{106,-94}}),
            iconTransformation(extent={{90,-110},{110,-90}})));
    equation
      //  O2_concentration =actualStream(bloodPort_in.conc[1]);
      //  CO2_concentration =actualStream(bloodPort_in.conc[2]);
      //  BEox_concentration =actualStream(bloodPort_in.conc[3]);

        ions.conc = actualStream(bloodPort_in.ions);
       ions.q + actualStream(bloodPort_in.ions)*bloodPort_in.bloodFlow = zeros(size(ions, 1));

        O2.conc=actualStream(bloodPort_in.conc[1]);
      O2.q + actualStream(bloodPort_in.conc[1])*bloodPort_in.bloodFlow = 0;
        CO2.conc=actualStream(bloodPort_in.conc[2]);
      CO2.q + actualStream(bloodPort_in.conc[2])*bloodPort_in.bloodFlow = 0;
        BEox.conc=actualStream(bloodPort_in.conc[3]);
      BEox.q + actualStream(bloodPort_in.conc[3])*bloodPort_in.bloodFlow = 0;

        bloodFlow.pressure=bloodPort_in.pressure;
      bloodFlow.q + bloodPort_in.bloodFlow = 0;
                                                annotation (Icon(
            coordinateSystem(preserveAspectRatio=false), graphics={
            Text(
              extent={{-80,40},{80,0}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              textString="O2",
              horizontalAlignment=TextAlignment.Right),
            Text(
              extent={{-80,0},{80,-40}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              textString="CO2",
              horizontalAlignment=TextAlignment.Right),
            Text(
              extent={{-80,-40},{80,-78}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              textString="BEox",
              horizontalAlignment=TextAlignment.Right),
            Text(
              extent={{-58,126},{66,58}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              textString="bloodFlow"),
            Text(
              extent={{-80,-80},{80,-120}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              textString="Ions []",
              horizontalAlignment=TextAlignment.Right),
            Line(
              points={{-80,0},{-60,0},{-60,20},{-20,20}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier),
            Line(
              points={{-80,0},{-60,0},{-60,-20},{-20,-20}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier),
            Line(
              points={{-80,0},{-60,0},{-60,-60},{-20,-60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier),
            Line(
              points={{-80,0},{-60,0},{-60,-100},{-20,-100}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier),
            Line(
              points={{-80,0},{-60,0},{-60,40},{-20,60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier)}),   Diagram(coordinateSystem(
              preserveAspectRatio=false)),
                  Diagram(coordinateSystem(extent={{-100,-120},{100,100}})),
          Icon(coordinateSystem(extent={{-100,-120},{100,100}})));
    end BloodPort_in_Extension;

    model BloodPort_out_Extension

      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_b bloodFlow annotation (
          Placement(transformation(extent={{-94,36},{-74,56}}),iconTransformation(
              extent={{-110,90},{-90,110}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b O2 annotation (Placement(
            transformation(extent={{-98,-6},{-78,14}}), iconTransformation(extent={{-110,10},
                {-90,30}})));
      Interfaces.BloodPort_out bloodPort_out(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{90,-10},{110,10}}),
            iconTransformation(extent={{90,-10},{110,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b CO2 annotation (Placement(
            transformation(extent={{-98,-44},{-78,-24}}),
                                                        iconTransformation(extent={{-110,
                -30},{-90,-10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b BEox annotation (
          Placement(transformation(extent={{-94,-82},{-74,-62}}),
            iconTransformation(extent={{-110,-70},{-90,-50}})));
      Physiolibrary.Types.Concentration O2_concentration, CO2_concentration, BEox_concentration;
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b ions[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(extent={{-94,-104},{-74,-84}}),
            iconTransformation(extent={{-110,-110},{-90,-90}})));
    //  Ions ionType = Ions.Na;

    //          Integer ionSize = size(AcidBaseBalance.Package.Ions);
    equation

        O2_concentration =actualStream(bloodPort_out.conc[1]);
        CO2_concentration =actualStream(bloodPort_out.conc[2]);
        BEox_concentration =actualStream(bloodPort_out.conc[3]);

        ions.conc = actualStream(bloodPort_out.ions);
       ions.q + actualStream(bloodPort_out.ions)*bloodPort_out.bloodFlow = zeros(size(ions, 1));

        O2.conc=actualStream(bloodPort_out.conc[1]);
      O2.q + actualStream(bloodPort_out.conc[1])*bloodPort_out.bloodFlow = 0;
        CO2.conc=actualStream(bloodPort_out.conc[2]);
      CO2.q + actualStream(bloodPort_out.conc[2])*bloodPort_out.bloodFlow = 0;
        BEox.conc=actualStream(bloodPort_out.conc[3]);
      BEox.q + actualStream(bloodPort_out.conc[3])*bloodPort_out.bloodFlow = 0;

        bloodFlow.pressure=bloodPort_out.pressure;
      bloodFlow.q + bloodPort_out.bloodFlow = 0;
      annotation (Icon(graphics={
            Text(
              extent={{-80,40},{80,0}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              horizontalAlignment=TextAlignment.Left,
              textString="O2"),
            Text(
              extent={{-80,0},{80,-40}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              horizontalAlignment=TextAlignment.Left,
              textString="CO2"),
            Text(
              extent={{-80,-40},{80,-78}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              horizontalAlignment=TextAlignment.Left,
              textString="BEox"),
            Text(
              extent={{80,-80},{-80,-120}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              horizontalAlignment=TextAlignment.Left,
              textString="Ions []"),
            Line(
              points={{80,0},{60,0},{60,20},{20,20}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier),
            Line(
              points={{80,0},{60,0},{60,-20},{20,-20}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier),
            Line(
              points={{80,0},{60,0},{60,-60},{20,-60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier),
            Line(
              points={{80,0},{60,0},{60,-100},{20,-100}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier),
            Text(
              extent={{-80,120},{100,60}},
              lineColor={107,45,134},
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              textString="bloodFlow"),
            Line(
              points={{80,0},{60,0},{60,40},{20,60}},
              color={0,0,127},
              thickness=0.5,
              smooth=Smooth.Bezier)}));
    end BloodPort_out_Extension;

  type IonsDummy = enumeration(
        dummy);

    type IonChargeTypesEnum = enumeration(
        Positive1,
        Negative1,
        NoCharge,
        VariableCharge);
    constant IonChargeTypesEnum IonChargeTypes[:]={IonChargeTypesEnum.Positive1,
        IonChargeTypesEnum.Negative1,IonChargeTypesEnum.Negative1,
        IonChargeTypesEnum.VariableCharge};

    model ModelSettings
      import Ions =
             AcidBaseBalance.Ions.IonsEnum;
       import Physiolibrary.Types.*;

      parameter Boolean useIons = true;
      parameter Boolean useOsmoticFlow = true;

      // respiratory settings
      parameter Physiolibrary.Types.VolumeFlowRate NormalAlveolarVentilation = 7.68333e-5 annotation(Dialog(tab = "Respiration"));
      parameter Boolean UseRespiratoryCompensation = true annotation(Dialog(tab = "Respiration"));
      parameter Physiolibrary.Types.Fraction respiratoryQuotient = 0.85 annotation(Dialog(tab = "Respiration"));
      parameter Physiolibrary.Types.Pressure PB= 101325.0144354
        "Barometric Pressure" annotation(Dialog(tab = "Respiration"));
      parameter Physiolibrary.Types.Fraction FiO2= 0.21 "Frattion of O2" annotation(Dialog(tab = "Respiration"));
      parameter Physiolibrary.Types.Fraction FiCO2_start= 0.0004 annotation(Dialog(tab = "Respiration"));
      parameter Physiolibrary.Types.Fraction lungShuntFraction = 0.02 annotation(Dialog(tab = "Respiration"));
      parameter Physiolibrary.Types.Fraction perfusionFraction = 0.5 "alveolar perfusion fraction of the first half of the lungs" annotation(Dialog(tab = "Respiration"));
      parameter Physiolibrary.Types.Fraction ventilationFraction = 0.5 "alveolar ventilation fraction of the first half of the lungs"  annotation(Dialog(tab = "Respiration"));

      parameter Physiolibrary.Types.Concentration cAlb= 0.66 annotation(Dialog(tab = "Concentrations"));
    //  parameter Physiolibrary.Types.Concentration cAlbISF = cAlb/3;
      parameter Physiolibrary.Types.Concentration ctHb= 8.4 annotation(Dialog(tab = "Concentrations"));
      parameter Physiolibrary.Types.Concentration cPi= 1.15 annotation(Dialog(tab = "Concentrations"));
      parameter Physiolibrary.Types.Concentration cDPG= 5 annotation(Dialog(tab = "Concentrations"));
      parameter Physiolibrary.Types.Fraction FMetHb= 0.005 annotation(Dialog(tab = "Concentrations"));
      parameter Physiolibrary.Types.Fraction FCOHb= 0.005 annotation(Dialog(tab = "Concentrations"));
      parameter Physiolibrary.Types.Fraction FHbF= 0.005 annotation(Dialog(tab = "Concentrations"));
      parameter Physiolibrary.Types.Temperature Temperature= 310.15 annotation(Dialog(tab = "Concentrations"));
    //  parameter Physiolibrary.Types.Concentration ISFCO2conc_start=24;
     // parameter Physiolibrary.Types.Concentration ISFO2conc_start= 0.05;
    //  parameter Physiolibrary.Types.Concentration ISFBEox_start=0;
    //  parameter Physiolibrary.Types.Concentration ISFHCO3_start = 23.5;
      parameter Physiolibrary.Types.Concentration arterialO2conc_start = 8.23882  annotation(Dialog(tab = "Concentrations", group = "Initial"));
      parameter Physiolibrary.Types.Concentration arterialCO2conc_start = 21.659 annotation(Dialog(tab = "Concentrations", group = "Initial"));
      parameter Physiolibrary.Types.Concentration venousO2conc_start = 6.03882 annotation(Dialog(tab = "Concentrations", group = "Initial"));
      parameter Physiolibrary.Types.Concentration venousCO2conc_start = 23.529 annotation(Dialog(tab = "Concentrations", group = "Initial"));
      parameter Physiolibrary.Types.Volume ISFvolume_start=1e-2 annotation(Dialog(tab = "Concentrations", group = "Initial"));

      // Ion concentrations and initial settings
      parameter Physiolibrary.Types.Concentration IonConcentration[Ions] = {130, 100, 2.5, 0.65} "Plasma ion concentrations" annotation(Dialog(tab = "Concentrations", group = "Ions"));
      constant Integer IonElemChrgs[:] = {1, -1, -1, -1} "elementary charges of ions"
                                                                                     annotation(Dialog(tab = "Concentrations", group = "Ions"));
      parameter DiffusionPermeability O2DiffusionPermeability = 0.005
                                                                     annotation(Dialog(tab = "Concentrations", group = "Ions"));
      parameter DiffusionPermeability CO2DiffusionPermeability = 0.005 "According to partial pressure difference in plasma and tissues, a study by SA" annotation(Dialog(tab = "Concentrations", group = "Ions"));
      parameter DiffusionPermeability IonPermeabilities[:] = {100, 100, 50, 0} "Albumin permeability calculated from lympha flow and 3:1 concentration difference" annotation(Dialog(tab = "Concentrations", group = "Ions"));
      parameter DiffusionPermeability HCO3Permeability = 5e-5 "just a wild guess" annotation(Dialog(tab = "Concentrations", group = "Ions"));

      // Metabolism
      parameter Physiolibrary.Types.MolarFlowRate metabolismO2FlowRate = 0.00018333333333333 annotation(Dialog(tab = "Metabolism"));
      parameter Boolean UseMetabolicUABalance = true annotation(Dialog(tab = "Metabolism"));
      parameter Boolean fixedMetabolismCompensation = false annotation(Dialog(tab = "Metabolism"));
      parameter Physiolibrary.Types.MolarFlowRate metabolismUAFlowRate_norm = 6.944444e-7 annotation(Dialog(tab = "Metabolism", enable = UseMetabolicUABalance));


      // validation settings
      parameter Boolean makeUAstep = false annotation(Dialog(tab = "Validation steps"));
      parameter Physiolibrary.Types.Fraction UAstepRatio = 1.5 annotation(Dialog(tab = "Validation steps"));

      parameter Boolean makeCO2FractionStep=false  annotation(Dialog(tab="Validation steps"));
      parameter Physiolibrary.Types.Fraction FiCO2_step = 0.08 annotation(Dialog(tab = "Validation steps"));

      parameter Boolean makeVentilationPerfusionFractionStep=false annotation(Dialog(tab = "Validation steps"));
      parameter Physiolibrary.Types.Fraction ventilationPerfusionFraction_step=0.75
                                                                             annotation(Dialog(tab=
              "Validation steps"));

      parameter Boolean makeVAstep = false annotation(Dialog(tab = "Validation steps"));
      parameter Physiolibrary.Types.Fraction VAstepRatio = 1.5 annotation(Dialog(tab = "Validation steps"));

      parameter Physiolibrary.Types.Time breakTime = 10*60*60 annotation(Dialog(tab = "Validation steps"));
      parameter Physiolibrary.Types.Time break2Time = 10*60*60 annotation(Dialog(tab = "Validation steps"));
      parameter Physiolibrary.Types.Time breakLength = 60*60*24*2 annotation(Dialog(tab = "Validation steps"));

      // computed variables
      Physiolibrary.Types.MolarFlowRate metabolismUAFlowRate=if makeUAstep and time >
          breakTime and time < breakTime + breakLength then UAstepRatio*
          metabolismUAFlowRate_norm else metabolismUAFlowRate_norm annotation(Dialog(enable = false, tab="Calculated vars"));
      Physiolibrary.Types.Fraction FiCO2=if not makeCO2FractionStep then
          FiCO2_start else if time < breakTime then FiCO2_start else FiCO2_step
        annotation (Dialog(enable=false, tab="Calculated vars"));

      Physiolibrary.Types.Fraction ventilationFractionStep=if not
          makeVentilationPerfusionFractionStep then ventilationFraction else if
          time > breakTime and time < breakTime + breakLength then
          ventilationPerfusionFraction_step else ventilationFraction
        "alveolar perfusion fraction of the first half of the lungs"
        annotation (Dialog(enable=false, tab="Calculated vars"));
      Physiolibrary.Types.Fraction perfusionFractionStep=if not
          makeVentilationPerfusionFractionStep then perfusionFraction else if time >
          break2Time and time < break2Time + breakLength then
          ventilationPerfusionFraction_step else perfusionFraction
        "alveolar perfusion fraction of the first half of the lungs"
        annotation (Dialog(enable=false, tab="Calculated vars"));

      Physiolibrary.Types.VolumeFlowRate AlveolarVentilationFlowRate=if not
          makeVAstep then  NormalAlveolarVentilation else if time >
          breakTime and time < breakTime + breakLength then
          NormalAlveolarVentilation*VAstepRatio else NormalAlveolarVentilation
        "alveolar perfusion fraction of the first half of the lungs"
        annotation (Dialog(enable=false, tab="Calculated vars"));

      //  parameter Physiolibrary.Types.AmountOfSubstance ISFCO2solute_start = ISFCO2conc_start*ISFvolume_start annotation(Dialog(enable = false, tab="Calculated vars"));
    //  parameter Physiolibrary.Types.AmountOfSubstance ISFO2solute_start = ISFO2conc_start*ISFvolume_start annotation(Dialog(enable = false, tab="Calculated vars"));
    //  parameter Physiolibrary.Types.AmountOfSubstance ISFBEoxsolute_start = ISFBEox_start*ISFvolume_start annotation(Dialog(enable = false, tab="Calculated vars"));
    //  parameter Physiolibrary.Types.AmountOfSubstance ISFHCO3solute_start = ISFHCO3_start*ISFvolume_start annotation(Dialog(enable = false, tab="Calculated vars"));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Polygon(
              points={{80,100},{40,100},{40,98},{40,60},{-60,-40},{-100,-40},{-100,-80},
                  {-80,-60},{-60,-80},{-80,-100},{-40,-100},{-40,-60},{60,40},{100,40},
                  {100,80},{80,60},{60,80},{80,100}},
              lineColor={0,0,0},
              fillColor={28,108,200},
              fillPattern=FillPattern.Solid), Polygon(
              points={{-80,100},{-40,100},{-40,98},{-40,60},{60,-40},{100,-40},{100,
                  -80},{80,-60},{60,-80},{80,-100},{40,-100},{40,-60},{-60,40},{-100,
                  40},{-100,80},{-80,60},{-60,80},{-80,100}},
              lineColor={0,0,0},
              fillColor={238,46,47},
              fillPattern=FillPattern.Solid)}),                      Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end ModelSettings;

    model OneToMany
      Modelica.Blocks.Interfaces.RealInput u annotation (Placement(transformation(
              extent={{-60,-20},{-20,20}}),  iconTransformation(extent={{-60,-20},
                {-20,20}})));
      Modelica.Blocks.Interfaces.RealOutput y[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(extent={{30,-10},{50,10}}),
            iconTransformation(extent={{30,-10},{50,10}})));
    equation
      for i in 1:size(y,1) loop
        connect(u, y[i]) annotation (Line(
          points={{-40,0},{40,0}},
          color={0,0,127},
          pattern=LinePattern.Dash,
          thickness=0.5));
      end for;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-40,
                -20},{40,60}}), graphics={Text(
              extent={{-108,20},{92,60}},
              lineColor={0,0,0},
              pattern=LinePattern.Dash,
              lineThickness=0.5,
              textString="1:Ions"), Line(
              points={{-66,0},{38,0}},
              color={0,0,0},
              pattern=LinePattern.Dash,
              thickness=0.5)}),                                      Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-40,-20},{40,
                60}})));
    end OneToMany;

    model IonSelector
      parameter AcidBaseBalance.Ions.IonsEnum selectedIon;
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_a[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b port_b
        annotation (Placement(transformation(extent={{90,-10},{110,10}})));
    equation
    //  port_a[selectedIon].conc = port_b.conc;
      connect(port_a[selectedIon], port_b);

      for i in AcidBaseBalance.Ions.IonsEnum loop
        if i <> selectedIon then
          port_a[i].q = 0;
        end if;
      end for;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(points={{-88,0},{84,0}},         color={0,0,127},
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{-88,0},{0,-80}},
              color={0,0,127},
              arrow={Arrow.None,Arrow.Half}),
            Line(
              points={{-88,0},{0,-40}},
              color={0,0,127},
              arrow={Arrow.None,Arrow.Half}),
            Text(
              extent={{-40,20},{100,80}},
              lineColor={0,0,127},
              fillColor={240,233,6},
              fillPattern=FillPattern.Solid,
              textString="%selectedIon",
              horizontalAlignment=TextAlignment.Right),
            Text(
              extent={{-90,20},{-50,80}},
              lineColor={0,0,127},
              fillColor={240,233,6},
              fillPattern=FillPattern.Solid,
              horizontalAlignment=TextAlignment.Left,
              textString="[:]"),
            Rectangle(extent={{-100,80},{100,-80}}, lineColor={28,108,200})}),
                                                                     Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end IonSelector;

    model Shunt "resistance divider to model shunt"

      parameter Physiolibrary.Types.HydraulicConductance G_total
        "Total resistance of the lungs";
      Physiolibrary.Types.RealIO.HydraulicConductanceOutput G_main
        "Conductance of the primary (main) branch"
          annotation (Placement(transformation(extent={{80,80},{100,100}}),
            iconTransformation(extent={{80,80},{100,100}})));
      Physiolibrary.Types.RealIO.HydraulicConductanceOutput G_shunt
        "Conductance of the secondary (shunt) branch"
        annotation (Placement(transformation(extent={{80,-100},{100,-80}}),
            iconTransformation(extent={{80,-100},{100,-80}})));

    Physiolibrary.Types.RealIO.FractionInput shunt_fraction
        "Percentage of venous blood mixing with arterial"
        annotation (Placement(transformation(extent={{-100,-20},{-60,20}}),
            iconTransformation(extent={{-100,-20},{-60,20}})));
    equation
      G_total = G_main + G_shunt;
      shunt_fraction * G_main = (1 - shunt_fraction) * G_shunt;

      annotation (                   Documentation(info="<html>
<p>The <i>shunt</i> divides the resistance between <i>alveolar ventilation</i> and <i>blood resistor</i> according to desired pulmonary shunt. It defines what percentage of venous blood will be mixed with arterial blood. </p>
</html>"),
        Icon(graphics={Line(points={{40,80},{-60,40},{60,-40},{-40,-80}}, color={28,
                  108,200})}));
    end Shunt;
  end Interfaces;

  package Kidney
    model Ammonium
      extends Physiolibrary.Icons.Amonium;
      Physiolibrary.Blocks.Factors.Spline PT_NH3_AcuteEffect(data=[7.00,2.0,0;
            7.4,1.0,-3.0; 7.80,0.0,0])
        "marek: normal pH corrected from 7.45 to 7.42"                                                                                                     annotation(Placement(transformation(extent = {{-28, 48}, {-8, 68}})));
      Physiolibrary.Blocks.Factors.SplineLag PT_NH3_ChronicEffect(                                             stateName = "PT_NH3.ChronicPhEffect",
        data={{7.00,3.0,0},{7.4,1.0,-4.0},{7.80,0.0,0}},
        HalfTime=1.5*86400*Modelica.Math.log(2))
        "marek: normal pH corrected from 7.45 to 7.42"                                                                                                     annotation(Placement(transformation(extent={{-46,36},
                {-26,56}})));
      Physiolibrary.Blocks.Factors.Spline CD_NH4_PhOnFlux(data={{7.00,1.0,0},{
            7.4,0.6,-2.0},{7.80,0.0,0}})
        "marek: normal pH corrected from 7.45 to 7.42"                                                                                                     annotation(Placement(transformation(extent = {{-28, 20}, {-8, 40}})));
      Physiolibrary.Types.Constants.MolarFlowRateConst electrolytesFlowConstant(k=
            6.6666666666667e-07)                                                                         annotation(Placement(transformation(extent={{-36,96},
                {-24,108}})));
      Physiolibrary.Blocks.Factors.Spline ChloridePoolEffect(data = {{0.00, 0.0, 0}, {80, 1.0, 0.0}})
        "electroneutrality does not allow to extract cation without anion"                                                                                               annotation(Placement(transformation(extent={{-28,-10},
                {-8,10}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput molarflowrate annotation(Placement(transformation(extent = {{0, -32}, {20, -12}}), iconTransformation(extent={{92,-10},
                {112,10}})));
      Physiolibrary.Types.RealIO.pHInput             pH            annotation(Placement(transformation(extent={{-74,70},
                {-54,90}}),                                                                                                             iconTransformation(extent={{-100,90},
                {-80,110}})));
      Physiolibrary.Types.RealIO.ConcentrationInput Cl annotation (Placement(
            transformation(extent={{-94,-10},{-74,10}}), iconTransformation(
              extent={{-94,-10},{-74,10}})));
      HCO3ProductionLimiter hCO3ProductionLimiter annotation (Placement(
            transformation(rotation=0, extent={{-24,10},{-12,22}})));
      Physiolibrary.Types.RealIO.ConcentrationInput HCO3 annotation (Placement(
            transformation(extent={{-114,0},{-94,20}}), iconTransformation(
              extent={{-100,50},{-80,70}})));
      MetabolicRateNormalizer metabolicRateNormalizer1(T(displayUnit="d")=
          86400)
        annotation (Placement(transformation(extent={{-28,70},{-8,90}})));
    equation
      connect(PT_NH3_AcuteEffect.y, PT_NH3_ChronicEffect.yBase) annotation(Line(points={{-18,54},
              {-18,48},{-36,48}},                                                                                color = {0, 0, 127}, smooth = Smooth.None));
      connect(ChloridePoolEffect.y, molarflowrate) annotation(Line(points={{-18,-4},
              {-18,-22},{10,-22}},                                                                                       color = {0, 0, 127}));
      connect(Cl, ChloridePoolEffect.u)
        annotation (Line(points={{-84,0},{-26,0}}, color={0,0,127}));
      connect(PT_NH3_AcuteEffect.u, pH) annotation (Line(points={{-26,58},{-60,
              58},{-60,80},{-64,80}}, color={0,0,127}));
      connect(PT_NH3_ChronicEffect.u, pH) annotation (Line(points={{-44,46},{
              -60,46},{-60,80},{-64,80}}, color={0,0,127}));
      connect(CD_NH4_PhOnFlux.u, pH) annotation (Line(points={{-26,30},{-60,30},
              {-60,80},{-64,80}}, color={0,0,127}));
      connect(pH, hCO3ProductionLimiter.pH) annotation (Line(points={{-64,80},{
              -60,80},{-60,22},{-24,22}}, color={0,0,127}));
      connect(HCO3, hCO3ProductionLimiter.HCO3)
        annotation (Line(points={{-104,10},{-24,10}}, color={0,0,127}));
      connect(hCO3ProductionLimiter.y, ChloridePoolEffect.yBase) annotation (
          Line(points={{-17.76,10},{-18,10},{-18,2}},         color={0,0,127}));
      connect(pH, metabolicRateNormalizer1.pH)
        annotation (Line(points={{-64,80},{-28,80}},color={0,0,127}));
      connect(electrolytesFlowConstant.y, metabolicRateNormalizer1.baseLineMetabolism)
        annotation (Line(points={{-22.5,102},{-18,102},{-18,90}},
                                                                color={0,0,127}));
      connect(metabolicRateNormalizer1.adjustedMetabolism, PT_NH3_AcuteEffect.yBase)
        annotation (Line(points={{-18,70},{-18,60}},
            color={0,0,127}));
      connect(CD_NH4_PhOnFlux.y, hCO3ProductionLimiter.u) annotation (Line(
            points={{-18,26},{-18,22},{-17.76,22}}, color={0,0,127}));
      connect(PT_NH3_AcuteEffect.y, CD_NH4_PhOnFlux.yBase)
        annotation (Line(points={{-18,54},{-18,32}}, color={0,0,127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Text(extent = {{-112, -102}, {108, -128}}, lineColor = {0, 0, 255}, textString = "%name")}), Documentation(revisions = "<html>

<table>
<tr>
<td>Author:</td>
<td>Marek Matejak</td>
</tr>
<tr>
<td>License:</td>
<td><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </td>
</tr>
<tr>
<td>By:</td>
<td>Charles University, Prague</td>
</tr>
<tr>
<td>Date of:</td>
<td>2009</td>
</tr>
<tr>
<td>References:</td>
<td>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>", info="<html>
<p>Taken from Hummod 1.6, norm pH 7.4</p>
</html>"), Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}}), graphics={
            Text(
              extent={{-6,54},{18,60}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Left,
              textString="Proximal tubule"),
            Text(
              extent={{-6,42},{18,48}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Left,
              textString="Proximal tubule"),
            Text(
              extent={{-6,26},{18,32}},
              lineColor={28,108,200},
              horizontalAlignment=TextAlignment.Left,
              textString="distal nefron (collecting duct)")}));
    end Ammonium;

    package Test

      model UrineAcidificationTest
        KidneyMetabolicCompensation ammoniumExcretion(anionExcrection(UAlimit=0,
              Clextrection0=0))
          annotation (Placement(transformation(extent={{-46,-20},{20,20}})));
        Physiolibrary.Types.Constants.ConcentrationConst Chloride(k=100)   annotation(Placement(transformation(extent={{100,-26},
                  {80,-6}})));
        Physiolibrary.Types.Constants.pHConst pHConst(k=7.2) annotation (
            Placement(transformation(
              extent={{-58,84.5754},{-42,100.576}},
              origin={-36,-72.576},
              rotation=0), visible=true));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
          unlimitedSolutionStorage
          annotation (Placement(transformation(extent={{100,10},{80,30}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
          unlimitedSolutionStorage1(Conc=6)
          annotation (Placement(transformation(extent={{76,-4},{56,16}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
          unlimitedSolutionStorage2(useConcentrationInput=true)
          annotation (Placement(transformation(extent={{50,-28},{30,-8}})));
      equation
        connect(pHConst.y, ammoniumExcretion.pH) annotation (Line(points={{-76,
                19.9997},{-62,19.9997},{-62,20},{-43.4615,20}}, color={0,0,127}));
        connect(unlimitedSolutionStorage.q_out, ammoniumExcretion.hco3_outflow)
          annotation (Line(
            points={{80,20},{20,20}},
            color={107,45,134},
            thickness=1));
        connect(unlimitedSolutionStorage1.q_out, ammoniumExcretion.UA_outflow)
          annotation (Line(
            points={{56,6},{48,6},{48,5},{19.4923,5}},
            color={107,45,134},
            thickness=1));
        connect(ammoniumExcretion.Cl_outflow, unlimitedSolutionStorage2.q_out)
          annotation (Line(
            points={{19.4923,-5},{24,-5},{24,-18},{30,-18}},
            color={107,45,134},
            thickness=1));
        connect(Chloride.y, unlimitedSolutionStorage2.concentration)
          annotation (Line(points={{77.5,-16},{64,-16},{64,-18},{50,-18}},
                                                         color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end UrineAcidificationTest;

      model TestLimiter
        HCO3ProductionLimiter hCO3ProductionLimiter
          annotation (Placement(transformation(extent={{-10,-8},{10,12}})));
        Physiolibrary.Types.Constants.pHConst pHConst(k=7.4) annotation (
            Placement(transformation(
              extent={{-58,84.5754},{-42,100.576}},
              origin={-36,-72.576},
              rotation=0), visible=true));
        Physiolibrary.Types.Constants.ConcentrationConst hco3(k=24) annotation (
           Placement(transformation(
              extent={{-58,84.5754},{-42,100.576}},
              origin={-34,-100.576},
              rotation=0), visible=true));
        Modelica.Blocks.Sources.Ramp ramp(
          height=2e-7,
          duration=1,
          offset=3e-7)
          annotation (Placement(transformation(extent={{-26,34},{-6,54}})));
        Modelica.Blocks.Sources.SawTooth sawTooth(
          amplitude=100,
          period=5,
          offset=20,
          startTime=2)
          annotation (Placement(transformation(extent={{-90,-52},{-70,-32}})));
      equation
        connect(pHConst.y, hCO3ProductionLimiter.pH) annotation (Line(points={{-76,
                19.9997},{-44,19.9997},{-44,12},{-10,12}},   color={0,0,127}));
        connect(ramp.y, hCO3ProductionLimiter.u) annotation (Line(points={{-5,
                44},{-2,44},{-2,42},{0.4,42},{0.4,12}}, color={0,0,127}));
        connect(sawTooth.y, hCO3ProductionLimiter.HCO3) annotation (Line(points=
               {{-69,-42},{-40,-42},{-40,-8},{-10,-8}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=10));
      end TestLimiter;

      model TestMetabolicNormalizer
        MetabolicRateNormalizer metabolicRateNormalizer(T(displayUnit="d")=
            345600)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
        Physiolibrary.Types.Constants.MolarFlowRateConst electrolytesFlowConstant(k=
              6.6666666666667e-07)                                                                         annotation(Placement(transformation(extent={{-30,40},
                  {-18,52}})));
        Modelica.Blocks.Sources.Pulse pulse(
          period(displayUnit="d") = 8640000,
          offset=7.4,
          startTime(displayUnit="d") = 864000,
          amplitude=-0.2)
          annotation (Placement(transformation(extent={{-86,-10},{-66,10}})));
      equation
        connect(electrolytesFlowConstant.y, metabolicRateNormalizer.baseLineMetabolism)
          annotation (Line(points={{-16.5,46},{0,46},{0,10}}, color={0,0,127}));
        connect(pulse.y, metabolicRateNormalizer.pH)
          annotation (Line(points={{-65,0},{-10,0}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end TestMetabolicNormalizer;

      model TestAnionExcretion
        AnionExcrection anionExcrection
          annotation (Placement(transformation(extent={{-54,-4},{-46,4}})));
        Modelica.Blocks.Sources.Sine sine(
          amplitude=0.5e-4,
          freqHz=10,
          offset=0.5e-4)
          annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage UA(
            useConcentrationInput=true)
          annotation (Placement(transformation(extent={{-8,0},{-28,20}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage Cl
          annotation (Placement(transformation(extent={{-8,-32},{-28,-12}})));
        Modelica.Blocks.Sources.Ramp ramp1(
          height=10,
          duration=1,
          offset=0)
          annotation (Placement(transformation(extent={{42,0},{22,20}})));
      equation
        connect(anionExcrection.UA, UA.q_out) annotation (Line(
            points={{-46,4},{-36,4},{-36,10},{-28,10}},
            color={107,45,134},
            thickness=1));
        connect(anionExcrection.Cl, Cl.q_out) annotation (Line(
            points={{-46,-4},{-38,-4},{-38,-22},{-28,-22}},
            color={107,45,134},
            thickness=1));
        connect(UA.concentration, ramp1.y)
          annotation (Line(points={{-8,10},{21,10}}, color={0,0,127}));
        connect(anionExcrection.HCO3molarflowrate,sine. y)
          annotation (Line(points={{-53.4,0},{-69,0}}, color={0,0,127}));
        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false)),
          Diagram(coordinateSystem(preserveAspectRatio=false)),
          experiment);
      end TestAnionExcretion;
    end Test;

    model F62
      Modelica.Blocks.Interfaces.RealOutput y annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-2, -54}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -38})));
      Modelica.Blocks.Interfaces.RealInput yBase annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 42}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 32})));
      Modelica.Blocks.Interfaces.RealInput u annotation(Placement(transformation(extent = {{-100, -20}, {-60, 20}}), iconTransformation(extent = {{-128, -20}, {-88, 20}})));
    equation
      y = yBase * 60000 * ((-2.5 * u) + 19.5) / 60000;
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 20}, {100, -20}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-78, 14}, {84, -14}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid, textString = "F62")}));
    end F62;

    model F63
      Modelica.Blocks.Interfaces.RealOutput y annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-2, -54}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -38})));
      Modelica.Blocks.Interfaces.RealInput yBase annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 42}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 32})));
      Modelica.Blocks.Interfaces.RealInput u annotation(Placement(transformation(extent = {{-100, -20}, {-60, 20}}), iconTransformation(extent = {{-128, -20}, {-88, 20}})));
      Real yBase1;
      Real y1;
    equation
      yBase1 = yBase * 60000;
      //mmol/min = mol/sec*60000
      y * 60000 = y1;
      //mol/sec *60000 = mmol/min
      y1 = if u <= 4 then 0 elseif u > 4 and u <= 5 then yBase1 * (u - 4) else yBase1 annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 20}, {100, -20}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-78, 14}, {84, -14}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid, textString = "F63")}));
      annotation(Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10}), graphics = {Rectangle(visible = true, fillColor = {255, 255, 0}, fillPattern = FillPattern.Solid, extent = {{-100, -20}, {100, 20}}), Text(visible = true, origin = {-3.907, 0}, textColor = {0, 0, 255}, extent = {{-69.022, -12.502}, {69.022, 12.502}}, textString = "F63")}));
    end F63;

    model AldEffect
      Modelica.Blocks.Interfaces.RealOutput y annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-2, -54}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, -38})));
      Modelica.Blocks.Interfaces.RealInput yBase annotation(Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 42}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {0, 32})));
      Modelica.Blocks.Interfaces.RealInput u annotation(Placement(transformation(extent = {{-100, -20}, {-60, 20}}), iconTransformation(extent = {{-128, -20}, {-88, 20}})));
    equation
      y = (yBase * 60000 + 0.009 + u * 0.001) / 60000;
      // y = (yBase*60000+0.01)/60000;
      annotation(Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})), Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 20}, {100, -20}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-78, 14}, {84, -14}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid, textString = "AldEffect")}));
    end AldEffect;

    model TitratableAcid
      Physiolibrary.Types.RealIO.FractionInput fald
        "aldocterone - ratio to normal"                                             annotation(Placement(transformation(extent = {{-48, -56}, {-16, -24}}), iconTransformation(extent = {{-114, -58}, {-84, -28}})));
      Physiolibrary.Types.RealIO.pHInput pHu "urine pH" annotation(Placement(transformation(extent = {{-48, -16}, {-16, 16}}), iconTransformation(extent = {{-110, -6}, {-82, 22}})));
      Physiolibrary.Types.RealIO.pHInput pHa "arterial pH" annotation(Placement(transformation(extent = {{-106, 40}, {-82, 64}}), iconTransformation(extent = {{-110, 50}, {-82, 78}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput TA "titratable acid flow" annotation(Placement(transformation(extent = {{50, -90}, {70, -70}}), iconTransformation(extent = {{88, -8}, {108, 12}})));
      Physiolibrary.Types.Constants.MolarFlowRateConst YTA0(k(displayUnit = "mmol/min") = 1.1333333333333e-07)
        "Basal rate of titratable acids"                                                                                                     annotation(Placement(transformation(extent = {{-58, 78}, {-44, 94}})));
      F62 f62_1 annotation(Placement(transformation(extent = {{16, 36}, {56, 68}})));
      AldEffect aldEffect annotation(Placement(transformation(extent = {{14, -58}, {60, -22}})));
      Physiolibrary.Blocks.Math.Integrator int(                                     y_start = 7.4, k=1/
            HalfTime)                                                                              annotation(Placement(transformation(extent = {{-36, 42}, {-16, 62}})));
      Modelica.Blocks.Math.Feedback feedback annotation(Placement(transformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin = {-64, 52})));
      parameter Physiolibrary.Types.Time HalfTime = 8340;
      //(displayUnit="d");
      //Tau(unit="day");
      F63 f63_1 annotation(Placement(transformation(extent = {{14, -18}, {58, 18}})));
    equation
      connect(aldEffect.u, fald) annotation(Line(points = {{12.16, -40}, {-32, -40}}, color = {0, 0, 127}));
      connect(int.y, f62_1.u) annotation(Line(points = {{-15, 52}, {14.4, 52}}, color = {0, 0, 127}));
      connect(feedback.u1, pHa) annotation(Line(points = {{-72, 52}, {-94, 52}, {-94, 52}}, color = {0, 0, 127}));
      connect(feedback.y, int.u) annotation(Line(points = {{-55, 52}, {-46, 52}, {-38, 52}}, color = {0, 0, 127}));
      connect(feedback.u2, f62_1.u) annotation(Line(points = {{-64, 44}, {-64, 26}, {8, 26}, {8, 52}, {14.4, 52}}, color = {0, 0, 127}));
      connect(YTA0.y, f62_1.yBase) annotation(Line(points = {{-42.25, 86}, {36, 86}, {36, 57.12}}, color = {0, 0, 127}));
      connect(f63_1.u, pHu) annotation(Line(points = {{12.24, 0}, {-32, 0}}, color = {0, 0, 127}));
      connect(f63_1.yBase, f62_1.y) annotation(Line(visible = true, origin = {36, 25.84}, points = {{0, -20.08}, {0, 20.08}}, color = {0, 0, 127}));
      connect(f63_1.y, aldEffect.yBase) annotation(Line(visible = true, origin = {36.5, -20.77}, points = {{-0.5, 13.93}, {-0.5, -0.23}, {0.5, -0.23}, {0.5, -13.47}}, color = {0, 0, 127}));
      connect(aldEffect.y, TA) annotation(Line(visible = true, origin = {44.667, -68.947}, points = {{-7.667, 22.107}, {-7.667, -11.053}, {15.333, -11.053}}, color = {0, 0, 127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent={{
                  -100,100},{100,-100}},                                                                                                                           lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-76, 82}, {-40, 48}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid, textString = "pHa"), Text(extent = {{-78, 28}, {-42, -6}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid, textString = "pHu"), Text(extent = {{-78, -24}, {-42, -58}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid, textString = "fald"), Text(extent={{
                  50,20},{86,-14}},                                                                                                                                                                           lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid, textString = "TA"),
            Text(
              extent={{-100,-120},{100,-60}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash,
              fillColor={255,170,213},
              fillPattern=FillPattern.None,
              textString="titratable
acidity")}),                                                                                                                                                             Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-56,-20},{28,-4}},
              lineColor={28,108,200},
              textString="Damping effect of H+-urine pump  to pH",
              horizontalAlignment=TextAlignment.Left), Text(
              extent={{-62,-66},{30,-38}},
              lineColor={28,108,200},
              textString="Damping effect of H+-urine pump  to pH",
              horizontalAlignment=TextAlignment.Left)}),
        Documentation(info="<html>
<p>Taken from ikeda</p>
</html>"));
    end TitratableAcid;

    model pHUrine

      Physiolibrary.Types.RealIO.MolarFlowRateInput TA annotation(Placement(transformation(extent = {{-102, 20}, {-62, 60}}), iconTransformation(extent = {{-102, 20}, {-62, 60}})));
      Physiolibrary.Types.RealIO.pHOutput pHu annotation(Placement(transformation(extent = {{90, 2}, {110, 22}}), iconTransformation(extent = {{90, 2}, {110, 22}})));
      Physiolibrary.Types.RealIO.pHInput pHa annotation(Placement(transformation(extent = {{-102, -46}, {-62, -6}}), iconTransformation(extent = {{-102, -46}, {-62, -6}})));
      Real YPO4;
      Real YORG;
      Real STPG;
      Real STPO;
      Real PHA;
      Real GFR;
      Real XPO4;
      Real XOGE;
      Real YTA;
      Physiolibrary.Types.RealIO.ConcentrationInput OrgAnionsConc
        "organic acid anions"                                                           annotation(Placement(transformation(extent = {{-114, 58}, {-74, 98}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {-60, 84})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput GlomerularFiltration
        "Glomerular filtation rate"                                                                   annotation(Placement(transformation(extent = {{24, 62}, {64, 102}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {64, 82})));
      Physiolibrary.Types.RealIO.ConcentrationInput PhosphateConc
        "Phosphate concentrations"                                                           annotation(Placement(transformation(extent = {{-114, 58}, {-74, 98}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {2, 82})));
    equation
      GFR = 0.1;
      XPO4 = 1.1;
      XOGE = 6;
      /*
  GFR = GlomerularFiltration-60000;
  XPO4 = PhosphateConc; 
  XOGE = OrgAnionsConc;
  */
      YTA = TA * 60000;
      PHA = pHa;
      // F55
      YPO4 = if XPO4 * GFR <= 0.11 then 5 / 22 * XPO4 * GFR else XPO4 * GFR - 0.085;
      //mM/min
      // F56
      YORG = if XOGE * GFR <= 0.6 then XOGE * GFR / 60 else XOGE * GFR / 3 - 0.19;
      // mM/min
      STPO = YPO4 * (1 + 1 / (1 + 10 ^ (6.66 - PHA)));
      // mM/min
      // F65;  // NB: no line breaks in the equation for the actual program
     // pHu = -log10(((-((10 ^ (-4.3) + 10 ^ (-6.8)) * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG) - 10 ^ (-6.8) * YPO4 - 10 ^ (-4.3) * YORG)) + (((10 ^ (-4.3) + 10 ^ (-6.8)) * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG) - 10 ^ (-6.8) * YPO4 - 10 ^ (-4.3) * YORG) ^ 2 - 4 * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG) * (10 ^ (-4.3) * 10 ^ (-6.8) * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG - YPO4 - YORG))) ^ 0.5) / 2 / (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG));
      pHu = -log10(((-((10 ^ (-4.3) + 10 ^ (-6.66)) * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG) - 10 ^ (-6.66) * YPO4 - 10 ^ (-4.3) * YORG)) + (((10 ^ (-4.3) + 10 ^ (-6.66)) * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG) - 10 ^ (-6.66) * YPO4 - 10 ^ (-4.3) * YORG) ^ 2 - 4 * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG) * (10 ^ (-4.3) * 10 ^ (-6.66) * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG - YPO4 - YORG))) ^ 0.5) / 2 / (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG));

      STPG = max(0, STPO + YORG - YTA);
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics={  Rectangle(extent = {{-100, 80}, {100, -80}}, lineColor = {28, 108, 200}, fillColor = {255, 255, 0},
                fillPattern =                                                                                                   FillPattern.Solid), Text(extent = {{-68, 64}, {-6, 18}}, lineColor = {28, 108, 200}, textString = "TA"), Text(extent = {{-54, 0}, {8, -46}}, lineColor = {28, 108, 200}, textString = "pHa"), Text(extent = {{16, 38}, {78, -8}}, lineColor = {28, 108, 200}, textString = "pHu")}), Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end pHUrine;

    model TotalAcidExcretion
      Physiolibrary.Types.RealIO.MolarFlowRateInput TA annotation (Placement(
            transformation(extent={{-112,50},{-72,90}}), iconTransformation(
              extent={{-112,50},{-84,78}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput TotalFlowRate annotation (
          Placement(transformation(extent={{96,-2},{116,18}}),
            iconTransformation(extent={{96,-2},{116,18}})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput NH4 annotation (Placement(
            transformation(extent={{-110,6},{-70,46}}), iconTransformation(
              extent={{-110,-6},{-82,22}})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput HCO3excretion annotation (
          Placement(transformation(extent={{-114,-46},{-74,-6}}),
            iconTransformation(extent={{-108,-70},{-80,-42}})));
      Modelica.Blocks.Math.Add3 add3_1(k3=-1)
        annotation (Placement(transformation(extent={{-8,8},{12,28}})));
      Modelica.Blocks.Logical.Switch switch1
        annotation (Placement(transformation(extent={{50,-28},{70,-8}})));
      Modelica.Blocks.Sources.BooleanExpression booleanExpression
        annotation (Placement(transformation(extent={{-14,-28},{6,-8}})));
    equation
      connect(HCO3excretion, add3_1.u3) annotation (Line(points={{-94,-26},{-62,
              -26},{-62,-20},{-62,10},{-58,10},{-10,10}}, color={0,0,127}));
      connect(NH4, add3_1.u2) annotation (Line(points={{-90,26},{-42,26},{-42,
              18},{-10,18}}, color={0,0,127}));
      connect(TA, add3_1.u1) annotation (Line(points={{-92,70},{-26,70},{-26,26},
              {-10,26}}, color={0,0,127}));
      connect(add3_1.y, TotalFlowRate) annotation (Line(points={{13,18},{56,18},
              {56,8},{106,8}}, color={0,0,127}));
      connect(booleanExpression.y, switch1.u2)
        annotation (Line(points={{7,-18},{48,-18}}, color={255,0,255}));
      connect(add3_1.y, switch1.u1) annotation (Line(points={{13,18},{30,18},{
              30,-10},{48,-10}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,127},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-54,32},{56,-14}},
              lineColor={0,0,127},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="TAC")}), Diagram(coordinateSystem(preserveAspectRatio=
               false, extent={{-100,-100},{100,100}})));
    end TotalAcidExcretion;

    model pHUrine_New "prefix Y - flows, X - concentrations. All in SI units"

      Physiolibrary.Types.RealIO.MolarFlowRateInput TA annotation (Placement(
            transformation(extent={{-102,20},{-62,60}}), iconTransformation(extent={{-120,
                -100},{-80,-60}})));
      Physiolibrary.Types.RealIO.pHInput pHa annotation (Placement(transformation(
              extent={{-102,-46},{-62,-6}}), iconTransformation(extent={{-120,
                -20},{-80,20}})));
      Physiolibrary.Types.RealIO.ConcentrationInput OrgAnionsConc
        "organic acid anions" annotation (Placement(transformation(extent={{-114,58},
                {-74,98}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-60,100})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput GlomerularFiltration
        "Glomerular filtation rate" annotation (Placement(transformation(extent={{24,
                62},{64,102}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={60,100})));
      Physiolibrary.Types.RealIO.ConcentrationInput PhosphateConc
        "Phosphate concentrations" annotation (Placement(transformation(extent={{-80,58},
                {-40,98}}),     iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,100})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput NH4exretion annotation (
          Placement(transformation(extent={{-102,20},{-62,60}}), iconTransformation(
              extent={{-120,40},{-80,80}})));

      Real YPO4=if XPO4*GFR <= 0.11 then 5/22*XPO4*GFR else XPO4*GFR - 0.085
        "mmol/min renal outflow of Phosphates. Ikeda F55";
      Real YORG=if XOGE*GFR <= 0.6 then XOGE*GFR/60 else XOGE*GFR/3 - 0.19
        "mmol/min renal outflow of Organic acids, Ikeda F56";
      // Real STPG;
      // Real STPO;
      parameter Real GFR=0.1;
      //mmol/min
      parameter Real XPO4=1.1;
      //mmol/l
      parameter Real XOGE=6;
      //mmol/l
      Real YTA=TA*60000 "mmol/min, mol/sec = 60000 mmol/min";

      Real YTAP=YPO4*(10^(-pHa) + 2*10^(-6.66))/(10^(-pHa) + 10^(-6.66)) - YPO4*(10^
          (-pHu) + 2*10^(-6.66))/(10^(-pHu) + 10^(-6.66))
        "HPO4+H2PO4 flow in mmol/min";
      Real YTAORG=YORG*10^(-4.3)/(10^(-pHa) + 10^(-4.3)) - YORG*10^(-4.3)/(10^(
          -pHu) + 10^(-4.3)) "ORG+HORG flow in mmol/min";
      Real YTANH3=YNH34*10^(-9)/(10^(-pHa) + 10^(-9)) - YNH3
        "NH3 consumed (converted to NH4) due to changes from pHA to pHU in mmol/min";
      Real YNH34=NH4exretion*60000 "NH4+NH3 flow in mmol/min";
      Real YNH3=YNH30 - FNH3 "Flow NH3 to urine mmol/min";
      Real YNH4=YNH40 + FNH3 "Flow NH4 to urine mmol/min";
      Real YNH30 "Flow NH3 to collecting ducts in mmol/min";
      Real YNH40 "Flow NH4 to collecting ducts in mmol/min";

      parameter Real NH3Resorb=1.2;
      Real FNH3=NH3Resorb*YNH34*YTA
        "Flow NH3 to medullar connective duckts through intercallar cells";

      Physiolibrary.Types.RealIO.pHOutput pHu( start = 7) annotation (Placement(transformation(
              extent={{90,2},{110,22}}), iconTransformation(extent={{92,-10},{
                112,10}})));
    equation

      YTA =YTAP + YTAORG + YTANH3 + FNH3;
      YNH3 = YNH34*10^(-9)/(10^(-pHu) + 10^(-9));
      YNH34 = YNH30 + YNH40;
      //   YNH4 = YNH40 + FNH3;
      //   YNH3 = YNH30 - FNH3;

      //   GFR = 0.1;
      //   //mmol/min
      //   XPO4 = 1.1;
      //   //mmol/min
      //   XOGE = 6;
      //   //mmol/l
      /*
  GFR = GlomerularFiltration*60000;
  XPO4 = PhosphateConc; 
  XOGE = OrgAnionsConc;
  */
      //   YTA = TA*60000;
      //YTA mmol/min TA=mol/sev; mol/sec = 60000 mmol/min
      // YNH34 = NH4exretion*60000;
      //mmol/min

      // F55
      //  YPO4 = if XPO4*GFR <= 0.11 then 5/22*XPO4*GFR else XPO4*GFR - 0.085;
      //mM/min
      // F56
      //YORG = if XOGE*GFR <= 0.6 then XOGE*GFR/60 else XOGE*GFR/3 - 0.19;
      // mM/min

      //   YTAP = YPO4*(10^(-pHa) + 2*10^(-6.66))/(10^(-pHa) + 10^(-6.66)) - YPO4*(10^(-
      //     pHu) + 2*10^(-6.66))/(10^(-pHu) + 10^(-6.66));
      //   YTAORG = YORG*10^(-4.3)/(10^(-pHa) + 10^(-4.3)) - YORG*10^(-4.3)/(10^(-pHu) +
      //     10^(-4.3));

      //   FNH3 = 10*YNH34*YTA;
      //this must be adjusted in future

      //   YTANH3 = YNH34*10^(-9)/(10^(-pHa) + 10^(-9)) - YNH3;

      /*
  STPO = YPO4 * (1 + 1 / (1 + 10 ^ (6.8 - PHA)));
  // mM/min
  // F65;  // NB: no line breaks in the equation for the actual program
  pHu = -log10(((-((10 ^ (-4.3) + 10 ^ (-6.8)) * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG) - 10 ^ (-6.8) * YPO4 - 10 ^ (-4.3) * YORG)) + (((10 ^ (-4.3) + 10 ^ (-6.8)) * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG) - 10 ^ (-6.8) * YPO4 - 10 ^ (-4.3) * YORG) ^ 2 - 4 * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG) * (10 ^ (-4.3) * 10 ^ (-6.8) * (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG - YPO4 - YORG))) ^ 0.5) / 2 / (STPG - YPO4 - 1 / (1 + 10 ^ (PHA - 4.3)) * YORG));
  STPG = max(0, STPO + YORG - YTA);
  */
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}), graphics={
            Bitmap(extent={{-108,-100},{92,100}}, fileName=
                  "modelica://AcidBaseBalance/Icons/urine.png"),
            Text(
              extent={{-86,-62},{-24,-108}},
              lineColor={28,108,200},
              textString="TA"),
            Text(
              extent={{-100,0},{-38,-46}},
              lineColor={28,108,200},
              textString="pHa"),
            Text(
              extent={{0,40},{100,-20}},
              lineColor={0,0,0},
              textString="pH"),
            Text(
              extent={{-100,60},{-38,14}},
              lineColor={28,108,200},
              textString="NH4")}), Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}})));
    end pHUrine_New;

    model KidneyMetabolicCompensation
    //  extends Physiolibrary.Icons.Kidney;
      Ammonium ammonium annotation(Placement(transformation(extent={{-40,40},{2,
                80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Chloride(k = 100) annotation(Placement(transformation(extent={{-98,24},
                {-82,42}})));
      TitratableAcid titratableAcid(HalfTime(displayUnit="h") = 21600)
                                                     annotation(Placement(transformation(extent = {{-50, -68}, {-8, -30}}, origin={12.105,
                -8},                                                                                                                             rotation = 0), visible = true));
      Physiolibrary.Types.Constants.pHConst pHu(k = 6) annotation(Placement(transformation(extent={{-94,-58},
                {-86,-50}})));
      Physiolibrary.Types.Constants.FractionConst fAld(k = 1) annotation(Placement(transformation(extent={{-56,-68},
                {-48,-60}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k = 1.1) "1.1" annotation(Placement(transformation(extent={{102,-20},
                {86,-2}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst GFR(k(displayUnit = "l/min") = 1.6666666666667e-06) annotation(Placement(transformation(extent = {{-8, -7}, {8, 7}}, rotation = 180, origin={106,-40}),   visible = true));
      Physiolibrary.Types.Constants.MolarFlowRateConst normalUA(k=modelSettings.metabolismUAFlowRate_norm)
        annotation (Placement(transformation(extent={{20,88},{28,96}})));
      pHUrine_New pHUrine_New1
        annotation (Placement(transformation(extent={{64,-82},{96,-46}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump pump_hco3(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{100,100},{120,80}})));
      Physiolibrary.Types.RealIO.pHInput pH annotation (Placement(
            transformation(extent={{-110,-46},{-90,-26}}),iconTransformation(
              extent={{-100,70},{-80,90}})));
      Physiolibrary.Types.Constants.pHConst pHConst(k=7.2) annotation (
          Placement(transformation(
            extent={{-58,84.5754},{-42,100.576}},
            origin={-40,-32.576},
            rotation=0), visible=true));
      Physiolibrary.Types.Constants.ConcentrationConst OrgAnions(k=6)   annotation(Placement(transformation(extent={{-98,-4},
                {-82,14}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b hco3_outflow annotation (
         Placement(transformation(extent={{148,70},{168,90}}),
            iconTransformation(extent={{150,-30},{170,-10}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(extent={{-54,48},{-34,68}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(extent={{62,22},{82,42}})));
      AnionExcrection anionExcrection annotation (Placement(transformation(
              rotation=0, extent={{100,12},{120,32}})));
      Physiolibrary.Types.RealIO.ConcentrationInput HCO3 annotation (Placement(
            transformation(extent={{-114,66},{-94,86}}), iconTransformation(
              extent={{-100,50},{-80,70}})));
        Interfaces.IonSelector ionSelector1(selectedIon=AcidBaseBalance.Ions.IonsEnum.Cl)
          annotation (Placement(transformation(extent={{146,-8},{132,8}})));
        Interfaces.IonSelector ionSelector(selectedIon=AcidBaseBalance.Ions.IonsEnum.Ua)
          annotation (Placement(transformation(extent={{146,24},{132,40}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a ions[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(extent={{150,22},{170,42}}),
            iconTransformation(extent={{150,-110},{170,-90}})));
      Modelica.Blocks.Math.Add  add3_1
        annotation (Placement(transformation(extent={{24,44},{44,64}})));
      Modelica.Blocks.Logical.Switch switch1
        annotation (Placement(transformation(extent={{62,74},{82,94}})));
      Modelica.Blocks.Sources.BooleanExpression booleanExpression(y=
            modelSettings.fixedMetabolismCompensation)
        annotation (Placement(transformation(extent={{-16,74},{6,94}})));
      outer Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
    equation
      connect(titratableAcid.fald, fAld.y) annotation(Line(visible = true, origin={-35.55,
              -77.585},                                                                                points={{-2.135,
              12.415},{-3.207,12.415},{-3.207,13.585},{-11.45,13.585}},                                                                                                color = {0, 0, 127}));
      connect(pHUrine_New1.GlomerularFiltration, GFR.y) annotation (Line(
            points={{89.6,-46},{89.6,-40},{96,-40}},
            color={0,0,127}));
      connect(pHUrine_New1.PhosphateConc, Phosphate.y) annotation (Line(
            points={{80,-46},{80,-18},{80,-18},{80,-11},{84,-11}},
            color={0,0,127}));
      connect(titratableAcid.TA, pHUrine_New1.TA) annotation (Line(points={{3.685,
              -56.62},{22,-56.62},{22,-78.4},{64,-78.4}},
                       color={0,0,127},
          thickness=0.5));
      connect(pHUrine_New1.NH4exretion, ammonium.molarflowrate) annotation (
          Line(points={{64,-53.2},{40,-53.2},{40,60},{2.42,60}},
                                   color={0,0,0},
          thickness=0.5));
      connect(pHUrine_New1.pHu, titratableAcid.pHu) annotation (Line(points={{96.32,
              -64},{96.32,-62},{102,-62},{102,-90},{-64,-90},{-64,-55.48},{
              -37.055,-55.48}},          color={0,0,127}));
      connect(pH, titratableAcid.pHa) annotation (Line(points={{-100,-36},{-66,
              -36},{-66,-44.84},{-37.055,-44.84}}, color={0,0,127}));
      connect(pHUrine_New1.pHa, pH) annotation (Line(points={{64,-64},{28,-64},
              {28,-36},{-100,-36}},                  color={0,0,127}));
      connect(pH, ammonium.pH) annotation (Line(points={{-100,-36},{-66,-36},{
              -66,80},{-37.9,80}}, color={0,0,127}));
      connect(pump_hco3.q_out, hco3_outflow) annotation (Line(
          points={{120,90},{150,90},{150,80},{158,80}},
          color={107,45,134},
          thickness=1));
      connect(ammonium.Cl, concentrationMeasure.concentration)
        annotation (Line(points={{-36.64,60},{-36,60},{-36,50},{-44,50}},
                                                       color={0,0,127}));
      connect(concentrationMeasure1.concentration, pHUrine_New1.OrgAnionsConc)
        annotation (Line(points={{72,24},{72,-46},{70.4,-46}},   color={0,0,127}));
      connect(ammonium.HCO3, HCO3) annotation (Line(points={{-37.9,72},{-74,72},
              {-74,76},{-104,76}}, color={0,0,127}));
      connect(ions, ionSelector1.port_a) annotation (Line(
          points={{160,32},{152,32},{152,0},{146,0}},
          color={107,45,134},
          thickness=1));
      connect(ions, ions) annotation (Line(
          points={{160,32},{160,32}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector.port_a, ions) annotation (Line(
          points={{146,32},{160,32}},
          color={107,45,134},
          thickness=1));
      connect(anionExcrection.UA, ionSelector.port_b) annotation (Line(
          points={{120,32},{132,32}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in, ionSelector.port_b) annotation (Line(
          points={{72,32},{132,32}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector1.port_b, concentrationMeasure.q_in) annotation (Line(
          points={{132,0},{-44,0},{-44,58}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector1.port_b, anionExcrection.Cl) annotation (Line(
          points={{132,0},{120,0},{120,12}},
          color={107,45,134},
          thickness=1));
      connect(booleanExpression.y, switch1.u2)
        annotation (Line(points={{7.1,84},{60,84}}, color={255,0,255}));
      connect(normalUA.y, switch1.u1)
        annotation (Line(points={{29,92},{60,92}}, color={0,0,127}));
      connect(switch1.y, anionExcrection.HCO3molarflowrate) annotation (Line(
            points={{83,84},{90,84},{90,22},{101.5,22}}, color={0,0,0},
          thickness=0.5));
      connect(pump_hco3.soluteFlow, switch1.y)
        annotation (Line(points={{114,86},{114,84},{83,84}}, color={0,0,0},
          thickness=0.5));
      connect(add3_1.y, switch1.u3) annotation (Line(points={{45,54},{54,54},{
              54,76},{60,76}}, color={0,0,0},
          thickness=0.5));
      connect(add3_1.u1, ammonium.molarflowrate)
        annotation (Line(points={{22,60},{2.42,60}}, color={0,0,0},
          thickness=0.5));
      connect(titratableAcid.TA, add3_1.u2) annotation (Line(points={{3.685,
              -56.62},{22,-56.62},{22,48}}, color={0,0,0},
          thickness=0.5));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{160,100}})),Icon(coordinateSystem(extent={{-100,-100},{
                160,100}}),graphics={    Text(
              extent={{-100,-100},{160,-20}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash,
              textString="HCO3 
Compensation"),                              Bitmap(extent={{-60,-20},{20,100}},
                fileName="modelica://Physiolibrary/Resources/Icons/kidney.png"),
                                             Bitmap(extent={{18,-20},{144,100}},
                         fileName="modelica://Physiolibrary/Resources/Icons/NH4.png"),
                                     Rectangle(
              extent={{-100,100},{160,-100}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash)}));
    end KidneyMetabolicCompensation;

    model AnionExcrection "To maintain electroneutrality, the total amount of excreted anions must be outweighted by the same amount of excrected cations or resorbed anions."
      Physiolibrary.Types.RealIO.MolarFlowRateInput HCO3molarflowrate annotation (
          Placement(transformation(extent={{-30,-2},{-10,18}}), iconTransformation(
              extent={{-44,-10},{-24,10}})));
    //  parameter Physiolibrary.Types.Concentration UAlimit = 10 "Minimal concentration of UA, below which the Cl starts to get exchanged for UA";
    //  Physiolibrary.Types.MolarFlowRate UAClExchange = HCO3molarflowrate - UAExtrection "The amount of UA, which is NOT excreted and must be exchanged for Cl";
    //  parameter Physiolibrary.Types.MolarFlowRate Clextrection0 = 4.6296296296296e-7;
      Physiolibrary.Types.MolarFlowRate ClExtrection = HCO3molarflowrate - UAExtrection;
      Physiolibrary.Types.MolarFlowRate UAExtrection = min(HCO3molarflowrate, UAMaxRate);

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a UA annotation (Placement(
            transformation(extent={{30,30},{50,50}}), iconTransformation(extent={{30,
                30},{50,50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a Cl annotation (
          Placement(transformation(extent={{30,-50},{50,-30}}), iconTransformation(
              extent={{30,-50},{50,-30}})));
      Physiolibrary.Types.MolarFlowRate UAMaxRate = if UA.conc > 0 then (UA.conc/k)^2 else 0;
      parameter Real k = 1e3 "square polynomial coeffitient to have some limiter on UA flow";
    //  parameter Physiolibrary.Types.MolarFlowRate uanormalrate;
    //  Boolean fuj = UAMaxRate > Clextrection0;
    //  Real x = time;
    equation
      UA.q + (- UAExtrection) = 0;
      Cl.q + (- ClExtrection) = 0;
      assert(ClExtrection >= 0, "Cl could not be resorbed from the urine!", AssertionLevel.warning);
      assert(UAExtrection >= 0, "UA could not be resorbed from the urine!",AssertionLevel.warning);
      annotation (Diagram(coordinateSystem(extent={{-40,-40},{40,40}})), Icon(
            coordinateSystem(extent={{-40,-40},{40,40}}), graphics={Rectangle(
              extent={{-40,40},{40,-40}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash,
              fillColor={255,170,213},
              fillPattern=FillPattern.Solid), Text(
              extent={{-40,-40},{40,40}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash,
              textString="anion
excretion")}));
    end AnionExcrection;

    model HCO3ProductionLimiter "maximal resorbtion of HCO3 at given pH"

      Modelica.Blocks.Interfaces.RealInput u annotation (Placement(transformation(
              rotation=0, extent={{-6,90},{14,110}}),    iconTransformation(extent={{-6,90},
                {14,110}})));
      Modelica.Blocks.Interfaces.RealOutput y annotation (Placement(transformation(
              rotation=0, extent={{-6,-110},{14,-90}}), iconTransformation(extent={{
                -6,-110},{14,-90}})));
      Physiolibrary.Types.RealIO.pHInput pH annotation (Placement(transformation(
              extent={{-120,-20},{-80,20}}), iconTransformation(extent={{-20,-20},
                {20,20}},
            rotation=0,
            origin={-100,100})));
                //            Physiolibrary.Types.MolarFlowRate maxResorbtion = -36932.51 + 10206.79*x - 704.3946*x^2
      Physiolibrary.Types.RealIO.ConcentrationInput HCO3 annotation (Placement(transformation(
              rotation=0, extent={{-120,80},{-100,100}}),iconTransformation(extent={{-120,
                -120},{-80,-80}})));
      Physiolibrary.Types.Concentration HCO3max = -122.029 + (46.16094 + 122.029)/(1 + (pH/7.565033)^89.04176) "fitted data from SA compensation nomogram at full compensation of respiratory acidosis";
      parameter Physiolibrary.Types.MolarFlowRate limitation = 0;//4.1e-7;
    //  Real blejh;
    //  Real d = k*(u - limitation);
    //  parameter Real k = 1e8;
    //  Real ee = Modelica.Math.exp(d)/(1 + Modelica.Math.exp(d));

      Real dhco3 = kh * (HCO3 - HCO3max);
      parameter Real kh = 10;
      Real eeh = Modelica.Math.exp(dhco3)/(1 + Modelica.Math.exp(dhco3)) "the sigmoideal function for smooth limiting the HCO3 production";
      Real blejhco3 = (u - limitation)*(1 - eeh) + limitation;
    equation

      y = u*(1 - eeh);


      annotation (Icon(graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              pattern=LinePattern.Dash,
              fillColor={255,170,213},
              fillPattern=FillPattern.Solid), Text(
              extent={{-100,80},{100,-80}},
              lineColor={0,0,255},
              pattern=LinePattern.Dash,
              textString="HCO3
reabsorption
limiter")}));
    end HCO3ProductionLimiter;

    model MetabolicRateNormalizer
      Physiolibrary.Types.RealIO.pHInput pH annotation (Placement(transformation(
              extent={{-112,-10},{-92,10}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-100,0})));
      parameter Physiolibrary.Types.pH pHRef = 7.4;
      Physiolibrary.Types.RealIO.MolarFlowRateOutput adjustedMetabolism "MolarFlowRate constant"
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,-100}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,-100})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput baseLineMetabolism "MolarFlowRate constant"
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,100}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,100})));

      Real pHDiff = pHRef - pH;
      Real sigmoid = 2/(1 + Modelica.Math.exp(-pHDiff)) - 1 "getting rid of events";
      Physiolibrary.Types.Fraction ratio( start = 1);
      parameter Physiolibrary.Types.Time T "the halflife";
      parameter Real k = 1e-3;
      parameter Real upperRatioLimit = 2;
      parameter Real lowerRatioLimit = 0.5;
     // Real r2(start = 1);
    equation

      if ratio > upperRatioLimit and pHDiff > 0 then
        // hco3 resorbtion limiter
        der(ratio)*T = pHDiff * k;
      elseif ratio < lowerRatioLimit and pHDiff < 0 then
        der(ratio)*T = pHDiff * k;
      else
        der(ratio)*T = pHDiff;
      end if;

    //  der(r2)*T = pHDiff /(1 + k*max(r2-Rlim);
    //  der(ratio)*T = pHDiff;
      adjustedMetabolism = ratio * baseLineMetabolism;
      annotation (Icon(graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              pattern=LinePattern.Dash,
              fillColor={255,170,213},
              fillPattern=FillPattern.Solid), Text(
              extent={{-100,80},{100,-80}},
              lineColor={0,0,255},
              pattern=LinePattern.Dash,
              fillColor={255,170,213},
              fillPattern=FillPattern.None,
              textString="Metabolic 
rate
normalizer")}));
    end MetabolicRateNormalizer;
  end Kidney;

  package Package

    package Nerves
      model AplhaReceptorsActivityFactor
        //extends Library.BaseFactor2;

        Physiolibrary.Types.RealIO.FractionInput GangliaGeneral_NA(displayUnit="1")       annotation (Placement(transformation(extent={{-100,40},
                  {-80,60}}), iconTransformation(extent={{-108,-70},{-88,-50}})));
        Physiolibrary.Types.RealIO.FractionInput AlphaPool_Effect
                                            annotation (Placement(transformation(extent={{-100,0},
                  {-80,20}}),
              iconTransformation(extent={{-108,50},{-88,70}})));
        Physiolibrary.Types.RealIO.FractionInput AlphaBlockade_Effect
                     annotation (Placement(transformation(extent={{-42,-46},{-22,-26}}),
              iconTransformation(extent={{-108,-10},{-88,10}})));
        Modelica.Blocks.Interfaces.RealInput yBase
                                 annotation (Placement(transformation(extent={{-10,-10},
                  {10,10}},
              rotation=270,
              origin={86,90}),
              iconTransformation(extent={{-10,-10},{10,10}},rotation=270,
              origin={0,70})));
        Modelica.Blocks.Interfaces.RealOutput y
                              annotation (Placement(transformation(extent={{-10,-10},
                  {10,10}},
              rotation=270,
              origin={80,-90}),
              iconTransformation(extent={{-10,-10},{10,10}},  rotation=270,
              origin={0,-70})));

        parameter Real[:,3] data;

        parameter Physiolibrary.Types.Fraction NEURALK = 0.333;
        parameter Physiolibrary.Types.Fraction HUMORALK = 0.5;
        parameter Boolean Switch = false;
        parameter Physiolibrary.Types.Fraction Setting = 0;

        Modelica.Blocks.Math.Add TotalAgonism(k1=NEURALK, k2=HUMORALK)
          annotation (Placement(transformation(extent={{-58,20},{-38,40}})));
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{18,28},{38,48}})));
      Modelica.Blocks.Sources.BooleanConstant booleanConstant(k=Switch)
        annotation (Placement(transformation(extent={{-28,38},{-8,58}})));
      Physiolibrary.Types.Constants.FractionConst             Constant(k=Setting)
        annotation (Placement(transformation(extent={{-30,76},{-10,96}})));
      Physiolibrary.Blocks.Interpolation.Curve SympsOnConductance(
        x=data[:, 1],
        y=data[:, 2],
        slope=data[:, 3])
        annotation (Placement(transformation(extent={{30,-40},{50,-20}})));
        Modelica.Blocks.Math.Product Activity
          annotation (Placement(transformation(extent={{-6,-40},{14,-20}})));
        Modelica.Blocks.Math.Product SympsEffect
                                              annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={80,-66})));
      equation

        connect(SympsEffect.u2, SympsOnConductance.val)
                                        annotation (Line(
            points={{74,-54},{74,-30},{50,-30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SympsOnConductance.u, Activity.y)
                                    annotation (Line(
            points={{30,-30},{15,-30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Activity.u2, AlphaBlockade_Effect)
                                                  annotation (Line(
            points={{-8,-36},{-32,-36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Activity.u1, switch1.y)
                                       annotation (Line(
            points={{-8,-24},{-20,-24},{-20,2},{62,2},{62,38},{39,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(switch1.u3, TotalAgonism.y)
                                   annotation (Line(
            points={{16,30},{-37,30}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(switch1.u2, booleanConstant.y) annotation (Line(
            points={{16,38},{-2,38},{-2,48},{-7,48}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(switch1.u1, Constant.y) annotation (Line(
            points={{16,46},{10,46},{10,86},{-7.5,86}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(yBase, SympsEffect.u1)
                                    annotation (Line(
            points={{86,90},{86,-54}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SympsEffect.y, y)
                               annotation (Line(
            points={{80,-77},{80,-90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(GangliaGeneral_NA, TotalAgonism.u1) annotation (Line(
            points={{-90,50},{-70,50},{-70,36},{-60,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AlphaPool_Effect, TotalAgonism.u2) annotation (Line(
            points={{-90,10},{-70,10},{-70,24},{-60,24}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                extent={{-100,70},{100,-70}},
                lineColor={112,143,0},
                fillPattern=FillPattern.Sphere,
                fillColor={255,255,255}), Text(
                extent={{-88,-40},{100,48}},
                lineColor={0,0,0},
                fillPattern=FillPattern.Sphere,
                fillColor={85,255,170},
                textString="%name")}));
      end AplhaReceptorsActivityFactor;
    end Nerves;

    package Ventilation
      model Ventilation
        extends Physiolibrary.Icons.Ventilation;
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{66,-30},{86,-10}}), iconTransformation(
              extent={{80,40},{120,80}})));
      AlveolarVentilation_STPD alveolarVentilation
          annotation (Placement(transformation(extent={{-10,-10},{10,10}}, origin={-32,
                  -38})));
        NaturalVentilation2 naturalVentilation(
            DriveOnTidalVolume={{0,0,0},{1,550,400},{10,2630,0}})
          annotation (Placement(transformation(extent={{46,2},{26,22}})));
        Modelica.Blocks.Math.Product TotalVentilation
          annotation (Placement(transformation(extent={{42,24},{48,30}})));
        RespiratoryNeuralDrive3 respiratoryNeuralDrive2_1
          annotation (Placement(transformation(extent={{-56,38},{-22,72}})));
      equation
        connect(alveolarVentilation.TidalVolume,naturalVentilation. TidalVolume)
          annotation (Line(
            points={{-24,-28},{2,-28},{2,14},{24.6,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(alveolarVentilation.DeadSpace,naturalVentilation. DeadSpace)
          annotation (Line(
            points={{-24,-32},{6.3,-32},{6.3,8},{24.6,8}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(naturalVentilation.ExcessLungWater_Volume,busConnector. ExcessLungWater_Volume)
          annotation (Line(
            points={{44.6,4},{76,4},{76,-20}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(naturalVentilation.Thorax_LungInflation,busConnector. Thorax_LungInflation)
          annotation (Line(
            points={{44.6,8},{76,8},{76,-20}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(naturalVentilation.RespiratoryMuscleFunctionEffect,busConnector. RespiratoryMuscleFunctionEffect)
          annotation (Line(
            points={{44.6,16},{76,16},{76,-20}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(naturalVentilation.RespiratoryCenterOutput_MotorNerveActivity,
          busConnector.RespiratoryCenter_MotorNerveActivity) annotation (Line(
            points={{44.6,20},{76,20},{76,-20}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(alveolarVentilation.core_T,busConnector. core_T)
          annotation (Line(
            points={{-24,-40},{18,-40},{18,-20},{76,-20}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(naturalVentilation.TidalVolume,TotalVentilation. u2)
          annotation (Line(
            points={{24.6,14},{4,14},{4,26},{41.4,26},{41.4,25.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.RespiratoryCenter_RespRate,TotalVentilation. u1)
          annotation (Line(
            points={{76,-20},{76,44},{24,44},{24,28.8},{41.4,28.8}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(TotalVentilation.y,busConnector. BreathingTotalVentilation)
          annotation (Line(
            points={{48.3,27},{76,27},{76,-20}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(alveolarVentilation.RespRate,busConnector. RespiratoryCenter_RespRate)
          annotation (Line(
            points={{-24,-36},{18,-36},{18,-20},{76,-20}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(busConnector.BarometerPressure,alveolarVentilation. EnvironmentPressure)
          annotation (Line(
            points={{76,-20},{-72,-20},{-72,-34},{-40,-34}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.AmbientTemperature,alveolarVentilation. AmbientTemperature)
          annotation (Line(
            points={{76,-20},{-72,-20},{-72,-28},{-40,-28}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.EnvironmentRelativeHumidity,alveolarVentilation. EnvironmentRelativeHumidity)
          annotation (Line(
            points={{76,-20},{-72,-20},{-72,-40},{-40,-40}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(respiratoryNeuralDrive2_1.busConnector, busConnector) annotation (
           Line(
            points={{-52.6,68.6},{76,68.6},{76,-20}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(alveolarVentilation.BronchiDilution, busConnector.BronchiDilution)
          annotation (Line(
            points={{-22,-48},{76,-48},{76,-20}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
      connect(alveolarVentilation.AlveolarVentilation, busConnector.AlveolarVentilation_Env)
        annotation (Line(
          points={{-22,-44},{76,-44},{76,-20}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Text(
                extent={{-120,-108},{130,-126}},
                lineColor={0,0,255},
                textString="%name")}));
      end Ventilation;

      model AlveolarVentilation_STPD
        extends Physiolibrary.Icons.Lungs;
      //  parameter Real EnvironmentPressure(final displayUnit="mmHg");
      //  parameter Real EnvironmentTemperature(final displayUnit="degC");

        Physiolibrary.Types.RealIO.FrequencyInput RespRate
                                               annotation (Placement(transformation(
                extent={{26,68},{40,82}}),    iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={80,20})));
        Physiolibrary.Types.RealIO.VolumeInput TidalVolume
                                                  annotation (Placement(
              transformation(
              extent={{-18,-18},{10,10}},
              origin={-50,-32}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={80,100})));
        Physiolibrary.Types.RealIO.VolumeInput DeadSpace
                                                annotation (Placement(transformation(
                extent={{-68,-76},{-40,-48}}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={80,60})));
        Physiolibrary.Types.RealIO.TemperatureInput core_T
                                               annotation (Placement(
              transformation(
              extent={{-20,-20},{8,8}},
              origin={-48,-80}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=180,
              origin={80,-20})));
        GasEquation tidalVolume(V2(start=400))
          annotation (Placement(transformation(extent={{-12,-54},{8,-34}})));
        GasEquation deadVolume(V2(start=150))
          annotation (Placement(transformation(extent={{-12,-80},{8,-60}})));
        Modelica.Blocks.Math.Product alveolarVentilation annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={54,52})));
        VaporPressure vaporPressure annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={14,90})));
        Modelica.Blocks.Math.Division vaporPart annotation (Placement(
              transformation(
              extent={{-6,-6},{6,6}},
              rotation=270,
              origin={-20,34})));
        Modelica.Blocks.Math.Feedback added_pH2O annotation (Placement(
              transformation(
              extent={{-7,-7},{7,7}},
              rotation=270,
              origin={-15,61})));
        VaporPressure vaporPressure1 annotation (
            Placement(transformation(extent={{-10,-10},{10,10}}, origin={-56,64})));
        Modelica.Blocks.Math.Product air_pH2O
          annotation (Placement(transformation(extent={{-36,68},{-26,78}})));
        Physiolibrary.Types.RealIO.TemperatureInput AmbientTemperature
                                               annotation (Placement(
              transformation(
              extent={{-20,-20},{8,8}},
              origin={-78,70}),  iconTransformation(
              extent={{-20,-20},{20,20}},
              origin={-80,100})));
        Physiolibrary.Types.RealIO.PressureInput EnvironmentPressure
                                               annotation (Placement(
              transformation(
              extent={{-20,-20},{8,8}},
              origin={-78,-4}),  iconTransformation(
              extent={{-20,-20},{20,20}},
              origin={-80,40})));
        Physiolibrary.Types.RealIO.FractionInput EnvironmentRelativeHumidity
                                               annotation (Placement(
              transformation(
              extent={{-20,-20},{8,8}},
              origin={-58,90}),  iconTransformation(
              extent={{-20,-20},{20,20}},
              origin={-80,-20})));
        Modelica.Blocks.Math.Feedback alveolarVolume
        annotation (Placement(transformation(extent={{58,-46},{78,-26}})));
        Modelica.Blocks.Math.Feedback airPressureWitoutVapor
          annotation (Placement(transformation(extent={{-64,0},{-44,-20}})));
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput AlveolarVentilation
        annotation (Placement(transformation(extent={{70,22},{84,36}}),
            iconTransformation(
            extent={{-20,-20},{20,20}},
            origin={100,-60})));
        Modelica.Blocks.Math.Feedback dilution
          annotation (Placement(transformation(extent={{-30,20},{-10,0}})));
        Physiolibrary.Types.Constants.FractionConst             Constant(k=1)
        annotation (Placement(transformation(extent={{-48,6},{-40,14}})));
        Physiolibrary.Types.RealIO.FractionOutput BronchiDilution
                                               annotation (Placement(transformation(
                extent={{6,4},{18,16}}),      iconTransformation(
              extent={{-20,-20},{20,20}},
              origin={100,-100})));
      equation

        connect(TidalVolume,tidalVolume. V1) annotation (Line(
            points={{-54,-36},{-10.6,-36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(DeadSpace, deadVolume.V1)   annotation (Line(
            points={{-54,-62},{-10.6,-62}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(RespRate, alveolarVentilation.u2) annotation (Line(
          points={{33,75},{48,75},{48,64}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(core_T, vaporPressure.T)   annotation (Line(
            points={{-54,-86},{94,-86},{94,90},{22.6,90}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(air_pH2O.y, added_pH2O.u2) annotation (Line(
            points={{-25.5,73},{-25.5,61},{-20.6,61}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(added_pH2O.y, vaporPart.u1) annotation (Line(
            points={{-15,54.7},{-14,54.7},{-14,54},{-16,54},{-16,44},{-16.4,44},
              {-16.4,41.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AmbientTemperature, vaporPressure1.T) annotation (Line(
            points={{-84,64},{-64.6,64}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(EnvironmentRelativeHumidity, air_pH2O.u1) annotation (Line(
            points={{-64,84},{-40,84},{-40,76},{-37,76}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(core_T, tidalVolume.T1) annotation (Line(
            points={{-54,-86},{-32,-86},{-32,-48},{-10.6,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(core_T, deadVolume.T1) annotation (Line(
            points={{-54,-86},{-32,-86},{-32,-74},{-10.6,-74}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(alveolarVolume.y, alveolarVentilation.u1) annotation (Line(
          points={{77,-36},{90,-36},{90,80},{60,80},{60,64}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tidalVolume.V2, alveolarVolume.u1) annotation (Line(
          points={{6.6,-36},{60,-36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(alveolarVolume.u2, deadVolume.V2) annotation (Line(
          points={{68,-44},{68,-62},{6.6,-62}},
          color={0,0,127},
          smooth=Smooth.None));
        connect(EnvironmentPressure, airPressureWitoutVapor.u1) annotation (Line(
            points={{-84,-10},{-62,-10}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(airPressureWitoutVapor.y, tidalVolume.P1) annotation (Line(
            points={{-45,-10},{-28,-10},{-28,-42},{-10.6,-42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(airPressureWitoutVapor.y, deadVolume.P1) annotation (Line(
            points={{-45,-10},{-28,-10},{-28,-68},{-10.6,-68}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(Constant.y, dilution.u1) annotation (Line(
            points={{-39,10},{-28,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(vaporPart.y, dilution.u2) annotation (Line(
            points={{-20,27.4},{-20,18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(dilution.y, BronchiDilution) annotation (Line(
            points={{-11,10},{12,10}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(vaporPressure1.VaporPressure_, air_pH2O.u2) annotation (Line(
          points={{-44.6,64},{-40,64},{-40,70},{-37,70}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(vaporPressure.VaporPressure_, added_pH2O.u1) annotation (Line(
          points={{2.6,90},{-15,90},{-15,66.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(alveolarVentilation.y, AlveolarVentilation) annotation (Line(
          points={{54,41},{54,29},{77,29}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(added_pH2O.y, airPressureWitoutVapor.u2) annotation (Line(
          points={{-15,54.7},{-54,54.7},{-54,-2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(EnvironmentPressure, vaporPart.u2) annotation (Line(
          points={{-84,-10},{-70,-10},{-70,41.2},{-23.6,41.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(EnvironmentPressure, tidalVolume.P2) annotation (Line(
          points={{-84,-10},{-70,-10},{-70,-22},{30,-22},{30,-42},{6.6,-42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(EnvironmentPressure, deadVolume.P2) annotation (Line(
          points={{-84,-10},{-70,-10},{-70,-22},{30,-22},{30,-68},{6.6,-68}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AmbientTemperature, tidalVolume.T2) annotation (Line(
          points={{-84,64},{-94,64},{-94,-98},{38,-98},{38,-48},{6.6,-48}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AmbientTemperature, deadVolume.T2) annotation (Line(
          points={{-84,64},{-94,64},{-94,-98},{38,-98},{38,-74},{6.6,-74}},
          color={0,0,127},
          smooth=Smooth.None));
       annotation (
          Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                  100,100}}), graphics={Text(
                extent={{-100,-100},{76,-70}},
                textString="%name",
                lineColor={0,0,255})}));
      end AlveolarVentilation_STPD;

      model GasEquation

        Physiolibrary.Types.RealIO.VolumeInput
                                           V1(
                                         displayUnit="ml") annotation (Placement(transformation(extent={
                  {-118,42},{-78,82}}), iconTransformation(extent={{-100,66},{-72,94}})));
        Physiolibrary.Types.RealIO.PressureInput
                                           P1(
                                         displayUnit="mmHg") annotation (Placement(transformation(extent={
                  {-118,42},{-78,82}}), iconTransformation(extent={{-100,6},{-72,34}})));
        Physiolibrary.Types.RealIO.TemperatureInput
                                           T1(
                                         displayUnit="degC") annotation (Placement(transformation(extent={
                  {-118,42},{-78,82}}), iconTransformation(extent={{-100,-54},{-72,
                  -26}})));
        Physiolibrary.Types.RealIO.PressureInput
                                           P2(
                                        displayUnit="mmHg") annotation (Placement(transformation(extent={
                  {-118,42},{-78,82}}), iconTransformation(
              extent={{-14,-14},{14,14}},
              rotation=180,
              origin={86,20})));
        Physiolibrary.Types.RealIO.TemperatureInput
                                           T2(
                                         displayUnit="degC") annotation (Placement(transformation(extent={
                  {-118,42},{-78,82}}), iconTransformation(
              extent={{-14,-14},{14,14}},
              rotation=180,
              origin={86,-40})));
        Physiolibrary.Types.RealIO.VolumeOutput
                                            V2(
                                          displayUnit="ml") annotation (Placement(transformation(extent=
                  {{56,54},{96,94}}), iconTransformation(extent={{72,66},{100,94}})));
      equation
        (P1*V1)/(T1)=(P2*V2)/(T2);
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={170,213,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{0,100},{0,-100}},
                lineColor={0,0,0},
                fillColor={170,213,255},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-98,136},{100,100}},
                lineColor={0,0,0},
                fillColor={170,213,255},
                fillPattern=FillPattern.Solid,
                textString="%name")}));
      end GasEquation;

      model VaporPressure

        Physiolibrary.Types.RealIO.TemperatureInput
                                           T(
                                        displayUnit="degC")   annotation (Placement(transformation(extent={
                  {-118,42},{-78,82}}), iconTransformation(extent={{-100,-14},{-72,14}})));
        Physiolibrary.Types.RealIO.PressureOutput
                                            VaporPressure_(
                                                    displayUnit="mmHg")
                                                          annotation (Placement(transformation(extent=
                  {{56,54},{96,94}}), iconTransformation(extent={{100,-14},{128,14}})));
      equation
       VaporPressure_ =  if T<273.15 then 0 else if T>373.15 then 101325 else
                          (101325/760)*exp(18.6686-(4030.183/(T-273.15+235)));
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Rectangle(
                extent={{-100,40},{100,-40}},
                lineColor={0,0,0},
                fillColor={170,213,255},
                fillPattern=FillPattern.Solid)}));
      end VaporPressure;

      model RespiratoryNeuralDrive3
        extends Physiolibrary.Icons.RespiratoryCenter;
      AfferentPath afferentPath annotation (Placement(
              transformation(extent={{-10,-10},{10,10}}, origin={66,32})));
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-80,80},{-60,100}}), iconTransformation(
              extent={{-100,60},{-60,100}})));
        PeripheralChemoreceptors peripheralChemoreceptors
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-26,36})));
        SkeletalMuscleMetaboreflex skeletalMuscleMetaboreflex
        annotation (Placement(transformation(extent={{-18,-16},{2,4}})));
        CentralChemoreceptors centralChemoreceptors
        annotation (Placement(transformation(extent={{8,48},{28,68}})));
      EfferentPath efferentPath
          annotation (Placement(transformation(extent={{50,-22},{70,-2}})));
      /*  Modelica.Blocks.Logical.TerminateSimulation terminateSimulation(
      terminationText="solution reached", condition=false and (
        afferentPath.TotalDrive < efferentPath.TotalDrive))
    annotation (Placement(transformation(extent={{-10,-84},{70,-76}})));

Physiolibrary.Utilities.ConstantFromFile RespiratoryCenter_RespRate(
                                    varName="RespiratoryCenter-Output.Rate")
    "Respiration rate. [1/min]"
annotation (Placement(transformation(extent={{-92,-78},{-86,-72}})));
Physiolibrary.Utilities.ConstantFromFile
    RespiratoryCenter_MotorNerveActivity(     varName="RespiratoryCenter-Output.MotorNerveActivity")
    "Neural activity from respiratory center to respiratory muscle. []"
annotation (Placement(transformation(extent={{-92,-88},{-86,-82}})));
Physiolibrary.Utilities.ConstantFromFile
    RespiratoryCenterIntegration_TotalDrive(                                      varName=
        "RespiratoryCenter-Integration.TotalDrive")
    "RespiratoryCenter-Integration.TotalDrive"
annotation (Placement(transformation(extent={{16,-70},{22,-64}})));
  Physiolibrary.Blocks.Constant Constant(
                                   k=1.04494)
    annotation (Placement(transformation(extent={{24,-84},{32,-76}})));
  Modelica.Blocks.Sources.Clock clock(offset=0.75)
    annotation (Placement(transformation(extent={{-28,-80},{-8,-60}})));
*/
      Physiolibrary.Blocks.Math.HomotopyStrongComponentBreaker homotopy(
          defaultValue=1, defaultSlope=0.1)
        annotation (Placement(transformation(extent={{82,32},{90,40}})));
      Physiolibrary.Types.Constants.OneConst one
        annotation (Placement(transformation(extent={{8,-34},{16,-26}})));
      equation
       // efferentPath.TotalDrive=homotopy(actual=afferentPath.TotalDrive, simplified=1.045922);

        connect(busConnector, afferentPath.busConnector)      annotation (Line(
            points={{-70,90},{61.8,90},{61.8,40.2}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(busConnector, peripheralChemoreceptors.busConnector)
                                                           annotation (Line(
            points={{-70,90},{-25.8,90},{-25.8,43.6}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));
        connect(peripheralChemoreceptors.Chemoreceptors_FiringRate,
          afferentPath.Chemoreceptors_FiringRate)
          annotation (Line(
            points={{-16,38},{58,38}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(skeletalMuscleMetaboreflex.NA, afferentPath.Metaboreflex)
          annotation (Line(
            points={{2,-6},{28,-6},{28,34},{56.2,34}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.skeletalMuscle_pH_intracellular,
          skeletalMuscleMetaboreflex.skeletalMuscle_pH) annotation (Line(
            points={{-70,90},{-70,-6},{-18,-6}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.GangliaGeneral_NA, peripheralChemoreceptors.GangliaGeneral_NA)
          annotation (Line(
            points={{-70,90},{-70,40},{-36,40}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.brain_pH_intracellular, centralChemoreceptors.Brain_pH_intracellular)
          annotation (Line(
            points={{-70,90},{-70,64},{10,64}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.O2Artys_PO2, peripheralChemoreceptors.artys_pO2)
                                                                    annotation (
            Line(
            points={{-70,90},{-70,32},{-36,32}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.Artys_pH, peripheralChemoreceptors.artys_ph)
                                                                annotation (Line(
            points={{-70,90},{-70,36},{-36,36}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(efferentPath.RespRate, busConnector.RespiratoryCenter_RespRate)
          annotation (Line(
            points={{69.4,-8},{98,-8},{98,90},{-70,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(efferentPath.RespiratoryCenterOutput_MotorNerveActivity,
          busConnector.RespiratoryCenter_MotorNerveActivity) annotation (Line(
            points={{69.6,-16},{98,-16},{98,90},{-70,90}},
            color={0,0,127},
            smooth=Smooth.None), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}}));
        connect(efferentPath.busConnector, busConnector)              annotation (
           Line(
            points={{55.8,-3.8},{50,-3.8},{50,90},{-70,90}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None));

        connect(centralChemoreceptors.CentralChemoreceptors, afferentPath.CentralChemoreceptors)
          annotation (Line(
            points={{27.4,62},{38,62},{38,29},{58,29}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(afferentPath.TotalDrive, homotopy.u) annotation (Line(
          points={{75.4,36},{81.2,36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(one.y, efferentPath.TotalDrive) annotation (Line(
          points={{17,-30},{34,-30},{34,-10},{50.2,-10}},
          color={0,0,127},
          smooth=Smooth.None));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={Text(
                extent={{-142,-108},{142,-140}},
                lineColor={0,0,255},
                textString="%name")}));
      end RespiratoryNeuralDrive3;

      model PeripheralChemoreceptors
        extends Physiolibrary.Icons.PeripheralChemoreceptors;
      Physiolibrary.Blocks.Interpolation.Curve PhEffectCurve(
        x=PhEffect[:, 1],
        y=PhEffect[:, 2],
        slope=PhEffect[:, 3])
        annotation (Placement(transformation(extent={{-24,8},{12,44}})));
        Physiolibrary.Types.RealIO.FractionOutput
                                              Chemoreceptors_FiringRate
          annotation (Placement(transformation(extent={{98,-18},{122,6}}),
              iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-20,100})));
        parameter Real PhEffect[:,3]={{7.1,2,0},{7.4,0.4,-3},{7.7,0,0}}; //Orginal values from Coleman {{ 7.10,  2.0,  0}, { 7.44,  0.4,  -3.0}, { 7.70,  0.0,  0}} was corrected, because normal arteries pH is not 7.44 but 7.4
        parameter Real PO2Effect[:,3]={{  30,  10.0,  0}, {  60,   2.0,  -0.05}, {  85,   0.5,  -0.005}, { 200,   0.2,  0}}; //Orginal values from Coleman {{  30,  10.0,  0}, {  60,   2.0,  -0.05}, {  94,   0.5,  -0.005}, { 400,   0.2,  0}} was corrected, because normal arteries pO2 is not 94 but 85
        parameter Real PO2Effect_original[:,3]={{  30,  10.0,  0}, {  60,   2.0,  -0.05}, {  94,   0.5,  -0.005}, { 200,   0.2,  0}};
        parameter Real SteadyState[:,3]={{  0,  0,  0}, {  1,  1,  0.3}, { 10,  2,  0}};
        parameter Physiolibrary.Types.Time Tau(displayUnit="h") = 20*60*60;

      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-102,64},{-82,84}}), iconTransformation(
              extent={{-96,-18},{-56,22}})));
        Physiolibrary.Types.RealIO.FractionInput
                                             GangliaGeneral_NA
          annotation (Placement(transformation(extent={{-74,44},{-48,70}}),
              iconTransformation(extent={{-20,-20},{20,20}},
              rotation=90,
              origin={-40,-100})));
        Nerves.AplhaReceptorsActivityFactor aplhaReceptorsActivityFactor(
          data={{0,0.0,0},{1,0.1,0.2},{4,0.6,0}},
          NEURALK=0.5,
          HUMORALK=0.5)
          annotation (Placement(transformation(extent={{-26,68},{-6,88}})));
      Physiolibrary.Types.Constants.FractionConst             Constant(k=1)
        annotation (Placement(transformation(extent={{-30,90},{-22,98}})));
      Physiolibrary.Blocks.Interpolation.Curve PO2EffectCurve(
        x=PO2Effect[:, 1],
        y=PO2Effect[:, 2],
        slope=PO2Effect[:, 3],
          Xscale=101325/760)
        annotation (Placement(transformation(extent={{-24,-38},{12,-2}})));
        Modelica.Blocks.Math.Sum sum(nin=3)
          annotation (Placement(transformation(extent={{32,0},{52,20}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{74,-16},{94,4}})));
      Physiolibrary.Blocks.Interpolation.Curve SteadyStateCurve(
        x=SteadyState[:, 1],
        y=SteadyState[:, 2],
        slope=SteadyState[:, 3]) "ChemoreceptorAcclimation"
        annotation (Placement(transformation(extent={{-62,-96},{-26,-60}})));
        Modelica.Blocks.Math.Feedback feedback
          annotation (Placement(transformation(extent={{-8,-88},{12,-68}})));
      Physiolibrary.Blocks.Math.Integrator integrator(
        stateName="ChemoreceptorAcclimation.Effect",
        y_start=1.01445,
          k=1/Tau) "ChemoreceptorAcclimation.Effect"
        annotation (Placement(transformation(extent={{24,-88},{44,-68}})));
        Physiolibrary.Types.RealIO.pHInput   artys_ph
          annotation (Placement(transformation(extent={{-106,16},{-66,56}}),
              iconTransformation(extent={{-20,-20},{20,20}},
              rotation=90,
              origin={0,-100})));
        Physiolibrary.Types.RealIO.PressureInput
                                             artys_pO2
          annotation (Placement(transformation(extent={{-106,-20},{-66,20}}),
              iconTransformation(extent={{-20,-20},{20,20}},
              rotation=90,
              origin={40,-100})));
      Physiolibrary.Blocks.Interpolation.Curve PO2EffectCurve1(
        x=PO2Effect_original[:, 1],
        y=PO2Effect_original[:, 2],
        slope=PO2Effect_original[:, 3],
          Xscale=101325/760)
        annotation (Placement(transformation(extent={{40,52},{76,88}})));
      equation
        assert(artys_pO2>30,"artys_pO2 should be greater then 30 mmHg!");
        connect(Constant.y, aplhaReceptorsActivityFactor.yBase) annotation (Line(
            points={{-21,94},{-16,94},{-16,85}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.AlphaPool_Effect, aplhaReceptorsActivityFactor.AlphaPool_Effect)
          annotation (Line(
            points={{-92,74},{-60,74},{-60,84},{-25.8,84}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.AlphaBlocade_Effect, aplhaReceptorsActivityFactor.AlphaBlockade_Effect)
          annotation (Line(
            points={{-92,74},{-60,74},{-60,78},{-25.8,78}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(aplhaReceptorsActivityFactor.GangliaGeneral_NA, GangliaGeneral_NA)
          annotation (Line(
            points={{-25.8,72},{-46,72},{-46,57},{-61,57}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PhEffectCurve.val, sum.u[2]) annotation (Line(
            points={{12,26},{26,26},{26,10},{30,10}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(aplhaReceptorsActivityFactor.y, sum.u[1]) annotation (Line(
            points={{-16,71},{-16,54},{26,54},{26,8.66667},{30,8.66667}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, Chemoreceptors_FiringRate) annotation (Line(
            points={{95,-6},{110,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sum.y, product.u1) annotation (Line(
            points={{53,10},{60,10},{60,0},{72,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(sum.y, SteadyStateCurve.u) annotation (Line(
            points={{53,10},{60,10},{60,-42},{-82,-42},{-82,-78},{-62,-78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integrator.y, product.u2) annotation (Line(
            points={{45,-78},{66,-78},{66,-12},{72,-12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(SteadyStateCurve.val, feedback.u1) annotation (Line(
            points={{-26,-78},{-6,-78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(integrator.y, feedback.u2) annotation (Line(
            points={{45,-78},{56,-78},{56,-98},{2,-98},{2,-86}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(feedback.y, integrator.u) annotation (Line(
            points={{11,-78},{22,-78}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PhEffectCurve.u, artys_ph) annotation (Line(
            points={{-24,26},{-50,26},{-50,36},{-86,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PO2EffectCurve.u, artys_pO2) annotation (Line(
            points={{-24,-20},{-50,-20},{-50,0},{-86,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(artys_pO2, PO2EffectCurve1.u) annotation (Line(
            points={{-86,0},{20,0},{20,70},{40,70}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(PO2EffectCurve1.val, sum.u[3]) annotation (Line(
            points={{76,70},{88,70},{88,32},{26,32},{26,11.3333},{30,11.3333}},
            color={0,0,127},
            smooth=Smooth.None));

        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={Text(
                extent={{-124,13},{124,-13}},
                lineColor={0,0,255},
                textString="%name",
                origin={122,-9},
                rotation=90)}));
      end PeripheralChemoreceptors;

      model NaturalVentilation2
        extends Physiolibrary.Icons.Ventilation;
        Physiolibrary.Types.RealIO.FrequencyInput
          RespiratoryCenterOutput_MotorNerveActivity(
             displayUnit="Hz")                             annotation (Placement(transformation(extent={{-88,40},
                  {-48,80}}),           iconTransformation(extent={{-100,66},{-72,94}})));
        Physiolibrary.Types.RealIO.FractionInput Thorax_LungInflation(
                                                            displayUnit="1")
                                                           annotation (Placement(transformation(extent={{-88,-22},
                  {-48,18}}),           iconTransformation(extent={{-100,-54},{
                  -72,-26}})));
        Physiolibrary.Types.RealIO.VolumeInput ExcessLungWater_Volume(
                                                             displayUnit=
              "1")                                      annotation (Placement(transformation(extent={{-88,-58},
                  {-48,-18}}),          iconTransformation(extent={{-100,-94},{
                  -72,-66}})));
        Physiolibrary.Types.RealIO.VolumeOutput TidalVolume(
                                                   displayUnit="ml")
                                                          annotation (Placement(transformation(extent={{52,-48},
                  {92,-8}}),          iconTransformation(extent={{100,6},{128,34}})));
        Physiolibrary.Types.RealIO.VolumeOutput DeadSpace(
                                                  displayUnit="ml")
                                                          annotation (Placement(transformation(extent={{14,-96},
                  {54,-56}}),         iconTransformation(extent={{100,-54},{128,
                  -26}})));
        Physiolibrary.Types.RealIO.FractionInput RespiratoryMuscleFunctionEffect(
                                                                      displayUnit= "1")
                                                        annotation (Placement(transformation(extent={{-88,6},
                  {-48,46}}),           iconTransformation(extent={{-100,26},{-72,
                  54}})));

        parameter Physiolibrary.Types.Fraction DeadSpaceSlope =   0.20;
        parameter Physiolibrary.Types.Volume DeadSpaceMin =                            60.0e-6;
        parameter Real[:,3] DriveOnTidalVolume =  {{  0,     0,    0}, {  1,   450,  400}, { 10,  2630,    0}};  //corrected from {{  0,     0,    0}, {  1,   550,  400}, { 10,  2630,    0}}

      // Real TidalVolumeBasic;
      Physiolibrary.Blocks.Interpolation.Curve curve(
        x=DriveOnTidalVolume[:, 1],
        y=DriveOnTidalVolume[:, 2],
        slope=DriveOnTidalVolume[:, 3],
        Yscale=1e-6)
        annotation (Placement(transformation(extent={{-2,32},{18,52}})));

      Physiolibrary.Blocks.Factors.Normalization LungInflation
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Blocks.Factors.Normalization FunctionEffect
        annotation (Placement(transformation(extent={{16,16},{36,36}})));
        Modelica.Blocks.Math.Max max
          annotation (Placement(transformation(extent={{36,-38},{56,-18}})));
        Modelica.Blocks.Math.Feedback tidalVol0 annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={26,-2})));
      Physiolibrary.Types.Constants.VolumeConst Breathing_TidalVolumeMin(k=0)
        "Breathing.TidalVolumeMin"
        annotation (Placement(transformation(extent={{4,-42},{20,-26}})));
      Physiolibrary.Types.Constants.VolumeConst Breathing_DeadSpaceMin(k=
            DeadSpaceMin) "Breathing.DeadSpaceMin"
        annotation (Placement(transformation(extent={{-88,-102},{-58,-72}})));
      Physiolibrary.Types.Constants.FractionConst             deadSpaceSlope(k=
            DeadSpaceSlope)
        annotation (Placement(transformation(extent={{-82,-80},{-58,-56}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{-30,-72},{-10,-52}})));
        Modelica.Blocks.Math.Add add
          annotation (Placement(transformation(extent={{2,-86},{22,-66}})));
      equation
      //  u=RespiratoryCenterOutput_MotorNerveActivity; //curve x value
      /*
  TidalVolumeBasic  =
      curve.val
    * Thorax_LungInflation
    * RespiratoryMuscleFunctionEffect;   //val.. curve y value

   TidalVolume  = max(0, TidalVolumeBasic - ExcessLungWater_Volume);
   DeadSpace  =  DeadSpaceSlope * TidalVolume + DeadSpaceMin; */
        connect(RespiratoryCenterOutput_MotorNerveActivity, curve.u) annotation (Line(
            points={{-68,60},{-16,60},{-16,42},{-2,42}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RespiratoryMuscleFunctionEffect, FunctionEffect.u) annotation (Line(
            points={{-68,26},{18,26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Thorax_LungInflation, LungInflation.u) annotation (Line(
            points={{-68,-2},{-32,-2},{-32,16},{18,16}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(curve.val, FunctionEffect.yBase) annotation (Line(
            points={{18,42},{26,42},{26,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FunctionEffect.y, LungInflation.yBase) annotation (Line(
            points={{26,22},{26,18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(LungInflation.y, tidalVol0.u1) annotation (Line(
            points={{26,12},{26,6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ExcessLungWater_Volume, tidalVol0.u2) annotation (Line(
            points={{-68,-38},{-16,-38},{-16,-2},{18,-2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tidalVol0.y, max.u1) annotation (Line(
            points={{26,-11},{26,-22},{34,-22}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Breathing_TidalVolumeMin.y, max.u2)
                                          annotation (Line(
            points={{22,-34},{34,-34}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(add.y, DeadSpace) annotation (Line(
            points={{23,-76},{34,-76}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(deadSpaceSlope.y, product.u2) annotation (Line(
            points={{-55,-68},{-32,-68}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.y, add.u1) annotation (Line(
            points={{-9,-62},{-6,-62},{-6,-70},{0,-70}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Breathing_DeadSpaceMin.y, add.u2)
                                           annotation (Line(
            points={{-54.25,-87},{-28,-87},{-28,-82},{0,-82}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(product.u1, TidalVolume) annotation (Line(
            points={{-32,-56},{-42,-56},{-42,-46},{68,-46},{68,-28},{72,-28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(max.y, TidalVolume) annotation (Line(
            points={{57,-28},{72,-28}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                  -100},{100,100}}), graphics={Text(
                extent={{-120,-108},{130,-126}},
                lineColor={0,0,255},
                textString="%name")}));
      end NaturalVentilation2;

      model CentralChemoreceptors
          extends Physiolibrary.Icons.RespiratoryCenter;

          parameter Real data[:,3]={{6.60,0.0,0},{6.85,10.0,0},{7.07,1.0,-8.0},{7.50,0.0,0}}; //{{6.60,0.0,0},{6.87,10.0,0},{7.12,1.0,-8.0},{7.50,0.0,0}};
        Physiolibrary.Types.RealIO.FractionOutput CentralChemoreceptors
          annotation (Placement(transformation(extent={{80,-20},{120,20}}),
              iconTransformation(extent={{74,20},{114,60}})));
        Physiolibrary.Types.RealIO.pHInput Brain_pH_intracellular
          annotation (Placement(transformation(extent={{-100,40},{-60,80}}),
              iconTransformation(extent={{-100,40},{-60,80}})));                                                //orginal data from Coleman {{6.60,0.0,0},{6.87,10.0,0},{7.22,1.0,-8.0},{7.50,0.0,0}}) was corrected, becase the normal intracellular pH in neuron cells is 7.16
      Physiolibrary.Blocks.Interpolation.Curve curve(
        x=data[:, 1],
        y=data[:, 2],
        slope=data[:, 3])
        annotation (Placement(transformation(extent={{18,-10},{38,10}})));
      equation

        connect(curve.val, CentralChemoreceptors) annotation (Line(
            points={{38,0},{100,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Brain_pH_intracellular, curve.u) annotation (Line(
            points={{-80,60},{-32,60},{-32,0},{18,0}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true,  extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-66,32},{76,-22}},
                lineColor={0,0,0},
                fillColor={213,255,170},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-118,-104},{130,-130}},
                lineColor={0,0,255},
                textString="%name")}));
      end CentralChemoreceptors;

      model AfferentPath
        extends Physiolibrary.Icons.RespiratoryCenter;
        parameter Real RadiationTotalDrive[:,3]={{    0,  0.0,  0}, {  500,  3.5,  0.003}, { 1000,  4.0,  0}};
        parameter Real OutputRate[:,3]={{  0,   0,  12}, {  1,  12,   4}, { 10,  40,   0}};

        Physiolibrary.Types.RealIO.FractionOutput TotalDrive
          annotation (Placement(transformation(extent={{80,-20},{120,20}}),
              iconTransformation(extent={{74,20},{114,60}})));
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-42,82},{-22,102}}), iconTransformation(
              extent={{-62,62},{-22,102}})));
        Physiolibrary.Types.RealIO.FractionInput Chemoreceptors_FiringRate
          annotation (Placement(transformation(extent={{-100,40},{-60,80}}),
              iconTransformation(extent={{-100,40},{-60,80}})));
      Physiolibrary.Blocks.Interpolation.Curve Radiation(
        x=RadiationTotalDrive[:, 1],
        y=RadiationTotalDrive[:, 2],
        slope=RadiationTotalDrive[:, 3])
        annotation (Placement(transformation(extent={{-10,12},{10,32}})));
        Modelica.Blocks.Math.Add RespiratoryCenterChemical_TotalDrive(k1=0.6,
            k2=0.4)
          annotation (Placement(transformation(extent={{36,52},{56,72}})));
        Physiolibrary.Types.RealIO.FractionInput Metaboreflex
          annotation (Placement(transformation(extent={{-120,0},{-80,40}}),
              iconTransformation(extent={{-118,0},{-78,40}})));
        Modelica.Blocks.Math.Add RespiratoryCenterExercise_TotalDrive
          annotation (Placement(transformation(extent={{26,18},{46,38}})));
        Modelica.Blocks.Math.Add RespiratoryCenterIntegration_TotalDrive
          annotation (Placement(transformation(extent={{66,24},{86,44}})));
        Physiolibrary.Types.RealIO.FractionInput CentralChemoreceptors
          annotation (Placement(transformation(extent={{-100,66},{-60,106}}),
              iconTransformation(extent={{-100,-50},{-60,-10}})));
      equation
        connect(Radiation.val, RespiratoryCenterExercise_TotalDrive.u2) annotation (
            Line(
            points={{10,22},{24,22}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Metaboreflex, RespiratoryCenterExercise_TotalDrive.u1) annotation (
            Line(
            points={{-100,20},{-44,20},{-44,34},{24,34}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RespiratoryCenterChemical_TotalDrive.y,
          RespiratoryCenterIntegration_TotalDrive.u1) annotation (Line(
            points={{57,62},{60,62},{60,40},{64,40}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RespiratoryCenterExercise_TotalDrive.y,
          RespiratoryCenterIntegration_TotalDrive.u2) annotation (Line(
            points={{47,28},{64,28}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(RespiratoryCenterChemical_TotalDrive.u1, CentralChemoreceptors)
          annotation (Line(
            points={{34,68},{-18,68},{-18,86},{-80,86}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(RespiratoryCenterIntegration_TotalDrive.y, TotalDrive)
          annotation (Line(
            points={{87,34},{94,34},{94,0},{100,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Chemoreceptors_FiringRate, RespiratoryCenterChemical_TotalDrive.u2)
          annotation (Line(
            points={{-80,60},{-23,60},{-23,56},{34,56}},
            color={0,0,127},
            smooth=Smooth.None));
      connect(busConnector.Exercise_Metabolism_MotionWatts, Radiation.u)
        annotation (Line(
          points={{-32,92},{-32,22},{-10,22}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true,  extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-66,32},{76,-22}},
                lineColor={0,0,0},
                fillColor={213,255,170},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-124,-104},{124,-130}},
                lineColor={0,0,255},
                textString="%name")}));
      end AfferentPath;

      model EfferentPath
        extends Physiolibrary.Icons.RespiratoryCenter;
        parameter Real RadiationTotalDrive[:,3]={{    0,  0.0,  0}, {  500,  3.5,  0.003}, { 1000,  4.0,  0}};
        parameter Real OutputRate[:,3]={{  0,   0,  12}, {  1,  12,   4}, { 10,  40,   0}};

      Physiolibrary.Blocks.Interpolation.Curve RespiratoryCenterOutput(
        x=OutputRate[:, 1],
        y=OutputRate[:, 2],
        slope=OutputRate[:, 3],
        Yscale=1/60)
        annotation (Placement(transformation(extent={{-10,-16},{10,4}})));
        Physiolibrary.Types.RealIO.FrequencyOutput RespRate
          annotation (Placement(transformation(extent={{80,-20},{120,20}}),
              iconTransformation(extent={{74,20},{114,60}})));
        Physiolibrary.Types.RealIO.FractionOutput
          RespiratoryCenterOutput_MotorNerveActivity
          annotation (Placement(transformation(extent={{54,-68},{94,-28}}),
              iconTransformation(extent={{76,-60},{116,-20}})));
      Physiolibrary.Types.BusConnector busConnector annotation (Placement(
            transformation(extent={{-42,82},{-22,102}}), iconTransformation(
              extent={{-62,62},{-22,102}})));
        Physiolibrary.Types.RealIO.FractionInput TotalDrive(
                                                 start=1)
          annotation (Placement(transformation(extent={{-120,0},{-80,40}}),
              iconTransformation(extent={{-118,0},{-78,40}})));
        Modelica.Blocks.Math.Product Rate
          annotation (Placement(transformation(extent={{62,-10},{82,10}})));
      Physiolibrary.Blocks.Factors.Normalization FunctionEffect
        annotation (Placement(transformation(extent={{14,-48},{34,-28}})));
      Physiolibrary.Blocks.Factors.Normalization AnesthesiaEffect
        annotation (Placement(transformation(extent={{14,-60},{34,-40}})));
      equation
        connect(RespiratoryCenterOutput.val, Rate.u2) annotation (Line(
            points={{10,-6},{60,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Rate.y, RespRate) annotation (Line(
            points={{83,0},{100,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FunctionEffect.y, AnesthesiaEffect.yBase) annotation (Line(
            points={{24,-42},{24,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(AnesthesiaEffect.y, RespiratoryCenterOutput_MotorNerveActivity)
          annotation (Line(
            points={{24,-54},{24,-62},{64,-62},{64,-48},{74,-48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(busConnector.AnesthesiaTidalVolume, AnesthesiaEffect.u)
          annotation (Line(
            points={{-32,92},{-32,-50},{16,-50}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.brain_FunctionEffect, FunctionEffect.u) annotation (
            Line(
            points={{-32,92},{-32,-38},{16,-38}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));
        connect(busConnector.brain_FunctionEffect, Rate.u1) annotation (Line(
            points={{-32,92},{-32,6},{60,6}},
            color={0,0,255},
            thickness=0.5,
            smooth=Smooth.None), Text(
            string="%first",
            index=-1,
            extent={{-6,3},{-6,3}}));

        connect(TotalDrive, RespiratoryCenterOutput.u) annotation (Line(
            points={{-100,20},{-56,20},{-56,-6},{-10,-6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(TotalDrive, FunctionEffect.yBase) annotation (Line(
            points={{-100,20},{-56,20},{-56,-22},{24,-22},{24,-36}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true,  extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-66,32},{76,-22}},
                lineColor={0,0,0},
                fillColor={213,255,170},
                fillPattern=FillPattern.Solid,
                textString="%name"),
              Text(
                extent={{-122,-100},{126,-126}},
                lineColor={0,0,255},
                textString="%name")}));
      end EfferentPath;

      model SkeletalMuscleMetaboreflex
        extends Physiolibrary.Icons.SkeletalMuscleAcidity;
        Physiolibrary.Types.RealIO.pHInput skeletalMuscle_pH
                                               annotation (Placement(transformation(
                extent={{-120,-20},{-80,20}}), iconTransformation(extent={{-110,-10},
                  {-90,10}})));
      Physiolibrary.Blocks.Interpolation.Curve NerveActivity(
        x=PhOnNerveActivity[:, 1],
        y=PhOnNerveActivity[:, 2],
        slope=PhOnNerveActivity[:, 3])
        annotation (Placement(transformation(extent={{-10,-18},{26,18}})));
        Physiolibrary.Types.RealIO.FractionOutput NA
          annotation (Placement(transformation(extent={{80,-20},{120,20}})));
         parameter Real PhOnNerveActivity[:,3]={{ 6.5,  5.0,  0}, { 6.9,  0.0,  0}};

      equation
        connect(NerveActivity.val, NA)      annotation (Line(
            points={{26,0},{100,0}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(skeletalMuscle_pH, NerveActivity.u) annotation (Line(
            points={{-100,0},{-10,0}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation ( Icon(coordinateSystem(
                preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
              graphics={
              Text(
                extent={{-128,-106},{120,-132}},
                lineColor={0,0,255},
                textString="%name")}));
      end SkeletalMuscleMetaboreflex;

      package Test

        model test_ventilation
          annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
              Diagram(coordinateSystem(preserveAspectRatio=false)));
        end test_ventilation;
      end Test;
    end Ventilation;

    model FickPrinciplePort
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_in annotation (
          Placement(transformation(extent={{-70,-10},{-50,10}}),
            iconTransformation(extent={{-100,-8},{-80,12}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_add annotation (
          Placement(transformation(extent={{-48,48},{-28,68}}), iconTransformation(
              extent={{-48,60},{-28,80}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b port_out annotation (
          Placement(transformation(extent={{66,-10},{86,10}}), iconTransformation(
              extent={{80,-10},{100,10}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput volumeFlow annotation (
          Placement(transformation(extent={{0,50},{40,90}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={34,60})));
    equation
      //mass balance
      port_in.q+port_add.q+port_out.q=0;
      //Fick principle
      port_in.conc*volumeFlow+port_add.q=port_out.conc*volumeFlow;
      //concentration in added flow = outflow concentration
      port_add.conc=(if volumeFlow>0 then port_out.conc else port_in.conc);
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-84,6},{54,-4}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-29,5},{29,-5}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              origin={-37,41},
              rotation=90),
            Polygon(
              points={{80,0},{40,12},{40,-10},{80,0}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-1,2},{-20,11},{-20,-11},{-1,2}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid,
              origin={-38,-3},
              rotation=270)}),  Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end FickPrinciplePort;

    model junction_T_flows
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-86,-26},{-58,10}})));
      Interfaces.BloodPort_in bloodPort_in(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-104,-18},{-84,2}}),
            iconTransformation(extent={{-108,-10},{-88,10}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{52,-24},{82,12}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_Flow if useFlowPortInput annotation (
          Placement(transformation(extent={{-12,62},{8,82}}),
            iconTransformation(extent={{50,-12},{74,12}})));
      Interfaces.BloodPort_out bloodPort_out(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{82,-10},{102,10}}),
            iconTransformation(extent={{90,-10},{110,10}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{14,48},{40,20}})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput O2_inflowInput(
                                    start=O2_inflow) if useO2Input annotation (Placement(
            transformation(extent={{-11,-11},{11,11}},
            rotation=0,
            origin={-83,39}),                             iconTransformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={-64,12})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput CO2_inflowInput(
                                    start=CO2_inflow) if useCO2Input annotation (
          Placement(transformation(extent={{-11,-11},{11,11}},
            rotation=0,
            origin={-85,83}),
            iconTransformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={-22,12})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput BEox_inflowInput(
                                    start=BEox_inflow) if useBEoxInput annotation (
          Placement(transformation(extent={{-9,-9},{9,9}},
            rotation=0,
            origin={-85,61}),
            iconTransformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={22,12})));

      parameter Physiolibrary.Types.MolarFlowRate O2_inflow=0;
      parameter Physiolibrary.Types.MolarFlowRate CO2_inflow=0;
      parameter Physiolibrary.Types.MolarFlowRate BEox_inflow=0;

      parameter Boolean useO2Input = false;
      parameter Boolean useCO2Input = false;
      parameter Boolean useBEoxInput = false;
      parameter Boolean useFlowPortInput = false;

      Physiolibrary.Types.MolarFlowRate inflowO2;
      Physiolibrary.Types.MolarFlowRate inflowCO2;
      Physiolibrary.Types.MolarFlowRate inflowBEox;

      FickPrinciple fickPrincipleO2
        annotation (Placement(transformation(extent={{-10,-24},{28,12}})));
      FickPrinciple fickPrincipleCO2
        annotation (Placement(transformation(extent={{-22,-52},{16,-16}})));
      FickPrinciple fickPrincipleBEox
        annotation (Placement(transformation(extent={{-46,-76},{-8,-40}})));
    equation

      if not useO2Input then
        inflowO2=O2_inflow;
      end if;

      if not useCO2Input then
        inflowCO2=CO2_inflow;
      end if;

      if not useBEoxInput then
        inflowBEox=BEox_inflow;
      end if;

      fickPrincipleO2.molarFlow=inflowO2;
      fickPrincipleCO2.molarFlow=inflowCO2;
      fickPrincipleBEox.molarFlow=inflowBEox;

      connect(bloodPort_in, bloodPort_in_Extension.bloodPort_in) annotation (
          Line(
          points={{-94,-8},{-86,-8}},
          color={28,108,200},
          thickness=0.5));

      connect(bloodPort_out_Extension.bloodPort_out, bloodPort_out) annotation (
         Line(
          points={{82,-6},{88,-6},{88,0},{92,0}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.bloodFlow, flowMeasure.q_in) annotation (
          Line(
          points={{-58,10},{-58,34},{14,34}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure.q_out, bloodPort_out_Extension.bloodFlow) annotation (
         Line(
          points={{40,34},{52,34},{52,12}},
          color={0,0,0},
          thickness=1));
      connect(port_Flow, flowMeasure.q_in) annotation (Line(
          points={{-2,72},{-2,34},{14,34}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_in_Extension.O2, fickPrincipleO2.port_in) annotation (Line(
          points={{-58,-4.4},{-34,-4.4},{-34,-5.64},{-8.1,-5.64}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleO2.port_out, bloodPort_out_Extension.O2) annotation (
          Line(
          points={{26.1,-6},{40,-6},{40,-2.4},{52,-2.4}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleCO2.port_in, bloodPort_in_Extension.CO2) annotation (
          Line(
          points={{-20.1,-33.64},{-44,-33.64},{-44,-11.96},{-58,-11.96}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.BEox, fickPrincipleBEox.port_in) annotation (
          Line(
          points={{-58,-18.8},{-52,-18.8},{-52,-58},{-44.1,-58},{-44.1,-57.64}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleCO2.port_out, bloodPort_out_Extension.CO2) annotation (
          Line(
          points={{14.1,-34},{26,-34},{26,-9.6},{52,-9.6}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleBEox.port_out, bloodPort_out_Extension.BEox) annotation (
         Line(
          points={{-9.9,-58},{34,-58},{34,-16.8},{52,-16.8}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleO2.volumeFlow, flowMeasure.volumeFlow) annotation (Line(
            points={{15.46,4.8},{15.46,17.2},{27,17.2}}, color={0,0,127}));
      connect(fickPrincipleCO2.volumeFlow, flowMeasure.volumeFlow) annotation (Line(
            points={{3.46,-23.2},{3.46,18},{16,18},{27,17.2}}, color={0,0,127}));
      connect(fickPrincipleBEox.volumeFlow, flowMeasure.volumeFlow) annotation (
          Line(points={{-20.54,-47.2},{-20.54,17.2},{27,17.2}},       color={0,0,127}));
      connect(bloodPort_in_Extension.ions, bloodPort_out_Extension.ions)
        annotation (Line(
          points={{-58,-26},{-54,-26},{-54,-64},{40,-64},{40,-24},{52,-24}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(
              points={{-82,0},{92,0}},
              color={0,0,0},
              thickness=0.5)}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end junction_T_flows;

    model FickPrinciple

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_in annotation (
          Placement(transformation(extent={{-70,-10},{-50,10}}),
            iconTransformation(extent={{-100,-8},{-80,12}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b port_out annotation (
          Placement(transformation(extent={{66,-10},{86,10}}), iconTransformation(
              extent={{80,-10},{100,10}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput volumeFlow
                 annotation (
          Placement(transformation(extent={{0,50},{40,90}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={34,60})));
        //(start=volumeFlowInput) if  useVolumeFlowInput

      Physiolibrary.Types.RealIO.MolarFlowRateInput molarFlow
         annotation (Placement(
            transformation(extent={{-202,44},{-162,84}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-56,60})));
        //(start=molarFlowInput) if useMolarFlowInput

      //parameter Boolean useVolumeFlowInput=false;
      //parameter Boolean useMolarFlowInput=false;

      //parameter Physiolibrary.Types.VolumeFlowRate volumeFlowInput=0;
      //parameter Physiolibrary.Types.MolarFlowRate molarFlowInput=0;

      //Physiolibrary.Types.VolumeFlowRate volumeFlowRate;
      //Physiolibrary.Types.MolarFlowRate molarFlowRate;

    equation
      /* 
  if not useVolumeFlowInput then
    volumeFlowRate=volumeFlowInput;
  end if;

  if not useMolarFlowInput then
    molarFlowRate=molarFlowInput;
  end if;
  */
      //mass balance
      port_in.q+molarFlow+port_out.q=0;
       //port_in.q+molarFlowRate+port_out.q=0;
       //Fick principle
       //port_in.conc*volumeFlowRate+molarFlowRate=port_out.conc*volumeFlowRate;
      port_in.conc*volumeFlow+molarFlow=port_out.conc*volumeFlow;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Rectangle(
              extent={{-84,6},{54,-4}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{80,0},{40,12},{40,-10},{80,0}},
              lineColor={255,0,0},
              lineThickness=0.5,
              fillColor={255,0,0},
              fillPattern=FillPattern.Solid)}),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end FickPrinciple;

    model BloodEmbranchment
      parameter Integer numberOfFlows=2;
      parameter Real relativeWeights[ numberOfFlows];
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{84,-8},{104,12}}), iconTransformation(extent={{80,-10},{
                100,10}})));
      Interfaces.BloodPort_out bloodPort_out[numberOfFlows] annotation (
          Placement(transformation(extent={{-106,-10},{-86,10}}),
            iconTransformation(extent={{-100,-10},{-80,10}})));

      Real sumOfWeights = sum(relativeWeights);
      BloodComponents.Pump pump[numberOfFlows]
        annotation (Placement(transformation(extent={{14,-14},{-12,16}})));

    equation
         for i in 1:numberOfFlows loop
            connect(pump[i].bloodPort_out, bloodPort_out[i]);
            connect(pump[i].bloodPort_in, bloodPort_in);
            pump[i].volumeFlowRate = relativeWeights[i]/sumOfWeights*bloodPort_in.bloodFlow;
         end for;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodEmbranchment;

    model BloodSplitting
      parameter Integer splitFraction[numberOfFlows];
      parameter Integer numberOfFlows=2;
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{68,-10},{88,10}}), iconTransformation(extent={{80,-10},{
                100,10}})));
      Interfaces.BloodPort_out bloodPort_out[numberOfFlows] annotation (
          Placement(transformation(extent={{-98,-10},{-78,10}}),
            iconTransformation(extent={{-100,-10},{-80,10}})));

      BloodComponents.Pump pump[numberOfFlows] annotation (Placement(
            transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={2,0})));

    equation
      for i in 1:numberOfFlows loop
      pump[i].volumeFlowRate=bloodPort_in.bloodFlow*splitFraction[i];
      connect(pump[i].bloodPort_in, bloodPort_in);
      connect(bloodPort_out[i], pump[i].bloodPort_out);
      end for;

      /* 
  pump[1].volumeFlowRate=bloodPort_in.bloodFlow*(1-splitFraction);
  pump[2].volumeFlowRate=bloodPort_in.bloodFlow*splitFraction;
  */
    /*
  connect(pump[1].bloodPort_in, bloodPort_in);
  connect(pump[2].bloodPort_in, bloodPort_in);
  connect(bloodPort_out[1], pump[1].bloodPort_out);
  connect(bloodPort_out[2],pump[2].bloodPort_out);
  */
       annotation (Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={-2,20})),
                    Icon(coordinateSystem(preserveAspectRatio=false)),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodSplitting;

    model BloodEmbranchment_
      parameter Integer numberOfFlows;
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{84,-8},{104,12}}), iconTransformation(extent={{80,-10},{
                100,10}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{-106,-10},{-86,10}}), iconTransformation(
              extent={{-100,-10},{-80,10}})));

      Interfaces.BloodPort_out bloodPort_out1 annotation (Placement(
            transformation(extent={{-106,-42},{-86,-22}}), iconTransformation(
              extent={{-100,-10},{-80,10}})));
      BloodComponents.Pump pump
        annotation (Placement(transformation(extent={{18,-12},{-8,18}})));
      BloodComponents.Pump pump1
        annotation (Placement(transformation(extent={{18,-54},{-8,-24}})));
    equation
      pump1.volumeFlowRate=21;
      pump.volumeFlowRate=21;
      connect(pump.bloodPort_out, bloodPort_out) annotation (Line(
          points={{-8,3},{-54,3},{-54,0},{-96,0}},
          color={28,108,200},
          thickness=0.5));
      connect(pump.bloodPort_in, bloodPort_in) annotation (Line(
          points={{18,3},{56,3},{56,2},{94,2}},
          color={28,108,200},
          thickness=0.5));
      connect(pump1.bloodPort_in, bloodPort_in) annotation (Line(
          points={{18,-39},{56,-39},{56,2},{94,2}},
          color={28,108,200},
          thickness=0.5));
      connect(pump1.bloodPort_out, bloodPort_out1) annotation (Line(
          points={{-8,-39},{-52,-39},{-52,-32},{-96,-32}},
          color={28,108,200},
          thickness=0.5));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodEmbranchment_;

    model BloodSplitting_2
      parameter Real splitFraction=0.02;

      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{72,-8},{92,12}}), iconTransformation(extent={{-40,-10},{
                -20,10}})));
      Interfaces.BloodPort_out bloodPort_out1 annotation (Placement(
            transformation(extent={{-98,10},{-78,30}}), iconTransformation(
              extent={{20,-32},{40,-12}})));
      BloodComponents.Pump pump1 annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-2,20})));
      Interfaces.BloodPort_out bloodPort_out2 annotation (Placement(
            transformation(extent={{-98,-44},{-78,-24}}), iconTransformation(
              extent={{20,-10},{40,10}})));
      BloodComponents.Pump pump2 annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-6,-34})));

    equation
      pump1.volumeFlowRate=bloodPort_in.bloodFlow*(1-splitFraction);
      pump2.volumeFlowRate=bloodPort_in.bloodFlow*splitFraction;
      connect(pump1.bloodPort_out, bloodPort_out1) annotation (Line(
          points={{-12,20},{-88,20}},
          color={28,108,200},
          thickness=0.5));
      connect(pump1.bloodPort_in, bloodPort_in) annotation (Line(
          points={{8,20},{40,20},{40,2},{82,2}},
          color={28,108,200},
          thickness=0.5));
      connect(pump2.bloodPort_out, bloodPort_out2) annotation (Line(
          points={{-16,-34},{-88,-34}},
          color={28,108,200},
          thickness=0.5));
      connect(pump2.bloodPort_in, bloodPort_in) annotation (Line(
          points={{4,-34},{40,-34},{40,2},{82,2}},
          color={28,108,200},
          thickness=0.5));
       annotation (Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={-2,20})),
                    Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Line(points={{20,-20},{-20,0},{20,0}}, color={28,108,200})}),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodSplitting_2;

    model BloodSplitting_2_Array

      constant Integer numberOfFlows = 2;
      parameter Real splitRelation[numberOfFlows];

      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{72,-8},{92,12}}), iconTransformation(extent={{-100,-8},{
                -80,12}})));
      Interfaces.BloodPort_out bloodPort_out[numberOfFlows] annotation (
          Placement(transformation(extent={{-98,-10},{-78,10}}),
            iconTransformation(extent={{80,-10},{100,10}})));
      BloodComponents.Pump pump[numberOfFlows] annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-4,0})));

    equation
      pump[1].volumeFlowRate=bloodPort_in.bloodFlow*splitRelation[1]*sum(splitRelation);
      pump[2].volumeFlowRate=bloodPort_in.bloodFlow*splitRelation[2]*sum(splitRelation);
      connect(pump[1].bloodPort_out, bloodPort_out[1]);
      connect(pump[1].bloodPort_in, bloodPort_in);
      connect(pump[2].bloodPort_out, bloodPort_out[2]);
      connect(pump[2].bloodPort_in, bloodPort_in);
     annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-6,-34})),
                   Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={-2,20})),
                    Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Line(points={{80,10},{-80,0},{80,-10},{80,-10}}, color={28,108,
                  200})}),      Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodSplitting_2_Array;

    model BloodSplitting_Array

      parameter Integer numberOfFlows = 2;
      parameter Real splitRelation[numberOfFlows];

      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{72,-8},{92,12}}), iconTransformation(extent={{-100,-10},
                {-80,10}})));
      Interfaces.BloodPort_out bloodPort_out[numberOfFlows] annotation (
          Placement(transformation(extent={{-98,-10},{-78,10}}),
            iconTransformation(extent={{80,-10},{100,10}})));
      BloodComponents.Pump pump[numberOfFlows] annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-4,0})));

    equation
      for i in 1:numberOfFlows loop
      connect(pump[i].bloodPort_out, bloodPort_out[i]);
      connect(pump[i].bloodPort_in, bloodPort_in);
      pump[i].volumeFlowRate=bloodPort_in.bloodFlow*splitRelation[i]*sum(splitRelation);
      end for;

      connect(bloodPort_in, bloodPort_in) annotation (Line(
          points={{82,2},{-90,2},{-90,2},{82,2}},
          color={28,108,200},
          thickness=0.5));
     annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-6,-34})),
                   Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={-2,20})),
                    Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Line(points={{80,10},{-80,0},{80,-10}}, color={28,108,200})}),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodSplitting_Array;

    model AlveolocapillaryUnit_bad
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-98,-32},
                {-86,-20}}),                                                                                                    iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));

      Acidbase.OSA.AlvEq alvEq
        annotation (Placement(transformation(extent={{-46,-98},{66,-16}})));
      inner Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-50,70},{-30,90}})));



    equation
      //bloodPort_in.conc[1]=alvEq.CvO2;
      //bloodPort_in.conc[2]=alvEq.CvCO2;
      //bloodPort_in.conc[3]=alvEq.BEox;
      //KDE CHYBÍ 6 ROVNIC ???????
      bloodPort_out.conc[1]=alvEq.ctO2;
      bloodPort_out.conc[2]=alvEq.ctCO2;
      bloodPort_in.conc[3]=bloodPort_out.conc[3];
      bloodPort_in.bloodFlow=alvEq.Q;
      bloodPort_in.conc[1]=alvEq.CvO2;
      bloodPort_in.conc[2]=alvEq.CvCO2;
      bloodPort_in.conc[3]=alvEq.BEox;
      bloodPort_in.bloodFlow+bloodPort_out.bloodFlow=0;
      connect(VO2, VO2)
        annotation (Line(points={{96,-54},{96,-54}},   color={0,0,127}));

      connect(alvEq.VCO2, VCO2) annotation (Line(points={{63.0783,-59.05},{74,
              -59.05},{74,-72},{94,-72}}, color={0,0,127}));
      connect(VAi, alvEq.VAi) annotation (Line(points={{-92,-26},{-92,-38},{
              -45.0261,-38},{-45.0261,-38.55}}, color={0,0,127}));
      connect(alvEq.VO2, VO2) annotation (Line(points={{63.0783,-54.4375},{
              74.5392,-54.4375},{74.5392,-54},{96,-54}},
                                       color={0,0,127}));
               annotation (Line(points={{63.0783,-54.4375},{59.68,-54.4375},
              {59.68,-54},{96,-54}},
                                   color={0,0,127}),
                 Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end AlveolocapillaryUnit_bad;

    model AlvEqUnit_
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2( start=10) annotation (Placement(
            transformation(extent={{84,-84},{104,-64}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2( start=11) annotation (Placement(
            transformation(extent={{84,-64},{104,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-76,-48},
                {-64,-36}}),                                                                                                    iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));
      Physiolibrary.Types.RealIO.ConcentrationInput O2_v annotation (Placement(
            transformation(extent={{-72,-30},{-46,-4}}), iconTransformation(extent={
                {-102,-58},{-82,-38}})));
      Physiolibrary.Types.RealIO.ConcentrationInput CO2_v annotation (Placement(
            transformation(extent={{-104,-4},{-82,18}}), iconTransformation(extent={
                {-102,-76},{-82,-56}})));
      Physiolibrary.Types.RealIO.ConcentrationInput BEox_v annotation (Placement(
            transformation(extent={{-58,-20},{-38,0}}), iconTransformation(extent={{
                -102,-94},{-82,-74}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation (Placement(
            transformation(extent={{-86,-52},{-74,-40}}), iconTransformation(
            extent={{-13,-13},{13,13}},
            rotation=0,
            origin={-49,45})));

      Acidbase.OSA.AlvEq alvEq
        annotation (Placement(transformation(extent={{6,-86},{54,-32}})));
    equation
      //balance equation
     // bloodPort_in_Extension.O2.q+bloodPort_out_Extension.O2.q+alvEq.VO2=0;
      //bloodPort_in_Extension.CO2.q+bloodPort_out_Extension.CO2.q-alvEq.VCO2=0;
      //concentration of O2 and CO2 in outflowing blood;
      //bloodPort_out_Extension.O2.conc=alvEq.CpcO2;
      //bloodPort_out_Extension.CO2.conc=alvEq.CpcCO2;
      //concentration input
      //alvEq.cvO2

      connect(alvEq.VCO2, VCO2) annotation (Line(points={{52.7478,-60.35},{
              75.68,-60.35},{75.68,-74},{94,-74}},
                                     color={0,0,127}));
      connect(alvEq.VO2, VO2) annotation (Line(points={{52.7478,-57.3125},{
              79.68,-57.3125},{79.68,-54},{94,-54}},
                                   color={0,0,127}));
      connect(alvEq.VAi, VAi) annotation (Line(points={{6.41739,-46.85},{-57.26,
              -46.85},{-57.26,-42},{-70,-42}},
                           color={0,0,127}));
      connect(VO2, VO2)
        annotation (Line(points={{94,-54},{94,-54}},   color={0,0,127}));
      connect(Q, alvEq.Q) annotation (Line(points={{-80,-46},{-52,-46},{-52,
              -48.875},{6.41739,-48.875}},
                              color={0,0,127}));
      connect(alvEq.BEox, BEox_v) annotation (Line(points={{6,-42.125},{-32,
              -42.125},{-32,-10},{-48,-10}},
                                    color={0,0,127}));
      connect(alvEq.CvO2, O2_v) annotation (Line(points={{6.41739,-52.925},{-36,
              -52.925},{-36,-17},{-59,-17}},
                                    color={0,0,127}));
      connect(alvEq.CvCO2, CO2_v) annotation (Line(points={{6.41739,-54.95},{
              -52,-54.95},{-52,-24},{-70,-24},{-70,7},{-93,7}},
                                                    color={0,0,127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end AlvEqUnit_;

    model BloodResistorsArray
    extends Physiolibrary.Icons.HydraulicResistor;
      parameter Integer numberOfFlows = 2;
      parameter Real splitRelation[numberOfFlows];
      parameter Physiolibrary.Types.HydraulicResistance Resistance;

      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{72,-8},{92,12}}), iconTransformation(extent={{-100,-10},
                {-80,10}})));
      Interfaces.BloodPort_out bloodPort_out[numberOfFlows] annotation (
          Placement(transformation(extent={{-100,-8},{-80,12}}),
            iconTransformation(extent={{82,-8},{102,12}})));

      BloodComponents.BloodConductor bloodConductor[numberOfFlows](
          useConductanceInput=true)
        annotation (Placement(transformation(extent={{18,-14},{-20,16}})));
    equation
      for i in 1:numberOfFlows loop
        bloodConductor[i].cond=(1/Resistance)*splitRelation[i]*sum(splitRelation);
        connect(bloodPort_in, bloodConductor[i].bloodPort_in);
        connect(bloodConductor[i].bloodPort_out, bloodPort_out[i]);
      end for;

     annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-6,-34})),
                   Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={-2,20})),
                    Icon(coordinateSystem(preserveAspectRatio=false)),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodResistorsArray;

    model Blood_ISF_Interface_values
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{84,-10},{104,10}}), iconTransformation(extent={{80,-10},
                {100,10}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{-106,-10},{-86,10}}), iconTransformation(
              extent={{-100,-10},{-80,10}})));

      inner Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-36,-12},{-62,12}})));
      Acidbase.OSA.O2CO2 o2CO2
        annotation (Placement(transformation(extent={{-24,-102},{66,-4}})));
      Physiolibrary.Types.RealIO.pHOutput pH "plasma pH" annotation (Placement(
            transformation(extent={{94,-58},{114,-38}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-70,10})));
      Physiolibrary.Types.RealIO.PressureOutput pO2 "plasma pO2" annotation (
          Placement(transformation(extent={{92,-30},{112,-10}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-26,10})));
      Physiolibrary.Types.RealIO.PressureOutput pCO2 "plasma pCO2" annotation (
          Placement(transformation(extent={{92,-46},{112,-26}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-48,10})));
      //Unconditional_Junction_T blood

      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-40,56})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdO2
        "plasma dissolved O2 concentration" annotation (Placement(
            transformation(extent={{92,-78},{112,-58}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={64,-10})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2
        "plasma dissolved CO2 concentration" annotation (Placement(
            transformation(extent={{90,-96},{110,-76}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={34,-10})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput O2inflow annotation (
          Placement(transformation(extent={{-12,58},{10,80}}),
            iconTransformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={64,12})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput CO2inflow annotation (
          Placement(transformation(extent={{-96,38},{-78,56}}),
            iconTransformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={34,12})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput HCO3inflow annotation (
          Placement(transformation(extent={{-94,18},{-72,40}}),
            iconTransformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={4,12})));
      Physiolibrary.Types.RealIO.ConcentrationOutput HCO3
        "plasma HCO3 concentration" annotation (Placement(transformation(extent=
               {{92,-68},{112,-48}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={4,-10})));
      Physiolibrary.Types.RealIO.ConcentrationOutput BEox
        "blood BEox concentration" annotation (Placement(transformation(extent=
                {{-50,-78},{-30,-58}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-70,-10})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump O2_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={20,84})));
      Junction_T junction_T(
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true) annotation (Placement(transformation(
            extent={{-15,-13},{15,13}},
            rotation=180,
            origin={21,-1})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump BEox_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-26,24})));
      Modelica.Blocks.Math.Add add
        annotation (Placement(transformation(extent={{-62,30},{-48,44}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeFlow annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-76,18}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-48,-10})));
    equation

      /*
  blood.port_O2.q=dO2.q;

  blood.port_CO2.q=dCO2.q+HCO3.q;

  blood.port_BEox.q=HCO3.q;
  dO2.conc=o2CO2.cdO2;
  dCO2.conc=o2CO2.cdCO2;
  HCO3.conc=o2CO2.cHCO3;
*/

      connect(flowConcentrationMeasure.O2_conc, o2CO2.ctO2) annotation (Line(points={{-38.6,
              -14.4},{-38.6,-29.9412},{-26.25,-29.9412}},        color={0,0,127}));
      connect(flowConcentrationMeasure.CO2_conc, o2CO2.ctCO2) annotation (Line(
            points={{-49,-14.4},{-49,-35.7059},{-26.25,-35.7059}}, color={0,0,127}));
      connect(flowConcentrationMeasure.BEox_conc, o2CO2.BEox) annotation (Line(
            points={{-59.4,-14.4},{-59.4,-41.4706},{-26.25,-41.4706}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, bloodPort_out) annotation (
          Line(
          points={{-60.7,0},{-78,0},{-78,0},{-96,0}},
          color={28,108,200},
          thickness=0.5));
      connect(o2CO2.pCO2, pCO2) annotation (Line(points={{68.25,-38.0118},{
              86.125,-38.0118},{86.125,-36},{102,-36}},
                                       color={0,0,127}));
      connect(o2CO2.pH, pH) annotation (Line(points={{68.25,-44.3529},{86.125,
              -44.3529},{86.125,-48},{104,-48}},
                                       color={0,0,127}));
      connect(o2CO2.pO2, pO2) annotation (Line(points={{68.25,-31.6706},{84,
              -31.6706},{84,-20},{102,-20}},
                                   color={0,0,127}));
      connect(o2CO2.cdCO2, cdCO2) annotation (Line(points={{68.25,-78.3647},{
              86.125,-78.3647},{86.125,-86},{100,-86}}, color={0,0,127}));


      connect(o2CO2.cdO2, cdO2) annotation (Line(points={{68.25,-72.6},{78.125,
              -72.6},{78.125,-68},{102,-68}}, color={0,0,127}));
      connect(O2_inflow.soluteFlow, O2inflow)
        annotation (Line(points={{24,80},{24,69},{-1,69}}, color={0,0,127}));
      connect(HCO3inflow, add.u2) annotation (Line(points={{-83,29},{-68,29},{
              -68,32.8},{-63.4,32.8}}, color={0,0,127}));
      connect(CO2inflow, add.u1) annotation (Line(points={{-87,47},{-72,47},{
              -72,41.2},{-63.4,41.2}}, color={0,0,127}));
      connect(add.y, CO2_inflow.soluteFlow) annotation (Line(points={{-47.3,37},
              {-36,37},{-36,52}}, color={0,0,127}));
      connect(HCO3inflow, BEox_inflow.soluteFlow) annotation (Line(points={{-83,
              29},{-66,29},{-66,24},{-40,24},{-40,12},{-22,12},{-22,20}}, color=
             {0,0,127}));
      connect(o2CO2.cHCO3, HCO3) annotation (Line(points={{68.25,-50.1176},{86,
              -50.1176},{86,-58},{102,-58}}, color={0,0,127}));
      connect(BEox, BEox) annotation (Line(points={{-40,-68},{-44,-68},{-44,-68},
              {-40,-68}}, color={0,0,127}));
      connect(BEox, o2CO2.BEox) annotation (Line(points={{-40,-68},{-58,-68},{
              -58,-41.4706},{-26.25,-41.4706}}, color={0,0,127}));
      connect(junction_T.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{6,-1},{-16,-1},{-16,0},{-37.3,0}},
          color={28,108,200},
          thickness=0.5));
      connect(junction_T.bloodPort_in, bloodPort_in) annotation (Line(
          points={{35.7,-1},{63.85,-1},{63.85,0},{94,0}},
          color={28,108,200},
          thickness=0.5));
      connect(junction_T.port_BEox, BEox_inflow.q_out) annotation (Line(
          points={{18.6,-1},{18.6,24},{-16,24}},
          color={107,45,134},
          thickness=1));
      connect(CO2_inflow.q_out, junction_T.port_CO2) annotation (Line(
          points={{-30,56},{24.9,56},{24.9,-1}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.port_O2, O2_inflow.q_out) annotation (Line(
          points={{30.3,-1},{30.3,74},{36,74},{36,84},{30,84}},
          color={107,45,134},
          thickness=1));
      connect(flowConcentrationMeasure.volumeFlow, volumeFlow)
        annotation (Line(points={{-49,14.4},{-49,18},{-76,18}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(
              points={{-88,0},{90,0}},
              color={0,0,0},
              thickness=0.5)}), Diagram(coordinateSystem(preserveAspectRatio=false)));
    end Blood_ISF_Interface_values;

    model ISFBuffer
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a CO2_inflow annotation (
          Placement(transformation(extent={{-94,-40},{-74,-20}}),
            iconTransformation(extent={{-8,30},{12,50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a O2_inflow annotation (
          Placement(transformation(extent={{0,48},{20,68}}), iconTransformation(
              extent={{40,30},{60,50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3_inflow annotation (
          Placement(transformation(extent={{-92,54},{-72,74}}), iconTransformation(
              extent={{-58,32},{-38,52}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-9,-8},{9,8}},
            rotation=0,
            origin={-53,64})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage o2_inflow(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{66,52},{54,64}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump1(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-92,18},{-78,32}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-86,-80},{-70,-62}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage hCO3_inflow1(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{-12,58},{-24,70}})));

      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=initialCO2concentration*volume_start)
        annotation (Placement(transformation(extent={{-54,6},{-30,44}})));
      Physiolibrary.Chemical.Components.Substance BEox(
          useNormalizedVolume=false, solute_start=initialBEox*volume_start)
        annotation (Placement(transformation(extent={{-46,-90},{-22,-52}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=initialO2concentration*volume_start)
        annotation (Placement(transformation(extent={{56,68},{80,106}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump2(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-10,98},{10,74}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage cO2_inflow(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{-36,-36},{-48,-24}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1
                                                                       annotation (
          Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=0,
            origin={36,58})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2
                                                                       annotation (
          Placement(transformation(
            extent={{-9,-8},{9,8}},
            rotation=0,
            origin={-67,-30})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(extent={{-64,-64},{-48,-78}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(extent={{-74,14},{-54,34}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(extent={{38,92},{54,78}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump3(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-86,-18},{-70,0}})));
      Physiolibrary.Types.RealIO.VolumeInput volume annotation (Placement(
            transformation(extent={{-108,90},{-68,130}}), iconTransformation(
            extent={{-9,-9},{9,9}},
            rotation=0,
            origin={-85,15})));
    /*
  Physiolibrary.Types.Fraction FiO2= 0 "Frattion of O2";
  Physiolibrary.Types.Fraction FiCO2= 0;
  parameter Physiolibrary.Types.Concentration cAlb= 0.22;
  Physiolibrary.Types.Concentration ctHb=0;
  parameter Physiolibrary.Types.Concentration cPi= 1.15;
  Physiolibrary.Types.Concentration cDPG= 0;
  Physiolibrary.Types.Fraction FMetHb= 0.0;
  Physiolibrary.Types.Fraction FCOHb= 0.0;
  Physiolibrary.Types.Fraction FHbF= 0.0;
  parameter Physiolibrary.Types.Temperature Temperature= 310.15;
*/

      Acidbase.OSA.plasmaO2CO2_by_integration plasmaO2CO2_by_integration
        annotation (Placement(transformation(extent={{8,-92},{94,30}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cAlb "Conentration of albumin"
        annotation (Placement(transformation(extent={{-20,-40},{-8,-28}}),
            iconTransformation(extent={{-108,-30},{-86,-8}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cPi
        "Concentration of phosphate" annotation (Placement(transformation(extent={{-22,-58},
                {-4,-40}}),      iconTransformation(extent={{-108,-58},{-84,-34}})));
      Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
            transformation(extent={{-24,-76},{-4,-56}}), iconTransformation(
              extent={{-110,-88},{-84,-62}})));
      Acidbase.OSA.Measure_pO2fromDissO2 measure_pO2fromDissO2_1
        annotation (Placement(transformation(extent={{98,76},{118,96}})));
      parameter Physiolibrary.Types.Concentration initialCO2concentration=24;
      parameter Physiolibrary.Types.Concentration initialO2concentration= 1.2;
      parameter Physiolibrary.Types.Concentration initialBEox=0;
      parameter Physiolibrary.Types.Volume volume_start=1e-3;

    initial equation
    //
    //  O2.solute_start=initialO2concentration*volume;
    //  CO2.solute_start=initialCO2concentration*volume;
    //  BEox.solute_start=initialBEox*volume;

    equation

      connect(HCO3_inflow, molarFlowMeasure.q_in) annotation (Line(
          points={{-82,64},{-62,64}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_out, hCO3_inflow1.q_out) annotation (Line(
          points={{-44,64},{-24,64}},
          color={107,45,134},
          thickness=1));
      connect(O2_inflow, molarFlowMeasure1.q_in) annotation (Line(
          points={{10,58},{26,58}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out, o2_inflow.q_out) annotation (Line(
          points={{46,58},{54,58}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.molarFlowRate, unlimitedSolutePump2.soluteFlow)
        annotation (Line(points={{36,66},{36,81.2},{4,81.2}}, color={0,0,127}));
      connect(unlimitedSolutePump1.soluteFlow, molarFlowMeasure.molarFlowRate)
        annotation (Line(points={{-82.2,27.8},{-82.2,47.9},{-53,47.9},{-53,57.6}},
            color={0,0,127}));
      connect(CO2_inflow, molarFlowMeasure2.q_in) annotation (Line(
          points={{-84,-30},{-76,-30}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure2.q_out, cO2_inflow.q_out) annotation (Line(
          points={{-58,-30},{-48,-30}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump.q_out, concentrationMeasure.q_in) annotation (
          Line(
          points={{-70,-71},{-56,-71}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure.q_in, BEox.q_out) annotation (Line(
          points={{-56,-71},{-34,-71}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump1.q_out, concentrationMeasure1.q_in) annotation (
          Line(
          points={{-78,25},{-72,25},{-72,24},{-64,24}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in, CO2.q_out) annotation (Line(
          points={{-64,24},{-54,24},{-54,25},{-42,25}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump2.q_out, concentrationMeasure2.q_in) annotation (
          Line(
          points={{10,86},{28,86},{28,85},{46,85}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in, O2.q_out) annotation (Line(
          points={{46,85},{58,85},{58,87},{68,87}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump3.soluteFlow, molarFlowMeasure2.molarFlowRate)
        annotation (Line(points={{-74.8,-5.4},{-74.8,2},{-96,2},{-96,-48},{-67,-48},
              {-67,-36.4}}, color={0,0,127}));
      connect(unlimitedSolutePump3.q_out, CO2.q_out) annotation (Line(
          points={{-70,-9},{-60,-9},{-60,-8},{-42,-8},{-42,25}},
          color={107,45,134},
          thickness=1));
      connect(O2.solutionVolume, volume) annotation (Line(points={{63.2,94.6},{63.2,
              110},{-88,110}}, color={0,0,127}));
      connect(CO2.solutionVolume, volume) annotation (Line(points={{-46.8,32.6},{-46.8,
              108},{-44,108},{-44,110},{-88,110}}, color={0,0,127}));
      connect(BEox.solutionVolume, volume) annotation (Line(points={{-38.8,-63.4},{-38.8,
              -56},{-102,-56},{-102,88},{-62,88},{-62,110},{-88,110}}, color={0,0,127}));
      connect(unlimitedSolutePump.soluteFlow, molarFlowMeasure.molarFlowRate)
        annotation (Line(points={{-74.8,-67.4},{-74.8,-62},{-100,-62},{-100,48},
              {-53,48},{-53,57.6}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.Temp, Temp) annotation (Line(points={{4.05833,
              -65.0882},{-1.97083,-65.0882},{-1.97083,-66},{-14,-66}},
            color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cPi, cPi) annotation (Line(points={{3.7,
              -49.6588},{-4.65,-49.6588},{-4.65,-49},{-13,-49}},     color={0,0,
              127}));
      connect(cAlb, plasmaO2CO2_by_integration.cAlb) annotation (Line(points={{-14,-34},
              {-4,-34},{-4,-33.5118},{4.05833,-33.5118}},          color={0,0,
              127}));
      connect(concentrationMeasure.concentration, plasmaO2CO2_by_integration.BEox)
        annotation (Line(points={{-56,-65.4},{-56,-44},{-16,-44},{-16,-16.6471},
              {5.85,-16.6471}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.ctCO2, concentrationMeasure1.concentration)
        annotation (Line(points={{5.85,-9.47059},{-24,-9.47059},{-24,0},{-64,0},
              {-64,16}}, color={0,0,127}));
      connect(concentrationMeasure2.concentration, plasmaO2CO2_by_integration.ctO2)
        annotation (Line(points={{46,90.6},{46,122},{94,122},{94,32},{-8,32},{-8,
              -2.29412},{5.85,-2.29412}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cdO2, o2_inflow.concentration)
        annotation (Line(points={{96.15,-55.4},{116,-55.4},{116,58},{66,58}},
            color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cdCO2, cO2_inflow.concentration)
        annotation (Line(points={{96.15,-62.5765},{108,-62.5765},{108,-110},{
              -26,-110},{-26,-30},{-36,-30}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cHCO3, hCO3_inflow1.concentration)
        annotation (Line(points={{96.15,-27.4118},{108,-27.4118},{108,22},{-4,
              22},{-4,64},{-12,64}}, color={0,0,127}));
      connect(measure_pO2fromDissO2_1.dissO2, plasmaO2CO2_by_integration.ctO2)
        annotation (Line(points={{105.7,79.1},{105.7,70},{94,70},{94,32},{-8,32},
              {-8,-2.29412},{5.85,-2.29412}}, color={0,0,127}));
      connect(Temp, measure_pO2fromDissO2_1.Temp) annotation (Line(points={{-14,-66},
              {-4,-66},{-4,-92},{118,-92},{118,70},{110.5,70},{110.5,79.1}}, color={
              0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -260,-140},{180,220}}),                             graphics={
              Bitmap(
              extent={{-100,-100},{100,100}},
              imageSource=
                  "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",
              fileName="C:/Users/User/Downloads/ConcentrationISF.png")}),
                                                                     Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-260,-140},{
                180,220}})));
    end ISFBuffer;

    model Unconditional_Junction_T
     // extend Conditional_junction_T
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-86,-26},{-58,10}})));
      Interfaces.BloodPort_in bloodPort_in(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-104,-18},{-84,2}}),
            iconTransformation(extent={{-108,-10},{-88,10}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{52,-24},{82,12}})));
      Interfaces.BloodPort_out bloodPort_out(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{82,-10},{102,10}}),
            iconTransformation(extent={{90,-10},{110,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_O2  annotation (
          Placement(transformation(extent={{8,-10},{28,10}}),
            iconTransformation(extent={{-72,-10},{-52,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_CO2  annotation (
          Placement(transformation(extent={{-16,-38},{4,-18}}),
            iconTransformation(extent={{-36,-10},{-16,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_BEox  annotation (
          Placement(transformation(extent={{-40,-68},{-20,-48}}),
            iconTransformation(extent={{6,-10},{26,10}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{14,48},{40,20}})));
      Package.FickPrinciplePort fickPrincipleO2
        annotation (Placement(transformation(extent={{12,-28},{32,-8}})));
      Package.FickPrinciplePort fickPrincipleCO2
        annotation (Placement(transformation(extent={{-12,-56},{8,-36}})));
      Package.FickPrinciplePort fickPrincipleBEox
        annotation (Placement(transformation(extent={{-36,-88},{-16,-68}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_Flow  annotation (
          Placement(transformation(extent={{-12,62},{8,82}}),
            iconTransformation(extent={{46,-12},{70,12}})));

    initial equation

    equation

      connect(bloodPort_in, bloodPort_in_Extension.bloodPort_in) annotation (
          Line(
          points={{-94,-8},{-86,-8}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_out_Extension.bloodPort_out, bloodPort_out) annotation (
         Line(
          points={{82,-6},{88,-6},{88,0},{92,0}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.bloodFlow, flowMeasure.q_in) annotation (
          Line(
          points={{-58,10},{-58,34},{14,34}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure.q_out, bloodPort_out_Extension.bloodFlow) annotation (
         Line(
          points={{40,34},{52,34},{52,12}},
          color={0,0,0},
          thickness=1));
      connect(port_Flow, flowMeasure.q_in) annotation (Line(
          points={{-2,72},{-2,34},{14,34}},
          color={0,0,0},
          thickness=1));
      connect(fickPrincipleCO2.volumeFlow, flowMeasure.volumeFlow) annotation (
          Line(points={{1.4,-40},{1.4,12},{27,12},{27,17.2}}, color={0,0,127}));
      connect(fickPrincipleBEox.volumeFlow, flowMeasure.volumeFlow) annotation (
         Line(points={{-22.6,-72},{-14,-72},{-14,22},{27,22},{27,17.2}}, color=
              {0,0,127}));
      connect(fickPrincipleO2.volumeFlow, flowMeasure.volumeFlow) annotation (
          Line(points={{25.4,-12},{24,12},{27,12},{27,17.2}}, color={0,0,127}));
      connect(fickPrincipleO2.port_add, port_O2) annotation (Line(
          points={{18.2,-11},{18.2,-5.5},{18,-5.5},{18,0}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleCO2.port_add, port_CO2) annotation (Line(
          points={{-5.8,-39},{-5.8,-33.5},{-6,-33.5},{-6,-28}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleBEox.port_add, port_BEox) annotation (Line(
          points={{-29.8,-71},{-29.8,-65.5},{-30,-65.5},{-30,-58}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleBEox.port_in, bloodPort_in_Extension.BEox)
        annotation (Line(
          points={{-35,-77.8},{-44,-77.8},{-44,-78},{-52,-78},{-52,-18},{-58,
              -18},{-58,-18.8}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleCO2.port_in, bloodPort_in_Extension.CO2) annotation (
         Line(
          points={{-11,-45.8},{-48,-45.8},{-48,-11.96},{-58,-11.96}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleO2.port_in, bloodPort_in_Extension.O2) annotation (
          Line(
          points={{13,-17.8},{-34,-17.8},{-34,-4.4},{-58,-4.4}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleO2.port_out, bloodPort_out_Extension.O2) annotation (
         Line(
          points={{31,-18},{38,-18},{38,-2.4},{52,-2.4}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleCO2.port_out, bloodPort_out_Extension.CO2)
        annotation (Line(
          points={{7,-46},{42,-46},{42,-9.6},{52,-9.6}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleBEox.port_out, bloodPort_out_Extension.BEox)
        annotation (Line(
          points={{-17,-78},{46,-78},{46,-16.8},{52,-16.8}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.ions, bloodPort_out_Extension.ions)
        annotation (Line(
          points={{-58,-26},{-58,-96},{52,-96},{52,-24}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(
              points={{-88,0},{90,0}},
              color={0,0,0},
              thickness=0.5)}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end Unconditional_Junction_T;

    model Junction_T
     // extend Conditional_junction_T
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-86,-26},{-58,10}})));
      Interfaces.BloodPort_in bloodPort_in(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-104,-18},{-84,2}}),
            iconTransformation(extent={{-108,-10},{-88,10}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{52,-24},{82,12}})));
      Interfaces.BloodPort_out bloodPort_out(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{82,-10},{102,10}}),
            iconTransformation(extent={{90,-10},{110,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_O2 if useO2_input
        annotation (
          Placement(transformation(extent={{8,-10},{28,10}}),
            iconTransformation(extent={{-72,-10},{-52,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_CO2 if useCO2_input
        annotation (
          Placement(transformation(extent={{-16,-38},{4,-18}}),
            iconTransformation(extent={{-36,-10},{-16,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_BEox if useBEox_input
        annotation (
          Placement(transformation(extent={{-54,-78},{-34,-58}}),
            iconTransformation(extent={{6,-10},{26,10}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{14,48},{40,20}})));
      Package.FickPrinciplePort fickPrincipleO2
        annotation (Placement(transformation(extent={{12,-28},{32,-8}})));
      Package.FickPrinciplePort fickPrincipleCO2
        annotation (Placement(transformation(extent={{-12,-56},{8,-36}})));
      Package.FickPrinciplePort fickPrincipleBEox
        annotation (Placement(transformation(extent={{-50,-98},{-30,-78}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_Flow if useFlow_input
       annotation (
          Placement(transformation(extent={{-12,62},{8,82}}),
            iconTransformation(extent={{46,-12},{70,12}})));

      parameter Boolean useO2_input=false;
      parameter Boolean useCO2_input=false;
      parameter Boolean useBEox_input=false;
      parameter Boolean useFlow_input=false;

    initial equation

    equation



      connect(bloodPort_in, bloodPort_in_Extension.bloodPort_in) annotation (
          Line(
          points={{-94,-8},{-86,-8}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_out_Extension.bloodPort_out, bloodPort_out) annotation (
         Line(
          points={{82,-6},{88,-6},{88,0},{92,0}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.bloodFlow, flowMeasure.q_in) annotation (
          Line(
          points={{-58,10},{-58,34},{14,34}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure.q_out, bloodPort_out_Extension.bloodFlow) annotation (
         Line(
          points={{40,34},{52,34},{52,12}},
          color={0,0,0},
          thickness=1));
      connect(fickPrincipleCO2.volumeFlow, flowMeasure.volumeFlow) annotation (Line(
            points={{1.4,-40},{1.4,12},{27,12},{27,17.2}}, color={0,0,127}));
      connect(fickPrincipleBEox.volumeFlow, flowMeasure.volumeFlow) annotation (
          Line(points={{-36.6,-82},{-28,-82},{-28,12},{27,12},{27,17.2}}, color={0,0,
              127}));
      connect(fickPrincipleO2.volumeFlow, flowMeasure.volumeFlow) annotation (Line(
            points={{25.4,-12},{24,12},{27,12},{27,17.2}}, color={0,0,127}));

      connect(fickPrincipleBEox.port_in, bloodPort_in_Extension.BEox) annotation (
          Line(
          points={{-49,-87.8},{-72,-87.8},{-72,-38},{-52,-38},{-52,-18},{-58,
              -18},{-58,-18.8}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleCO2.port_in, bloodPort_in_Extension.CO2) annotation (
          Line(
          points={{-11,-45.8},{-48,-45.8},{-48,-11.96},{-58,-11.96}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleO2.port_in, bloodPort_in_Extension.O2) annotation (Line(
          points={{13,-17.8},{-34,-17.8},{-34,-4.4},{-58,-4.4}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleO2.port_out, bloodPort_out_Extension.O2) annotation (
          Line(
          points={{31,-18},{38,-18},{38,-2.4},{52,-2.4}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleCO2.port_out, bloodPort_out_Extension.CO2) annotation (
          Line(
          points={{7,-46},{42,-46},{42,-9.6},{52,-9.6}},
          color={107,45,134},
          thickness=1));
      connect(fickPrincipleBEox.port_out, bloodPort_out_Extension.BEox) annotation (
         Line(
          points={{-31,-88},{46,-88},{46,-16.8},{52,-16.8}},
          color={107,45,134},
          thickness=1));
      if useO2_input then
        connect(port_O2, fickPrincipleO2.port_add) annotation (Line(
          points={{18,0},{18,-6},{18,-11},{18.2,-11}},
          color={107,45,134},
          thickness=1));
      end if;
      if useCO2_input then
      connect(port_CO2, fickPrincipleCO2.port_add) annotation (Line(
          points={{-6,-28},{-6,-34},{-6,-39},{-5.8,-39}},
          color={107,45,134},
          thickness=1));
      end if;
      if useBEox_input then
      connect(port_BEox, fickPrincipleBEox.port_add) annotation (Line(
          points={{-44,-68},{-44,-74},{-44,-81},{-43.8,-81}},
          color={107,45,134},
          thickness=1));
      end if;
      if useFlow_input then
      connect(flowMeasure.q_in, port_Flow) annotation (Line(
          points={{14,34},{-2,34},{-2,72}},
          color={0,0,0},
          thickness=1));
      end if;
      connect(bloodPort_in_Extension.ions, bloodPort_out_Extension.ions)
        annotation (Line(
          points={{-58,-26},{-92,-26},{-92,-94},{52,-94},{52,-24}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(
              points={{-88,0},{90,0}},
              color={0,0,0},
              thickness=0.5), Rectangle(
              extent={{-100,16},{100,-14}},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None)}),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end Junction_T;

    model Blood_ISF_Interface
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{84,-10},{104,10}}), iconTransformation(extent={{80,-10},
                {100,10}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{-106,-10},{-86,10}}), iconTransformation(
              extent={{-100,-10},{-80,10}})));

      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,-12},{-76,12}})));
      Physiolibrary.Types.RealIO.pHOutput pH "plasma pH" annotation (Placement(
            transformation(extent={{94,-58},{114,-38}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-70,10})));
      Physiolibrary.Types.RealIO.PressureOutput pO2 "plasma pO2" annotation (
          Placement(transformation(extent={{92,-30},{112,-10}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-26,10})));
      Physiolibrary.Types.RealIO.PressureOutput pCO2 "plasma pCO2" annotation (
          Placement(transformation(extent={{92,-46},{112,-26}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-48,10})));

      Physiolibrary.Types.RealIO.ConcentrationOutput BEox
        "blood BEox concentration" annotation (Placement(transformation(extent={{-100,
                -76},{-80,-56}}),       iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-70,-10})));
      Junction_T junction_T(
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true) annotation (Placement(transformation(
            extent={{-21,-14},{21,14}},
            rotation=180,
            origin={27,0})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeFlow annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-90,18}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-48,-10})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a O2_inflow annotation (
          Placement(transformation(extent={{50,64},{70,84}}), iconTransformation(
              extent={{52,-10},{72,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a CO2_inflow annotation (
          Placement(transformation(extent={{-44,-24},{-24,-4}}),
                                                               iconTransformation(
              extent={{20,-10},{40,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3_inflow annotation (
          Placement(transformation(extent={{-82,30},{-62,50}}), iconTransformation(
              extent={{-10,-10},{10,10}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=0,
            origin={-38,40})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-52,90},{-32,66}})));
      Acidbase.OSA.O2CO2 o2CO2
        annotation (Placement(transformation(extent={{-20,-102},{56,-18}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage hCO3_inflow(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{-4,34},{-16,46}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump1(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-32,74},{-12,50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage o2_inflow(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=270,
            origin={60,28})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1
                                                                       annotation (
          Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=270,
            origin={60,48})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump2(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-10,-11},{10,11}},
            rotation=270,
            origin={43,52})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage o2_inflow1(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=0,
            origin={8,-14})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2
                                                                       annotation (
          Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={-18,-14})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump3(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{62,-4},{44,-24}})));

    equation


      connect(flowConcentrationMeasure.bloodPort_out, bloodPort_out) annotation (
          Line(
          points={{-74.7,0},{-96,0}},
          color={28,108,200},
          thickness=0.5));


      connect(BEox, BEox) annotation (Line(points={{-90,-66},{-90,-66}},
                          color={0,0,127}));
      connect(junction_T.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{6,4.21885e-15},{-12,4.21885e-15},{-12,0},{-51.3,0}},
          color={28,108,200},
          thickness=0.5));
      connect(junction_T.bloodPort_in, bloodPort_in) annotation (Line(
          points={{47.58,-6.66134e-16},{63.85,-6.66134e-16},{63.85,0},{94,0}},
          color={28,108,200},
          thickness=0.5));
      connect(flowConcentrationMeasure.volumeFlow, volumeFlow)
        annotation (Line(points={{-63,14.4},{-63,18},{-90,18}}, color={0,0,127}));
      connect(HCO3_inflow, molarFlowMeasure.q_in) annotation (Line(
          points={{-72,40},{-48,40}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.port_CO2, unlimitedSolutePump.q_out) annotation (Line(
          points={{32.46,1.11022e-15},{32,1.11022e-15},{32,78},{-32,78}},
          color={107,45,134},
          thickness=1));
      connect(o2CO2.ctO2, flowConcentrationMeasure.O2_conc) annotation (Line(points={{-21.9,
              -40.2353},{-52.6,-40.2353},{-52.6,-14.4}},        color={0,0,127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure.CO2_conc) annotation (Line(
            points={{-21.9,-45.1765},{-63,-45.1765},{-63,-14.4}}, color={0,0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure.BEox_conc) annotation (Line(
            points={{-21.9,-50.1176},{-73.4,-50.1176},{-73.4,-14.4}}, color={0,0,127}));
      connect(flowConcentrationMeasure.BEox_conc, BEox) annotation (Line(points={{-73.4,
              -14.4},{-73.4,-66},{-90,-66}}, color={0,0,127}));
      connect(o2CO2.pH, pH) annotation (Line(points={{57.9,-53.0824},{88,
              -53.0824},{88,-48},{104,-48}},
                                  color={0,0,127}));
      connect(o2CO2.pCO2, pCO2) annotation (Line(points={{57.9,-47.1529},{80,
              -47.1529},{80,-36},{102,-36}},
                                   color={0,0,127}));
      connect(o2CO2.pO2, pO2) annotation (Line(points={{57.9,-42.2118},{72,
              -42.2118},{72,-20},{102,-20}},
                                   color={0,0,127}));
      connect(molarFlowMeasure.q_out, hCO3_inflow.q_out) annotation (Line(
          points={{-28,40},{-16,40}},
          color={107,45,134},
          thickness=1));
      connect(o2CO2.cHCO3, hCO3_inflow.concentration) annotation (Line(points={{57.9,
              -58.0235},{74,-58.0235},{74,88},{10,88},{10,40},{-4,40}}, color={0,0,127}));
      connect(unlimitedSolutePump1.q_out, junction_T.port_BEox) annotation (Line(
          points={{-12,62},{23.64,62},{23.64,2.22045e-15}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_in, O2_inflow) annotation (Line(
          points={{60,56},{60,74}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out, o2_inflow.q_out) annotation (Line(
          points={{60,40},{60,34}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.port_O2, unlimitedSolutePump2.q_out) annotation (Line(
          points={{40.02,2.22045e-16},{40.02,21},{43,21},{43,42}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump2.soluteFlow, molarFlowMeasure1.molarFlowRate)
        annotation (Line(points={{47.4,48},{53.6,48}}, color={0,0,127}));
      connect(o2CO2.cdO2, o2_inflow.concentration) annotation (Line(points={{57.9,
              -77.2941},{70,-77.2941},{70,14},{60,14},{60,22}},
                                                   color={0,0,127}));
      connect(CO2_inflow, molarFlowMeasure2.q_in) annotation (Line(
          points={{-34,-14},{-26,-14}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure2.q_out, o2_inflow1.q_out) annotation (Line(
          points={{-10,-14},{2,-14}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump3.q_out, junction_T.port_CO2) annotation (Line(
          points={{44,-14},{32.46,-14},{32.46,0}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure2.molarFlowRate, unlimitedSolutePump3.soluteFlow)
        annotation (Line(points={{-18,-20.4},{-18,-26},{49.4,-26},{49.4,-18}},
            color={0,0,127}));
      connect(o2CO2.cdCO2, o2_inflow1.concentration) annotation (Line(points={{57.9,
              -82.2353},{66,-82.2353},{66,-22},{28,-22},{28,-14},{14,-14}}, color={0,
              0,127}));
      connect(molarFlowMeasure.molarFlowRate, unlimitedSolutePump.soluteFlow)
        annotation (Line(points={{-38,48},{-38,73.2}}, color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate, unlimitedSolutePump1.soluteFlow)
        annotation (Line(points={{-38,48},{-38,57.2},{-18,57.2}}, color={0,0,
              127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-40},{100,40}}),                               graphics={
            Line(
              points={{-88,0},{90,0}},
              color={0,0,0},
              thickness=0.5), Rectangle(
              extent={{-100,40},{100,-40}},
              lineColor={28,108,200},
              fillColor={244,125,35},
              fillPattern=FillPattern.Solid)}),
                                Diagram(coordinateSystem(preserveAspectRatio=false, extent={
                {-100,-40},{100,40}})));
    end Blood_ISF_Interface;

    model Terminator
      parameter Physiolibrary.Types.Pressure p = 1;
      parameter Physiolibrary.Types.Concentration concentrationO2 = 1;
      parameter Physiolibrary.Types.Concentration concentrationCO2 = 1;
      parameter Physiolibrary.Types.Concentration concentrationBEox = 1;
      parameter Physiolibrary.Types.HydraulicResistance r = 1;

      Interfaces.BloodPort_out_Extension bloodPort_b_Extension
        annotation (Placement(transformation(extent={{-16,-10},{4,10}})));
      Physiolibrary.Chemical.Components.Stream O2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-66,-30},{-46,-10}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{-50,20},{-30,0}})));
      Physiolibrary.Chemical.Components.Stream CO2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-66,-60},{-46,-40}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-66,-90},{-46,-70}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageO2(Conc=concentrationO2)
        annotation (Placement(transformation(extent={{-98,-30},{-78,-10}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageCO2(Conc=concentrationCO2)
        annotation (Placement(transformation(extent={{-98,-60},{-78,-40}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageBEox(Conc=concentrationBEox)
        annotation (Placement(transformation(extent={{-98,-90},{-78,-70}})));
      Physiolibrary.Hydraulic.Components.Resistor resistor1(Resistance=r)
        annotation (Placement(transformation(extent={{-74,0},{-54,20}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume1(P=p)
        annotation (Placement(transformation(extent={{-98,0},{-78,20}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(rotation=0, extent={{90,-10},{110,10}})));
    equation
      connect(flowMeasure.q_out,bloodPort_b_Extension. bloodFlow) annotation (
          Line(
          points={{-30,10},{-16,10}},
          color={0,0,0},
          thickness=1));
      connect(O2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{-56,-13},{-56,-12},{-40,-12},{-40,-2}},           color={0,
              0,127}));
      connect(CO2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{-56,-43},{-56,-42},{-40,-42},{-40,-2}},
                                                         color={0,0,127}));
      connect(BEoxflow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{-56,-73},{-56,-72},{-40,-72},{-40,-2}},
                                                           color={0,0,127}));
      connect(O2flow.q_out,bloodPort_b_Extension. O2) annotation (Line(
          points={{-46,-20},{-34,-20},{-34,2},{-16,2}},
          color={107,45,134},
          thickness=1));
      connect(CO2flow.q_out,bloodPort_b_Extension. CO2) annotation (Line(
          points={{-46,-50},{-30,-50},{-30,-2},{-16,-2}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_out,bloodPort_b_Extension. BEox) annotation (Line(
          points={{-46,-80},{-26,-80},{-26,-6},{-16,-6}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutionStorageO2.q_out,O2flow. q_in) annotation (Line(
          points={{-78,-20},{-66,-20}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutionStorageCO2.q_out,CO2flow. q_in) annotation (Line(
          points={{-78,-50},{-66,-50}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutionStorageBEox.q_out,BEoxflow. q_in) annotation (
          Line(
          points={{-78,-80},{-66,-80}},
          color={107,45,134},
          thickness=1));
      connect(flowMeasure.q_in, resistor1.q_out) annotation (Line(
          points={{-50,10},{-54,10}},
          color={0,0,0},
          thickness=1));
      connect(resistor1.q_in, unlimitedVolume1.y) annotation (Line(
          points={{-74,10},{-78,10}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_out, bloodPort_b_Extension.bloodPort_out) annotation (Line(
            points={{100,0},{4,0}},                       color={28,108,200}));
    end Terminator;

    model ComputationpO2pCO2
      import Modelica.Math;
      Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctO2 annotation (Placement(
            transformation(extent={{-160,146},{-120,186}}), iconTransformation(
              extent={{-120,60},{-80,100}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctCO2 annotation (Placement(
            transformation(extent={{-154,182},{-114,222}}), iconTransformation(
              extent={{-120,-120},{-80,-80}})));
      Real temp = modelSettings.Temperature - 273.15;
      Real aO2 = exp(log(0.0105) - 0.0115 * (temp - 37.0) + 0.5 * 0.00042 * (temp - 37.0) ^ 2)/1000;
      Real cdO2 = aO2*pO2;
      Physiolibrary.Types.RealIO.PressureOutput pO2 annotation(Placement(transformation(extent = {{-58, -70}, {-18, -30}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation=0,     origin={80,0})));
      Real pK;
      Real aCO2(final displayUnit = "mmol/(l.kPa)");
      Physiolibrary.Types.Concentration cdCO2(displayUnit = "mmol/l");
      // start=3,
      //  Physiolibrary.Types.Pressure pCO2(start=6000,            displayUnit="kPa");
      //  start=6,
      // constant Real MiniliterPerLiter(final displayUnit="ml/l")=1000;
    //   Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit = "mmol/l")
    //     "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{20, -70}, {60, -30}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation = 270, origin = {80, -120})));
     // Physiolibrary.Types.pH pH "pH";
      Physiolibrary.Types.Pressure pCO2    "alveolar partial pressure of pCO2";

    equation
      ctO2 = cdO2;
      ctCO2 = cdCO2;

      //Henderson-Hasselbalch equation:
      pK = 6.1 + (-0.0026) * (modelSettings.Temperature - 310.15);
      aCO2 = 0.00023 * 10 ^ (-0.0092 * (modelSettings.Temperature - 310.15));
      //solubility depends on temperature
      cdCO2 = aCO2 * (pCO2/1000);
      // pH = if ( cdCO2 > 1e-8) then  pK + log10(max(1e-15,cHCO3/cdCO2)) else pK;
    //  cdCO2 * 10 ^ (pH - pK) = cHCO3;

      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}})), Icon(
            coordinateSystem(extent={{-120,-100},{100,100}}), graphics={                                                                                                   Text(extent={{
                  -72,80},{126,70}},                                                                                                                                                                             lineColor=
                  {0,0,255},                                                                                                                                                                                                        fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                  12,
                horizontalAlignment=TextAlignment.Left,
              textString="ctO2"),                                                                                                                                                Text(extent={{
                  -72,-88},{80,-102}},                                                                                                                                                                                lineColor=
                  {0,0,255},                                                                                                                                                                                                        fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                  12,
                horizontalAlignment=TextAlignment.Left,
              textString="ctCO2"),
            Rectangle(extent={{-120,100},{100,-100}}, lineColor={28,108,200}),                                                                                             Text(extent={{
                  24,36},{222,26}},                                                                                                                                                                              lineColor=
                  {0,0,255},                                                                                                                                                                                                        fillColor=
                  {255,255,0},
                fillPattern=FillPattern.Solid,                                                                                                     fontSize=
                  12,
                horizontalAlignment=TextAlignment.Left,
              textString="pO2")}));
    end ComputationpO2pCO2;

    partial model BloodOnePort
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
      Interfaces.BloodPort_in bloodPort_in(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-104,-10},{-84,10}}),
            iconTransformation(extent={{-100,-10},{-80,10}})));
      Physiolibrary.Chemical.Components.Stream O2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{6,-36},{26,-16}})));
      Physiolibrary.Chemical.Components.Stream CO2flow(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{6,-58},{26,-38}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{6,-78},{26,-58}})));
      Physiolibrary.Chemical.Components.Stream ionsFlow[Ions.IonsEnum](each
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{6,-102},{26,-82}})));
      Interfaces.OneToMany oneToMany
        annotation (Placement(transformation(extent={{24,-84},{16,-76}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{20,20},{40,0}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{60,-10},{80,10}})));
      Interfaces.BloodPort_out bloodPort_out(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{80,-10},{100,10}}),
            iconTransformation(extent={{80,-10},{100,10}})));
    equation
      connect(bloodPort_in, bloodPort_in_Extension.bloodPort_in) annotation (
          Line(
          points={{-94,0},{-70,0},{-70,0}},
          color={28,108,200},
          thickness=0.5));
      connect(O2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{16,-19},{16,-18},{30,-18},{30,-2}},               color={0,
              0,127}));
      connect(CO2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{16,-41},{16,-40},{30,-40},{30,-2}}, color={0,0,127}));
      connect(BEoxflow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{16,-61},{16,-60},{30,-60},{30,-2}},   color={0,0,127}));
      connect(bloodPort_in_Extension.O2,O2flow. q_in) annotation (Line(
          points={{-50,2},{-38,2},{-38,-26},{6,-26}},
          color={107,45,134},
          thickness=1));
      connect(O2flow.q_out,bloodPort_out_Extension. O2) annotation (Line(
          points={{26,-26},{42,-26},{42,2},{60,2}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.CO2,CO2flow. q_in) annotation (Line(
          points={{-50,-2.2},{-40,-2.2},{-40,-48},{6,-48}},
          color={107,45,134},
          thickness=1));
      connect(CO2flow.q_out,bloodPort_out_Extension. CO2) annotation (Line(
          points={{26,-48},{44,-48},{44,-2},{60,-2}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.BEox,BEoxflow. q_in) annotation (Line(
          points={{-50,-6},{-44,-6},{-44,-68},{6,-68}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_out,bloodPort_out_Extension. BEox) annotation (Line(
          points={{26,-68},{46,-68},{46,-6},{60,-6}},
          color={107,45,134},
          thickness=1));
      connect(oneToMany.y,ionsFlow. solutionFlow)
        annotation (Line(points={{16,-82},{16,-85}},   color={0,0,127}));
      connect(ionsFlow.q_in,bloodPort_in_Extension. ions) annotation (Line(
          points={{6,-92},{-50,-92},{-50,-10}},
          color={107,45,134},
          thickness=1));
      connect(ionsFlow.q_out, bloodPort_out_Extension.ions) annotation (Line(
          points={{26,-92},{54,-92},{54,-10},{60,-10}},
          color={107,45,134},
          thickness=1));
      connect(oneToMany.u, flowMeasure.volumeFlow) annotation (Line(points={{24,-82},
              {28,-82},{28,-80},{30,-80},{30,-2}}, color={0,0,127}));
      connect(flowMeasure.q_out,bloodPort_out_Extension. bloodFlow) annotation (
         Line(
          points={{40,10},{60,10}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_out,bloodPort_out_Extension. bloodPort_out) annotation (
         Line(
          points={{90,0},{80,0}},
          color={28,108,200},
          thickness=0.5));
    end BloodOnePort;


    model AlveolocapillaryUnit_by_integration
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-2},{104,18}}),   iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,12},{106,32}}),   iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-98,26},
                {-86,38}}),                                                                                                     iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut CO2_outflow(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={70,64})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump O2_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-30,64})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-76,64},{-56,84}})));

      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-15)
        annotation (Placement(transformation(extent={{2,86},{18,98}})));
      Physiolibrary.Chemical.Components.Substance BufferCO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{44,60},{52,68}})));
      Physiolibrary.Chemical.Components.Substance BufferO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{-14,60},{-4,68}})));
      Junction_T junction_T(
        useFlow_input=false,
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true)
        annotation (Placement(transformation(extent={{12,64},{34,84}})));
      Acidbase.OSA.AlvEq_by_integration alvEq_by_integration
        annotation (Placement(transformation(extent={{-44,-14},{62,50}})));
    equation

      connect(bloodPort_in, flowConcentrationMeasure.bloodPort_in) annotation (
          Line(
          points={{-96,74},{-75,74}},
          color={28,108,200},
          thickness=0.5));
      connect(O2_inflow.q_out, BufferO2.q_out) annotation (Line(
          points={{-20,64},{-9,64}},
          color={107,45,134},
          thickness=1));
      connect(CO2_outflow.q_in, BufferCO2.q_out) annotation (Line(
          points={{60,64},{48,64}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.solutionVolume, nearToZeroVolume.y)
        annotation (Line(points={{46.4,65.6},{46.4,92},{20,92}},
                                                            color={0,0,127}));
      connect(BufferO2.solutionVolume, nearToZeroVolume.y) annotation (Line(points={{-11,
              65.6},{-11,92},{20,92}},                  color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, junction_T.bloodPort_in)
        annotation (Line(
          points={{-57,74},{12.22,74}},
          color={28,108,200},
          thickness=0.5));
      connect(BufferO2.q_out, junction_T.port_O2) annotation (Line(
          points={{-9,64},{16.18,64},{16.18,74}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.q_out, junction_T.port_CO2) annotation (Line(
          points={{48,64},{20.14,64},{20.14,74}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.bloodPort_out, bloodPort_out) annotation (Line(
          points={{34,74},{96,74}},
          color={28,108,200},
          thickness=0.5));
      connect(alvEq_by_integration.BEox, flowConcentrationMeasure.BEox_conc)
        annotation (Line(points={{-44,38},{-58,38},{-58,62}}, color={0,0,127}));
      connect(alvEq_by_integration.VAi, VAi) annotation (Line(points={{-43.0783,
              32.4},{-65.5392,32.4},{-65.5392,32},{-92,32}}, color={0,0,127}));
      connect(alvEq_by_integration.Q, flowConcentrationMeasure.volumeFlow)
        annotation (Line(points={{-43.0783,30},{-52,30},{-52,94},{-66,94},{-66,
              86}}, color={0,0,127}));
      connect(alvEq_by_integration.CvCO2, flowConcentrationMeasure.CO2_conc)
        annotation (Line(points={{-43.0783,22.8},{-66,22.8},{-66,62}}, color={0,
              0,127}));
      connect(alvEq_by_integration.CvO2, flowConcentrationMeasure.O2_conc)
        annotation (Line(points={{-43.0783,25.2},{-74,25.2},{-74,62}}, color={0,
              0,127}));
      connect(alvEq_by_integration.VO2, O2_inflow.soluteFlow) annotation (Line(
            points={{59.2348,20},{66,20},{66,54},{-26,54},{-26,60}}, color={0,0,
              127}));
      connect(alvEq_by_integration.VCO2, CO2_outflow.soluteFlow) annotation (
          Line(points={{59.2348,16.4},{74,16.4},{74,60}}, color={0,0,127}));
      connect(VO2, O2_inflow.soluteFlow) annotation (Line(points={{96,22},{82,
              22},{82,20},{66,20},{66,54},{-26,54},{-26,60}}, color={0,0,127}));
      connect(VCO2, CO2_outflow.soluteFlow)
        annotation (Line(points={{94,8},{74,8},{74,60}}, color={0,0,127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end AlveolocapillaryUnit_by_integration;

    model Blood_ISF_Interface_by_integration
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{84,-10},{104,10}}), iconTransformation(extent={{80,-10},
                {100,10}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{-106,-10},{-86,10}}), iconTransformation(
              extent={{-100,-10},{-80,10}})));

      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,-12},{-76,12}})));
      Physiolibrary.Types.RealIO.pHOutput pH "plasma pH" annotation (Placement(
            transformation(extent={{94,-58},{114,-38}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-70,10})));
      Physiolibrary.Types.RealIO.PressureOutput pO2 "plasma pO2" annotation (
          Placement(transformation(extent={{92,-30},{112,-10}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-26,10})));
      Physiolibrary.Types.RealIO.PressureOutput pCO2 "plasma pCO2" annotation (
          Placement(transformation(extent={{92,-46},{112,-26}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-48,10})));

      Physiolibrary.Types.RealIO.ConcentrationOutput BEox
        "blood BEox concentration" annotation (Placement(transformation(extent={{-100,
                -76},{-80,-56}}),       iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-70,-10})));
      Junction_T junction_T(
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true) annotation (Placement(transformation(
            extent={{-21,-14},{21,14}},
            rotation=180,
            origin={27,0})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput volumeFlow annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-90,18}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-48,-10})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a O2_inflow annotation (
          Placement(transformation(extent={{50,64},{70,84}}), iconTransformation(
              extent={{52,-10},{72,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a CO2_inflow annotation (
          Placement(transformation(extent={{-44,-24},{-24,-4}}),
                                                               iconTransformation(
              extent={{20,-10},{40,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3_inflow annotation (
          Placement(transformation(extent={{-82,30},{-62,50}}), iconTransformation(
              extent={{-10,-10},{10,10}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=0,
            origin={-38,40})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-52,90},{-32,66}})));
      Acidbase.OSA.O2CO2_by_integration o2CO2
        annotation (Placement(transformation(extent={{-20,-102},{56,-18}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage hCO3_inflow(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{-4,34},{-16,46}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump1(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-32,74},{-12,50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage o2_inflow(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=270,
            origin={60,28})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1
                                                                       annotation (
          Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=270,
            origin={60,48})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump2(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-10,-11},{10,11}},
            rotation=270,
            origin={43,52})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage o2_inflow1(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=0,
            origin={8,-14})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2
                                                                       annotation (
          Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={-18,-14})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump3(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{62,-4},{44,-24}})));

    equation

      connect(flowConcentrationMeasure.bloodPort_out, bloodPort_out) annotation (
          Line(
          points={{-74.7,0},{-96,0}},
          color={28,108,200},
          thickness=0.5));

      connect(BEox, BEox) annotation (Line(points={{-90,-66},{-90,-66}},
                          color={0,0,127}));
      connect(junction_T.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{6,4.21885e-15},{-12,4.21885e-15},{-12,0},{-51.3,0}},
          color={28,108,200},
          thickness=0.5));
      connect(junction_T.bloodPort_in, bloodPort_in) annotation (Line(
          points={{47.58,-6.66134e-16},{63.85,-6.66134e-16},{63.85,0},{94,0}},
          color={28,108,200},
          thickness=0.5));
      connect(flowConcentrationMeasure.volumeFlow, volumeFlow)
        annotation (Line(points={{-63,14.4},{-63,18},{-90,18}}, color={0,0,127}));
      connect(HCO3_inflow, molarFlowMeasure.q_in) annotation (Line(
          points={{-72,40},{-48,40}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.molarFlowRate, unlimitedSolutePump.soluteFlow)
        annotation (Line(points={{-38,48},{-38,73.2}}, color={0,0,127}));
      connect(junction_T.port_CO2, unlimitedSolutePump.q_out) annotation (Line(
          points={{32.46,1.11022e-15},{32,1.11022e-15},{32,78},{-32,78}},
          color={107,45,134},
          thickness=1));
      connect(o2CO2.ctO2, flowConcentrationMeasure.O2_conc) annotation (Line(points={{-23.8,
              -42},{-52.6,-42},{-52.6,-14.4}},                  color={0,0,127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure.CO2_conc) annotation (Line(
            points={{-23.04,-57},{-63,-57},{-63,-14.4}},          color={0,0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure.BEox_conc) annotation (Line(
            points={{-23.8,-75},{-73.4,-75},{-73.4,-14.4}},           color={0,0,127}));
      connect(flowConcentrationMeasure.BEox_conc, BEox) annotation (Line(points={{-73.4,
              -14.4},{-73.4,-66},{-90,-66}}, color={0,0,127}));
      connect(o2CO2.pH, pH) annotation (Line(points={{59.8,-54.6},{88,-54.6},{
              88,-48},{104,-48}}, color={0,0,127}));
      connect(o2CO2.pCO2, pCO2) annotation (Line(points={{59.8,-47.4},{80,-47.4},
              {80,-36},{102,-36}}, color={0,0,127}));
      connect(o2CO2.pO2, pO2) annotation (Line(points={{59.8,-41.4},{72,-41.4},
              {72,-20},{102,-20}}, color={0,0,127}));
      connect(molarFlowMeasure.q_out, hCO3_inflow.q_out) annotation (Line(
          points={{-28,40},{-16,40}},
          color={107,45,134},
          thickness=1));
      connect(o2CO2.cHCO3, hCO3_inflow.concentration) annotation (Line(points={{59.8,
              -60.6},{74,-60.6},{74,88},{10,88},{10,40},{-4,40}},       color={0,0,127}));
      connect(unlimitedSolutePump1.soluteFlow, unlimitedSolutePump.soluteFlow)
        annotation (Line(points={{-18,57.2},{-18,54},{-38,54},{-38,73.2}}, color={0,
              0,127}));
      connect(unlimitedSolutePump1.q_out, junction_T.port_BEox) annotation (Line(
          points={{-12,62},{23.64,62},{23.64,2.22045e-15}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_in, O2_inflow) annotation (Line(
          points={{60,56},{60,74}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out, o2_inflow.q_out) annotation (Line(
          points={{60,40},{60,34}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.port_O2, unlimitedSolutePump2.q_out) annotation (Line(
          points={{40.02,2.22045e-16},{40.02,21},{43,21},{43,42}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump2.soluteFlow, molarFlowMeasure1.molarFlowRate)
        annotation (Line(points={{47.4,48},{53.6,48}}, color={0,0,127}));
      connect(o2CO2.cdO2, o2_inflow.concentration) annotation (Line(points={{59.8,
              -84},{70,-84},{70,14},{60,14},{60,22}},
                                                   color={0,0,127}));
      connect(CO2_inflow, molarFlowMeasure2.q_in) annotation (Line(
          points={{-34,-14},{-26,-14}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure2.q_out, o2_inflow1.q_out) annotation (Line(
          points={{-10,-14},{2,-14}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump3.q_out, junction_T.port_CO2) annotation (Line(
          points={{44,-14},{32.46,-14},{32.46,0}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure2.molarFlowRate, unlimitedSolutePump3.soluteFlow)
        annotation (Line(points={{-18,-20.4},{-18,-26},{49.4,-26},{49.4,-18}},
            color={0,0,127}));
      connect(o2CO2.cdCO2, o2_inflow1.concentration) annotation (Line(points={{59.8,
              -90},{66,-90},{66,-22},{28,-22},{28,-14},{14,-14}},           color={0,
              0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(
              points={{-88,0},{90,0}},
              color={0,0,0},
              thickness=0.5)}), Diagram(coordinateSystem(preserveAspectRatio=false)));
    end Blood_ISF_Interface_by_integration;

    model ISFBuffer_by_integration
      extends Physiolibrary.Icons.Substance;
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a CO2_inflow annotation (
          Placement(transformation(extent={{-94,-40},{-74,-20}}),
            iconTransformation(extent={{-8,30},{12,50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a O2_inflow annotation (
          Placement(transformation(extent={{0,48},{20,68}}), iconTransformation(
              extent={{40,30},{60,50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3_inflow annotation (
          Placement(transformation(extent={{-92,54},{-72,74}}), iconTransformation(
              extent={{-58,32},{-38,52}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-9,-8},{9,8}},
            rotation=0,
            origin={-53,64})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage o2_inflow(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{66,52},{54,64}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump1(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-92,18},{-78,32}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-86,-80},{-70,-62}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage hCO3_inflow1(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{-12,58},{-24,70}})));

      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=initialCO2concentration*volume_start)
        annotation (Placement(transformation(extent={{-54,6},{-30,44}})));
      Physiolibrary.Chemical.Components.Substance BEox(
          useNormalizedVolume=false, solute_start=initialBEox*volume_start)
        annotation (Placement(transformation(extent={{-46,-90},{-22,-52}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=initialO2concentration*volume_start)
        annotation (Placement(transformation(extent={{56,68},{80,106}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump2(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-12,98},{8,74}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage cO2_inflow(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{-36,-36},{-48,-24}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1
                                                                       annotation (
          Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=0,
            origin={36,58})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2
                                                                       annotation (
          Placement(transformation(
            extent={{-9,-8},{9,8}},
            rotation=0,
            origin={-67,-30})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(extent={{-64,-64},{-48,-78}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(extent={{-74,14},{-54,34}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(extent={{38,92},{54,78}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump3(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-86,-18},{-70,0}})));
      Physiolibrary.Types.RealIO.VolumeInput volume annotation (Placement(
            transformation(extent={{-108,90},{-68,130}}), iconTransformation(
            extent={{-9,-9},{9,9}},
            rotation=0,
            origin={-85,15})));
    /*
  Physiolibrary.Types.Fraction FiO2= 0 "Frattion of O2";
  Physiolibrary.Types.Fraction FiCO2= 0;
  parameter Physiolibrary.Types.Concentration cAlb= 0.22;
  Physiolibrary.Types.Concentration ctHb=0;
  parameter Physiolibrary.Types.Concentration cPi= 1.15;
  Physiolibrary.Types.Concentration cDPG= 0;
  Physiolibrary.Types.Fraction FMetHb= 0.0;
  Physiolibrary.Types.Fraction FCOHb= 0.0;
  Physiolibrary.Types.Fraction FHbF= 0.0;
  parameter Physiolibrary.Types.Temperature Temperature= 310.15;
*/

      Physiolibrary.Types.RealIO.ConcentrationInput cAlb "Conentration of albumin"
        annotation (Placement(transformation(extent={{-14,-36},{-2,-24}}),
            iconTransformation(extent={{-108,-30},{-86,-8}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cPi
        "Concentration of phosphate" annotation (Placement(transformation(extent={{-16,-52},
                {2,-34}}),       iconTransformation(extent={{-108,-58},{-84,-34}})));
      Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
            transformation(extent={{-14,-90},{6,-70}}),  iconTransformation(
              extent={{-110,-88},{-84,-62}})));
      Acidbase.OSA.Measure_pO2fromDissO2 measure_pO2fromDissO2_1
        annotation (Placement(transformation(extent={{98,76},{118,96}})));
      parameter Physiolibrary.Types.Concentration initialCO2concentration=24;
      parameter Physiolibrary.Types.Concentration initialO2concentration= 1.2;
      parameter Physiolibrary.Types.Concentration initialBEox=0;
      parameter Physiolibrary.Types.Volume volume_start=1e-3;

      Acidbase.OSA.plasmaO2CO2_by_integration plasmaO2CO2_by_integration
        annotation (Placement(transformation(extent={{12,-80},{102,24}})));
    initial equation
    //
    //  O2.solute_start=initialO2concentration*volume;
    //  CO2.solute_start=initialCO2concentration*volume;
    //  BEox.solute_start=initialBEox*volume;

    equation

      connect(HCO3_inflow, molarFlowMeasure.q_in) annotation (Line(
          points={{-82,64},{-62,64}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_out, hCO3_inflow1.q_out) annotation (Line(
          points={{-44,64},{-24,64}},
          color={107,45,134},
          thickness=1));
      connect(O2_inflow, molarFlowMeasure1.q_in) annotation (Line(
          points={{10,58},{26,58}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out, o2_inflow.q_out) annotation (Line(
          points={{46,58},{54,58}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.molarFlowRate, unlimitedSolutePump2.soluteFlow)
        annotation (Line(points={{36,66},{36,81.2},{2,81.2}}, color={0,0,127}));
      connect(unlimitedSolutePump1.soluteFlow, molarFlowMeasure.molarFlowRate)
        annotation (Line(points={{-82.2,27.8},{-82.2,47.9},{-53,47.9},{-53,57.6}},
            color={0,0,127}));
      connect(CO2_inflow, molarFlowMeasure2.q_in) annotation (Line(
          points={{-84,-30},{-76,-30}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure2.q_out, cO2_inflow.q_out) annotation (Line(
          points={{-58,-30},{-48,-30}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump.q_out, concentrationMeasure.q_in) annotation (
          Line(
          points={{-70,-71},{-56,-71}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure.q_in, BEox.q_out) annotation (Line(
          points={{-56,-71},{-34,-71}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump1.q_out, concentrationMeasure1.q_in) annotation (
          Line(
          points={{-78,25},{-72,25},{-72,24},{-64,24}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in, CO2.q_out) annotation (Line(
          points={{-64,24},{-54,24},{-54,25},{-42,25}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump2.q_out, concentrationMeasure2.q_in) annotation (
          Line(
          points={{8,86},{28,86},{28,85},{46,85}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in, O2.q_out) annotation (Line(
          points={{46,85},{58,85},{58,87},{68,87}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump3.soluteFlow, molarFlowMeasure2.molarFlowRate)
        annotation (Line(points={{-74.8,-5.4},{-74.8,2},{-96,2},{-96,-48},{-67,-48},
              {-67,-36.4}}, color={0,0,127}));
      connect(unlimitedSolutePump3.q_out, CO2.q_out) annotation (Line(
          points={{-70,-9},{-60,-9},{-60,-8},{-42,-8},{-42,25}},
          color={107,45,134},
          thickness=1));
      connect(O2.solutionVolume, volume) annotation (Line(points={{63.2,94.6},{63.2,
              110},{-88,110}}, color={0,0,127}));
      connect(CO2.solutionVolume, volume) annotation (Line(points={{-46.8,32.6},{-46.8,
              108},{-44,108},{-44,110},{-88,110}}, color={0,0,127}));
      connect(BEox.solutionVolume, volume) annotation (Line(points={{-38.8,-63.4},{-38.8,
              -56},{-102,-56},{-102,88},{-62,88},{-62,110},{-88,110}}, color={0,0,127}));
      connect(unlimitedSolutePump.soluteFlow, molarFlowMeasure.molarFlowRate)
        annotation (Line(points={{-74.8,-67.4},{-74.8,-62},{-100,-62},{-100,48},
              {-53,48},{-53,57.6}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cAlb, cAlb) annotation (Line(points={{7.875,
              -30.1412},{-5.87917,-30.1412},{-5.87917,-30},{-8,-30}},
            color={0,0,127}));
      connect(concentrationMeasure.concentration, plasmaO2CO2_by_integration.BEox)
        annotation (Line(points={{-56,-65.4},{-56,-40},{-18,-40},{-18,-15.7647},
              {9.75,-15.7647}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.ctCO2, concentrationMeasure1.concentration)
        annotation (Line(points={{9.75,-9.64706},{-8,-9.64706},{-8,-10},{-24,
              -10},{-24,0},{-64,0},{-64,16}}, color={0,0,127}));
      connect(concentrationMeasure2.concentration, measure_pO2fromDissO2_1.dissO2)
        annotation (Line(points={{46,90.6},{46,124},{88,124},{88,74},{105.7,74},
              {105.7,79.1}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.ctO2, measure_pO2fromDissO2_1.dissO2)
        annotation (Line(points={{9.75,-3.52941},{-2,-3.52941},{-2,32},{88,32},
              {88,74},{105.7,74},{105.7,79.1}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cdO2, o2_inflow.concentration)
        annotation (Line(points={{104.25,-48.8},{114,-48.8},{114,58},{66,58}},
            color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cdCO2, cO2_inflow.concentration)
        annotation (Line(points={{104.25,-54.9176},{114,-54.9176},{114,-88},{
              -16,-88},{-16,-30},{-36,-30}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cHCO3, hCO3_inflow1.concentration)
        annotation (Line(points={{104.25,-24.9412},{110,-24.9412},{110,42},{0,
              42},{0,64},{-12,64}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cPi, cPi) annotation (Line(points={{7.5,
              -43.9059},{1.25,-43.9059},{1.25,-43},{-7,-43}},     color={0,0,
              127}));
      connect(plasmaO2CO2_by_integration.Temp, Temp) annotation (Line(points={{7.875,
              -57.0588},{-4,-57.0588},{-4,-72},{14,-72},{14,-80},{-4,-80}},
            color={0,0,127}));
      connect(measure_pO2fromDissO2_1.Temp, Temp) annotation (Line(points={{
              110.5,79.1},{110.5,66},{132,66},{132,-80},{-4,-80}}, color={0,0,
              127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -120,-100},{140,140}})),                             Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-120,-100},{
                140,140}})));
    end ISFBuffer_by_integration;

    model ISFBufferTest
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a CO2_inflow annotation (
          Placement(transformation(extent={{-94,-40},{-74,-20}}),
            iconTransformation(extent={{-8,30},{12,50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a O2_inflow annotation (
          Placement(transformation(extent={{0,48},{20,68}}), iconTransformation(
              extent={{40,30},{60,50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3_inflow annotation (
          Placement(transformation(extent={{-92,54},{-72,74}}), iconTransformation(
              extent={{-58,32},{-38,52}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-9,-8},{9,8}},
            rotation=0,
            origin={-53,64})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage o2_inflow(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{66,52},{54,64}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump1(
          useSoluteFlowInput=false)
        annotation (Placement(transformation(extent={{-92,18},{-78,32}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
          useSoluteFlowInput=false)
        annotation (Placement(transformation(extent={{-86,-80},{-70,-62}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage hCO3_inflow1(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{-12,58},{-24,70}})));

      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=initialCO2concentration*volume_start)
        annotation (Placement(transformation(extent={{-54,6},{-30,44}})));
      Physiolibrary.Chemical.Components.Substance BEox(
          useNormalizedVolume=false, solute_start=initialBEox*volume_start)
        annotation (Placement(transformation(extent={{-46,-90},{-22,-52}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=initialO2concentration*volume_start)
        annotation (Placement(transformation(extent={{56,68},{80,106}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump2(
          useSoluteFlowInput=false, SoluteFlow=0)
        annotation (Placement(transformation(extent={{-10,98},{10,74}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage cO2_inflow(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{-36,-36},{-48,-24}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1
                                                                       annotation (
          Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=0,
            origin={36,58})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2
                                                                       annotation (
          Placement(transformation(
            extent={{-9,-8},{9,8}},
            rotation=0,
            origin={-67,-30})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(extent={{-64,-64},{-48,-78}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(extent={{-74,14},{-54,34}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(extent={{38,92},{54,78}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump3(
          useSoluteFlowInput=false)
        annotation (Placement(transformation(extent={{-86,-18},{-70,0}})));
      Physiolibrary.Types.RealIO.VolumeInput volume annotation (Placement(
            transformation(extent={{-108,90},{-68,130}}), iconTransformation(
            extent={{-9,-9},{9,9}},
            rotation=0,
            origin={-85,15})));
    /*
  Physiolibrary.Types.Fraction FiO2= 0 "Frattion of O2";
  Physiolibrary.Types.Fraction FiCO2= 0;
  parameter Physiolibrary.Types.Concentration cAlb= 0.22;
  Physiolibrary.Types.Concentration ctHb=0;
  parameter Physiolibrary.Types.Concentration cPi= 1.15;
  Physiolibrary.Types.Concentration cDPG= 0;
  Physiolibrary.Types.Fraction FMetHb= 0.0;
  Physiolibrary.Types.Fraction FCOHb= 0.0;
  Physiolibrary.Types.Fraction FHbF= 0.0;
  parameter Physiolibrary.Types.Temperature Temperature= 310.15;
*/

      Acidbase.OSA.plasmaO2CO2_by_integration plasmaO2CO2_by_integration
        annotation (Placement(transformation(extent={{8,-92},{94,30}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cAlb "Conentration of albumin"
        annotation (Placement(transformation(extent={{-20,-40},{-8,-28}}),
            iconTransformation(extent={{-108,-30},{-86,-8}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cPi
        "Concentration of phosphate" annotation (Placement(transformation(extent={{-22,-58},
                {-4,-40}}),      iconTransformation(extent={{-108,-58},{-84,-34}})));
      Physiolibrary.Types.RealIO.TemperatureInput Temp annotation (Placement(
            transformation(extent={{-24,-76},{-4,-56}}), iconTransformation(
              extent={{-110,-88},{-84,-62}})));
      Acidbase.OSA.Measure_pO2fromDissO2 measure_pO2fromDissO2_1
        annotation (Placement(transformation(extent={{98,76},{118,96}})));


    initial equation
    //
    //  O2.solute_start=initialO2concentration*volume;
    //  CO2.solute_start=initialCO2concentration*volume;
    //  BEox.solute_start=initialBEox*volume;

    equation

      connect(HCO3_inflow, molarFlowMeasure.q_in) annotation (Line(
          points={{-82,64},{-62,64}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_out, hCO3_inflow1.q_out) annotation (Line(
          points={{-44,64},{-24,64}},
          color={107,45,134},
          thickness=1));
      connect(O2_inflow, molarFlowMeasure1.q_in) annotation (Line(
          points={{10,58},{26,58}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out, o2_inflow.q_out) annotation (Line(
          points={{46,58},{54,58}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump1.soluteFlow, molarFlowMeasure.molarFlowRate)
        annotation (Line(points={{-82.2,27.8},{-82.2,47.9},{-53,47.9},{-53,57.6}},
            color={0,0,127}));
      connect(CO2_inflow, molarFlowMeasure2.q_in) annotation (Line(
          points={{-84,-30},{-76,-30}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure2.q_out, cO2_inflow.q_out) annotation (Line(
          points={{-58,-30},{-48,-30}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump.q_out, concentrationMeasure.q_in) annotation (
          Line(
          points={{-70,-71},{-56,-71}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure.q_in, BEox.q_out) annotation (Line(
          points={{-56,-71},{-34,-71}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump1.q_out, concentrationMeasure1.q_in) annotation (
          Line(
          points={{-78,25},{-72,25},{-72,24},{-64,24}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in, CO2.q_out) annotation (Line(
          points={{-64,24},{-54,24},{-54,25},{-42,25}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump2.q_out, concentrationMeasure2.q_in) annotation (
          Line(
          points={{10,86},{28,86},{28,85},{46,85}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in, O2.q_out) annotation (Line(
          points={{46,85},{58,85},{58,87},{68,87}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump3.soluteFlow, molarFlowMeasure2.molarFlowRate)
        annotation (Line(points={{-74.8,-5.4},{-74.8,2},{-96,2},{-96,-48},{-67,-48},
              {-67,-36.4}}, color={0,0,127}));
      connect(unlimitedSolutePump3.q_out, CO2.q_out) annotation (Line(
          points={{-70,-9},{-60,-9},{-60,-8},{-42,-8},{-42,25}},
          color={107,45,134},
          thickness=1));
      connect(O2.solutionVolume, volume) annotation (Line(points={{63.2,94.6},{63.2,
              110},{-88,110}}, color={0,0,127}));
      connect(CO2.solutionVolume, volume) annotation (Line(points={{-46.8,32.6},{-46.8,
              108},{-44,108},{-44,110},{-88,110}}, color={0,0,127}));
      connect(BEox.solutionVolume, volume) annotation (Line(points={{-38.8,-63.4},{-38.8,
              -56},{-102,-56},{-102,88},{-62,88},{-62,110},{-88,110}}, color={0,0,127}));
      connect(unlimitedSolutePump.soluteFlow, molarFlowMeasure.molarFlowRate)
        annotation (Line(points={{-74.8,-67.4},{-74.8,-62},{-100,-62},{-100,48},
              {-53,48},{-53,57.6}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.Temp, Temp) annotation (Line(points={{4.05833,
              -65.0882},{-1.97083,-65.0882},{-1.97083,-66},{-14,-66}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cPi, cPi) annotation (Line(points={{3.7,
              -49.6588},{-4.65,-49.6588},{-4.65,-49},{-13,-49}},
                                                       color={0,0,127}));
      connect(cAlb, plasmaO2CO2_by_integration.cAlb) annotation (Line(points={{-14,-34},
              {-4,-34},{-4,-33.5118},{4.05833,-33.5118}}, color={0,0,127}));
      connect(concentrationMeasure.concentration, plasmaO2CO2_by_integration.BEox)
        annotation (Line(points={{-56,-65.4},{-56,-44},{-16,-44},{-16,-16.6471},
              {5.85,-16.6471}},
                          color={0,0,127}));
      connect(plasmaO2CO2_by_integration.ctCO2, concentrationMeasure1.concentration)
        annotation (Line(points={{5.85,-9.47059},{-24,-9.47059},{-24,0},{-64,0},{-64,
              16}}, color={0,0,127}));
      connect(concentrationMeasure2.concentration, plasmaO2CO2_by_integration.ctO2)
        annotation (Line(points={{46,90.6},{46,122},{94,122},{94,32},{-8,32},{-8,-2.29412},
              {5.85,-2.29412}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cdO2, o2_inflow.concentration) annotation (
         Line(points={{96.15,-55.4},{116,-55.4},{116,58},{66,58}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cdCO2, cO2_inflow.concentration)
        annotation (Line(points={{96.15,-62.5765},{108,-62.5765},{108,-110},{
              -26,-110},{-26,-30},{-36,-30}},
                                    color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cHCO3, hCO3_inflow1.concentration)
        annotation (Line(points={{96.15,-27.4118},{108,-27.4118},{108,22},{-4,
              22},{-4,64},{-12,64}},
                             color={0,0,127}));
      connect(measure_pO2fromDissO2_1.dissO2, plasmaO2CO2_by_integration.ctO2)
        annotation (Line(points={{105.7,79.1},{105.7,70},{94,70},{94,32},{-8,32},{-8,
              -2.29412},{5.85,-2.29412}}, color={0,0,127}));
      connect(Temp, measure_pO2fromDissO2_1.Temp) annotation (Line(points={{-14,-66},
              {-4,-66},{-4,-92},{118,-92},{118,70},{110.5,70},{110.5,79.1}}, color={
              0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Bitmap(
              extent={{-100,-100},{100,100}},
              imageSource=
                  "",
              fileName="C:/Users/User/Downloads/ConcentrationISF.png")}),
                                                                     Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end ISFBufferTest;

    model TissueHCO3
      extends HendersonHasselbach;
      import Modelica.Math;

    /*  Real pK;
  Real aCO2(final displayUnit="mmol/(l.kPa)");
  Real cdCO2(start=3,             final displayUnit="mmol/l");

  Real pCO2(displayUnit="kPa");

  constant Real MiniliterPerLiter(final displayUnit="ml/l")=1000;


  Library.Interfaces.RealOutput_ cHCO3(final displayUnit="mmol/l")
    "outgoing concentration of HCO3"                                                           annotation (Placement(
        transformation(extent={{20,-70},{60,-30}}), iconTransformation(
        extent={{-20,-20},{20,20}},
        rotation=270,
        origin={80,-120})));
  Library.Interfaces.RealInput_ T(final displayUnit="degC") "outgoing temperature" annotation (Placement(transformation(extent={{70,-26},
            {110,14}}),           iconTransformation(extent={{-10,-10},{10,10}},
        rotation=180,
        origin={90,80})));

  Library.Interfaces.RealInput_ pH "outgoing plasma pH" annotation (Placement(transformation(extent={{-120,50},
            {-80,90}}),           iconTransformation(extent={{-100,70},{-80,90}})));
*/
     Physiolibrary.Types.RealIO.ConcentrationInput tCO2(final displayUnit="mmol/l")
                                        annotation (Placement(transformation(
              extent={{54,-72},{94,-32}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            origin={-90,42})));               //start=45,

       Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2_ = cdCO2
                                              "outgoing plasma pH"
                                                            annotation (Placement(transformation(extent={{-120,
                -38},{-80,2}}),       iconTransformation(extent={{-100,-18},{-80,2}})));
    equation
      /*




  //Henderson-Hasselbalch equation:
  pK = 6.1 + (-0.0026)*(T-37);
  pH = pK + log10(max(1e-15,cHCO3/cdCO2));
  cdCO2 = aCO2*pCO2;
  aCO2 = 0.23 * 10^(-0.0092*(T-37)); //solubility depends on temperature

*/
      //total interstitial CO2 from SimpleCO2Solution
      tCO2 = cHCO3 + cdCO2;

      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={255,170,213},
              fillPattern=FillPattern.Solid), Text(
              extent={{-100,80},{100,-80}},
              lineColor={0,0,255},
              textString="plasma 
acid-base")}),                              Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
    end TissueHCO3;

    partial model HendersonHasselbach
      import Modelica.Math;

      Real pK= 6.1 + (-0.0026)*(T-310.15);
      Real aCO2(final displayUnit="mmol/(l.kPa)")= 0.00023 * 10^(-0.0092*(T-310.15)); //solubility depends on temperature
       Physiolibrary.Types.Concentration cdCO2(displayUnit="mmol/l")= aCO2*pCO2;
    // start=3,
    //  Physiolibrary.Types.Pressure pCO2(start=6000,            displayUnit="kPa");
    //  start=6,
     // constant Real MiniliterPerLiter(final displayUnit="ml/l")=1000;

       Physiolibrary.Types.RealIO.ConcentrationInput cHCO3(
                                            displayUnit="mmol/l")
      "outgoing concentration of HCO3"                                                             annotation (Placement(
            transformation(extent={{20,-70},{60,-30}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={80,-120})));
       Physiolibrary.Types.RealIO.TemperatureInput T(      displayUnit="degC")
      "outgoing temperature"                                                              annotation (Placement(transformation(extent={{70,-26},
                {110,14}}),           iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,80})));        /*start=37,*/

       Physiolibrary.Types.RealIO.pHOutput pH(start = 7.4)
                                                          "outgoing plasma pH"
                                                            annotation (Placement(transformation(extent={{-120,50},
                {-80,90}}),           iconTransformation(extent={{-100,70},{-80,90}})));
     Physiolibrary.Types.RealIO.PressureOutput pCO2(start=6000,       displayUnit="mmHg")
      "alveolar partial pressure of pCO2"
                                        annotation (Placement(transformation(
              extent={{20,-70},{60,-30}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={40,-120})));               /*start=40,*/
    equation
     // pH = if ( cdCO2 > 1e-8) then  pK + log10(max(1e-15,cHCO3/cdCO2)) else pK;
      cdCO2 * 10^(pH-pK) = cHCO3;

      annotation ( Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
    end HendersonHasselbach;

    model BloodPhBase
      import Modelica.Math;

      Physiolibrary.Types.Concentration betaX "buffer value of blood";
                                             //(unit = "mEq/l")
      Physiolibrary.Types.Concentration betaP "buffer value of plasma";
                                             //(unit = "mEq/l")

      Physiolibrary.Types.Concentration _cTH
      "total concentration of tiratable hydrogen ions";
                                           //( displayUnit="mEq/l")
      Physiolibrary.Types.Concentration _BE "base excess";
                                          //( displayUnit="mEq/l")

      Physiolibrary.Types.RealIO.ConcentrationInput _BEox
      "base excess in fully oxygenated blood"                   annotation (Placement(transformation(extent={{-26,58},
                {14,98}}),            iconTransformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-60,100})));

                                            //( displayUnit="mEq/l")
      Physiolibrary.Types.Concentration _cTHox
      "total concentration of tiratable hydrogen ions in fully oxygenated blood";
                                             //( displayUnit="mEq/l")

       Physiolibrary.Types.RealIO.pHOutput pH( start=7.4) "plasma pH"    annotation (Placement(transformation(
              extent={{30,-98},{70,-58}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-20,-120})));
      Physiolibrary.Types.RealIO.pHOutput pH_ery
      "intracellular erytrocytes pH"                                              annotation (Placement(
            transformation(extent={{-14,-98},{26,-58}}),iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={20,-120})));

      Physiolibrary.Types.RealIO.ConcentrationInput cHCO3(
                                           displayUnit="mmol/l")
      "concentration of plasma HCO3 ions (default=24.5mmol/l)"
                                       annotation (Placement(transformation(extent={{50,18},
                {90,58}}),            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,80})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
      "concentration of total haemoglobin in whole blood (9.3)"
                                       annotation (Placement(transformation(extent={{50,58},
                {90,98}}),            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,40})));
      parameter Physiolibrary.Types.Concentration  cHb(displayUnit="mmol/l")=43
      "an empirical parameter accounting for erythrocyte plasma distributions = concentration of Hb inside erythrocytes divided by (1-0.57)";

      Physiolibrary.Types.RealIO.FractionInput sO2 "oxygen saturation"
                                       annotation (Placement(transformation(extent={{-100,60},
                {-60,100}}),          iconTransformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={60,110})));

      Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                           displayUnit="mmol/l")
      "concentration of total plasma albumins(dofault=0.65mmol/l)"                   annotation (Placement(transformation(extent={{50,-26},
                {90,14}}),            iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,0})));

      Physiolibrary.Types.RealIO.MassConcentrationInput ctGlb(
                                           displayUnit="g/l")
      "concentration of total plasma globulins"                                      annotation (Placement(transformation(extent={{52,-60},
                {92,-20}}),           iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,-40})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctPO4(
                                           displayUnit="mmol/l")
      "concentration of total inorganic phosphate in plasma"                         annotation (Placement(transformation(extent={{54,-92},
                {94,-52}}),           iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,-80})));

    equation
      //Van Slyke equation:  - T=37
      _cTH = -(1-ctHb/cHb)*((cHCO3-24.5)+betaX*(pH-7.4));
    //  _cTH = -(1-(1-0.57)*(0.44))*((cHCO3-24.5)+betaX*(pH-7.4));

      betaX = 2.3*ctHb + betaP;
      betaP =  8*ctAlb + 0.075*ctGlb + 0.309*ctPO4;

    //  _betaX = 0.11 * plasmaProteinConc(displayUnit="g/l"); //mmol/l

    //Haldane effect:
      _cTH = homotopy(_cTHox - 0.3 * (1-sO2),_cTHox);

    //base excess
      _BEox = - _cTHox;
      _BE = - _cTH;

      //erythrocytes:
      pH_ery = homotopy(7.19 + 0.77*(pH-7.4) + 0.035*(1-sO2),7.19 + 0.77*(pH-7.4));

      annotation (
        preferredView = text,
        Documentation(info="<html>
<pre>Blood pH calculation by
<i><b>Van Slyke equation</b></i>,
<i><b>Haldame</b></i> effect
and plasma-<i><b>erythrocytes</b></i> acidity distribution.</pre>
</html>",
     revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>dec 2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),
        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                100,100}}), graphics={
            Text(
              extent={{-72,-56},{76,-92}},
              lineColor={0,0,255},
              textString="%name"),
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-96,-62},{98,-94}},
              lineColor={0,0,255},
              textString="%name")}));
    end BloodPhBase;

  model BloodO2Base
  //start values is for tissues veins blood

    parameter Boolean isSaturated = false;

    Physiolibrary.Types.Concentration tO2(start=0.75*8.14);
    Real aO2;
  //  Real pO2(start=5.33,           unit="kPa");
    // start=13,
    Physiolibrary.Types.Fraction sO2CO(start=0.75);
    Physiolibrary.Types.Pressure pO2CO;
    Physiolibrary.Types.Concentration cO2Hb(start=6);
    //
    Physiolibrary.Types.Fraction sCO;

    Physiolibrary.Types.Concentration ceHb;
    Real a(start=0.5);
    Real k;
    Real x;
    Real y;
    Real h;

  /*  Real ex;
  Real ey;
  Real ey0;
  Real tnh;
*/
    Physiolibrary.Types.Fraction FCOHb(start=0);

  //  Real pCO;
  //  Real pCO2;
    //(start=5);

    Physiolibrary.Types.RealIO.FractionOutput sO2
                                        annotation (Placement(
          transformation(extent={{-40,-110},{0,-70}}),iconTransformation(
          extent={{-20,-20},{20,20}},
          rotation=270,
          origin={0,-120})));
    Physiolibrary.Types.RealIO.pHInput pH
                                    annotation (Placement(transformation(extent={{-120,70},
              {-80,110}}),          iconTransformation(extent={{-100,90},{
              -80,110}})));
    Physiolibrary.Types.RealIO.ConcentrationInput ctHb
                                     annotation (Placement(transformation(extent={{60,60},
              {100,100}}),          iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={90,100})));

    Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)  annotation (Placement(transformation(extent={{-120,
              -20},{-80,20}}),      iconTransformation(extent={{-100,10},{
              -80,30}})));
    Physiolibrary.Types.RealIO.PressureInput pCO
                                     annotation (Placement(transformation(extent={{60,-100},
              {100,-60}}),          iconTransformation(extent={{-10,-10},{
              10,10}},
          rotation=180,
          origin={90,-60})));
    Physiolibrary.Types.RealIO.PressureInput pCO2
                                     annotation (Placement(transformation(extent={{-120,20},
              {-80,60}}),           iconTransformation(extent={{-100,50},{-80,70}})));
    Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                     annotation (Placement(transformation(extent={{60,20},
              {100,60}}),           iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={90,60})));
    Physiolibrary.Types.RealIO.FractionInput FMetHb
                                     annotation (Placement(transformation(extent={{60,-20},
              {100,20}}),           iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={90,20})));

    Physiolibrary.Types.RealIO.FractionInput FHbF
                                     annotation (Placement(transformation(extent={{60,-60},
              {100,-20}}),          iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={90,-20})));

  //  Real mlTOmmol_O2(unit="mMol/ml") = 8.18/0.182
  //    "conversion constant for oxygen mass from ml to mMol";

   // Real mlTOmmol_O2(unit="mMol/ml") = 1/(740*2*16/1000)
   //   "conversion constant for oxygen mass from ml to mMol";
                                                     //8.18 / 0.182
                                                     //molar mass = 2*16 g/mol; density = 740 ml/g

   // constant Real MiniliterPerLiter(final unit="ml/l")=1000;

    Physiolibrary.Types.RealIO.PressureOutput pO2(start=5320)
                                        annotation (Placement(
          transformation(extent={{0,-110},{40,-70}}), iconTransformation(
          extent={{-20,-20},{20,20}},
          rotation=270,
          origin={40,-120})));

    Physiolibrary.Types.Concentration cdO2;
  /*
  Real aa;
  Real xx;
  Real yy;
  Real ssO2CO(start=0.96);
*/

   parameter Physiolibrary.Types.Temperature T0 = 273.15+37
      "normal temperature";
   parameter Physiolibrary.Types.pH pH0 = 7.4 "normal arterial pH";
   parameter Physiolibrary.Types.Pressure pCO20 = 5330
      "normal arterial CO2 partial pressure";
   parameter Physiolibrary.Types.Concentration cDPG0 = 5
      "normal DPG,used by a";
   parameter Real dadcDPG0 = 0.3 "used by a";
   parameter Real dadcDPGxHbF = -0.1 "or perhabs -0.125";
   parameter Real dadpH = -0.88 "used by a";
   parameter Real dadlnpCO2 = 0.048 "used by a";
   parameter Real dadxMetHb = -0.7 "used by a";
   parameter Real dadxHbF = -0.25 "used by a";

   //constant Real PaTOmmHg = 1/133;

   Physiolibrary.Types.RealIO.ConcentrationInput tO2_input annotation (Placement(
          transformation(extent={{-100,-30},{-60,10}}), iconTransformation(
          extent={{-20,-20},{20,20}},
          rotation=270,
          origin={0,100})));
    Physiolibrary.Types.RealIO.ConcentrationOutput dO2 = cdO2
                                        annotation (Placement(
          transformation(extent={{40,-110},{80,-70}}),iconTransformation(
          extent={{-20,-20},{20,20}},
          rotation=270,
          origin={80,-120})));
  equation
    tO2 = tO2_input;
  //   PO2 = PaTOmmHg*1000 * pO2;

  //  pCOmmHg = PaTOmmHg*1000 * pCO;
  //  pCO2mmHg = PaTOmmHg*1000 * pCO2;

  //oxygen:
    ceHb = ctHb * (1-FCOHb-FMetHb); //effective haemoglobin

    assert(tO2 <= ceHb*(1.06), "Model does not support this high level of oxygen in blood. Maximum of oxygen concentration should be connected with efective hemoglobin concentration!");
      //pO2,pCO,pCO2 .. Pa
    //TODO: check units of solubility
    aO2 = exp(log(0.0105)+(-0.0115*(T-T0))+0.5*0.00042*(T-T0)^2)/1000; //solubility
    cdO2 = aO2*pO2;
  /*  if (isSaturated) then
    cdO2 = homotopy( tO2 - sO2*ceHb, tO2 - 0.9999*ceHb);
  else
    sO2 = homotopy( (tO2-cdO2)/ceHb,  tO2/ceHb);  // ctO2 = aO2*pO2 + ceHb*sO2;  nazaciatok postaci veskery kyslik mat iba na hemoglobine a potom pridat uz len to zrnko rozpusteneho..
  end if; */
   //TODO: why not sO2 = homotopy( (tO2-cdO2)/ceHb,  tO2/ceHb);
    tO2 = aO2*pO2 + ceHb*sO2;
  //  cO2Hb = tO2 - cdO2;
    sO2 = cO2Hb/ceHb;
    //TODO: check this: a=-0.88*(pH-7.4)+0.048*log(pCO2/5.33)-0.7*FMetHb+(0.3-0.25*FHbF)*cDPG/(5-1);
    //TANH
    a=dadpH*(pH-pH0)+dadlnpCO2*log(max(1e-15+1e-22*pCO2,pCO2/pCO20)) +dadxMetHb*FMetHb+(dadcDPG0 + dadcDPGxHbF*FHbF)*(cDPG/cDPG0 - 1); //log(pCO2/5330)

    //orginal:
    x=log(pO2CO/7000) - a - 0.055*(T-T0); //namiesto:  x=log(pO2CO/7) - a - 0.055*(T-37);
    y-1.8747=x+h*tanh(k*x);
    k=0.5342857;
    h=3.5 + a;
    y=log(sO2CO/(1-sO2CO));

    //simplification:
  /*  ey/ey0=ex*exp((3.5 + a)*tnh);  //TANH:  y-log(0.867/(1-0.867))=x+(3.5 + a)*tanh(0.5342857*x);
  ey0=0.867/(1-0.867);  //y0=log(0.867/(1-0.867)); //1.8747
  tnh = (ex^(2*k) - 1) / (ex^(2*k) + 1);  // = tanh(k*x)
  ex=max(1e-15*(1+1e-6*pO2CO),(pO2CO/7.000) / exp(a + 0.055*(T-37)));  // = exp(x); x=log(max(1e-15*(1+1e-6*pO2CO),pO2CO/7000)) - a - 0.055*(T_degC-37);
  k=0.5342857;
  ey=sO2CO/(1-sO2CO); // = exp(y);  y=log(max(1e-15*(1+1e-6*sO2CO/(1-sO2CO)),sO2CO/(1-sO2CO)));
  */
      /************ O2 ********************/

    /************ CO ********************/
    //Haldane:
   /* if (pCOmmHg<1e-10) then
    sCO = 0;
    pO2CO = pO2;
    sO2CO = sO2;
    FCOHb = 0;/*
  else*/
   /*   pCO = sCO*pO2CO/ 218*sO2CO;
    pO2CO = pO2 + 218*pCO;
    sO2CO = (cO2Hb + ctHb*FCOHb)/(ctHb*(1-FMetHb));
    sCO = ctHb*FCOHb/(ctHb*(1-FMetHb));*/

      {pCO,FCOHb,pO2CO,sO2CO}=homotopy({sCO*pO2CO/ 218*sO2CO,sCO*(1-FMetHb),pO2 + 218*pCO,(cO2Hb + ctHb*FCOHb)/(ctHb*(1-FMetHb))},
      {0,0,pO2,sO2});
  //  end if;

  /*  ceHb = ctHb * (1-FCOHb-FMetHb); //effective haemoglobin
  aO2 = exp(log(0.0105)+(-0.0115*(T-37))+0.5*0.00042*(T-37)^2); //solubility
  tO2 = aO2*pO2 + ceHb*sO2;
  //Haldane:
  sCO*pO2CO = 218*pCO*sO2CO;
  pO2CO = pO2 + 218*pCO;
  //saturation definitions: "result: sO2CO = (sO2*(ceHb/ctHb)+FCOHb)/(1-FMetHb);"
  sO2 = cO2Hb/ceHb;
  sO2CO = (cO2Hb + ctHb*FCOHb)/(ctHb*(1-FMetHb));
  sCO = ctHb*FCOHb/(ctHb*(1-FMetHb));
  //TANH
//  a=-0.88*(pH-7.4)+0.048*log(pCO2/5.33)-0.7*FMetHb+(0.3-0.25*FHbF)*cDPG/(5-1); //Bohr coefficient: -der(log10(pO2),pH)=0.88/ln(10)=0.38, -der(ln(pO2),pH)=0.88
//  x=log(pO2CO/7); //namiesto:  x=log(pO2CO/7) - a - 0.055*(T-37);
  y-y0=x+h*tanh(k*x);
  y0=log(0.867/(1-0.867)); //1.8747

  k=0.5342857;
  h=3.5 + a;
//  y=log(sO2CO/(1-sO2CO));

//corrected:
  a=-0.88*(pH-7.4)+0.048*log(max(1e-15+1e-24*pCO2,pCO2/5.33))-0.7*FMetHb+(0.3-0.1*FHbF)*(cDPG/5 - 1);
  x=log(max(1e-15+1e-24*pO2CO,pO2CO/7)) - a - 0.055*(T-37);
  y=log(max(1e-15+1e-24*sO2CO/(1-sO2CO),sO2CO/(1-sO2CO)));

*/

  //oxygen: working well:
    //TANH
  //  a=-0.88*(pH-7.4)+0.048*log(max(1e-15+1e-19*pCO2,pCO2/5.33))-0.7*FMetHb+(0.3-0.25*FHbF)*cDPG/(5-1); //Bohr coefficient: -der(log10(pO2),pH)=0.88/ln(10)=0.38, -der(ln(pO2),pH)=0.88
  //  x=log(pO2CO/7);
  //  x=log(max(1e-15+1e-19*pO2CO,pO2CO/7)) - a - 0.055*(T-37); //namiesto:  x=log(pO2CO/7) - a - 0.055*(T-37);
  //  y=log(max(1e-15+1e-19*sO2CO/(1-sO2CO),sO2CO/(1-sO2CO)));

    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
              -100},{100,100}}), graphics={Rectangle(
            extent={{-100,100},{100,-100}},
            lineColor={0,0,255},
            fillColor={215,215,215},
            fillPattern=FillPattern.Solid), Text(
            extent={{-74,-32},{74,-64}},
            lineColor={0,0,255},
            textString="%name")}));
  end BloodO2Base;

    model BloodCO2Base
      extends Physiomodel.Gases.CO2.HendersonHasselbach;

      import Modelica.Math;

      Physiolibrary.Types.Concentration tCO2_P(start=24, displayUnit="mmol/l");
      //start=24,

      Real pK_ery;
      Physiolibrary.Types.GasSolubility aCO2_ery( displayUnit="mmol/l/mmHg");
      Physiolibrary.Types.Concentration tCO2_ery( displayUnit="mmol/l");

       Physiolibrary.Types.Concentration tCO2( displayUnit="mmol/l");

    //  constant Real MiniliterPerLiter(final displayUnit="ml/l")=1000;

       Physiolibrary.Types.RealIO.pHInput pH_ery
      "outgoing intracellular erytrocytes pH"
                                      annotation (Placement(transformation(extent={{-120,10},
                {-80,50}}),           iconTransformation(extent={{-100,30},{-80,50}})));
       Physiolibrary.Types.RealIO.FractionInput Hct
      "outgoing hematocrit (erytrocytes volume/blood volume)"
                                       annotation (Placement(transformation(extent={{60,60},
                {100,100}}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,40})));
       Physiolibrary.Types.RealIO.FractionInput sO2
      "outgoing oxygen saturation"     annotation (Placement(transformation(extent={{60,20},
                {100,60}}),           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,0})));


     Physiolibrary.Types.RealIO.ConcentrationInput tCO2_input annotation (Placement(
            transformation(extent={{-100,-30},{-60,10}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,100})));
      Physiolibrary.Types.RealIO.ConcentrationOutput dCO2=cdCO2
                                          annotation (Placement(
            transformation(extent={{40,-110},{80,-70}}),iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,-120})));
    equation
      //total plasma CO2 from SimpleCO2Solution
      tCO2_P = cHCO3 + cdCO2;

      //erythrocytes:
      pK_ery = 6.125 - log10(1+10^(pH_ery-7.84-0.06*sO2));
      tCO2_ery=aCO2_ery*pCO2*(1+10^(pH_ery-pK_ery));
      aCO2_ery=0.000195; //solubility 0.23 (mmol/l)/kPa at 25degC

      //plasma+erythrocyte
      tCO2 = tCO2_ery*Hct + tCO2_P*(1-Hct);
      tCO2 = tCO2_input;
      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid), Text(
              extent={{-74,-26},{74,-58}},
              lineColor={0,0,255},
              textString="%name")}),        Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
    end BloodCO2Base;

    model Alveolocapillary2Unit
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-98,-32},
                {-86,-20}}),                                                                                                    iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut CO2_outflow(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={70,64})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump O2_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-30,64})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-76,64},{-56,84}})));

      Acidbase.OSA.AlvEq alvEq
        annotation (Placement(transformation(extent={{-40,-92},{66,-16}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-15)
        annotation (Placement(transformation(extent={{2,86},{18,98}})));
      Physiolibrary.Chemical.Components.Substance BufferCO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{44,60},{52,68}})));
      Physiolibrary.Chemical.Components.Substance BufferO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{-14,60},{-4,68}})));
      Junction_T junction_T(
        useFlow_input=false,
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true)
        annotation (Placement(transformation(extent={{12,64},{34,84}})));
    equation

      connect(alvEq.VO2, VO2) annotation (Line(points={{63.2348,-51.625},{59.68,
              -51.625},{59.68,-54},{96,-54}},
                                   color={0,0,127}));
      connect(VO2, VO2)
        annotation (Line(points={{96,-54},{96,-54}},   color={0,0,127}));
      connect(bloodPort_in, flowConcentrationMeasure.bloodPort_in) annotation (
          Line(
          points={{-96,74},{-75,74}},
          color={28,108,200},
          thickness=0.5));
      connect(alvEq.Q, flowConcentrationMeasure.volumeFlow) annotation (Line(
            points={{-39.0783,-39.75},{-39.0783,-42},{-54,-42},{-54,92},{-66,92},
              {-66,86}},
            color={0,0,127}));
      connect(flowConcentrationMeasure.O2_conc, alvEq.CvO2) annotation (Line(
            points={{-74,62},{-74,-45.45},{-39.0783,-45.45}},
            color={0,0,127}));
      connect(alvEq.CvCO2, flowConcentrationMeasure.CO2_conc) annotation (Line(
            points={{-39.0783,-48.3},{-66,-48.3},{-66,62}},
            color={0,0,127}));
      connect(alvEq.BEox, flowConcentrationMeasure.BEox_conc) annotation (Line(
            points={{-40,-30.25},{-58,-30.25},{-58,62}},
            color={0,0,127}));
      connect(O2_inflow.q_out, BufferO2.q_out) annotation (Line(
          points={{-20,64},{-9,64}},
          color={107,45,134},
          thickness=1));
      connect(CO2_outflow.q_in, BufferCO2.q_out) annotation (Line(
          points={{60,64},{48,64}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.solutionVolume, nearToZeroVolume.y)
        annotation (Line(points={{46.4,65.6},{46.4,92},{20,92}},
                                                            color={0,0,127}));
      connect(BufferO2.solutionVolume, nearToZeroVolume.y) annotation (Line(points={{-11,
              65.6},{-11,92},{20,92}},                  color={0,0,127}));
      connect(O2_inflow.soluteFlow, VO2) annotation (Line(points={{-26,60},{-26,
              54},{68,54},{68,-54},{96,-54}},
                                           color={0,0,127}));
      connect(CO2_outflow.soluteFlow, VCO2) annotation (Line(points={{74,60},{
              74,-72},{94,-72}},          color={0,0,127}));
      connect(alvEq.VCO2, VCO2) annotation (Line(points={{63.2348,-55.9},{74,
              -55.9},{74,-72},{94,-72}},  color={0,0,127}));
      connect(VAi, alvEq.VAi) annotation (Line(points={{-92,-26},{-92,-38},{
              -39.0783,-38},{-39.0783,-36.9}},  color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, junction_T.bloodPort_in)
        annotation (Line(
          points={{-57,74},{12.22,74}},
          color={28,108,200},
          thickness=0.5));
      connect(BufferO2.q_out, junction_T.port_O2) annotation (Line(
          points={{-9,64},{16.18,64},{16.18,74}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.q_out, junction_T.port_CO2) annotation (Line(
          points={{48,64},{20.14,64},{20.14,74}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.bloodPort_out, bloodPort_out) annotation (Line(
          points={{34,74},{96,74}},
          color={28,108,200},
          thickness=0.5));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end Alveolocapillary2Unit;

    model AlveolocapillaryUnit
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-98,-32},
                {-86,-20}}),                                                                                                    iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut CO2_outflow(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={70,64})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump O2_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-30,64})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-76,64},{-56,84}})));

      Acidbase.OSA.AlvEq alvEq
        annotation (Placement(transformation(extent={{-46,-98},{66,-16}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-15)
        annotation (Placement(transformation(extent={{2,86},{18,98}})));
      Physiolibrary.Chemical.Components.Substance BufferCO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{44,60},{52,68}})));
      Physiolibrary.Chemical.Components.Substance BufferO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{-14,60},{-4,68}})));
      Junction_T junction_T(
        useFlow_input=false,
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true)
        annotation (Placement(transformation(extent={{12,64},{34,84}})));
    equation

      connect(alvEq.VO2, VO2) annotation (Line(points={{63.0783,-54.4375},{
              59.68,-54.4375},{59.68,-54},{96,-54}},
                                   color={0,0,127}));
      connect(VO2, VO2)
        annotation (Line(points={{96,-54},{96,-54}},   color={0,0,127}));
      connect(bloodPort_in, flowConcentrationMeasure.bloodPort_in) annotation (
          Line(
          points={{-96,74},{-75,74}},
          color={28,108,200},
          thickness=0.5));
      connect(alvEq.Q, flowConcentrationMeasure.volumeFlow) annotation (Line(
            points={{-45.0261,-41.625},{-45.0261,-42},{-54,-42},{-54,92},{-66,
              92},{-66,86}},
            color={0,0,127}));
      connect(flowConcentrationMeasure.O2_conc, alvEq.CvO2) annotation (Line(
            points={{-74,62},{-74,-47.775},{-45.0261,-47.775}},
            color={0,0,127}));
      connect(alvEq.CvCO2, flowConcentrationMeasure.CO2_conc) annotation (Line(
            points={{-45.0261,-50.85},{-66,-50.85},{-66,62}},
            color={0,0,127}));
      connect(alvEq.BEox, flowConcentrationMeasure.BEox_conc) annotation (Line(
            points={{-46,-31.375},{-58,-31.375},{-58,62}},
            color={0,0,127}));
      connect(O2_inflow.q_out, BufferO2.q_out) annotation (Line(
          points={{-20,64},{-9,64}},
          color={107,45,134},
          thickness=1));
      connect(CO2_outflow.q_in, BufferCO2.q_out) annotation (Line(
          points={{60,64},{48,64}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.solutionVolume, nearToZeroVolume.y)
        annotation (Line(points={{46.4,65.6},{46.4,92},{20,92}},
                                                            color={0,0,127}));
      connect(BufferO2.solutionVolume, nearToZeroVolume.y) annotation (Line(points={{-11,
              65.6},{-11,92},{20,92}},                  color={0,0,127}));
      connect(O2_inflow.soluteFlow, VO2) annotation (Line(points={{-26,60},{-26,
              54},{68,54},{68,-54},{96,-54}},
                                           color={0,0,127}));
      connect(CO2_outflow.soluteFlow, VCO2) annotation (Line(points={{74,60},{
              74,-72},{94,-72}},          color={0,0,127}));
      connect(alvEq.VCO2, VCO2) annotation (Line(points={{63.0783,-59.05},{74,
              -59.05},{74,-72},{94,-72}}, color={0,0,127}));
      connect(VAi, alvEq.VAi) annotation (Line(points={{-92,-26},{-92,-38},{
              -45.0261,-38},{-45.0261,-38.55}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, junction_T.bloodPort_in)
        annotation (Line(
          points={{-57,74},{12.22,74}},
          color={28,108,200},
          thickness=0.5));
      connect(BufferO2.q_out, junction_T.port_O2) annotation (Line(
          points={{-9,64},{16.18,64},{16.18,74}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.q_out, junction_T.port_CO2) annotation (Line(
          points={{48,64},{20.14,64},{20.14,74}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.bloodPort_out, bloodPort_out) annotation (Line(
          points={{34,74},{96,74}},
          color={28,108,200},
          thickness=0.5));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end AlveolocapillaryUnit;

    model AlveolocapillaryUnit__
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-98,-32},
                {-86,-20}}),                                                                                                    iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));

      Acidbase.OSA.AlvEq alvEq
        annotation (Placement(transformation(extent={{-58,-98},{54,-16}})));
      inner Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-68,74},{-48,94}})));
    equation
      alvEq.BEox=actualStream(bloodPort_in.conc[3]);
      alvEq.CvO2=actualStream(bloodPort_in.conc[1]);
      alvEq.CvCO2=actualStream(bloodPort_in.conc[2]);
      alvEq.Q=bloodPort_in.bloodFlow;
      bloodPort_in.bloodFlow+bloodPort_out.bloodFlow=0;
      bloodPort_in.pressure=bloodPort_out.pressure;
      actualStream(bloodPort_out.conc[1])=alvEq.ctO2;
      actualStream(bloodPort_out.conc[2])=alvEq.ctCO2;
      actualStream(bloodPort_out.conc[3])=alvEq.BEox;

      //přidané rovnice - stále chybí 1 rovnice
      bloodPort_in.numberOfSubstances=bloodPort_out.numberOfSubstances;
      bloodPort_in.numberOfSubstances=3;
      actualStream(bloodPort_in.ions)=actualStream(bloodPort_out.ions);
      size(bloodPort_in.ions,1)=size(bloodPort_out.ions,1);

      connect(alvEq.VO2, VO2) annotation (Line(points={{51.0783,-54.4375},{
              59.68,-54.4375},{59.68,-54},{96,-54}},
                                   color={0,0,127}));
      connect(VO2, VO2)
        annotation (Line(points={{96,-54},{96,-54}},   color={0,0,127}));
      connect(alvEq.VCO2, VCO2) annotation (Line(points={{51.0783,-59.05},{74,
              -59.05},{74,-72},{94,-72}}, color={0,0,127}));
      connect(VAi, alvEq.VAi) annotation (Line(points={{-92,-26},{-92,-38},{
              -57.0261,-38},{-57.0261,-38.55}}, color={0,0,127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end AlveolocapillaryUnit__;

    model AlveolocapillaryUnit_pokus
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-98,-32},
                {-86,-20}}),                                                                                                    iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));

      Acidbase.OSA.AlvEq_dummy alvEq
        annotation (Placement(transformation(extent={{-58,-72},{56,32}})));
    equation
      alvEq.BEox=actualStream(bloodPort_in.conc[3]);
      alvEq.CvO2=actualStream(bloodPort_in.conc[1]);
      alvEq.CvCO2=actualStream(bloodPort_in.conc[2]);
      alvEq.Q=bloodPort_in.bloodFlow;
      bloodPort_in.bloodFlow+bloodPort_out.bloodFlow=0;
      bloodPort_in.pressure=bloodPort_out.pressure;
      actualStream(bloodPort_out.conc[1])=alvEq.ctO2;
      actualStream(bloodPort_out.conc[2])=alvEq.ctCO2;
      actualStream(bloodPort_out.conc[3])=alvEq.BEox;

      bloodPort_in.numberOfSubstances=bloodPort_out.numberOfSubstances;
      bloodPort_in.numberOfSubstances=3;

      //tady chci napojit ty ionty - nejsem si jistý jestli to takhle jde
      actualStream(bloodPort_in.ions)=actualStream(bloodPort_out.ions);
      size(bloodPort_in.ions,1)=size(bloodPort_out.ions,1);
      //stále chybí 1 rovnice

      connect(VO2, VO2)
        annotation (Line(points={{96,-54},{96,-54}},   color={0,0,127}));
      connect(VO2, alvEq.VO2) annotation (Line(points={{96,-54},{86,-54},{86,
              -56},{80,-56},{80,-16.75},{53.0261,-16.75}},
                                                  color={0,0,127}));
      connect(VCO2, alvEq.VCO2) annotation (Line(points={{94,-72},{70,-72},{70,
              -22.6},{53.0261,-22.6}},
                                color={0,0,127}));
      connect(VAi, alvEq.VAi) annotation (Line(points={{-92,-26},{-78,-26},{-78,3.4},
              {-57.0087,3.4}}, color={0,0,127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end AlveolocapillaryUnit_pokus;

    model AlveolocapillaryUnit_pokus1
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-98,-32},
                {-86,-20}}),                                                                                                    iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));

      Acidbase.OSA.AlvEq_dummy alvEq
        annotation (Placement(transformation(extent={{-58,-72},{56,32}})));
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-96,62},{-66,90}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{56,62},{82,90}})));
    equation
      alvEq.BEox=bloodPort_in_Extension.BEox.conc;
      alvEq.CvO2=bloodPort_in_Extension.O2.conc;
      alvEq.CvCO2=bloodPort_in_Extension.CO2.conc;
      alvEq.Q=bloodPort_in_Extension.bloodFlow.q;
      //bloodPort_in_Extension.bloodFlow.q+bloodPort_out_Extension.bloodFlow.q=0;
      //bloodPort_in_Extension.bloodFlowpressure=bloodPort_out_ExtensionbloodFlow.pressure;
      bloodPort_out_Extension.O2.conc=alvEq.ctO2;
      bloodPort_out_Extension.CO2.conc=alvEq.ctCO2;
      //bloodPort_out_Extension.BEox.conc=alvEq.BEox;

      //bloodPort_in_Extension.BEox.q+bloodPort_out_Extension.BEox.q=0;

      //bloodPort_in.numberOfSubstances=bloodPort_out_Extension.numberOfSubstances;
      //bloodPort_in.numberOfSubstances=3;

      //tady chci napojit ty ionty - nejsem si jistý jestli to takhle jde
      //actualStream(bloodPort_in_Extension.ions)=actualStream(bloodPort_out_Extension.ions);
      //size(bloodPort_in_Extension.ions,1)=size(bloodPort_out_Extension.ions,1);
      //stále chybí 1 rovnice

      connect(VO2, VO2)
        annotation (Line(points={{96,-54},{96,-54}},   color={0,0,127}));
      connect(VO2, alvEq.VO2) annotation (Line(points={{96,-54},{86,-54},{86,
              -56},{80,-56},{80,-16.75},{53.0261,-16.75}},
                                                  color={0,0,127}));
      connect(VCO2, alvEq.VCO2) annotation (Line(points={{94,-72},{70,-72},{70,
              -22.6},{53.0261,-22.6}},
                                color={0,0,127}));
      connect(VAi, alvEq.VAi) annotation (Line(points={{-92,-26},{-78,-26},{-78,3.4},
              {-57.0087,3.4}}, color={0,0,127}));
      connect(bloodPort_in_Extension.ions, bloodPort_out_Extension.ions)
        annotation (Line(
          points={{-66,62},{56,62}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.bloodFlow, bloodPort_out_Extension.bloodFlow)
        annotation (Line(
          points={{-66,90},{56,90}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_in_Extension.BEox, bloodPort_out_Extension.BEox)
        annotation (Line(
          points={{-66,67.6},{-6,67.6},{-6,67.6},{56,67.6}},
          color={107,45,134},
          thickness=1));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end AlveolocapillaryUnit_pokus1;

    model AlveolocapillaryUnit_with_shunts
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-100,
                -38},{-88,-26}}),                                                                                               iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut CO2_outflow(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={70,64})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump O2_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-30,64})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-76,64},{-56,84}})));

      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-15)
        annotation (Placement(transformation(extent={{2,86},{18,98}})));
      Physiolibrary.Chemical.Components.Substance BufferCO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{44,60},{52,68}})));
      Physiolibrary.Chemical.Components.Substance BufferO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{-14,60},{-4,68}})));
      Junction_T junction_T(
        useFlow_input=false,
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true)
        annotation (Placement(transformation(extent={{12,64},{34,84}})));
      Acidbase.OSA.AlvEq_with_shunts alvEq_with_shunts
        annotation (Placement(transformation(extent={{-40,-86},{56,-12}})));
    equation

      connect(VO2, VO2)
        annotation (Line(points={{96,-54},{96,-54}},   color={0,0,127}));
      connect(bloodPort_in, flowConcentrationMeasure.bloodPort_in) annotation (
          Line(
          points={{-96,74},{-75,74}},
          color={28,108,200},
          thickness=0.5));
      connect(O2_inflow.q_out, BufferO2.q_out) annotation (Line(
          points={{-20,64},{-9,64}},
          color={107,45,134},
          thickness=1));
      connect(CO2_outflow.q_in, BufferCO2.q_out) annotation (Line(
          points={{60,64},{48,64}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.solutionVolume, nearToZeroVolume.y)
        annotation (Line(points={{46.4,65.6},{46.4,92},{20,92}},
                                                            color={0,0,127}));
      connect(BufferO2.solutionVolume, nearToZeroVolume.y) annotation (Line(points={{-11,
              65.6},{-11,92},{20,92}},                  color={0,0,127}));
      connect(O2_inflow.soluteFlow, VO2) annotation (Line(points={{-26,60},{-26,
              54},{68,54},{68,-54},{96,-54}},
                                           color={0,0,127}));
      connect(CO2_outflow.soluteFlow, VCO2) annotation (Line(points={{74,60},{
              74,-72},{94,-72}},          color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, junction_T.bloodPort_in)
        annotation (Line(
          points={{-57,74},{12.22,74}},
          color={28,108,200},
          thickness=0.5));
      connect(BufferO2.q_out, junction_T.port_O2) annotation (Line(
          points={{-9,64},{16.18,64},{16.18,74}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.q_out, junction_T.port_CO2) annotation (Line(
          points={{48,64},{20.14,64},{20.14,74}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.bloodPort_out, bloodPort_out) annotation (Line(
          points={{34,74},{96,74}},
          color={28,108,200},
          thickness=0.5));
      connect(alvEq_with_shunts.VAi, VAi) annotation (Line(points={{-39.1652,
              -32.35},{-38.5826,-32.35},{-38.5826,-32},{-94,-32}}, color={0,0,
              127}));
      connect(alvEq_with_shunts.BEox, flowConcentrationMeasure.BEox_conc)
        annotation (Line(points={{-40,-25.875},{-58,-25.875},{-58,62}}, color={
              0,0,127}));
      connect(alvEq_with_shunts.Q, flowConcentrationMeasure.volumeFlow)
        annotation (Line(points={{-39.1652,-35.125},{-54,-35.125},{-54,94},{-66,
              94},{-66,86}}, color={0,0,127}));
      connect(flowConcentrationMeasure.O2_conc, alvEq_with_shunts.CvO2)
        annotation (Line(points={{-74,62},{-74,-40.675},{-39.1652,-40.675}},
            color={0,0,127}));
      connect(alvEq_with_shunts.CvCO2, flowConcentrationMeasure.CO2_conc)
        annotation (Line(points={{-39.1652,-43.45},{-66,-43.45},{-66,62}},
            color={0,0,127}));
      connect(alvEq_with_shunts.VO2, VO2) annotation (Line(points={{57.6696,
              -46.6875},{68,-46.6875},{68,-54},{96,-54}}, color={0,0,127}));
      connect(alvEq_with_shunts.VCO2, VCO2) annotation (Line(points={{57.6696,
              -50.85},{74,-50.85},{74,-72},{94,-72}}, color={0,0,127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end AlveolocapillaryUnit_with_shunts;

    model Ventilation_to_perfusion_2_units_distribution
      "Distribution of ventilation to perfusion through 2 alveolocapillary units"

      Physiolibrary.Types.RealIO.HydraulicConductanceOutput G_1
      "Conductance of the 1st alveolocapillary unit" annotation (Placement(
            transformation(extent={{80,80},{100,100}}), iconTransformation(extent={{
                80,46},{100,66}})));
      Physiolibrary.Types.RealIO.HydraulicConductanceOutput G_2
      "Conductance of the 2nd alveolocapillary unit" annotation (Placement(
            transformation(extent={{80,-100},{100,-80}}), iconTransformation(extent={{80,-50},
                {100,-30}})));

      Physiolibrary.Types.RealIO.FractionInput F_perfusion
        "Percentage of pulmonary perfusion through 1st alveolocapillary unit"
                                                                  annotation (Placement(
            transformation(extent={{-100,-20},{-60,20}}), iconTransformation(extent={{-100,
                -16},{-60,24}})));
      Physiolibrary.Types.RealIO.HydraulicConductanceInput G_total
      "Total conductance of alveolocapillary units" annotation (
          Placement(transformation(extent={{-102,54},{-62,94}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=90,
            origin={-2,-104})));
      Physiolibrary.Types.RealIO.FractionInput F_ventilation
      "Percentage of ventilation through 1st alveolocapillary unit" annotation (Placement(
            transformation(extent={{-100,-20},{-60,20}}), iconTransformation(extent=
               {{-100,48},{-60,88}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VA_total
      "Total ventilation of alveolocapillary units" annotation (Placement(
            transformation(extent={{-104,-80},{-64,-40}}), iconTransformation(
            extent={{-21,-21},{21,21}},
            rotation=270,
            origin={3,103})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput VA_1
      "Ventilation of the 1st alveolocapillary unit" annotation (Placement(
            transformation(extent={{-210,62},{-190,82}}), iconTransformation(extent=
               {{80,78},{100,98}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput VA_2
      "Ventilation of the 1st alveolocapillary unit" annotation (Placement(
            transformation(extent={{-210,62},{-190,82}}), iconTransformation(extent={{80,-20},
                {100,0}})));
      Physiolibrary.Types.RealIO.HydraulicConductanceOutput G_shunt
        "Conductance of the right-to-left shunt" annotation (Placement(
            transformation(extent={{80,-100},{100,-80}}), iconTransformation(extent=
               {{80,-98},{100,-78}})));
      Physiolibrary.Types.RealIO.FractionInput F_shunt
        "Percentage of shunt perfusion" annotation (Placement(transformation(extent=
               {{-100,-20},{-60,20}}), iconTransformation(extent={{-100,-78},{-60,-38}})));
    equation
      G_total = G_1 + G_2 + G_shunt;
      F_perfusion*(G_1 + G_2) = G_1;//distribution of perfusion is equal to distribution of conductances
      F_shunt*G_total = G_shunt;
      VA_total = VA_1 + VA_2;
      F_ventilation * VA_total = VA_1;

      annotation (                   Documentation(info="<html>
<p>The <i>shunt</i> divides the resistance between <i>alveolar ventilation</i> and <i>blood resistor</i> according to desired pulmonary shunt. It defines what percentage of venous blood will be mixed with arterial blood. </p>
</html>"),
        Icon(graphics={Line(points={{40,80},{-60,40},{60,-40},{-40,-80}}, color={28,
                  108,200})}));
    end Ventilation_to_perfusion_2_units_distribution;

    model Alveolocapillary_2Units_with_shunts
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-70,-16},
                {-58,-4}}),                                                                                                     iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-59,27})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut CO2_outflow(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={72,46})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump O2_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-30,46})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-76,64},{-56,84}})));

      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-15)
        annotation (Placement(transformation(extent={{2,86},{18,98}})));
      Physiolibrary.Chemical.Components.Substance BufferCO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{44,60},{52,68}})));
      Physiolibrary.Chemical.Components.Substance BufferO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{-14,60},{-4,68}})));
      Junction_T junction_T(
        useFlow_input=false,
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true)
        annotation (Placement(transformation(extent={{14,64},{36,84}})));
      Acidbase.OSA.AlvEq_2units_with_shunts alvEq_2units_with_shunts
        annotation (Placement(transformation(extent={{-50,-82},{52,14}})));
    equation

      connect(VO2, VO2)
        annotation (Line(points={{96,-54},{96,-54}},   color={0,0,127}));
      connect(bloodPort_in, flowConcentrationMeasure.bloodPort_in) annotation (
          Line(
          points={{-96,74},{-75,74}},
          color={28,108,200},
          thickness=0.5));
      connect(O2_inflow.q_out, BufferO2.q_out) annotation (Line(
          points={{-20,46},{-14,46},{-14,64},{-9,64}},
          color={107,45,134},
          thickness=1));
      connect(CO2_outflow.q_in, BufferCO2.q_out) annotation (Line(
          points={{62,46},{54,46},{54,64},{48,64}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.solutionVolume, nearToZeroVolume.y)
        annotation (Line(points={{46.4,65.6},{46.4,92},{20,92}},
                                                            color={0,0,127}));
      connect(BufferO2.solutionVolume, nearToZeroVolume.y) annotation (Line(points={{-11,
              65.6},{-11,92},{20,92}},                  color={0,0,127}));
      connect(O2_inflow.soluteFlow, VO2) annotation (Line(points={{-26,42},{-26,
              30},{112,30},{112,-54},{96,-54}},
                                           color={0,0,127}));
      connect(CO2_outflow.soluteFlow, VCO2) annotation (Line(points={{76,42},{
              76,-72},{94,-72}},          color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, junction_T.bloodPort_in)
        annotation (Line(
          points={{-57,74},{14.22,74}},
          color={28,108,200},
          thickness=0.5));
      connect(BufferO2.q_out, junction_T.port_O2) annotation (Line(
          points={{-9,64},{18.18,64},{18.18,74}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.q_out, junction_T.port_CO2) annotation (Line(
          points={{48,64},{22.14,64},{22.14,74}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.bloodPort_out, bloodPort_out) annotation (Line(
          points={{36,74},{96,74}},
          color={28,108,200},
          thickness=0.5));
      connect(alvEq_2units_with_shunts.VAi, VAi) annotation (Line(points={{-49.113,
              -12.4},{-56.5565,-12.4},{-56.5565,-10},{-64,-10}},         color=
              {0,0,127}));
      connect(flowConcentrationMeasure.volumeFlow, alvEq_2units_with_shunts.Q)
        annotation (Line(points={{-66,86},{-66,90},{-84,90},{-84,-16},{-49.113,
              -16}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts.BEox, flowConcentrationMeasure.BEox_conc)
        annotation (Line(points={{-50,-4},{-58,-4},{-58,62}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts.CvO2, flowConcentrationMeasure.O2_conc)
        annotation (Line(points={{-49.113,-23.2},{-74,-23.2},{-74,62}}, color={
              0,0,127}));
      connect(alvEq_2units_with_shunts.CvCO2, flowConcentrationMeasure.CO2_conc)
        annotation (Line(points={{-49.113,-26.8},{-66,-26.8},{-66,62}}, color={
              0,0,127}));
      connect(alvEq_2units_with_shunts.VO2, VO2) annotation (Line(points={{53.7739,
              -31},{68,-31},{68,-54},{96,-54}},         color={0,0,127}));
      connect(alvEq_2units_with_shunts.VCO2, VCO2) annotation (Line(points={{53.7739,
              -36.4},{74,-36.4},{74,-72},{94,-72}},         color={0,0,127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end Alveolocapillary_2Units_with_shunts;

    model Alveolocapillary_2Units_with_shunts_and_mixing
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-66,-2},
                {-54,10}}),                                                                                                     iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-59,27})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut CO2_outflow(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={70,64})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump O2_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=180,
            origin={-30,64})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-76,64},{-56,84}})));

      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-15)
        annotation (Placement(transformation(extent={{2,86},{18,98}})));
      Physiolibrary.Chemical.Components.Substance BufferCO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{44,60},{52,68}})));
      Physiolibrary.Chemical.Components.Substance BufferO2(useNormalizedVolume=false,
          solute_start=0)
        annotation (Placement(transformation(extent={{-14,60},{-4,68}})));
      Junction_T junction_T(
        useFlow_input=false,
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true)
        annotation (Placement(transformation(extent={{12,64},{34,84}})));
      Physiolibrary.Types.RealIO.FractionInput Fsh "shunt fraction" annotation (
         Placement(transformation(extent={{-68,-38},{-54,-24}}),
            iconTransformation(extent={{-44,-86},{-26,-68}})));
      Physiolibrary.Types.RealIO.FractionInput F_q1 "alveolar perfusion fraction" annotation (
          Placement(transformation(extent={{-66,-52},{-52,-38}}),
            iconTransformation(extent={{-80,-42},{-62,-24}})));
      Physiolibrary.Types.RealIO.FractionInput F_VAi1 "alveolar ventilation fraction" annotation (
          Placement(transformation(extent={{-68,-68},{-52,-52}}),
            iconTransformation(extent={{-80,-22},{-62,-4}})));
      Acidbase.OSA.AlvEq_2units_with_shunts_and_mixing
        alvEq_2units_with_shunts_and_mixing
        annotation (Placement(transformation(extent={{-40,-82},{52,32}})));
      Physiolibrary.Types.RealIO.PressureOutput PaO2( start=13333) annotation (Placement(
            transformation(extent={{80,2},{100,22}}), iconTransformation(extent={{64,
                12},{84,32}})));
      Physiolibrary.Types.RealIO.PressureOutput PaCO2( start = 5333) annotation (Placement(
            transformation(extent={{80,-8},{100,12}}), iconTransformation(extent={{64,
                -12},{84,8}})));
      Physiolibrary.Types.RealIO.pHOutput pHa( start=7.4) annotation (Placement(transformation(
              extent={{80,-20},{100,0}}), iconTransformation(extent={{64,-36},{84,-16}})));
    equation

      connect(VO2, VO2)
        annotation (Line(points={{96,-54},{96,-54}},   color={0,0,127}));
      connect(bloodPort_in, flowConcentrationMeasure.bloodPort_in) annotation (
          Line(
          points={{-96,74},{-75,74}},
          color={28,108,200},
          thickness=0.5));
      connect(O2_inflow.q_out, BufferO2.q_out) annotation (Line(
          points={{-20,64},{-9,64}},
          color={107,45,134},
          thickness=1));
      connect(CO2_outflow.q_in, BufferCO2.q_out) annotation (Line(
          points={{60,64},{48,64}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.solutionVolume, nearToZeroVolume.y)
        annotation (Line(points={{46.4,65.6},{46.4,92},{20,92}},
                                                            color={0,0,127}));
      connect(BufferO2.solutionVolume, nearToZeroVolume.y) annotation (Line(points={{-11,
              65.6},{-11,92},{20,92}},                  color={0,0,127}));
      connect(O2_inflow.soluteFlow, VO2) annotation (Line(points={{-26,60},{-26,
              54},{68,54},{68,-54},{96,-54}},
                                           color={0,0,127}));
      connect(CO2_outflow.soluteFlow, VCO2) annotation (Line(points={{74,60},{
              74,-72},{94,-72}},          color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, junction_T.bloodPort_in)
        annotation (Line(
          points={{-57,74},{12.22,74}},
          color={28,108,200},
          thickness=0.5));
      connect(BufferO2.q_out, junction_T.port_O2) annotation (Line(
          points={{-9,64},{16.18,64},{16.18,74}},
          color={107,45,134},
          thickness=1));
      connect(BufferCO2.q_out, junction_T.port_CO2) annotation (Line(
          points={{48,64},{20.14,64},{20.14,74}},
          color={107,45,134},
          thickness=1));
      connect(junction_T.bloodPort_out, bloodPort_out) annotation (Line(
          points={{34,74},{96,74}},
          color={28,108,200},
          thickness=0.5));
      connect(alvEq_2units_with_shunts_and_mixing.BEox, flowConcentrationMeasure.BEox_conc)
        annotation (Line(points={{-40,10.625},{-58,10.625},{-58,62}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.VAi, VAi) annotation (Line(points=
             {{-39.2,0.65},{-50.6,0.65},{-50.6,4},{-60,4}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.Q, flowConcentrationMeasure.volumeFlow)
        annotation (Line(points={{-39.2,-3.625},{-80,-3.625},{-80,92},{-66,92},{-66,
              86}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.CvO2, flowConcentrationMeasure.O2_conc)
        annotation (Line(points={{-39.2,-12.175},{-74,-12.175},{-74,62}}, color={0,0,
              127}));
      connect(alvEq_2units_with_shunts_and_mixing.CvCO2, flowConcentrationMeasure.CO2_conc)
        annotation (Line(points={{-39.2,-16.45},{-66,-16.45},{-66,62}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.Fsh, Fsh) annotation (Line(points={{-39.4,
              -31.7688},{-48.7,-31.7688},{-48.7,-31},{-61,-31}},        color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.F_q1, F_q1) annotation (Line(
            points={{-39.4,-44.5938},{-48.7,-44.5938},{-48.7,-45},{-59,-45}}, color=
             {0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.F_VAi1, F_VAi1) annotation (Line(
            points={{-39.8,-58.8438},{-47.9,-58.8438},{-47.9,-60},{-60,-60}}, color=
             {0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.VO2, VO2) annotation (Line(points={{53.8,
              -21.0813},{68,-21.0813},{68,-54},{96,-54}},       color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.VCO2, VCO2) annotation (Line(
            points={{53.6,-27.85},{74,-28},{74,-72},{94,-72}}, color={0,0,127}));
      connect(PaO2, alvEq_2units_with_shunts_and_mixing.PaO2) annotation (Line(
            points={{90,12},{62,12},{62,12.05},{54,12.05}}, color={0,0,127}));
      connect(PaCO2, PaCO2)
        annotation (Line(points={{90,2},{90,2}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.PaCO2, PaCO2) annotation (Line(
            points={{54,4.925},{58,4.925},{58,2},{90,2}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.pHa, pHa) annotation (Line(points=
             {{54,-2.2},{56,-2.2},{56,-2},{58,-2},{58,-10},{90,-10}}, color={0,0,127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end Alveolocapillary_2Units_with_shunts_and_mixing;

    model Alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
      extends AcidBaseBalance.Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-82},{104,-62}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{86,-64},{106,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-66,-2},
                {-54,10}}),                                                                                                     iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-59,27})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,64},{-86,84}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));

      Physiolibrary.Types.RealIO.FractionInput Fsh "shunt fraction" annotation (
         Placement(transformation(extent={{-68,-38},{-54,-24}}),
            iconTransformation(extent={{-44,-86},{-26,-68}})));
      Physiolibrary.Types.RealIO.FractionInput F_q1 "alveolar perfusion fraction" annotation (
          Placement(transformation(extent={{-66,-52},{-52,-38}}),
            iconTransformation(extent={{-80,-42},{-62,-24}})));
      Physiolibrary.Types.RealIO.FractionInput F_VAi1 "alveolar ventilation fraction" annotation (
          Placement(transformation(extent={{-68,-68},{-52,-52}}),
            iconTransformation(extent={{-80,-22},{-62,-4}})));
      Acidbase.OSA.AlvEq_2units_with_shunts_and_mixing
        alvEq_2units_with_shunts_and_mixing
        annotation (Placement(transformation(extent={{-40,-82},{52,32}})));
      Physiolibrary.Types.RealIO.PressureOutput PaO2( start=13333) annotation (Placement(
            transformation(extent={{80,2},{100,22}}), iconTransformation(extent={{64,
                12},{84,32}})));
      Physiolibrary.Types.RealIO.PressureOutput PaCO2( start = 5333) annotation (Placement(
            transformation(extent={{80,-8},{100,12}}), iconTransformation(extent={{64,
                -12},{84,8}})));
      Physiolibrary.Types.RealIO.pHOutput pHa( start=7.4) annotation (Placement(transformation(
              extent={{80,-20},{100,0}}), iconTransformation(extent={{64,-36},{84,-16}})));
    equation
      // hydraulics
      bloodPort_in.bloodFlow + bloodPort_out.bloodFlow = 0;
      bloodPort_in.pressure = bloodPort_out.pressure;

      assert(bloodPort_in.bloodFlow > 0, "backward flow in lungs detected - the computation of blood concentrations are not designed for that", AssertionLevel.error);


      // output concetration - normal direction
    //   bloodPort_out.conc[1] = alvEq_2units_with_shunts_and_mixing.ctO2a;
    //   bloodPort_out.conc[2] = alvEq_2units_with_shunts_and_mixing.ctCO2a;
      bloodPort_out.conc[1] = homotopy(alvEq_2units_with_shunts_and_mixing.ctO2a, 8);
      bloodPort_out.conc[2] = homotopy(alvEq_2units_with_shunts_and_mixing.ctCO2a,20);

      bloodPort_out.conc[3] =   inStream(bloodPort_in.conc[3]);
      bloodPort_out.ions = inStream(bloodPort_in.ions);
      // backwards direction - forbidden, yet we must write equations
      bloodPort_in.conc[1] = alvEq_2units_with_shunts_and_mixing.ctO2a;
      bloodPort_in.conc[2] = alvEq_2units_with_shunts_and_mixing.ctCO2a;
      bloodPort_in.conc[3] =   inStream(bloodPort_out.conc[3]);
      bloodPort_in.ions = inStream(bloodPort_out.ions);

      // connecting the input connectors
      alvEq_2units_with_shunts_and_mixing.Q = bloodPort_in.bloodFlow;
      alvEq_2units_with_shunts_and_mixing.CvO2 = inStream(bloodPort_in.conc[1]);
      alvEq_2units_with_shunts_and_mixing.CvCO2 = inStream(bloodPort_in.conc[2]);
      alvEq_2units_with_shunts_and_mixing.BEox  = inStream(bloodPort_in.conc[3]);

      connect(alvEq_2units_with_shunts_and_mixing.VAi, VAi) annotation (Line(points=
             {{-39.2,0.65},{-50.6,0.65},{-50.6,4},{-60,4}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.Fsh, Fsh) annotation (Line(points={{-39.4,
              -31.7688},{-48.7,-31.7688},{-48.7,-31},{-61,-31}},        color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.F_q1, F_q1) annotation (Line(
            points={{-39.4,-44.5938},{-48.7,-44.5938},{-48.7,-45},{-59,-45}}, color=
             {0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.F_VAi1, F_VAi1) annotation (Line(
            points={{-39.8,-58.8438},{-47.9,-58.8438},{-47.9,-60},{-60,-60}}, color=
             {0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.VO2, VO2) annotation (Line(points={{53.8,
              -21.0813},{68,-21.0813},{68,-54},{96,-54}},       color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.VCO2, VCO2) annotation (Line(
            points={{53.6,-27.85},{74,-28},{74,-72},{94,-72}}, color={0,0,127}));
      connect(PaO2, alvEq_2units_with_shunts_and_mixing.PaO2) annotation (Line(
            points={{90,12},{62,12},{62,12.05},{54,12.05}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.PaCO2, PaCO2) annotation (Line(
            points={{54,4.925},{58,4.925},{58,2},{90,2}}, color={0,0,127}));
      connect(alvEq_2units_with_shunts_and_mixing.pHa, pHa) annotation (Line(points=
             {{54,-2.2},{56,-2.2},{56,-2},{58,-2},{58,-10},{90,-10}}, color={0,0,127}));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={
            Line(
              points={{-42,-18},{-90,-18},{-90,62}},
              color={238,46,47},
              arrow={Arrow.Open,Arrow.None},
              thickness=0.5,
              pattern=LinePattern.Dash),
            Line(
              points={{-42,-12},{-86,-12},{-86,68}},
              color={238,46,47},
              arrow={Arrow.Open,Arrow.None},
              thickness=0.5,
              pattern=LinePattern.Dash),
            Line(
              points={{-42,-4},{-84,-4},{-84,74}},
              color={238,46,47},
              arrow={Arrow.Open,Arrow.None},
              thickness=0.5,
              pattern=LinePattern.Dash),
            Line(
              points={{-44,12},{-82,12},{-82,78}},
              color={238,46,47},
              arrow={Arrow.Open,Arrow.None},
              thickness=0.5,
              pattern=LinePattern.Dash),
            Line(
              points={{58,-34},{96,-34},{96,66}},
              color={238,46,47},
              arrow={Arrow.None,Arrow.Open},
              thickness=0.5,
              pattern=LinePattern.Dash),
            Line(
              points={{58,-42},{100,-42},{100,66}},
              color={238,46,47},
              arrow={Arrow.None,Arrow.Open},
              thickness=0.5,
              pattern=LinePattern.Dash),
            Line(
              points={{-78,74},{90,74}},
              color={238,46,47},
              arrow={Arrow.None,Arrow.Open},
              thickness=0.5,
              pattern=LinePattern.Dash)}));
    end Alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors;

    package Inputs
      model HaemoglobinParameters
        "\"input of concentration of haemoglobin, fractional concentration of Methaemoglobin, Fetal haemoglobin and Carboxyhaemoglobin\""
        Physiolibrary.Types.RealIO.ConcentrationOutput ctHb
          "\"concentration of haemoglobin\"" annotation (Placement(transformation(
                extent={{8,74},{28,94}}), iconTransformation(extent={{102,54},{
                  122,74}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cDPG
          "\"concentration of h2'3' DPG\"" annotation (Placement(transformation(
                extent={{-28,-54},{-8,-34}}), iconTransformation(extent={{102,34},
                  {122,54}})));
        Physiolibrary.Types.RealIO.FractionOutput FMetHb
          "\"Fraction of methaemoglobin\"" annotation (Placement(transformation(
                extent={{18,-78},{38,-58}}), iconTransformation(extent={{102,14},
                  {122,34}})));
        Physiolibrary.Types.RealIO.FractionOutput FHbF
          "\"Fraction of fetal haemoglobin\"" annotation (Placement(
              transformation(extent={{30,32},{50,52}}), iconTransformation(extent=
                 {{102,-6},{122,14}})));
        Physiolibrary.Types.RealIO.FractionOutput FCOHb
          "\"Fraction of fetal carboxyhaemoglobin\"" annotation (Placement(
              transformation(extent={{58,-34},{78,-14}}), iconTransformation(
                extent={{102,-26},{122,-6}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb_input(k=8.4)
          annotation (Placement(transformation(extent={{-63,70},{-32,96}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG_input(k=5)
          annotation (Placement(transformation(extent={{-78,-56},{-55,-36}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb_input(k=0.005)
          annotation (Placement(transformation(extent={{-37,-84},{-8,-58}})));
        Physiolibrary.Types.Constants.FractionConst fCOHb_input(k=0.005)
          annotation (Placement(transformation(extent={{9,-38},{38,-12}})));
        Physiolibrary.Types.Constants.FractionConst fHbF_input(k=0.005)
          annotation (Placement(transformation(extent={{-26,28},{4,50}})));
      equation
        connect(ctHb_input.y, ctHb) annotation (Line(points={{-28.125,83},{
                -8.0625,83},{-8.0625,84},{18,84}}, color={0,0,127}));
        connect(cDPG_input.y, cDPG) annotation (Line(points={{-52.125,-46},{-40,
                -46},{-40,-44},{-18,-44}}, color={0,0,127}));
        connect(fHbF_input.y, FHbF) annotation (Line(points={{7.75,39},{24,39},{
                24,42},{40,42}}, color={0,0,127}));
        connect(FMetHb, FMetHb)
          annotation (Line(points={{28,-68},{28,-68}}, color={0,0,127}));
        connect(FMetHb, fMetHb_input.y) annotation (Line(points={{28,-68},{6,-68},
                {6,-71},{-4.375,-71}}, color={0,0,127}));
        connect(fCOHb_input.y, FCOHb) annotation (Line(points={{41.625,-25},{
                50.8125,-25},{50.8125,-24},{68,-24}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{102,-100}},
                lineColor={28,108,200},
                fillColor={170,255,85},
                fillPattern=FillPattern.Solid), Text(
                extent={{-98,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={128,255,0},
                fillPattern=FillPattern.Solid,
                textString="Haemoglobin 
Inputs")}),   Diagram(coordinateSystem(preserveAspectRatio=false)));
      end HaemoglobinParameters;

      model PlasmaParameters
        "\"input of concentration of albumin and Phosphates\""
        Physiolibrary.Types.RealIO.ConcentrationOutput ctAlb
          "\"concentration of albumin\"" annotation (Placement(transformation(
                extent={{8,74},{28,94}}), iconTransformation(extent={{102,54},{
                  122,74}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput ctPi
          "\"concentration of phosphate\"" annotation (Placement(transformation(
                extent={{8,74},{28,94}}), iconTransformation(extent={{102,32},{
                  122,52}})));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{102,-100}},
                lineColor={28,108,200},
                fillColor={170,255,85},
                fillPattern=FillPattern.Solid), Text(
                extent={{-98,102},{100,-98}},
                lineColor={28,108,200},
                fillColor={128,255,0},
                fillPattern=FillPattern.Solid,
                textString="Plasma
Inputs")}),   Diagram(coordinateSystem(preserveAspectRatio=false)));
      end PlasmaParameters;

      model AthmosphereParameters
        "\"input of athmospheric pressure, fraction concentrations of O2 anc CO2\""
        Physiolibrary.Types.RealIO.ConcentrationOutput ctHb
          "\"concentration of haemoglobin\"" annotation (Placement(transformation(
                extent={{8,74},{28,94}}), iconTransformation(extent={{102,54},{
                  122,74}})));
        Physiolibrary.Types.RealIO.ConcentrationOutput cDPG
          "\"concentration of h2'3' DPG\"" annotation (Placement(transformation(
                extent={{-28,-54},{-8,-34}}), iconTransformation(extent={{102,34},
                  {122,54}})));
        Physiolibrary.Types.RealIO.FractionOutput FMetHb
          "\"Fraction of methaemoglobin\"" annotation (Placement(transformation(
                extent={{18,-78},{38,-58}}), iconTransformation(extent={{102,14},
                  {122,34}})));
        Physiolibrary.Types.RealIO.FractionOutput FHbF
          "\"Fraction of fetal haemoglobin\"" annotation (Placement(
              transformation(extent={{30,32},{50,52}}), iconTransformation(extent=
                 {{102,-6},{122,14}})));
        Physiolibrary.Types.RealIO.FractionOutput FCOHb
          "\"Fraction of fetal carboxyhaemoglobin\"" annotation (Placement(
              transformation(extent={{58,-34},{78,-14}}), iconTransformation(
                extent={{102,-26},{122,-6}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb_input(k=8.4)
          annotation (Placement(transformation(extent={{-63,70},{-32,96}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG_input(k=5)
          annotation (Placement(transformation(extent={{-78,-56},{-55,-36}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb_input(k=0.005)
          annotation (Placement(transformation(extent={{-37,-84},{-8,-58}})));
        Physiolibrary.Types.Constants.FractionConst fCOHb_input(k=0.005)
          annotation (Placement(transformation(extent={{9,-38},{38,-12}})));
        Physiolibrary.Types.Constants.FractionConst fHbF_input(k=0.005)
          annotation (Placement(transformation(extent={{-26,28},{4,50}})));
      equation
        connect(ctHb_input.y, ctHb) annotation (Line(points={{-28.125,83},{
                -8.0625,83},{-8.0625,84},{18,84}}, color={0,0,127}));
        connect(cDPG_input.y, cDPG) annotation (Line(points={{-52.125,-46},{-40,
                -46},{-40,-44},{-18,-44}}, color={0,0,127}));
        connect(fHbF_input.y, FHbF) annotation (Line(points={{7.75,39},{24,39},{
                24,42},{40,42}}, color={0,0,127}));
        connect(FMetHb, FMetHb)
          annotation (Line(points={{28,-68},{28,-68}}, color={0,0,127}));
        connect(FMetHb, fMetHb_input.y) annotation (Line(points={{28,-68},{6,-68},
                {6,-71},{-4.375,-71}}, color={0,0,127}));
        connect(fCOHb_input.y, FCOHb) annotation (Line(points={{41.625,-25},{
                50.8125,-25},{50.8125,-24},{68,-24}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{102,-100}},
                lineColor={28,108,200},
                fillColor={170,255,85},
                fillPattern=FillPattern.Solid), Text(
                extent={{-98,100},{100,-100}},
                lineColor={28,108,200},
                fillColor={128,255,0},
                fillPattern=FillPattern.Solid,
                textString="Haemoglobin 
Inputs")}),   Diagram(coordinateSystem(preserveAspectRatio=false)));
      end AthmosphereParameters;

      model BodyTemperature "\"input ob body temperature\""
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-19,-2},{8,24}})));
        Physiolibrary.Types.RealIO.TemperatureOutput T annotation (Placement(
              transformation(extent={{32,2},{52,22}}), iconTransformation(extent=
                  {{102,2},{122,22}})));
      equation
        connect(temperature.y, T) annotation (Line(points={{11.375,11},{23.6875,
                11},{23.6875,12},{42,12}}, color={0,0,127}));
        connect(T, T) annotation (Line(points={{42,12},{80,12},{80,-8},{118,-8},{
                118,12},{42,12}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{102,-100}},
                lineColor={28,108,200},
                fillColor={170,255,85},
                fillPattern=FillPattern.Solid), Text(
                extent={{-100,100},{98,-100}},
                lineColor={28,108,200},
                fillColor={128,255,0},
                fillPattern=FillPattern.Solid,
                textString="Body 
Temperature")}),       Diagram(coordinateSystem(preserveAspectRatio=false)));
      end BodyTemperature;

      model AlvVentilation_withShuntByFilip_GCG_TestRefactor
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
         extends Modelica.Icons.Example;
         import Physiolibrary.Hydraulic;
        BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
          ZeroPressureVolume(displayUnit="l") = 0.00030625,
          volume_start(displayUnit="l") = 0.00038,
          Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
          BEox_concentration=0,
          O2_concentration=6.02579,
          CO2_concentration=23.6461)
          annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
        BloodComponents.BloodElasticVesselCompliance
          pulmonaryVeinsAndLeftAtrium(
          volume_start(displayUnit="l") = 0.0004,
          ZeroPressureVolume(displayUnit="l") = 0.0004,
          Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
          O2_concentration=8.29769,
          CO2_concentration=21.6053)
          annotation (Placement(transformation(extent={{40,100},{60,120}})));
        BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
                "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
          annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
        BloodComponents.BloodElasticVesselCompliance arteries(
          volume_start(displayUnit="l") = 0.00085,
          ZeroPressureVolume(displayUnit="l") = 0.000495,
          Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
          O2_concentration=8.29769,
          CO2_concentration=21.6053) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={54,-36})));
        BloodComponents.BloodElasticVesselCompliance veins(
          volume_start(displayUnit="l") = 0.00325,
          ZeroPressureVolume(displayUnit="l") = 0.00295,
          Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
          O2_concentration=6.02579,
          CO2_concentration=23.6461) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-94,-62})));
        BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
                "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={16,-36})));
        BloodComponents.Pump rightHeart
          annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
               8.3333333333333e-05)
          annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
        BloodComponents.Pump leftHeart
          annotation (Placement(transformation(extent={{16,6},{36,26}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
               8.3333333333333e-05)
          annotation (Placement(transformation(extent={{12,42},{20,50}})));
        BloodComponents.BloodConductor kidney(Conductance(displayUnit=
                "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={16,-54})));
        BloodComponents.BloodConductor muscle(Conductance(displayUnit=
                "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={16,-18})));
        BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
                "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-110,-10})));
        BloodComponents.BloodElasticVesselCompliance rightAtrium(
          volume_start(displayUnit="l") = 0.0001,
          ZeroPressureVolume(displayUnit="l") = 0.0001,
          Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
          O2_concentration=6.02579,
          CO2_concentration=23.6461)
          annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
        Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
              {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
          "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
          annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
        Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
              {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
          "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
          annotation (Placement(transformation(extent={{36,22},{16,42}})));
        BloodComponents.PressureMeasure pressureMeasure1
          annotation (Placement(transformation(extent={{60,58},{80,78}})));
        BloodComponents.PressureMeasure pressureMeasure2
          annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
        BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={72,4})));
        BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-68,18})));
        BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-60,-60})));
        BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={20,110})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
            SoluteFlow=0.00016666666666667)
          annotation (Placement(transformation(extent={{-4,-96},{-24,-76}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
          O2_MetabolicConsumption(SoluteFlow=0.00018333333333333)
          annotation (Placement(transformation(extent={{4,-84},{24,-64}})));
        BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
          annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
                "ml/min") = 8.19588e-5)
          annotation (Placement(transformation(extent={{-31,88},{-23,94}})));
        BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
                "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
          annotation (Placement(transformation(extent={{-14,90},{6,70}})));
        Physiolibrary.Types.Constants.FractionConst fraction(k=0.02)
          annotation (Placement(transformation(extent={{-106,74},{-98,82}})));
        Interfaces.Shunt shunt(G_total(displayUnit="l/(mmHg.min)")=
            4.1665920538226e-8)
          annotation (Placement(transformation(extent={{-68,68},{-60,76}})));
        inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
          annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
        Package.Junction_T Junction_T(
          useO2_input=true,
          useCO2_input=true,
          useBEox_input=true,
          useFlow_input=false)
          annotation (Placement(transformation(extent={{-16,-72},{-46,-46}})));
        Package.AlveolocapillaryUnit_bad alveolocapillaryUnit
          annotation (Placement(transformation(extent={{-20,94},{8,118}})));
      equation
        connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
            points={{-47,44},{-40,44},{-40,34}},
            color={0,0,127}));
        connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
            points={{21,46},{26,46},{26,34}},
            color={0,0,127}));
        connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
          annotation (Line(
            points={{-82,110},{-73,110}},
            color={28,108,200},
            thickness=0.5));
        connect(leftStarling.y,leftHeart.volumeFlowRate)
          annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
        connect(rightStarling.y,rightHeart.volumeFlowRate)
          annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                       color={0,0,127}));
        connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
            points={{44,-36},{34,-36},{34,-18},{25,-18}},
            color={28,108,200},
            thickness=0.5));
        connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
            points={{44,-36},{25,-36}},
            color={28,108,200},
            thickness=0.5));
        connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
            points={{44,-36},{34,-36},{34,-54},{25,-54}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
          annotation (Line(
            points={{60,110},{60,61},{65.1,61}},
            color={28,108,200},
            thickness=0.5));
        connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
          annotation (Line(
            points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
            color={28,108,200},
            thickness=0.5));
        connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
              points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
        connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
            points={{7,-36},{-12,-36},{-12,-18},{7,-18}},
            color={28,108,200},
            thickness=0.5));
        connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
            points={{7,-54},{-12,-54},{-12,-38},{-12,-37},{-12,-18},{7,-18}},
            color={28,108,200},
            thickness=0.5));

        connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
          annotation (Line(
            points={{35,16},{72,16},{72,13}},
            color={28,108,200},
            thickness=0.5));
        connect(arteries.bloodPort_in, flowMeasure_art.bloodPort_out) annotation (
           Line(
            points={{63.8,-36},{72,-36},{72,-5}},
            color={28,108,200},
            thickness=0.5));
        connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
            Line(
            points={{-110,-1},{-110,22},{-109.8,22}},
            color={28,108,200},
            thickness=0.5));
        connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
           Line(
            points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
            color={28,108,200},
            thickness=0.5));
        connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
          annotation (Line(
            points={{29,110},{40.2,110}},
            color={28,108,200},
            thickness=0.5));
        connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
            points={{-104,-62},{-110,-62},{-110,-19}},
            color={28,108,200},
            thickness=0.5));
        connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
          annotation (Line(
            points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
            color={28,108,200},
            thickness=0.5));
        connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
          annotation (Line(
            points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
            color={28,108,200},
            thickness=0.5));
        connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
              points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
                127}));
        connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
          annotation (Line(
            points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
            color={28,108,200},
            thickness=0.5));

        connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
          annotation (Line(
            points={{-59,18},{-51,18}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
          annotation (Line(
            points={{-55,110},{-49,110}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonary1.bloodPort_out, flowMeasure_alv.bloodPort_in)
          annotation (Line(
            points={{5,80},{10,80},{10,110},{11,110}},
            color={28,108,200},
            thickness=0.5));
        connect(pulmonary1.bloodPort_in, pulmonaryArteries.bloodPort_out)
          annotation (Line(
            points={{-13,80},{-82,80},{-82,110}},
            color={28,108,200},
            thickness=0.5));
        connect(fraction.y, shunt.shunt_fraction) annotation (Line(points={{-97,
                78},{-82,78},{-82,72},{-67.2,72}}, color={0,0,127}));
        connect(shunt.G_main, pulmonary.cond) annotation (Line(points={{-60.4,
                75.6},{-56,75.6},{-56,94},{-66,94},{-66,103.4},{-64,103.4}},
              color={0,0,127}));
        connect(shunt.G_shunt, pulmonary1.cond) annotation (Line(points={{-60.4,
                68.4},{-4,68.4},{-4,73.4}}, color={0,0,127}));
        connect(flowMeasure_tissue.bloodPort_in, Junction_T.bloodPort_out)
          annotation (Line(
            points={{-51,-60},{-48,-60},{-48,-59},{-46,-59}},
            color={28,108,200},
            thickness=0.5));
        connect(Junction_T.bloodPort_in, muscle.bloodPort_out) annotation (Line(
            points={{-16.3,-59},{-16.3,-36},{-12,-36},{-12,-18},{7,-18}},
            color={28,108,200},
            thickness=0.5));
        connect(Junction_T.port_CO2, CO2_MetabolicProduction.q_out) annotation (Line(
            points={{-27.1,-59},{-27.1,-86},{-24,-86}},
            color={107,45,134},
            thickness=1));
        connect(Junction_T.port_O2, O2_MetabolicConsumption.q_in) annotation (Line(
            points={{-21.7,-59},{-21.7,-74},{4,-74}},
            color={107,45,134},
            thickness=1));
        connect(flowConcentrationMeasure.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
          annotation (Line(
            points={{-31,110},{-20,110},{-20,113.2},{-10.76,113.2}},
            color={28,108,200},
            thickness=0.5));
        connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
          annotation (Line(
            points={{-2.64,113.44},{3.68,113.44},{3.68,110},{11,110}},
            color={28,108,200},
            thickness=0.5));
        connect(VAi.y, alveolocapillaryUnit.VAi) annotation (Line(points={{-22,91},{-20,
                91},{-20,105.16},{-16.78,105.16}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                  -100},{100,140}}), graphics={Text(
                extent={{-82,-80},{80,-100}},
                lineColor={175,175,175},
                textString=
                    "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                                Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>",   revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),experiment(StopTime=300),
          Icon(coordinateSystem(extent={{-120,-100},{100,140}})));
      end AlvVentilation_withShuntByFilip_GCG_TestRefactor;
    end Inputs;
  end Package;

  package Respiratory

    partial model LungsBase
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation (Placement(
            transformation(extent={{-112,-8},{-96,8}}),  iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={0,-100})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput bloodFlow annotation (
          Placement(transformation(extent={{-110,-28},{-94,-12}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-100,40})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump O2_inflow(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333) annotation (
          Placement(transformation(
            extent={{10,-10},{-10,10}},
            rotation=270,
            origin={-60,30})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut CO2_outflow(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667) annotation (
          Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=90,
            origin={-20,50})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={20,64})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b O2 "Outflow" annotation (
         Placement(transformation(extent={{-70,90},{-50,110}}),
            iconTransformation(extent={{-70,90},{-50,110}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a CO2 "Inflow" annotation (
         Placement(transformation(extent={{-30,90},{-10,110}}),
            iconTransformation(extent={{-30,90},{-10,110}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BEox "measure"
        annotation (Placement(transformation(extent={{10,90},{30,110}}),
            iconTransformation(extent={{10,90},{30,110}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cvO2
        "Concentration of systemic venous (unoxidized) O2" annotation (
          Placement(transformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-100,-74}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-100,-80})));
      Physiolibrary.Types.RealIO.ConcentrationInput cvCO2
        "Concentration of systemic venous (unoxidized) CO2" annotation (
          Placement(transformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={-100,-40}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-100,-40})));
    equation
      connect(CO2, CO2_outflow.q_in) annotation (Line(
          points={{-20,100},{-20,60}},
          color={107,45,134},
          thickness=1));
      connect(O2, O2_inflow.q_out) annotation (Line(
          points={{-60,100},{-60,40}},
          color={107,45,134},
          thickness=1));
      connect(BEox, concentrationMeasure.q_in) annotation (Line(
          points={{20,100},{20,64}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(graphics={                                                                                     Bitmap(extent={{
                  100,100},{-100,-100}},
                imageSource =                                                                                                    "" + "" + "" + "" + "" + "" + "" + "" + "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" + "" + "" + "" + "" + "" + "" + "" + "" + "" + "", fileName = "modelica://NewBloodyMary/../../ikony/alveolus.png",
              origin={0,0},
              rotation=180)}));
    end LungsBase;

    model LungsOneCompartment
      extends LungsBase;
      Acidbase.OSA.AlvEq_with_shunts        alvEq_with_shunts
        annotation (Placement(transformation(extent={{-50,-82},{52,14}})));
    equation
      connect(alvEq_with_shunts.VO2, O2_inflow.soluteFlow) annotation (Line(
            points={{53.7739,-31},{62,-31},{62,-32},{74,-32},{74,34},{-56,34}},
            color={0,0,127}));
      connect(alvEq_with_shunts.VCO2, CO2_outflow.soluteFlow) annotation (Line(
            points={{53.7739,-36.4},{53.7739,-36},{84,-36},{84,46},{-16,46}},
            color={0,0,127}));
      connect(concentrationMeasure.concentration, alvEq_with_shunts.BEox)
        annotation (Line(points={{12,64},{20,64},{20,-4},{-50,-4}},    color={0,
              0,127}));
      connect(VAi, alvEq_with_shunts.VAi) annotation (Line(points={{-104,0},{
              -80,0},{-80,-12.4},{-49.113,-12.4}}, color={0,0,127}));
      connect(bloodFlow, alvEq_with_shunts.Q) annotation (Line(points={{-102,
              -20},{-76,-20},{-76,-16},{-49.113,-16}}, color={0,0,127}));
      connect(cvO2, alvEq_with_shunts.CvO2) annotation (Line(points={{-100,-74},
              {-76,-74},{-76,-23.2},{-49.113,-23.2}}, color={0,0,127}));
      connect(alvEq_with_shunts.CvCO2, cvCO2) annotation (Line(points={{-49.113,
              -26.8},{-49.113,-53.4},{-100,-53.4},{-100,-40}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Text(
              extent={{-32,-76},{24,44}},
              lineColor={0,0,0},
              lineThickness=1,
              textString="1")}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end LungsOneCompartment;

    model LungsTwoCompartments
      extends LungsBase;
      Acidbase.OSA.AlvEq_2units_with_shunts alvEq_2units_with_shunts
        annotation (Placement(transformation(extent={{-50,-82},{52,14}})));
    equation
      connect(alvEq_2units_with_shunts.VO2, O2_inflow.soluteFlow) annotation (
          Line(points={{53.7739,-31},{62,-31},{62,-32},{74,-32},{74,34},{-56,34}},
            color={0,0,127}));
      connect(alvEq_2units_with_shunts.VCO2, CO2_outflow.soluteFlow)
        annotation (Line(points={{53.7739,-36.4},{53.7739,-36},{84,-36},{84,46},
              {-16,46}},color={0,0,127}));
      connect(concentrationMeasure.concentration, alvEq_2units_with_shunts.BEox)
        annotation (Line(points={{12,64},{-76,64},{-76,-4},{-50,-4}},  color={0,
              0,127}));
      connect(VAi, alvEq_2units_with_shunts.VAi) annotation (Line(points={{-104,0},
              {-80,0},{-80,-12.4},{-49.113,-12.4}},    color={0,0,127}));
      connect(bloodFlow, alvEq_2units_with_shunts.Q) annotation (Line(points={{-102,
              -20},{-76,-20},{-76,-16},{-49.113,-16}},      color={0,0,127}));
      connect(cvO2, alvEq_2units_with_shunts.CvO2) annotation (Line(points={{-100,
              -74},{-76,-74},{-76,-23.2},{-49.113,-23.2}},      color={0,0,127}));
      connect(alvEq_2units_with_shunts.CvCO2, cvCO2) annotation (Line(points={{-49.113,
              -26.8},{-49.113,-54.4},{-100,-54.4},{-100,-40}},         color={0,
              0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Text(
              extent={{-32,-76},{24,44}},
              lineColor={0,0,0},
              lineThickness=1,
              textString="2")}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end LungsTwoCompartments;

    block AlveolarVentilation
      parameter Boolean respiratoryCompensationEnabled = true;

      Real PCOA = Pa2mmHg * pCO2a  "mmHg CO2 tension in alveoli"
                                                                annotation (Placement(transformation(extent={{-120,
                -50},{-80,-10}}),     iconTransformation(extent={{-122,48},{-100,
                70}})));
      Real PO2A = Pa2mmHg * pO2a "mmHg O2 tension in alveoli" annotation (Placement(transformation(extent={{-120,
                -10},{-80,30}}),      iconTransformation(extent={{-122,24},{-100,
                46}})));
      Real VI0 = m3ps2lpm *VA0  "Normal value of ventilation"
                                        annotation (Placement(transformation(extent={{-120,
                -90},{-80,-50}}),     iconTransformation(extent={{-122,0},{-100,
                22}})));
      Real VI_ss = VR*VI0 "Ventilation"            annotation (Placement(transformation(extent={{60,-50},
                {100,-10}}),        iconTransformation(extent={{100,16},{128,44}})));
      Real VI(start = 8.19588e-5*m3ps2lpm);
      Physiolibrary.Types.Fraction VR;
      Physiolibrary.Types.Fraction VRA( start=1);

      Real k1,k2,k3,k4,k5,k6;
      Real H;

      // 1 l/min =1000/60 m3/s
      // 1 pascal = 0.00750061683 mmHg
      constant Real m3ps2lpm = 1000*60;
      constant Real Pa2mmHg = 1/133.32 "1 pascal = 0.00750061683 mmHg";
      Physiolibrary.Types.RealIO.PressureInput pCO2a annotation (Placement(
            transformation(extent={{-48,-14},{-8,26}}), iconTransformation(extent={{-120,18},
                {-80,58}})));
      Physiolibrary.Types.RealIO.pHInput pHa annotation (Placement(transformation(
              extent={{-50,40},{-10,80}}), iconTransformation(extent={{-120,-32},{-80,
                8}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput VA = VI/m3ps2lpm annotation (Placement(
            transformation(extent={{10,16},{30,36}}), iconTransformation(extent={{100,
                20},{120,40}})));
      Physiolibrary.Types.RealIO.PressureInput pO2a annotation (Placement(
            transformation(extent={{4,48},{44,88}}), iconTransformation(extent={{-120,60},
                {-80,100}})));

      Physiolibrary.Types.VolumeFlowRate VA0 = modelSettings.AlveolarVentilationFlowRate;
      Real VRD "VR delayed";
      parameter Physiolibrary.Types.Time VRD_T = 1;
      parameter Real corr = -0.07 "ikeda correction";
      parameter Physiolibrary.Types.Time t_var = 1;
      Real var( start = h_term_start);
      // Real h_term = (k1 * H + k6);
      constant Real h_term_start = (0.22 * 10 ^ (9 - 7.4) -12.734);
      parameter Real k1_ac = 0.22;
      Real k6_ac;// = -12.734;
      parameter Real k1_al = 0.0258;
      Real k6_al;// -5.003
      Real h_term = k1 * H + k6;
      Real gas_term = k2 * (k3 + k4 / (PO2A - 32)) * (PCOA + k5);
      outer Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      parameter Real comp = h_term_start;

    equation
      comp = k1_ac * 10 ^ (9 - 7.4) + k6_ac "computes k6 for acidosis";
      comp = k1_al * 10 ^ (9 - 7.4) + k6_al "computes k6 for alkalosis";
    //k1 = if pHa <= 7.4 then 0.22 else 0.0258;
      k1 = if pHa <= 7.4 then k1_ac else k1_al;
    //k6 = if pHa <= 7.4 then -12.734 else -5.003;
      k6 = if pHa <= 7.4 then k6_ac else k6_al;
      k3 = 0.58;
      k4 = 3.496;
      k2 = if PCOA > 40 then 1 else 0.0396;
      k5 = if PCOA > 40 then -32.08 else 160.11;

      H = 10 ^ (9 - pHa);
      // VR = k1 * H + k6 + k2 * (k3 + k4 / (PO2A - 32)) * (PCOA + k5)  + corr;
      der(var)*t_var = h_term - var;
      VR = var + gas_term  + corr;
      // simplified case
      // VRD = VR;
      der(VRD) = (VR - VRD)/VRD_T "Time delay in alveolar ventilation control";
      VI= if respiratoryCompensationEnabled then VRD*VI0 else VI0;
      //der(VI) = (VR * VI0 - VI) / 2;
      VRA=VRD;
      assert(VI >= 0, "Alveolar ventilation out of bounds! Original LIMIT VR >= 0; ");
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                       graphics={            Bitmap(extent={{-80,-20},{82,100}},
                fileName="modelica://Physiolibrary/Resources/Icons/respiracniCentrum.png"),
            Text(
              extent={{-100,-20},{100,-100}},
              lineColor={0,0,255},
              lineThickness=0.5,
              textString="Alveolar
Ventilation"),
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              pattern=LinePattern.Dash)}),
                                    Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}})),
        experiment(StopTime=864000, Interval=150));
    end AlveolarVentilation;
  end Respiratory;

  package Tissues
    model tissuesOrganicAcidProduction "Tissues produce around 60 meq UA per day, which is balanced by the same amount of H+. This recomibnes with the same amount of HCO3"
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3
        annotation (Placement(transformation(extent={{-90,-32},{-70,-12}}),
            iconTransformation(extent={{-108,32},{-88,52}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b UA
        annotation (Placement(transformation(extent={{-90,10},{-70,30}}),
            iconTransformation(extent={{-108,-52},{-88,-32}})));

        outer Interfaces.ModelSettings modelSettings
                              annotation (Placement(transformation(extent={{-100,80},
                {-80,100}})));
    equation
      HCO3.q = modelSettings.metabolismUAFlowRate;
      UA.q + modelSettings.metabolismUAFlowRate = 0;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end tissuesOrganicAcidProduction;

    package Tests
      model testTissuesAndKidneys
        tissuesOrganicAcidProduction tissuesOrganicAcidProduction1
          annotation (Placement(transformation(extent={{34,-30},{100,30}})));
        Kidney.KidneyMetabolicCompensation ammoniumExcretion
          annotation (Placement(transformation(extent={{-82,-26},{0,24}})));
        Physiolibrary.Types.Constants.pHConst pHConst(k=7.2) annotation (
            Placement(transformation(
              extent={{-58,84.5754},{-42,100.576}},
              origin={-42,-36.576},
              rotation=0), visible=true));
        Physiolibrary.Chemical.Components.Substance substanceHCO3(
            useNormalizedVolume=false, solute_start(displayUnit="mol") = 0.0233
            *15)
          annotation (Placement(transformation(extent={{12,30},{32,50}})));
        Physiolibrary.Chemical.Components.Substance substanceUA(
            useNormalizedVolume=false, solute_start=0.006)
          annotation (Placement(transformation(extent={{2,-64},{22,-44}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
          unlimitedSolutionStorage(Conc=100)
          annotation (Placement(transformation(extent={{-66,-50},{-46,-30}})));
        Physiolibrary.Types.Constants.VolumeConst volume(k(displayUnit="l")=
            0.015) annotation (Placement(transformation(
              extent={{-72.5,105.715},{-52.5,125.715}},
              origin={46.5,-71.7155},
              rotation=0), visible=true));
        Physiolibrary.Chemical.Sensors.ConcentrationMeasure
          concentrationMeasure
          annotation (Placement(transformation(extent={{12,70},{32,50}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctCO2(k=24.6)
          annotation (Placement(transformation(extent={{-60,82},{-44,100}})));
        inner Interfaces.ModelSettings modelSettings(PB(displayUnit="Pa"),
            ISFHCO3_start=22)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
        Package.TissueHCO3
                   tissueHCO3_2
          annotation (Placement(transformation(extent={{0,80},{20,100}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature2(k=
              modelSettings.Temperature)
          annotation (Placement(transformation(extent={{80,100},{60,80}})));
      equation
        connect(substanceHCO3.q_out, ammoniumExcretion.hco3_outflow)
          annotation (Line(
            points={{22,40},{22,-6},{-7.10543e-15,-6}},
            color={107,45,134},
            thickness=1));
        connect(tissuesOrganicAcidProduction1.HCO3, substanceHCO3.q_out)
          annotation (Line(
            points={{34.66,12.6},{22,12.6},{22,40}},
            color={107,45,134},
            thickness=1));
        connect(substanceUA.q_out, tissuesOrganicAcidProduction1.UA)
          annotation (Line(
            points={{12,-54},{12,-12.6},{34.66,-12.6}},
            color={107,45,134},
            thickness=1));
        connect(substanceUA.q_out, ammoniumExcretion.UA_outflow) annotation (
            Line(
            points={{12,-54},{12,5.25},{-0.630769,5.25}},
            color={107,45,134},
            thickness=1));
        connect(unlimitedSolutionStorage.q_out, ammoniumExcretion.Cl_outflow)
          annotation (Line(
            points={{-46,-40},{-0.630769,-40},{-0.630769,-7.25}},
            color={107,45,134},
            thickness=1));
        connect(volume.y, substanceUA.solutionVolume) annotation (Line(points={
                {-3.5,43.9995},{-3.5,44},{8,44},{8,-50}}, color={0,0,127}));
        connect(volume.y, substanceHCO3.solutionVolume) annotation (Line(points=
               {{-3.5,43.9995},{6,43.9995},{6,44},{18,44}}, color={0,0,127}));
        connect(concentrationMeasure.q_in, substanceHCO3.q_out) annotation (
            Line(
            points={{22,60},{22,40}},
            color={107,45,134},
            thickness=1));
        connect(tissueHCO3_2.cHCO3, concentrationMeasure.concentration)
          annotation (Line(points={{18,78},{16,78},{16,68},{22,68}}, color={0,0,
                127}));
        connect(tissueHCO3_2.tCO2, ctCO2.y) annotation (Line(points={{1,94.2},{
                -28.5,94.2},{-28.5,91},{-42,91}}, color={0,0,127}));
        connect(temperature2.y, tissueHCO3_2.T) annotation (Line(points={{57.5,
                90},{57.5,98},{19,98}}, color={0,0,127}));
        connect(tissueHCO3_2.pH, ammoniumExcretion.pH) annotation (Line(points={{1,98},{
                0,98},{0,106},{-78.8462,106},{-78.8462,19}},
                               color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end testTissuesAndKidneys;

      model HypoxemiaMetabolism
        limitO2Metabolism limitO2Metabolism1
          annotation (Placement(transformation(extent={{-52,2},{-32,22}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=10000,
          duration=1,
          offset=1)
          annotation (Placement(transformation(extent={{-96,2},{-76,22}})));
      equation
        connect(ramp.y, limitO2Metabolism1.pO2)
          annotation (Line(points={{-75,12},{-50,12}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end HypoxemiaMetabolism;
    end Tests;

    model TissuesOld

      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=0,
            origin={52,-118})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut2(
         useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-18,-118},{2,-98}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage hCO3_inflow(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={28,-118})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut3(
         useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{10,12},{-10,-12}},
            rotation=180,
            origin={-8,-128})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage o2_inflow(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={28,-76})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1 annotation (
         Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={52,-76})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut(
          useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{9.5,10.5},{-9.5,-10.5}},
            rotation=180,
            origin={-8.5,-75.5})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage co2_inflow(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={28,-92})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2 annotation (
         Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={52,-92})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut1(
         useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-18,-102},{2,-82}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure3
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-50,-58})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure4
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-46,-108})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure5
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-58,-128})));
      Acidbase.OSA.BloodABB_OSA bloodABB_OSA annotation (Placement(
            transformation(rotation=0, extent={{-54,-164},{-34,-144}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneHco3(Conductance(
            displayUnit="m3/s") = 1000)
        annotation (Placement(transformation(extent={{100,-128},{80,-108}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneCO2(Conductance(
            displayUnit="l/min") = 0.016666666666667)
        annotation (Placement(transformation(extent={{100,-102},{80,-82}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneO2(Conductance(
            displayUnit="l/min") = 0.016666666666667)
        annotation (Placement(transformation(extent={{100,-86},{80,-66}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{380,-96},{360,-76}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut O2_MetabolicConsumption(
          useSoluteFlowInput=true, SoluteFlow=0.00018333333333333)
        annotation (Placement(transformation(extent={{360,-76},{380,-56}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{166,-44},{174,-36}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{268,-76},{288,-56}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{288,-96},{268,-76}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=false,
          solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{312,-82},{320,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=false,
          solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{300,-84},{308,-76}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{280,-78},{294,-72}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{332,-48},{348,-62}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{334,-70},{350,-84}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{328,-46},{348,-32}})));
      AcidBaseBalance.Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00019166666666667)
        annotation (Placement(transformation(extent={{356,-50},{376,-30}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISFO2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{132,-82},{120,-70}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump4(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{144,-92},{160,-76}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump5(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{144,-122},{160,-106}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISFHCO3(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{132,-124},{120,-112}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=modelSettings.ISFCO2solute_start)
        annotation (Placement(transformation(extent={{180,-94},{200,-74}})));
      Physiolibrary.Chemical.Components.Substance HCO3(useNormalizedVolume=false,
          solute_start=modelSettings.ISFHCO3solute_start)
        annotation (Placement(transformation(extent={{180,-124},{200,-104}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=modelSettings.ISFO2solute_start)
        annotation (Placement(transformation(extent={{180,-68},{200,-48}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump6(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{142,-48},{162,-68}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISFCO2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{132,-98},{120,-86}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(
            extent={{-6,6},{6,-6}},
            rotation=270,
            origin={216,-114})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=90,
            origin={216,-94})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=270,
            origin={216,-66})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump7(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{144,-92},{160,-108}})));
      Package.TissueHCO3 tissueHCO3_2
        annotation (Placement(transformation(extent={{234,-154},{254,-134}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature2(k=modelSettings.Temperature)
        annotation (Placement(transformation(extent={{266,-140},{258,-132}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_2
        annotation (Placement(transformation(extent={{228,-42},{248,-28}})));
      outer Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tO2 annotation (Placement(
            transformation(rotation=0, extent={{-80,-50},{-60,-30}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tCO2 annotation (Placement(
            transformation(rotation=0, extent={{-80,-90},{-60,-70}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BE annotation (Placement(
            transformation(rotation=0, extent={{-80,-130},{-60,-110}})));
    equation
      connect(molarFlowMeasure2.molarFlowRate,unlimitedSolutePumpOut1. soluteFlow)
        annotation (Line(points={{52,-85.6},{-4,-85.6},{-4,-88}}, color={0,0,
              127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePumpOut2. soluteFlow)
        annotation (Line(points={{52,-111.6},{52,-104},{-4,-104}},
                                                                 color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePumpOut3. soluteFlow)
        annotation (Line(points={{52,-111.6},{52,-104},{4,-104},{4,-120},{-4,
              -120},{-4,-123.2}},
                            color={0,0,127}));
      connect(co2_inflow.concentration,bloodABB_OSA. dCO2) annotation (Line(
            points={{22,-92},{18,-92},{18,-140},{-37.8,-140},{-37.8,-144}},
            color={0,0,127}));
      connect(bloodABB_OSA.dO2,o2_inflow. concentration) annotation (Line(
            points={{-41.8,-144},{-41.8,-138},{14,-138},{14,-76},{22,-76}},
            color={0,0,127}));
      connect(bloodABB_OSA.cHCO3,hCO3_inflow. concentration) annotation (Line(
            points={{-34,-144},{20,-144},{20,-118},{22,-118}},   color={0,0,127}));
      connect(bloodABB_OSA.tO2_input,concentrationMeasure3. concentration)
        annotation (Line(points={{-49.6,-144},{-49.6,-138},{-50,-138},{-50,
              -61.2}}, color={0,0,127}));
      connect(bloodABB_OSA._BEox,concentrationMeasure5. concentration)
        annotation (Line(points={{-53.6,-144},{-53.6,-146},{-58,-146},{-58,
              -131.2}},
            color={0,0,127}));
      connect(bloodABB_OSA.tCO2_input,concentrationMeasure4. concentration)
        annotation (Line(points={{-45.8,-144},{-45.8,-142},{-46,-142},{-46,
              -111.2}}, color={0,0,127}));
      connect(o2_inflow.q_out,molarFlowMeasure1. q_in) annotation (Line(
          points={{34,-76},{44,-76}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out,iSFMembraneO2. q_out) annotation (Line(
          points={{60,-76},{80,-76}},
          color={107,45,134},
          thickness=1));
      connect(hCO3_inflow.q_out,molarFlowMeasure. q_in) annotation (Line(
          points={{34,-118},{44,-118}},
          color={107,45,134},
          thickness=1));
      connect(co2_inflow.q_out,molarFlowMeasure2. q_in) annotation (Line(
          points={{34,-92},{44,-92}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut.soluteFlow,molarFlowMeasure1. molarFlowRate)
        annotation (Line(points={{-4.7,-71.3},{-4.35,-71.3},{-4.35,-69.6},{52,
              -69.6}}, color={0,0,127}));
      connect(unlimitedSolutePumpOut.q_in,concentrationMeasure3. q_in)
        annotation (Line(
          points={{-18,-75.5},{-34,-75.5},{-34,-58},{-50,-58}},
          color={107,45,134},
          thickness=0.5));
      connect(molarFlowMeasure2.q_out,iSFMembraneCO2. q_out) annotation (Line(
          points={{60,-92},{80,-92}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut3.q_in,concentrationMeasure5. q_in)
        annotation (Line(
          points={{-18,-128},{-58,-128}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_out,iSFMembraneHco3. q_out) annotation (Line(
          points={{60,-118},{80,-118}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y,CO2buffer. solutionVolume) annotation (Line(
            points={{295.75,-75},{302.4,-75},{302.4,-78.4}},
                                                          color={0,0,127}));
      connect(O2Buffer.solutionVolume,nearToZeroVolume. y) annotation (Line(
            points={{314.4,-76.4},{314.4,-76},{295.75,-76},{295.75,-75}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in,TissueO2Concentration. q_in)
        annotation (Line(
          points={{360,-66},{350,-66},{350,-55},{340,-55}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in,CO2_MetabolicProduction. q_out)
        annotation (Line(
          points={{342,-77},{356,-77},{356,-86},{360,-86}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration,computationpO2pCO2_1. ctO2)
        annotation (Line(points={{340,-49.4},{340,-33.4},{329.818,-33.4}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2,TissueCO2Concentration. concentration)
        annotation (Line(points={{329.818,-46},{346.5,-46},{346.5,-71.4},{342,
              -71.4}},     color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate,CO2_MetabolicProduction. soluteFlow)
        annotation (Line(points={{376,-50},{402,-50},{402,-82},{366,-82}},color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow,limitO2Metabolism. O2FlowRate)
        annotation (Line(points={{374,-62},{396,-62},{396,-30},{376,-30}},color=
             {0,0,127}));
      connect(computationpO2pCO2_1.pO2,limitO2Metabolism. pO2) annotation (Line(
            points={{346.182,-39},{346.091,-39},{346.091,-40},{358,-40}},
            color={0,0,127}));
      connect(concentrationMeasure.q_in,HCO3. q_out) annotation (Line(
          points={{216,-114},{190,-114}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in,CO2. q_out) annotation (Line(
          points={{216,-94},{204,-94},{204,-84},{190,-84}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in,O2. q_out) annotation (Line(
          points={{216,-66},{216,-58},{190,-58}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump7.q_out,CO2. q_out) annotation (Line(
          points={{160,-100},{190,-100},{190,-84}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump6.q_out,O2. q_out) annotation (Line(
          points={{162,-58},{190,-58}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump4.q_out,CO2. q_out) annotation (Line(
          points={{160,-84},{190,-84}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump5.q_out,HCO3. q_out) annotation (Line(
          points={{160,-114},{190,-114}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump5. soluteFlow)
        annotation (Line(points={{52,-111.6},{52,-106},{155.2,-106},{155.2,
              -110.8}},
            color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump7. soluteFlow)
        annotation (Line(points={{52,-111.6},{52,-106},{156,-106},{156,-103.2},
              {155.2,-103.2}},
                             color={0,0,127}));
      connect(volume.y,O2. solutionVolume) annotation (Line(points={{175,-40},{
              186,-40},{186,-54}}, color={0,0,127}));
      connect(volume.y,CO2. solutionVolume) annotation (Line(points={{175,-40},
              {186,-40},{186,-80}}, color={0,0,127}));
      connect(volume.y,HCO3. solutionVolume) annotation (Line(points={{175,-40},
              {186,-40},{186,-110}}, color={0,0,127}));
      connect(molarFlowMeasure2.molarFlowRate,unlimitedSolutePump4. soluteFlow)
        annotation (Line(points={{52,-85.6},{52,-80.8},{155.2,-80.8}}, color={0,
              0,127}));
      connect(molarFlowMeasure1.molarFlowRate,unlimitedSolutePump6. soluteFlow)
        annotation (Line(points={{52,-69.6},{156,-69.6},{156,-62}}, color={0,0,
              127}));
      connect(O2.q_out,diffusion. q_in) annotation (Line(
          points={{190,-58},{268,-58},{268,-66}},
          color={107,45,134},
          thickness=1));
      connect(CO2.q_out,diffusion1. q_out) annotation (Line(
          points={{190,-84},{230,-84},{230,-86},{268,-86}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out,O2_MetabolicConsumption. q_in) annotation (Line(
          points={{288,-66},{360,-66}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in,CO2_MetabolicProduction. q_out) annotation (Line(
          points={{288,-86},{360,-86}},
          color={107,45,134},
          thickness=1));
      connect(ISFO2.concentration,concentrationMeasure2. concentration)
        annotation (Line(points={{132,-76},{232,-76},{232,-66},{222.4,-66}},
            color={0,0,127}));
      connect(tissueHCO3_2.tCO2,concentrationMeasure1. concentration)
        annotation (Line(points={{235,-139.8},{230,-139.8},{230,-94},{222.4,-94}},
            color={0,0,127}));
      connect(concentrationMeasure.concentration,tissueHCO3_2. cHCO3)
        annotation (Line(points={{220.8,-114},{266,-114},{266,-156},{252,-156}},
            color={0,0,127}));
      connect(tissueHCO3_2.T,temperature2. y)
        annotation (Line(points={{253,-136},{257,-136}}, color={0,0,127}));
      connect(ISFCO2.concentration,tissueHCO3_2. cdCO2_) annotation (Line(
            points={{132,-92},{176,-92},{176,-144.8},{235,-144.8}}, color={0,0,
              127}));
      connect(concentrationMeasure.concentration,ISFHCO3. concentration)
        annotation (Line(points={{220.8,-114},{222,-114},{222,-118},{132,-118}},
            color={0,0,127}));
      connect(ISFHCO3.q_out,iSFMembraneHco3. q_in) annotation (Line(
          points={{120,-118},{100,-118}},
          color={107,45,134},
          thickness=1));
      connect(ISFCO2.q_out,iSFMembraneCO2. q_in) annotation (Line(
          points={{120,-92},{100,-92}},
          color={107,45,134},
          thickness=1));
      connect(ISFO2.q_out,iSFMembraneO2. q_in) annotation (Line(
          points={{120,-76},{100,-76}},
          color={107,45,134},
          thickness=1));
      connect(computationpO2pCO2_2.ctCO2,concentrationMeasure1. concentration)
        annotation (Line(points={{229.818,-42},{229.818,-93.417},{222.4,-93.417},
              {222.4,-94}},           color={0,0,127}));
      connect(concentrationMeasure2.concentration,computationpO2pCO2_2. ctO2)
        annotation (Line(points={{222.4,-66},{222,-66},{222,-29.4},{229.818,
              -29.4}},    color={0,0,127}));
      connect(tO2, concentrationMeasure3.q_in) annotation (Line(points={{-70,-40},
              {-70,-58},{-50,-58}},      color={107,45,134},
          thickness=0.5));
      connect(tCO2, unlimitedSolutePumpOut1.q_in) annotation (Line(points={{-70,-80},
              {-70,-92},{-18,-92}}, color={107,45,134},
          thickness=0.5));
      connect(tCO2, unlimitedSolutePumpOut2.q_in) annotation (Line(points={{-70,-80},
              {-70,-108},{-18,-108}}, color={107,45,134},
          thickness=0.5));
      connect(BE, unlimitedSolutePumpOut3.q_in) annotation (Line(points={{-70,-120},
              {-70,-128},{-18,-128}}, color={107,45,134},
          thickness=0.5));
      connect(tCO2, concentrationMeasure4.q_in) annotation (Line(
          points={{-70,-80},{-70,-108},{-46,-108}},
          color={107,45,134},
          thickness=0.5));
      annotation (Diagram(coordinateSystem(extent={{-70,-220},{410,-20}})), Icon(
            coordinateSystem(extent={{-70,-220},{410,-20}})));
    end TissuesOld;

    model TissuesOldWithUAProduction
      extends AcidBaseBalance.Tissues.TissuesOld;
      AcidBaseBalance.Tissues.tissuesOrganicAcidProduction
        tissuesOrganicAcidProduction
        annotation (Placement(transformation(extent={{192,-190},{236,-152}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b UA annotation (Placement(
            transformation(rotation=0, extent={{-80,-190},{-60,-170}})));
    equation
      connect(tissuesOrganicAcidProduction.HCO3, HCO3.q_out) annotation (Line(
          points={{192.44,-163.02},{190,-163.02},{190,-114}},
          color={107,45,134},
          thickness=1));
      connect(UA, tissuesOrganicAcidProduction.UA) annotation (Line(
          points={{-70,-180},{62,-180},{62,-178.98},{192.44,-178.98}},
          color={107,45,134},
          thickness=1));
    end TissuesOldWithUAProduction;

    package Deprecated
      model VeinsEquilibratedWithTissues
        replaceable BloodComponents.BloodElasticVesselCompliance veins(
          volume_start(displayUnit="l") = 0.00325,
          ZeroPressureVolume(displayUnit="l") = 0.00295,
          Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
          O2_concentration=6.02579,
          CO2_concentration=23.6461,
          useO2_input=true,
          useCO2_input=true,
          useBEox_input=true) constrainedby BloodComponents.BloodVessel
          annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-56,-2})), __Dymola_choicesAllMatching=true);
        Interfaces.BloodPort_in bloodPort_in annotation (Placement(
              transformation(rotation=0, extent={{398,-26},{446,26}})));
        Interfaces.BloodPort_out bloodPort_out annotation (Placement(
              transformation(rotation=0, extent={{-142,-28},{-94,24}})));
        AcidBaseBalance.Tissues.TissuesOld tissues annotation (Placement(
              transformation(rotation=0, extent={{-40,-44},{-20,-24}})));
      equation
        connect(veins.port_O2, tissues.tO2) annotation (Line(
            points={{-50.2,-11.8},{-50,-11.8},{-50,-26},{-40,-26}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tCO2, veins.port_CO2) annotation (Line(
            points={{-40,-30},{-53.8,-30},{-53.8,-11.8}},
            color={107,45,134},
            thickness=1));
        connect(tissues.BE, veins.port_BEox) annotation (Line(
            points={{-40,-34},{-58,-34},{-58,-11.8}},
            color={107,45,134},
            thickness=1));
        connect(bloodPort_in, veins.bloodPort_in) annotation (Line(points={{422,0},
                {30,0},{30,-2},{-46.2,-2}}, color={28,108,200}));
        connect(bloodPort_out, veins.bloodPort_out)
          annotation (Line(points={{-118,-2},{-66,-2}}, color={28,108,200}));
        annotation (Diagram(coordinateSystem(extent={{-120,-260},{420,140}})),
            Icon(coordinateSystem(extent={{-120,-260},{420,140}})));
      end VeinsEquilibratedWithTissues;
    end Deprecated;

    model Tissues2
      extends capillaryMembraneO2CO2;
     // extends Physiolibrary.Icons.OtherTissue;
      import AcidBaseBalance.Interfaces.*;
      import AcidBaseBalance.Ions.*;


      parameter Real IonAndHCO3Permeabilities[:] = cat(1,modelSettings.IonPermeabilities, {modelSettings.HCO3Permeability});
      parameter Integer IonAndHCO3Charges[:] = cat(1,modelSettings.IonElemChrgs, {-1});
      parameter Integer NumberOfIonsAndHCO3 = size(modelSettings.IonElemChrgs, 1) + 1;

      Modelica.Blocks.Math.Gain                 gain(k=1)
        annotation (Placement(transformation(extent={{158,92},{150,100}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_O2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,38},{2,50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump4(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{26,28},{42,44}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump5(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{26,-10},{42,6}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_HCO3(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,-4},{2,8}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{62,26},{82,46}})));
      Physiolibrary.Chemical.Components.Substance HCO3(useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{62,-10},{82,10}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{62,70},{82,90}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump6(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{24,90},{44,70}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_CO2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,22},{2,34}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=180,
            origin={98,0})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={126,52})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={96,80})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump7(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{26,28},{42,12}})));
      Package.TissueHCO3 tissueHCO3_2
        annotation (Placement(transformation(extent={{128,18},{148,38}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature2(k=modelSettings.Temperature)
        annotation (Placement(transformation(extent={{160,32},{152,40}})));
      Physiolibrary.Chemical.Components.Substance ions[AcidBaseBalance.Ions.IonsEnum](
         each useNormalizedVolume=false, each Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{62,-70},{82,-50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a ions_plasma[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(rotation=0, extent={{-150,-110},{
                -130,-90}}), iconTransformation(extent={{-150,-110},{-130,-90}})));
      Physiolibrary.Chemical.Components.Membrane
                                       membraneVariableCharges(
        NumberOfParticles=NumberOfIonsAndHCO3,
        Charges=IonAndHCO3Charges,
        Permeabilities=IonAndHCO3Permeabilities,
        solventFractionInside=0.96,
        solventFractionOutside=0.96) if modelSettings.useIons
        annotation (Placement(transformation(extent={{-18,-70},{2,-50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tO2_ISF annotation (
          Placement(transformation(rotation=0, extent={{150,50},{170,70}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={160,60})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tCO2_ISF annotation (
          Placement(transformation(rotation=0, extent={{150,12},{170,32}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={160,20})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3_ISF annotation (
          Placement(transformation(rotation=0, extent={{150,-30},{170,-10}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={160,-20})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a ions_ISF[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(rotation=0, extent={{150,-110},{
                170,-90}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={160,-100})));
      Ions.IonChargeCorrection plasma_ionChargeCorrection(elementaryCharges=
            modelSettings.IonElemChrgs) if modelSettings.useIons
        annotation (Placement(transformation(extent={{-42,-70},{-22,-50}})));
      Ions.IonChargeCorrection isf_ionChargeCorrection(elementaryCharges=
            modelSettings.IonElemChrgs) if modelSettings.useIons
        annotation (Placement(transformation(extent={{30,-70},{10,-50}})));
      Interfaces.OneToMany oneToMany annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            rotation=270,
            origin={70,-44})));


      Ions.ISF_initialization iSF_initialization(permeabilities=modelSettings.IonPermeabilities,
          elementary_charges=modelSettings.IonElemChrgs,
        isf_volume=modelSettings.ISFvolume_start,
        isf_dCO2=1.5)
        annotation (Placement(transformation(extent={{-20,-38},{0,-18}})));
      Physiolibrary.Osmotic.Components.OsmoticCell osmoticCell(
          useImpermeableSolutesInput=true, volume_start=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{140,-130},{160,-110}})));
      Physiolibrary.Osmotic.Sources.UnlimitedSolution unlimitedSolution(
          useOsmolarityInput=true) if modelSettings.useOsmoticFlow
        annotation (Placement(transformation(extent={{-14,-130},{6,-110}})));
      Physiolibrary.Osmotic.Sensors.FlowMeasure flowMeasure if modelSettings.useOsmoticFlow
        annotation (Placement(transformation(extent={{16,-130},{36,-110}})));
      Physiolibrary.Osmotic.Components.Membrane membrane(HydraulicPressureIn(
            displayUnit="Pa") = 1670, cond(displayUnit="m3/(Pa.s)") = 1e6) if
                                                            modelSettings.useOsmoticFlow
        annotation (Placement(transformation(extent={{44,-130},{64,-110}})));
      Modelica.Blocks.Math.Sum sum1(nin=size(ions_plasma, 1))
        annotation (Placement(transformation(extent={{84,-78},{92,-70}})));
      Modelica.Blocks.Math.MultiSum multiSum(nu=3)
        annotation (Placement(transformation(extent={{114,-84},{126,-72}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_Flow if
        modelSettings.useOsmoticFlow
       annotation (
          Placement(transformation(extent={{-150,-130},{-130,-110}}),
            iconTransformation(extent={{-152,88},{-128,112}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedOutflowPump unlimitedOutflowPump(
          useSolutionFlowInput=true) if modelSettings.useOsmoticFlow
        annotation (Placement(transformation(extent={{-100,-110},{-80,-130}})));
      Physiolibrary.Chemical.Components.Substance ImpermeantSolutes(
        useNormalizedVolume=false,
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        solute_start=0.0095)
        annotation (Placement(transformation(extent={{62,-102},{82,-82}})));
    initial equation
       HCO3.state = iSF_initialization.isf_HCO3_solute;
       ions.state = iSF_initialization.isf_solutes;
       CO2.state = iSF_initialization.isf_tCO2_solute;
       O2.state = plasma_dO2.concentration*modelSettings.ISFvolume_start;
    equation
    //    when initial() then
    //      reinit(HCO3.state,iSF_initialization.HCO3InitialConcentration*10);
    //    end when;

      connect(concentrationMeasure.q_in,HCO3. q_out) annotation (Line(
          points={{98,0},{92,0},{92,-2},{86,-2},{86,0},{72,0}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in,CO2. q_out) annotation (Line(
          points={{126,52},{116,52},{116,36},{72,36}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in,O2. q_out) annotation (Line(
          points={{96,80},{72,80}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump7.q_out,CO2. q_out) annotation (Line(
          points={{42,20},{72,20},{72,36}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump6.q_out,O2. q_out) annotation (Line(
          points={{44,80},{72,80}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump4.q_out,CO2. q_out) annotation (Line(
          points={{42,36},{72,36}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump5.q_out,HCO3. q_out) annotation (Line(
          points={{42,-2},{58,-2},{58,0},{72,0}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump5. soluteFlow)
        annotation (Line(points={{-38,8.4},{-38,14},{37.2,14},{37.2,1.2}},
            color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump7. soluteFlow)
        annotation (Line(points={{-38,8.4},{-38,14},{30,14},{30,16.8},{37.2,
              16.8}},        color={0,0,127}));
      connect(gain.y, O2.solutionVolume) annotation (Line(points={{149.6,96},{
              68,96},{68,84}}, color={0,0,127}));
      connect(gain.y, CO2.solutionVolume) annotation (Line(points={{149.6,96},{
              68,96},{68,40}}, color={0,0,127}));
      connect(gain.y, HCO3.solutionVolume)
        annotation (Line(points={{149.6,96},{68,96},{68,4}}, color={0,0,127}));
      connect(molarFlowMeasure2.molarFlowRate,unlimitedSolutePump4. soluteFlow)
        annotation (Line(points={{-38,34.4},{-38,39.2},{37.2,39.2}},   color={0,
              0,127}));
      connect(molarFlowMeasure1.molarFlowRate,unlimitedSolutePump6. soluteFlow)
        annotation (Line(points={{-38,50.4},{38,50.4},{38,76}},     color={0,0,
              127}));
      connect(ISF_O2.concentration, concentrationMeasure2.concentration)
        annotation (Line(points={{14,44},{96,44},{96,73.6}},      color={0,0,127}));
      connect(tissueHCO3_2.tCO2,concentrationMeasure1. concentration)
        annotation (Line(points={{129,32.2},{126,32.2},{126,45.6}},
            color={0,0,127}));
      connect(concentrationMeasure.concentration,tissueHCO3_2. cHCO3)
        annotation (Line(points={{98,4.8},{146,4.8},{146,16}},
            color={0,0,127}));
      connect(tissueHCO3_2.T,temperature2. y)
        annotation (Line(points={{147,36},{151,36}},     color={0,0,127}));
      connect(ISF_CO2.concentration, tissueHCO3_2.cdCO2_) annotation (Line(points={{14,28},
              {22,28},{22,27.2},{129,27.2}},                color={0,0,127}));
      connect(concentrationMeasure.concentration, ISF_HCO3.concentration)
        annotation (Line(points={{98,4.8},{98,2},{14,2}},            color={0,0,127}));
      connect(ISF_CO2.q_out, iSFMembraneCO2.q_in) annotation (Line(
          points={{2,28},{-6,28}},
          color={107,45,134},
          thickness=1));
      connect(ISF_O2.q_out, iSFMembraneO2.q_in) annotation (Line(
          points={{2,44},{-6,44}},
          color={107,45,134},
          thickness=1));
      connect(O2.q_out, tO2_ISF) annotation (Line(
          points={{72,80},{116,80},{116,60},{160,60}},
          color={107,45,134},
          thickness=1));
      connect(CO2.q_out, tCO2_ISF) annotation (Line(
          points={{72,36},{116,36},{116,22},{160,22}},
          color={107,45,134},
          thickness=1));
      connect(HCO3.q_out, HCO3_ISF) annotation (Line(
          points={{72,0},{116,0},{116,-20},{160,-20}},
          color={107,45,134},
          thickness=1));
      connect(ions.q_out, ions_ISF) annotation (Line(
          points={{72,-60},{116,-60},{116,-100},{160,-100}},
          color={107,45,134},
          thickness=1));
      connect(plasma_ionChargeCorrection.port_a, ions_plasma) annotation (Line(
          points={{-42,-60},{-84,-60},{-84,-100},{-140,-100}},
          color={107,45,134},
          thickness=1));
      connect(oneToMany.y, ions.solutionVolume)
        annotation (Line(points={{68,-48},{68,-56}},     color={0,0,127}));
      connect(oneToMany.u, O2.solutionVolume)
        annotation (Line(points={{68,-40},{68,84}},     color={0,0,127}));
      connect(plasma_ionChargeCorrection.pH, bloodABB_OSA.pH) annotation (Line(
            points={{-42,-56},{-54,-56},{-54,-34},{-92,-34}},color={0,0,127}));
      connect(plasma_ionChargeCorrection.port_b, membraneVariableCharges.particlesInside)
        annotation (Line(
          points={{-22,-60},{-18,-60}},
          color={107,45,134},
          thickness=1));
      connect(membraneVariableCharges.particlesOutside, isf_ionChargeCorrection.port_b)
        annotation (Line(
          points={{2,-60},{10,-60}},
          color={107,45,134},
          thickness=1));
      connect(plasma_ionChargeCorrection.HCO3, molarFlowMeasure.q_out) annotation (
          Line(
          points={{-42,-50},{-48,-50},{-48,-40},{-30,-40},{-30,2}},
          color={107,45,134},
          thickness=1));
      connect(isf_ionChargeCorrection.HCO3, ISF_HCO3.q_out) annotation (Line(
          points={{30,-50},{30,-40},{2,-40},{2,2}},
          color={107,45,134},
          thickness=1));
      connect(isf_ionChargeCorrection.port_a, ions.q_out) annotation (Line(
          points={{30,-60},{72,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSF_initialization.HCO3, molarFlowMeasure.q_out) annotation (Line(
          points={{-20,-18},{-30,-18},{-30,2}},
          color={107,45,134},
          thickness=1));

      connect(iSF_initialization.plasma_conc, ions_plasma) annotation (Line(
          points={{-20,-28},{-84,-28},{-84,-100},{-140,-100}},
          color={107,45,134},
          thickness=1));
      connect(bloodABB_OSA.pH, isf_ionChargeCorrection.pH) annotation (Line(points={{-92,-34},
              {42,-34},{42,-56},{30,-56}},                  color={0,0,127}));
      connect(membrane.q_out, osmoticCell.q_in[1]) annotation (Line(
          points={{64,-120},{150,-120}},
          color={127,127,0},
          thickness=1));
      connect(plasma_ionChargeCorrection.osmolarity, unlimitedSolution.osmolarity)
        annotation (Line(points={{-22,-70},{-22,-120},{-14,-120}},
            color={0,0,127}));
      connect(ions.solute, sum1.u) annotation (Line(points={{78,-70},{78,-74},{
              83.2,-74}}, color={0,0,127}));
      connect(sum1.y, multiSum.u[1]) annotation (Line(points={{92.4,-74},{104,
              -74},{104,-75.2},{114,-75.2}}, color={0,0,127}));
      connect(HCO3.solute, multiSum.u[2]) annotation (Line(points={{78,-10},{96,
              -10},{96,-78},{114,-78}},     color={0,0,127}));
      connect(multiSum.y, osmoticCell.impermeableSolutes[1]) annotation (Line(
            points={{127.02,-78},{142,-78},{142,-114}}, color={0,0,127}));
      connect(unlimitedSolution.port, flowMeasure.q_in) annotation (Line(
          points={{6,-120},{16,-120}},
          color={127,127,0},
          thickness=1));
      connect(membrane.q_in, flowMeasure.q_out) annotation (Line(
          points={{44,-120},{36,-120}},
          color={127,127,0},
          thickness=1));
      connect(osmoticCell.volume, gain.u) annotation (Line(points={{156,-130},{
              180,-130},{180,96},{158.8,96}}, color={0,0,127}));
      connect(port_Flow, unlimitedOutflowPump.q_in) annotation (Line(
          points={{-140,-120},{-100,-120}},
          color={0,0,0},
          thickness=1));
      connect(unlimitedOutflowPump.solutionFlow, flowMeasure.volumeFlowRate)
        annotation (Line(points={{-90,-127},{-90,-136},{26,-136},{26,-128}},
            color={0,0,127}));
      connect(HCO3.solutionVolume, ImpermeantSolutes.solutionVolume)
        annotation (Line(points={{68,4},{68,-88}}, color={0,0,127}));
      connect(ImpermeantSolutes.solute, multiSum.u[3]) annotation (Line(points=
              {{78,-102},{114,-102},{114,-80.8}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-140,-140},{160,100}}),graphics={
            Line(
              points={{102,-28},{102,-6},{88,-6}},
              color={0,140,72},
              pattern=LinePattern.Dash,
              thickness=1,
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{102,-6},{102,32},{88,32}},
              color={0,140,72},
              pattern=LinePattern.Dash,
              thickness=1,
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{-6,-28},{102,-28},{102,-64},{90,-64}},
              color={0,140,72},
              pattern=LinePattern.Dash,
              thickness=1,
              arrow={Arrow.None,Arrow.Filled}),
            Text(
              extent={{-6,-26},{110,-18}},
              lineColor={0,140,72},
              pattern=LinePattern.Dash,
              lineThickness=1,
              fillColor={240,233,6},
              fillPattern=FillPattern.Solid,
              textString="Initialization via initial equations"),
            Text(
              extent={{76,-118},{118,-108}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="Conditional"),
            Rectangle(
              extent={{-72,-106},{122,-138}},
              lineColor={244,125,35},
              lineThickness=1,
              pattern=LinePattern.Dash),
            Text(
              extent={{32,-138},{120,-128}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="useOsmoticFlow",
              horizontalAlignment=TextAlignment.Right)}),                   Icon(
            coordinateSystem(extent={{-140,-140},{160,100}}), graphics={
            Rectangle(
              extent={{80,100},{160,-100}},
              lineThickness=0.5,
              fillColor={85,170,255},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),
            Rectangle(
              extent={{-140,100},{-80,-100}},
              lineThickness=0.5,
              fillColor={255,85,85},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),     Bitmap(extent={{-80,-80},{80,80}},
                fileName="modelica://Physiolibrary/Resources/Icons/pojivovaTkan.png"),
                                                                        Text(
              extent={{-104,-152},{96,-72}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash,
              textString="ISF"), Rectangle(
              extent={{-140,100},{160,-140}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash)}));
    end Tissues2;

    model SimpleCells
      extends Physiolibrary.Icons.Cell;
      import Ions = AcidBaseBalance.Ions.IonsEnum;
      parameter Boolean useMetabolicUaProduction = false;
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump
        CO2_MetabolicProduction(useSoluteFlowInput=true, SoluteFlow=
            0.00016666666666667)
        annotation (Placement(transformation(extent={{70,10},{50,30}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{50,70},{70,90}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=
            modelSettings.O2DiffusionPermeability)
        annotation (Placement(transformation(extent={{-42,70},{-22,90}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=
            modelSettings.CO2DiffusionPermeability)
        annotation (Placement(transformation(extent={{-22,10},{-42,30}})));
      AcidBaseBalance.Tissues.limitO2Metabolism limitO2Metabolism(
          metabolismFlowRate=modelSettings.metabolismO2FlowRate)
        annotation (Placement(transformation(extent={{68,40},{88,60}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a O2 annotation (Placement(
            transformation(rotation=0, extent={{-110,50},{-90,70}}),
            iconTransformation(extent={{-110,50},{-90,70}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b CO2 annotation (Placement(
            transformation(rotation=0, extent={{-110,10},{-90,30}}),
            iconTransformation(extent={{-110,10},{-90,30}})));
      tissuesOrganicAcidProduction tissuesOrganicAcidProduction1 if
        useMetabolicUaProduction
        annotation (Placement(transformation(extent={{-40,-54},{-20,-34}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3 annotation (Placement(
            transformation(rotation=0, extent={{-110,-30},{-90,-10}}),
            iconTransformation(extent={{-110,-30},{-90,-10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b ions[Ions] annotation (
          Placement(transformation(rotation=0, extent={{-110,-110},{-90,-90}}),
            iconTransformation(extent={{-110,-110},{-90,-90}})));
      Interfaces.IonSelector ionSelector(selectedIon=AcidBaseBalance.Ions.IonsEnum.Ua)
        annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
      outer Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump
        CO2_MetabolicProduction1(useSoluteFlowInput=true, SoluteFlow=
            0.00016666666666667)
        annotation (Placement(transformation(extent={{40,-70},{20,-50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        CO2_MetabolicProduction2(useSoluteFlowInput=true, SoluteFlow=
            0.00016666666666667)
        annotation (Placement(transformation(extent={{20,-10},{40,-30}})));
      Physiolibrary.Types.Constants.PressureConst pressure(k(displayUnit="Pa")=
             6000)
        annotation (Placement(transformation(extent={{42,46},{50,54}})));
    equation
      connect(limitO2Metabolism.CO2FlowRate,CO2_MetabolicProduction. soluteFlow)
        annotation (Line(points={{88,40},{90,40},{90,24},{56,24}},        color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow,limitO2Metabolism. O2FlowRate)
        annotation (Line(points={{64,84},{88,84},{88,60}},                color=
             {0,0,127}));
      connect(diffusion.q_out,O2_MetabolicConsumption. q_in) annotation (Line(
          points={{-22,80},{50,80}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in,CO2_MetabolicProduction. q_out) annotation (Line(
          points={{-22,20},{50,20}},
          color={107,45,134},
          thickness=1));
      connect(O2, diffusion.q_in) annotation (Line(
          points={{-100,60},{-72,60},{-72,80},{-42,80}},
          color={107,45,134},
          thickness=1));
      connect(CO2, diffusion1.q_out) annotation (Line(
          points={{-100,20},{-42,20}},
          color={107,45,134},
          thickness=1));
      connect(ions, ionSelector.port_a) annotation (Line(
          points={{-100,-100},{-84,-100},{-84,-60},{-80,-60}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector.port_b, tissuesOrganicAcidProduction1.UA) annotation (
         Line(
          points={{-60,-60},{-44,-60},{-44,-48.2},{-39.8,-48.2}},
          color={107,45,134},
          thickness=1));
      connect(tissuesOrganicAcidProduction1.HCO3, HCO3) annotation (Line(
          points={{-39.8,-39.8},{-69.9,-39.8},{-69.9,-20},{-100,-20}},
          color={107,45,134},
          thickness=1));
      connect(CO2_MetabolicProduction2.q_in, HCO3) annotation (Line(
          points={{20,-20},{-100,-20}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector.port_b, CO2_MetabolicProduction1.q_out) annotation (
          Line(
          points={{-60,-60},{20,-60}},
          color={107,45,134},
          thickness=1));
      connect(limitO2Metabolism.lactateFlowRate, CO2_MetabolicProduction2.soluteFlow)
        annotation (Line(points={{88,50},{94,50},{94,-40},{34,-40},{34,-24}},
            color={0,0,127}));
      connect(limitO2Metabolism.lactateFlowRate, CO2_MetabolicProduction1.soluteFlow)
        annotation (Line(points={{88,50},{94,50},{94,-40},{26,-40},{26,-56}},
            color={0,0,127}));
      connect(limitO2Metabolism.pO2, pressure.y)
        annotation (Line(points={{70,50},{51,50}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-100,-100},{100,100}}),
            graphics={
            Rectangle(
              extent={{-52,-10},{14,-76}},
              lineColor={244,125,35},
              lineThickness=1,
              pattern=LinePattern.Dash),
            Text(
              extent={{-50,-20},{-8,-10}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="Conditional"),
            Text(
              extent={{-64,-86},{24,-76}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="UseMetabolicUABalance")}),
          Icon(coordinateSystem(extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash), Text(
              extent={{-100,-40},{100,40}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              textString="Cells")}));
    end SimpleCells;

    model Tissues3
      import AcidBaseBalance.Interfaces.*;
      import AcidBaseBalance.Ions.*;

      constant Real IonAndHCO3Permeabilities[:] = cat(1,modelSettings.IonPermeabilities, {modelSettings.HCO3Permeability});
      constant Integer IonAndHCO3Charges[:] = cat(1,modelSettings.IonElemChrgs, {-1});
      parameter Integer NumberOfIonsAndHCO3 = size(modelSettings.IonElemChrgs, 1) + 1;

      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=0,
            origin={46,-118})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut2(
         useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-18,-118},{2,-98}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_HCO3(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={28,-118})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut3(
         useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{10,12},{-10,-12}},
            rotation=180,
            origin={-8,-128})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_dO2(
          useConcentrationInput=true) "dissolved O2" annotation (Placement(
            transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={28,-76})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1 annotation (
         Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={46,-76})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut(
          useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{9.5,10.5},{-9.5,-10.5}},
            rotation=180,
            origin={-8.5,-75.5})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_dCO2(
          useConcentrationInput=true) "dissolved CO2" annotation (Placement(
            transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={28,-92})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2 annotation (
         Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={46,-92})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut1(
         useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-18,-102},{2,-82}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure3
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-50,-58})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure4
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-46,-108})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure5
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-58,-128})));
      Acidbase.OSA.BloodABB_OSA bloodABB_OSA annotation (Placement(
            transformation(rotation=0, extent={{-54,-164},{-34,-144}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneCO2(Conductance(
            displayUnit="l/min") = 0.016666666666667)
        annotation (Placement(transformation(extent={{78,-102},{58,-82}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneO2(Conductance(
            displayUnit="l/min") = 0.016666666666667)
        annotation (Placement(transformation(extent={{78,-86},{58,-66}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{126,-26},{134,-18}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_O2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{92,-82},{80,-70}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump4(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{104,-92},{120,-76}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump5(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{104,-130},{120,-114}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_HCO3(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{92,-124},{80,-112}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=modelSettings.ISFCO2solute_start)
        annotation (Placement(transformation(extent={{140,-94},{160,-74}})));
      Physiolibrary.Chemical.Components.Substance HCO3(useNormalizedVolume=false,
          solute_start=modelSettings.ISFHCO3solute_start)
        annotation (Placement(transformation(extent={{140,-130},{160,-110}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=modelSettings.ISFO2solute_start)
        annotation (Placement(transformation(extent={{140,-50},{160,-30}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump6(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{102,-30},{122,-50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_CO2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{92,-98},{80,-86}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=180,
            origin={176,-120})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={190,-84})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={174,-40})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump7(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{104,-92},{120,-108}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature2(k=modelSettings.Temperature)
        annotation (Placement(transformation(extent={{226,-140},{218,-132}})));
      outer Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tO2 annotation (Placement(
            transformation(rotation=0, extent={{-80,-50},{-60,-30}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tCO2 annotation (Placement(
            transformation(rotation=0, extent={{-80,-90},{-60,-70}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BE annotation (Placement(
            transformation(rotation=0, extent={{-80,-130},{-60,-110}})));
      Physiolibrary.Chemical.Components.Substance ions[AcidBaseBalance.Ions.IonsEnum](
         each useNormalizedVolume=false, each Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{140,-190},{160,-170}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a ions_plasma[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(rotation=0, extent={{-80,-190},{-60,-170}})));
      Physiolibrary.Chemical.Components.Membrane
                                       membraneVariableCharges(
        NumberOfParticles=NumberOfIonsAndHCO3,
        Charges=IonAndHCO3Charges,
        Permeabilities=IonAndHCO3Permeabilities,
        solventFractionInside=0.96,
        solventFractionOutside=0.96)
        annotation (Placement(transformation(extent={{60,-190},{80,-170}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tO2_ISF annotation (
          Placement(transformation(rotation=0, extent={{230,-50},{250,-30}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tCO2_ISF annotation (
          Placement(transformation(rotation=0, extent={{230,-78},{250,-58}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3_ISF annotation (
          Placement(transformation(rotation=0, extent={{230,-130},{250,-110}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a ions_ISF[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(rotation=0, extent={{230,-190},{250,-170}})));
      Ions.IonChargeCorrection plasma_ionChargeCorrection(elementaryCharges=
            modelSettings.IonElemChrgs)
        annotation (Placement(transformation(extent={{36,-190},{56,-170}})));
      Ions.IonChargeCorrection isf_ionChargeCorrection(elementaryCharges=
            modelSettings.IonElemChrgs)
        annotation (Placement(transformation(extent={{108,-190},{88,-170}})));
      Interfaces.OneToMany oneToMany annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            rotation=270,
            origin={148,-164})));
      Ions.ISF_initialization iSF_initialization(permeabilities=modelSettings.IonPermeabilities,
          elementary_charges=modelSettings.IonElemChrgs)
        annotation (Placement(transformation(extent={{60,-220},{80,-200}})));
      Physiolibrary.Types.Constants.pHConst     pH(k=7.2)
        annotation (Placement(transformation(extent={{12,-164},{20,-156}})));
      Physiolibrary.Types.Constants.pHConst     pH1(k=7.2)
        annotation (Placement(transformation(extent={{130,-168},{122,-160}})));
    equation
    //   when initial() then
    //     reinit(HCO3.state,iSF_initialization.HCO3InitialConcentration);
    //   end when;

      connect(molarFlowMeasure2.molarFlowRate,unlimitedSolutePumpOut1. soluteFlow)
        annotation (Line(points={{46,-85.6},{-4,-85.6},{-4,-88}}, color={0,0,
              127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePumpOut2. soluteFlow)
        annotation (Line(points={{46,-111.6},{46,-104},{-4,-104}},
                                                                 color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePumpOut3. soluteFlow)
        annotation (Line(points={{46,-111.6},{46,-104},{-2,-104},{-2,-120},{-4,-120},
              {-4,-123.2}}, color={0,0,127}));
      connect(plasma_dCO2.concentration, bloodABB_OSA.dCO2) annotation (Line(points=
             {{22,-92},{18,-92},{18,-140},{-37.8,-140},{-37.8,-144}}, color={0,0,127}));
      connect(bloodABB_OSA.dO2, plasma_dO2.concentration) annotation (Line(points={{
              -41.8,-144},{-41.8,-138},{14,-138},{14,-76},{22,-76}}, color={0,0,127}));
      connect(bloodABB_OSA.cHCO3,plasma_HCO3. concentration) annotation (Line(
            points={{-34,-144},{20,-144},{20,-118},{22,-118}},   color={0,0,127}));
      connect(bloodABB_OSA.tO2_input,concentrationMeasure3. concentration)
        annotation (Line(points={{-49.6,-144},{-49.6,-138},{-50,-138},{-50,
              -61.2}}, color={0,0,127}));
      connect(bloodABB_OSA._BEox,concentrationMeasure5. concentration)
        annotation (Line(points={{-53.6,-144},{-53.6,-146},{-58,-146},{-58,
              -131.2}},
            color={0,0,127}));
      connect(bloodABB_OSA.tCO2_input,concentrationMeasure4. concentration)
        annotation (Line(points={{-45.8,-144},{-45.8,-142},{-46,-142},{-46,
              -111.2}}, color={0,0,127}));
      connect(plasma_dO2.q_out, molarFlowMeasure1.q_in) annotation (Line(
          points={{34,-76},{38,-76}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out,iSFMembraneO2. q_out) annotation (Line(
          points={{54,-76},{58,-76}},
          color={107,45,134},
          thickness=1));
      connect(plasma_HCO3.q_out,molarFlowMeasure. q_in) annotation (Line(
          points={{34,-118},{38,-118}},
          color={107,45,134},
          thickness=1));
      connect(plasma_dCO2.q_out, molarFlowMeasure2.q_in) annotation (Line(
          points={{34,-92},{38,-92}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut.soluteFlow,molarFlowMeasure1. molarFlowRate)
        annotation (Line(points={{-4.7,-71.3},{-10.35,-71.3},{-10.35,-69.6},{46,-69.6}},
                       color={0,0,127}));
      connect(unlimitedSolutePumpOut.q_in,concentrationMeasure3. q_in)
        annotation (Line(
          points={{-18,-75.5},{-34,-75.5},{-34,-58},{-50,-58}},
          color={107,45,134},
          thickness=0.5));
      connect(molarFlowMeasure2.q_out,iSFMembraneCO2. q_out) annotation (Line(
          points={{54,-92},{58,-92}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut3.q_in,concentrationMeasure5. q_in)
        annotation (Line(
          points={{-18,-128},{-58,-128}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure.q_in,HCO3. q_out) annotation (Line(
          points={{176,-120},{170,-120},{170,-122},{164,-122},{164,-120},{150,-120}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in,CO2. q_out) annotation (Line(
          points={{190,-84},{150,-84}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in,O2. q_out) annotation (Line(
          points={{174,-40},{150,-40}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump7.q_out,CO2. q_out) annotation (Line(
          points={{120,-100},{150,-100},{150,-84}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump6.q_out,O2. q_out) annotation (Line(
          points={{122,-40},{150,-40}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump4.q_out,CO2. q_out) annotation (Line(
          points={{120,-84},{150,-84}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump5.q_out,HCO3. q_out) annotation (Line(
          points={{120,-122},{136,-122},{136,-120},{150,-120}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump5. soluteFlow)
        annotation (Line(points={{46,-111.6},{46,-106},{115.2,-106},{115.2,-118.8}},
            color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump7. soluteFlow)
        annotation (Line(points={{46,-111.6},{46,-106},{108,-106},{108,-103.2},{115.2,
              -103.2}},      color={0,0,127}));
      connect(volume.y,O2. solutionVolume) annotation (Line(points={{135,-22},{146,-22},
              {146,-36}},          color={0,0,127}));
      connect(volume.y,CO2. solutionVolume) annotation (Line(points={{135,-22},{146,
              -22},{146,-80}},      color={0,0,127}));
      connect(volume.y,HCO3. solutionVolume) annotation (Line(points={{135,-22},{146,
              -22},{146,-116}},      color={0,0,127}));
      connect(molarFlowMeasure2.molarFlowRate,unlimitedSolutePump4. soluteFlow)
        annotation (Line(points={{46,-85.6},{46,-80.8},{115.2,-80.8}}, color={0,
              0,127}));
      connect(molarFlowMeasure1.molarFlowRate,unlimitedSolutePump6. soluteFlow)
        annotation (Line(points={{46,-69.6},{116,-69.6},{116,-44}}, color={0,0,
              127}));
      connect(ISF_O2.concentration, concentrationMeasure2.concentration)
        annotation (Line(points={{92,-76},{174,-76},{174,-46.4}}, color={0,0,127}));
      connect(concentrationMeasure.concentration, ISF_HCO3.concentration)
        annotation (Line(points={{176,-115.2},{176,-118},{92,-118}}, color={0,0,127}));
      connect(ISF_CO2.q_out, iSFMembraneCO2.q_in) annotation (Line(
          points={{80,-92},{78,-92}},
          color={107,45,134},
          thickness=1));
      connect(ISF_O2.q_out, iSFMembraneO2.q_in) annotation (Line(
          points={{80,-76},{78,-76}},
          color={107,45,134},
          thickness=1));
      connect(tO2, concentrationMeasure3.q_in) annotation (Line(points={{-70,-40},
              {-70,-58},{-50,-58}},      color={107,45,134},
          thickness=0.5));
      connect(tCO2, unlimitedSolutePumpOut1.q_in) annotation (Line(points={{-70,-80},
              {-70,-92},{-18,-92}}, color={107,45,134},
          thickness=0.5));
      connect(tCO2, unlimitedSolutePumpOut2.q_in) annotation (Line(points={{-70,-80},
              {-70,-108},{-18,-108}}, color={107,45,134},
          thickness=0.5));
      connect(BE, unlimitedSolutePumpOut3.q_in) annotation (Line(points={{-70,-120},
              {-70,-128},{-18,-128}}, color={107,45,134},
          thickness=0.5));
      connect(tCO2, concentrationMeasure4.q_in) annotation (Line(
          points={{-70,-80},{-70,-108},{-46,-108}},
          color={107,45,134},
          thickness=0.5));
      connect(O2.q_out, tO2_ISF) annotation (Line(
          points={{150,-40},{240,-40}},
          color={107,45,134},
          thickness=1));
      connect(CO2.q_out, tCO2_ISF) annotation (Line(
          points={{150,-84},{206,-84},{206,-68},{240,-68}},
          color={107,45,134},
          thickness=1));
      connect(HCO3.q_out, HCO3_ISF) annotation (Line(
          points={{150,-120},{240,-120}},
          color={107,45,134},
          thickness=1));
      connect(ions.q_out, ions_ISF) annotation (Line(
          points={{150,-180},{240,-180}},
          color={107,45,134},
          thickness=1));
      connect(plasma_ionChargeCorrection.port_a, ions_plasma) annotation (Line(
          points={{36,-180},{-70,-180}},
          color={107,45,134},
          thickness=1));
      connect(oneToMany.y, ions.solutionVolume)
        annotation (Line(points={{146,-168},{146,-176}}, color={0,0,127}));
      connect(oneToMany.u, O2.solutionVolume)
        annotation (Line(points={{146,-160},{146,-36}}, color={0,0,127}));
      connect(plasma_ionChargeCorrection.port_b, membraneVariableCharges.particlesInside)
        annotation (Line(
          points={{56,-180},{60,-180}},
          color={107,45,134},
          thickness=1));
      connect(membraneVariableCharges.particlesOutside, isf_ionChargeCorrection.port_b)
        annotation (Line(
          points={{80,-180},{88,-180}},
          color={107,45,134},
          thickness=1));
      connect(plasma_ionChargeCorrection.HCO3, molarFlowMeasure.q_out) annotation (
          Line(
          points={{36,-170},{30,-170},{30,-160},{54,-160},{54,-118}},
          color={107,45,134},
          thickness=1));
      connect(isf_ionChargeCorrection.HCO3, ISF_HCO3.q_out) annotation (Line(
          points={{108,-170},{108,-160},{80,-160},{80,-118}},
          color={107,45,134},
          thickness=1));
      connect(isf_ionChargeCorrection.port_a, ions.q_out) annotation (Line(
          points={{108,-180},{150,-180}},
          color={107,45,134},
          thickness=1));
      connect(iSF_initialization.plasma_conc, ions_plasma) annotation (Line(
          points={{60,-210},{30,-210},{30,-180},{-70,-180}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_out, iSF_initialization.HCO3) annotation (Line(
          points={{54,-118},{54,-200},{60,-200}},
          color={107,45,134},
          thickness=1));
      connect(pH.y, plasma_ionChargeCorrection.pH) annotation (Line(points={{21,
              -160},{24,-160},{24,-176},{36,-176}}, color={0,0,127}));
      connect(pH1.y, isf_ionChargeCorrection.pH) annotation (Line(points={{121,
              -164},{108,-164},{108,-176}}, color={0,0,127}));
      connect(concentrationMeasure1.concentration, ISF_CO2.concentration)
        annotation (Line(points={{190,-90.4},{178,-90.4},{178,-94},{94,-94},{94,
              -92},{92,-92}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-70,-220},{240,-20}}),
            graphics={
            Line(
              points={{84,-210},{176,-210},{176,-184},{166,-184}},
              color={0,140,72},
              thickness=1,
              arrow={Arrow.None,Arrow.Filled},
              pattern=LinePattern.Dash),
            Line(
              points={{84,-210},{176,-210},{176,-126},{164,-126}},
              color={0,140,72},
              thickness=1,
              arrow={Arrow.None,Arrow.Filled},
              pattern=LinePattern.Dash),
            Text(
              extent={{-13,3},{13,-3}},
              lineColor={0,140,72},
              pattern=LinePattern.Dash,
              lineThickness=1,
              fillColor={240,233,6},
              fillPattern=FillPattern.Solid,
              textString="Initialization",
              origin={181,-161},
              rotation=270),
            Text(
              extent={{-13,3},{13,-3}},
              lineColor={0,140,72},
              pattern=LinePattern.Dash,
              lineThickness=1,
              fillColor={240,233,6},
              fillPattern=FillPattern.Solid,
              textString="Initialization",
              origin={97,-205},
              rotation=360)}),                                              Icon(
            coordinateSystem(extent={{-70,-220},{240,-20}})));
    end Tissues3;

    model TissuesConstAlb
      extends Physiolibrary.Icons.OtherTissue;
      import AcidBaseBalance.Interfaces.*;
      import AcidBaseBalance.Ions.*;

      constant Real IonAndHCO3Permeabilities[:] = cat(1,modelSettings.IonPermeabilities, {modelSettings.HCO3Permeability});
      constant Integer IonAndHCO3Charges[:] = cat(1,modelSettings.IonElemChrgs, {-1});
      parameter Integer NumberOfIonsAndHCO3 = size(modelSettings.IonElemChrgs, 1) + 1;

      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=0,
            origin={-32,2})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut2(
         useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-96,2},{-76,22}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_HCO3(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={-50,2})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut3(
         useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{10,12},{-10,-12}},
            rotation=180,
            origin={-86,-8})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_dO2(
          useConcentrationInput=true) "dissolved O2" annotation (Placement(
            transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={-50,44})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1 annotation (
         Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={-32,44})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut(
          useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{9.5,10.5},{-9.5,-10.5}},
            rotation=180,
            origin={-86.5,44.5})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_dCO2(
          useConcentrationInput=true) "dissolved CO2" annotation (Placement(
            transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={-50,28})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2 annotation (
         Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={-32,28})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut1(
         useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-96,18},{-76,38}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure3
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-128,62})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure4
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-124,12})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure5
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-136,-8})));
      Acidbase.OSA.BloodABB_OSA bloodABB_OSA annotation (Placement(
            transformation(rotation=0, extent={{-132,-44},{-112,-24}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneCO2(Conductance(
            displayUnit="l/min") = 0.016666666666667)
        annotation (Placement(transformation(extent={{0,18},{-20,38}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneO2(Conductance(
            displayUnit="l/min") = 0.016666666666667)
        annotation (Placement(transformation(extent={{0,34},{-20,54}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{48,94},{56,102}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_O2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,38},{2,50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump4(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{26,28},{42,44}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump5(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{26,-10},{42,6}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_HCO3(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,-4},{2,8}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{62,26},{82,46}})));
      Physiolibrary.Chemical.Components.Substance HCO3(useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{62,-10},{82,10}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=modelSettings.ISFO2solute_start)
        annotation (Placement(transformation(extent={{62,70},{82,90}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump6(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{24,90},{44,70}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_CO2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,22},{2,34}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=180,
            origin={98,0})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={112,36})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={96,80})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump7(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{26,28},{42,12}})));
      Package.TissueHCO3 tissueHCO3_2
        annotation (Placement(transformation(extent={{116,-34},{136,-14}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature2(k=modelSettings.Temperature)
        annotation (Placement(transformation(extent={{148,-20},{140,-12}})));
      outer Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tO2 annotation (Placement(
            transformation(rotation=0, extent={{-150,70},{-130,90}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tCO2 annotation (Placement(
            transformation(rotation=0, extent={{-150,30},{-130,50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BE annotation (Placement(
            transformation(rotation=0, extent={{-150,-10},{-130,10}})));
      Physiolibrary.Chemical.Components.Substance ions[AcidBaseBalance.Ions.IonsEnum](
         each useNormalizedVolume=false, each Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{62,-70},{82,-50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a ions_plasma[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(rotation=0, extent={{-150,-70},{
                -130,-50}})));
      Physiolibrary.Chemical.Components.Membrane
                                       membraneVariableCharges(
        NumberOfParticles=NumberOfIonsAndHCO3,
        Charges=IonAndHCO3Charges,
        Permeabilities=IonAndHCO3Permeabilities,
        solventFractionInside=0.96,
        solventFractionOutside=0.96)
        annotation (Placement(transformation(extent={{-18,-70},{2,-50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tO2_ISF annotation (
          Placement(transformation(rotation=0, extent={{152,70},{172,90}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tCO2_ISF annotation (
          Placement(transformation(rotation=0, extent={{152,42},{172,62}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3_ISF annotation (
          Placement(transformation(rotation=0, extent={{152,-10},{172,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a ions_ISF[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(rotation=0, extent={{152,-70},{172,
                -50}})));
      Ions.IonChargeCorrection plasma_ionChargeCorrection(elementaryCharges=
            modelSettings.IonElemChrgs)
        annotation (Placement(transformation(extent={{-42,-70},{-22,-50}})));
      Ions.IonChargeCorrection isf_ionChargeCorrection(elementaryCharges=
            modelSettings.IonElemChrgs)
        annotation (Placement(transformation(extent={{30,-70},{10,-50}})));
      Interfaces.OneToMany oneToMany annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            rotation=270,
            origin={70,-44})));

      Ions.ISF_initialization iSF_initialization(permeabilities=modelSettings.IonPermeabilities,
          elementary_charges=modelSettings.IonElemChrgs,
        isf_volume=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{-38,-100},{-18,-80}})));
    initial equation
       HCO3.state = iSF_initialization.isf_HCO3_solute;
       ions.state = iSF_initialization.isf_solutes;
       CO2.state = iSF_initialization.isf_tCO2_solute;
    equation
    //    when initial() then
    //      reinit(HCO3.state,iSF_initialization.HCO3InitialConcentration*10);
    //    end when;

      connect(molarFlowMeasure2.molarFlowRate,unlimitedSolutePumpOut1. soluteFlow)
        annotation (Line(points={{-32,34.4},{-82,34.4},{-82,32}}, color={0,0,
              127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePumpOut2. soluteFlow)
        annotation (Line(points={{-32,8.4},{-32,16},{-82,16}},   color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePumpOut3. soluteFlow)
        annotation (Line(points={{-32,8.4},{-32,16},{-80,16},{-80,0},{-82,0},{
              -82,-3.2}},   color={0,0,127}));
      connect(plasma_dCO2.concentration, bloodABB_OSA.dCO2) annotation (Line(points={{-56,28},
              {-60,28},{-60,-20},{-115.8,-20},{-115.8,-24}},          color={0,0,127}));
      connect(bloodABB_OSA.dO2, plasma_dO2.concentration) annotation (Line(points={{-119.8,
              -24},{-119.8,-18},{-64,-18},{-64,44},{-56,44}},        color={0,0,127}));
      connect(bloodABB_OSA.cHCO3,plasma_HCO3. concentration) annotation (Line(
            points={{-112,-24},{-58,-24},{-58,2},{-56,2}},       color={0,0,127}));
      connect(bloodABB_OSA.tO2_input,concentrationMeasure3. concentration)
        annotation (Line(points={{-127.6,-24},{-127.6,-18},{-128,-18},{-128,
              58.8}},  color={0,0,127}));
      connect(bloodABB_OSA._BEox,concentrationMeasure5. concentration)
        annotation (Line(points={{-131.6,-24},{-131.6,-26},{-136,-26},{-136,
              -11.2}},
            color={0,0,127}));
      connect(bloodABB_OSA.tCO2_input,concentrationMeasure4. concentration)
        annotation (Line(points={{-123.8,-24},{-123.8,-22},{-124,-22},{-124,8.8}},
                        color={0,0,127}));
      connect(plasma_dO2.q_out, molarFlowMeasure1.q_in) annotation (Line(
          points={{-44,44},{-40,44}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out,iSFMembraneO2. q_out) annotation (Line(
          points={{-24,44},{-20,44}},
          color={107,45,134},
          thickness=1));
      connect(plasma_HCO3.q_out,molarFlowMeasure. q_in) annotation (Line(
          points={{-44,2},{-40,2}},
          color={107,45,134},
          thickness=1));
      connect(plasma_dCO2.q_out, molarFlowMeasure2.q_in) annotation (Line(
          points={{-44,28},{-40,28}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut.soluteFlow,molarFlowMeasure1. molarFlowRate)
        annotation (Line(points={{-82.7,48.7},{-88.35,48.7},{-88.35,50.4},{-32,
              50.4}},  color={0,0,127}));
      connect(unlimitedSolutePumpOut.q_in,concentrationMeasure3. q_in)
        annotation (Line(
          points={{-96,44.5},{-112,44.5},{-112,62},{-128,62}},
          color={107,45,134},
          thickness=0.5));
      connect(molarFlowMeasure2.q_out,iSFMembraneCO2. q_out) annotation (Line(
          points={{-24,28},{-20,28}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut3.q_in,concentrationMeasure5. q_in)
        annotation (Line(
          points={{-96,-8},{-136,-8}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure.q_in,HCO3. q_out) annotation (Line(
          points={{98,0},{92,0},{92,-2},{86,-2},{86,0},{72,0}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in,CO2. q_out) annotation (Line(
          points={{112,36},{72,36}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in,O2. q_out) annotation (Line(
          points={{96,80},{72,80}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump7.q_out,CO2. q_out) annotation (Line(
          points={{42,20},{72,20},{72,36}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump6.q_out,O2. q_out) annotation (Line(
          points={{44,80},{72,80}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump4.q_out,CO2. q_out) annotation (Line(
          points={{42,36},{72,36}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump5.q_out,HCO3. q_out) annotation (Line(
          points={{42,-2},{58,-2},{58,0},{72,0}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump5. soluteFlow)
        annotation (Line(points={{-32,8.4},{-32,14},{37.2,14},{37.2,1.2}},
            color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump7. soluteFlow)
        annotation (Line(points={{-32,8.4},{-32,14},{30,14},{30,16.8},{37.2,
              16.8}},        color={0,0,127}));
      connect(volume.y,O2. solutionVolume) annotation (Line(points={{57,98},{68,
              98},{68,84}},        color={0,0,127}));
      connect(volume.y,CO2. solutionVolume) annotation (Line(points={{57,98},{
              68,98},{68,40}},      color={0,0,127}));
      connect(volume.y,HCO3. solutionVolume) annotation (Line(points={{57,98},{
              68,98},{68,4}},        color={0,0,127}));
      connect(molarFlowMeasure2.molarFlowRate,unlimitedSolutePump4. soluteFlow)
        annotation (Line(points={{-32,34.4},{-32,39.2},{37.2,39.2}},   color={0,
              0,127}));
      connect(molarFlowMeasure1.molarFlowRate,unlimitedSolutePump6. soluteFlow)
        annotation (Line(points={{-32,50.4},{38,50.4},{38,76}},     color={0,0,
              127}));
      connect(ISF_O2.concentration, concentrationMeasure2.concentration)
        annotation (Line(points={{14,44},{96,44},{96,73.6}},      color={0,0,127}));
      connect(tissueHCO3_2.tCO2,concentrationMeasure1. concentration)
        annotation (Line(points={{117,-19.8},{112,-19.8},{112,29.6}},
            color={0,0,127}));
      connect(concentrationMeasure.concentration,tissueHCO3_2. cHCO3)
        annotation (Line(points={{98,4.8},{148,4.8},{148,-36},{134,-36}},
            color={0,0,127}));
      connect(tissueHCO3_2.T,temperature2. y)
        annotation (Line(points={{135,-16},{139,-16}},   color={0,0,127}));
      connect(ISF_CO2.concentration, tissueHCO3_2.cdCO2_) annotation (Line(points={{14,28},
              {22,28},{22,-24.8},{117,-24.8}},              color={0,0,127}));
      connect(concentrationMeasure.concentration, ISF_HCO3.concentration)
        annotation (Line(points={{98,4.8},{98,2},{14,2}},            color={0,0,127}));
      connect(ISF_CO2.q_out, iSFMembraneCO2.q_in) annotation (Line(
          points={{2,28},{0,28}},
          color={107,45,134},
          thickness=1));
      connect(ISF_O2.q_out, iSFMembraneO2.q_in) annotation (Line(
          points={{2,44},{0,44}},
          color={107,45,134},
          thickness=1));
      connect(tO2, concentrationMeasure3.q_in) annotation (Line(points={{-140,80},
              {-140,62},{-128,62}},      color={107,45,134},
          thickness=0.5));
      connect(tCO2, unlimitedSolutePumpOut1.q_in) annotation (Line(points={{-140,40},
              {-140,28},{-96,28}},  color={107,45,134},
          thickness=0.5));
      connect(tCO2, unlimitedSolutePumpOut2.q_in) annotation (Line(points={{-140,40},
              {-140,12},{-96,12}},    color={107,45,134},
          thickness=0.5));
      connect(BE, unlimitedSolutePumpOut3.q_in) annotation (Line(points={{-140,0},
              {-140,-8},{-96,-8}},    color={107,45,134},
          thickness=0.5));
      connect(tCO2, concentrationMeasure4.q_in) annotation (Line(
          points={{-140,40},{-140,12},{-124,12}},
          color={107,45,134},
          thickness=0.5));
      connect(O2.q_out, tO2_ISF) annotation (Line(
          points={{72,80},{162,80}},
          color={107,45,134},
          thickness=1));
      connect(CO2.q_out, tCO2_ISF) annotation (Line(
          points={{72,36},{128,36},{128,52},{162,52}},
          color={107,45,134},
          thickness=1));
      connect(HCO3.q_out, HCO3_ISF) annotation (Line(
          points={{72,0},{162,0}},
          color={107,45,134},
          thickness=1));
      connect(ions.q_out, ions_ISF) annotation (Line(
          points={{72,-60},{162,-60}},
          color={107,45,134},
          thickness=1));
      connect(plasma_ionChargeCorrection.port_a, ions_plasma) annotation (Line(
          points={{-42,-60},{-140,-60}},
          color={107,45,134},
          thickness=1));
      connect(oneToMany.y, ions.solutionVolume)
        annotation (Line(points={{68,-48},{68,-56}},     color={0,0,127}));
      connect(oneToMany.u, O2.solutionVolume)
        annotation (Line(points={{68,-40},{68,84}},     color={0,0,127}));
      connect(plasma_ionChargeCorrection.pH, bloodABB_OSA.pH) annotation (Line(
            points={{-42,-56},{-54,-56},{-54,-34},{-112,-34}},
                                                             color={0,0,127}));
      connect(plasma_ionChargeCorrection.port_b, membraneVariableCharges.particlesInside)
        annotation (Line(
          points={{-22,-60},{-18,-60}},
          color={107,45,134},
          thickness=1));
      connect(membraneVariableCharges.particlesOutside, isf_ionChargeCorrection.port_b)
        annotation (Line(
          points={{2,-60},{10,-60}},
          color={107,45,134},
          thickness=1));
      connect(plasma_ionChargeCorrection.HCO3, molarFlowMeasure.q_out) annotation (
          Line(
          points={{-42,-50},{-48,-50},{-48,-42},{-24,-42},{-24,2}},
          color={107,45,134},
          thickness=1));
      connect(isf_ionChargeCorrection.HCO3, ISF_HCO3.q_out) annotation (Line(
          points={{30,-50},{30,-40},{2,-40},{2,2}},
          color={107,45,134},
          thickness=1));
      connect(isf_ionChargeCorrection.port_a, ions.q_out) annotation (Line(
          points={{30,-60},{72,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSF_initialization.HCO3, molarFlowMeasure.q_out) annotation (Line(
          points={{-38,-80},{-48,-80},{-48,-42},{-24,-42},{-24,2}},
          color={107,45,134},
          thickness=1));

      connect(iSF_initialization.plasma_conc, ions_plasma) annotation (Line(
          points={{-38,-90},{-58,-90},{-58,-60},{-140,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSF_initialization.pH, bloodABB_OSA.pH) annotation (Line(points={{-38,-84},
              {-54,-84},{-54,-34},{-112,-34}}, color={0,0,127}));
      connect(bloodABB_OSA.pH, isf_ionChargeCorrection.pH) annotation (Line(points={{-112,
              -34},{42,-34},{42,-56},{30,-56}},             color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-140,-100},{160,100}}),graphics={
            Line(
              points={{-14,-90},{102,-90},{102,-64},{90,-64}},
              color={0,140,72},
              pattern=LinePattern.Dash,
              thickness=1,
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{102,-64},{102,-6},{88,-6}},
              color={0,140,72},
              pattern=LinePattern.Dash,
              thickness=1,
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{102,-6},{102,32},{88,32}},
              color={0,140,72},
              pattern=LinePattern.Dash,
              thickness=1,
              arrow={Arrow.None,Arrow.Filled}),
            Text(
              extent={{-14,-88},{102,-80}},
              lineColor={0,140,72},
              pattern=LinePattern.Dash,
              lineThickness=1,
              fillColor={240,233,6},
              fillPattern=FillPattern.Solid,
              textString="Initialization via initial equations")}),         Icon(
            coordinateSystem(extent={{-140,-100},{160,100}}), graphics={Text(
              extent={{-100,-40},{100,40}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              textString="ISF"), Rectangle(
              extent={{-140,100},{160,-100}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash)}));
    end TissuesConstAlb;

    model capillaryMembraneO2CO2
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=0,
            origin={-38,2})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut2(
         useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-94,26},{-74,6}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_HCO3(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={-56,2})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut3(
         useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{10,12},{-10,-12}},
            rotation=180,
            origin={-84,-8})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_dO2(
          useConcentrationInput=true) "dissolved O2" annotation (Placement(
            transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={-56,44})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1 annotation (
         Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={-38,44})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut(
          useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{9.5,10.5},{-9.5,-10.5}},
            rotation=180,
            origin={-84.5,44.5})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage plasma_dCO2(
          useConcentrationInput=true) "dissolved CO2" annotation (Placement(
            transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={-56,28})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2 annotation (
         Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={-38,28})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut unlimitedSolutePumpOut1(
         useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-94,18},{-74,38}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure3
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-108,62})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure4
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-104,20})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure5
        annotation (Placement(transformation(
            extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-112,-8})));
      Acidbase.OSA.BloodABB_OSA bloodABB_OSA annotation (Placement(
            transformation(rotation=0, extent={{-112,-44},{-92,-24}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneCO2(Conductance(
            displayUnit="l/min") = modelSettings.CO2DiffusionPermeability)
        annotation (Placement(transformation(extent={{-6,18},{-26,38}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneO2(Conductance(
            displayUnit="m3/s") = modelSettings.O2DiffusionPermeability)
        annotation (Placement(transformation(extent={{-6,34},{-26,54}})));
      outer Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-120,80},{-100,100}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tO2 annotation (Placement(
            transformation(rotation=0, extent={{-130,50},{-110,70}}),
            iconTransformation(extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-120,60})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a tCO2 annotation (Placement(
            transformation(rotation=0, extent={{-130,10},{-110,30}}),
            iconTransformation(extent={{-130,10},{-110,30}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BE annotation (Placement(
            transformation(rotation=0, extent={{-130,-30},{-110,-10}}),
            iconTransformation(extent={{-130,-30},{-110,-10}})));
    equation
      connect(molarFlowMeasure2.molarFlowRate,unlimitedSolutePumpOut1. soluteFlow)
        annotation (Line(points={{-38,34.4},{-80,34.4},{-80,32}}, color={0,0,
              127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePumpOut2. soluteFlow)
        annotation (Line(points={{-38,8.4},{-38,12},{-80,12}},   color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePumpOut3. soluteFlow)
        annotation (Line(points={{-38,8.4},{-38,12},{-80,12},{-80,-3.2}},
                            color={0,0,127}));
      connect(plasma_dCO2.concentration,bloodABB_OSA. dCO2) annotation (Line(points={{-62,28},
              {-66,28},{-66,-20},{-95.8,-20},{-95.8,-24}},            color={0,0,127}));
      connect(bloodABB_OSA.dO2,plasma_dO2. concentration) annotation (Line(points={{-99.8,
              -24},{-99.8,-18},{-70,-18},{-70,44},{-62,44}},         color={0,0,127}));
      connect(bloodABB_OSA.cHCO3,plasma_HCO3. concentration) annotation (Line(
            points={{-92,-24},{-64,-24},{-64,2},{-62,2}},        color={0,0,127}));
      connect(bloodABB_OSA.tO2_input,concentrationMeasure3. concentration)
        annotation (Line(points={{-107.6,-24},{-107.6,-18},{-108,-18},{-108,
              58.8}},  color={0,0,127}));
      connect(bloodABB_OSA._BEox,concentrationMeasure5. concentration)
        annotation (Line(points={{-111.6,-24},{-111.6,-26},{-112,-26},{-112,
              -11.2}},
            color={0,0,127}));
      connect(bloodABB_OSA.tCO2_input,concentrationMeasure4. concentration)
        annotation (Line(points={{-103.8,-24},{-103.8,-22},{-104,-22},{-104,
              16.8}},   color={0,0,127}));
      connect(plasma_dO2.q_out,molarFlowMeasure1. q_in) annotation (Line(
          points={{-50,44},{-46,44}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out,iSFMembraneO2. q_out) annotation (Line(
          points={{-30,44},{-26,44}},
          color={107,45,134},
          thickness=1));
      connect(plasma_HCO3.q_out,molarFlowMeasure. q_in) annotation (Line(
          points={{-50,2},{-46,2}},
          color={107,45,134},
          thickness=1));
      connect(plasma_dCO2.q_out,molarFlowMeasure2. q_in) annotation (Line(
          points={{-50,28},{-46,28}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut.soluteFlow,molarFlowMeasure1. molarFlowRate)
        annotation (Line(points={{-80.7,48.7},{-80,48.7},{-80,50.4},{-38,50.4}},
                       color={0,0,127}));
      connect(unlimitedSolutePumpOut.q_in,concentrationMeasure3. q_in)
        annotation (Line(
          points={{-94,44.5},{-94,62},{-108,62}},
          color={107,45,134},
          thickness=0.5));
      connect(molarFlowMeasure2.q_out,iSFMembraneCO2. q_out) annotation (Line(
          points={{-30,28},{-26,28}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut3.q_in,concentrationMeasure5. q_in)
        annotation (Line(
          points={{-94,-8},{-112,-8}},
          color={107,45,134},
          thickness=1));
      connect(tO2,concentrationMeasure3. q_in) annotation (Line(points={{-120,60},
              {-120,62},{-108,62}},      color={107,45,134},
          thickness=0.5));
      connect(tCO2,unlimitedSolutePumpOut1. q_in) annotation (Line(points={{-120,20},
              {-104,20},{-104,28},{-94,28}},
                                    color={107,45,134},
          thickness=0.5));
      connect(tCO2,unlimitedSolutePumpOut2. q_in) annotation (Line(points={{-120,20},
              {-104,20},{-104,16},{-94,16}},
                                      color={107,45,134},
          thickness=0.5));
      connect(BE,unlimitedSolutePumpOut3. q_in) annotation (Line(points={{-120,
              -20},{-120,-8},{-94,-8}},
                                      color={107,45,134},
          thickness=0.5));
      connect(tCO2,concentrationMeasure4. q_in) annotation (Line(
          points={{-120,20},{-104,20}},
          color={107,45,134},
          thickness=0.5));
      annotation (Diagram(coordinateSystem(extent={{-120,-100},{100,100}})),
          Icon(coordinateSystem(extent={{-120,-100},{100,100}}), graphics={
            Rectangle(
              extent={{-120,100},{-60,-100}},
              lineThickness=0.5,
              fillColor={255,85,85},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None)}));
    end capillaryMembraneO2CO2;

    model ISF
      extends capillaryMembraneO2CO2;
     // extends Physiolibrary.Icons.OtherTissue;
      import AcidBaseBalance.Interfaces.*;
      import AcidBaseBalance.Ions.*;

      parameter Real IonAndHCO3Permeabilities[:] = cat(1,modelSettings.IonPermeabilities, {modelSettings.HCO3Permeability});
      parameter Integer IonAndHCO3Charges[:] = cat(1,modelSettings.IonElemChrgs, {-1});
      parameter Integer NumberOfIonsAndHCO3 = size(modelSettings.IonElemChrgs, 1) + 1;

      Modelica.Blocks.Math.Gain                 gain(k=1)
        annotation (Placement(transformation(extent={{134,92},{126,100}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_O2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,38},{2,50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump4(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{26,28},{42,44}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump5(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{26,-14},{42,2}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_HCO3(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,-4},{2,8}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{64,26},{84,46}})));
      Physiolibrary.Chemical.Components.Substance HCO3(useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{64,-16},{84,4}})));
      Physiolibrary.Chemical.Components.Substance dO2(useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit) "dissolved O2"
        annotation (Placement(transformation(extent={{64,70},{84,90}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump6(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{24,90},{44,70}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISF_CO2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,22},{2,34}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=180,
            origin={98,-6})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={112,36})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={52,80})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump7(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{26,28},{42,12}})));
      Package.TissueHCO3 tissueHCO3_2
        annotation (Placement(transformation(extent={{120,16},{140,36}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature2(k=modelSettings.Temperature)
        annotation (Placement(transformation(extent={{122,50},{130,58}})));
      Physiolibrary.Chemical.Components.Substance ions[AcidBaseBalance.Ions.IonsEnum](
         each useNormalizedVolume=false, each Simulation=Physiolibrary.Types.SimulationType.NoInit)
        annotation (Placement(transformation(extent={{64,-70},{84,-50}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a ions_plasma[AcidBaseBalance.Ions.IonsEnum]
        annotation (Placement(transformation(rotation=0, extent={{-130,-110},{
                -110,-90}}), iconTransformation(extent={{-130,-110},{-110,-90}})));
      Physiolibrary.Chemical.Components.Membrane
                                       membraneVariableCharges(
        NumberOfParticles=NumberOfIonsAndHCO3,
        Charges=IonAndHCO3Charges,
        Permeabilities=IonAndHCO3Permeabilities,
        solventFractionInside=0.96,
        solventFractionOutside=0.96) if modelSettings.useIons
        annotation (Placement(transformation(extent={{-18,-70},{2,-50}})));
      Ions.IonChargeCorrection plasma_ionChargeCorrection(elementaryCharges=
            modelSettings.IonElemChrgs) if modelSettings.useIons
        annotation (Placement(transformation(extent={{-42,-70},{-22,-50}})));
      Ions.IonChargeCorrection isf_ionChargeCorrection(elementaryCharges=
            modelSettings.IonElemChrgs) if modelSettings.useIons
        annotation (Placement(transformation(extent={{30,-70},{10,-50}})));
      Interfaces.OneToMany oneToMany annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            rotation=270,
            origin={78,-44})));

      Ions.ISF_initialization iSF_initialization(permeabilities=modelSettings.IonPermeabilities,
          elementary_charges=modelSettings.IonElemChrgs,
        isf_volume=modelSettings.ISFvolume_start,
        isf_dCO2=1.5)
        annotation (Placement(transformation(extent={{-20,-38},{0,-18}})));
      Physiolibrary.Osmotic.Components.OsmoticCell osmoticCell(
          useImpermeableSolutesInput=true, volume_start=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{120,-130},{140,-110}})));
      Physiolibrary.Osmotic.Sources.UnlimitedSolution unlimitedSolution(
          useOsmolarityInput=true, Osm=280) if
                                      modelSettings.useOsmoticFlow
        annotation (Placement(transformation(extent={{-16,-130},{4,-110}})));
      Physiolibrary.Osmotic.Sensors.FlowMeasure flowMeasure if modelSettings.useOsmoticFlow
        annotation (Placement(transformation(extent={{14,-130},{34,-110}})));
      Physiolibrary.Osmotic.Components.Membrane membrane(HydraulicPressureIn(
            displayUnit="Pa") = 1670, cond(displayUnit="m3/(Pa.s)") = 1e6) if
                                                            modelSettings.useOsmoticFlow
        annotation (Placement(transformation(extent={{46,-130},{66,-110}})));
      Modelica.Blocks.Math.Sum sum1(nin=size(ions_plasma, 1))
        annotation (Placement(transformation(extent={{84,-78},{92,-70}})));
      Modelica.Blocks.Math.MultiSum multiSum(nu=3)
        annotation (Placement(transformation(extent={{108,-82},{120,-70}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_Flow if
        modelSettings.useOsmoticFlow
       annotation (
          Placement(transformation(extent={{-130,-130},{-110,-110}}),
            iconTransformation(extent={{-132,88},{-108,112}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedOutflowPump unlimitedOutflowPump(
          useSolutionFlowInput=true) if modelSettings.useOsmoticFlow
        annotation (Placement(transformation(extent={{-80,-110},{-60,-130}})));
      Physiolibrary.Chemical.Components.Substance ImpermeantSolutes(
        useNormalizedVolume=false,
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        solute_start=0.0095)
        annotation (Placement(transformation(extent={{64,-102},{84,-82}})));
    initial equation
       HCO3.state = iSF_initialization.isf_HCO3_solute;
       ions.state = iSF_initialization.isf_solutes;
       CO2.state = iSF_initialization.isf_tCO2_solute;
      dO2.state = plasma_dO2.concentration*modelSettings.ISFvolume_start;
    equation
    //    when initial() then
    //      reinit(HCO3.state,iSF_initialization.HCO3InitialConcentration*10);
    //    end when;

      connect(concentrationMeasure.q_in,HCO3. q_out) annotation (Line(
          points={{98,-6},{74,-6}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in,CO2. q_out) annotation (Line(
          points={{112,36},{74,36}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in, dO2.q_out) annotation (Line(
          points={{52,80},{74,80}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump7.q_out,CO2. q_out) annotation (Line(
          points={{42,20},{74,20},{74,36}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump6.q_out, dO2.q_out) annotation (Line(
          points={{44,80},{74,80}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump4.q_out,CO2. q_out) annotation (Line(
          points={{42,36},{74,36}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump5.q_out,HCO3. q_out) annotation (Line(
          points={{42,-6},{74,-6}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump5. soluteFlow)
        annotation (Line(points={{-38,8.4},{-38,14},{37.2,14},{37.2,-2.8}},
            color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate,unlimitedSolutePump7. soluteFlow)
        annotation (Line(points={{-38,8.4},{-38,14},{30,14},{30,16.8},{37.2,
              16.8}},        color={0,0,127}));
      connect(gain.y, dO2.solutionVolume) annotation (Line(points={{125.6,96},{
              70,96},{70,84}}, color={0,0,127}));
      connect(gain.y, CO2.solutionVolume) annotation (Line(points={{125.6,96},{
              70,96},{70,40}}, color={0,0,127}));
      connect(gain.y, HCO3.solutionVolume)
        annotation (Line(points={{125.6,96},{70,96},{70,-2}},color={0,0,127}));
      connect(molarFlowMeasure2.molarFlowRate,unlimitedSolutePump4. soluteFlow)
        annotation (Line(points={{-38,34.4},{-38,39.2},{37.2,39.2}},   color={0,
              0,127}));
      connect(molarFlowMeasure1.molarFlowRate,unlimitedSolutePump6. soluteFlow)
        annotation (Line(points={{-38,50.4},{38,50.4},{38,76}},     color={0,0,
              127}));
      connect(ISF_O2.concentration, concentrationMeasure2.concentration)
        annotation (Line(points={{14,44},{52,44},{52,73.6}},      color={0,0,127}));
      connect(tissueHCO3_2.tCO2,concentrationMeasure1. concentration)
        annotation (Line(points={{121,30.2},{112,30.2},{112,29.6}},
            color={0,0,127}));
      connect(concentrationMeasure.concentration,tissueHCO3_2. cHCO3)
        annotation (Line(points={{98,-1.2},{98,2},{138,2},{138,14}},
            color={0,0,127}));
      connect(tissueHCO3_2.T,temperature2. y)
        annotation (Line(points={{139,34},{138,34},{138,54},{131,54}},
                                                         color={0,0,127}));
      connect(ISF_CO2.concentration, tissueHCO3_2.cdCO2_) annotation (Line(points={{14,28},
              {24,28},{24,25.2},{121,25.2}},                color={0,0,127}));
      connect(concentrationMeasure.concentration, ISF_HCO3.concentration)
        annotation (Line(points={{98,-1.2},{98,2},{14,2}},           color={0,0,127}));
      connect(ISF_CO2.q_out, iSFMembraneCO2.q_in) annotation (Line(
          points={{2,28},{-6,28}},
          color={107,45,134},
          thickness=1));
      connect(ISF_O2.q_out, iSFMembraneO2.q_in) annotation (Line(
          points={{2,44},{-6,44}},
          color={107,45,134},
          thickness=1));
      connect(plasma_ionChargeCorrection.port_a, ions_plasma) annotation (Line(
          points={{-42,-60},{-72,-60},{-72,-100},{-120,-100}},
          color={107,45,134},
          thickness=1));
      connect(oneToMany.y, ions.solutionVolume)
        annotation (Line(points={{76,-48},{76,-52},{70,-52},{70,-56}},
                                                         color={0,0,127}));
      connect(plasma_ionChargeCorrection.pH, bloodABB_OSA.pH) annotation (Line(
            points={{-42,-56},{-54,-56},{-54,-34},{-92,-34}},color={0,0,127}));
      connect(plasma_ionChargeCorrection.port_b, membraneVariableCharges.particlesInside)
        annotation (Line(
          points={{-22,-60},{-18,-60}},
          color={107,45,134},
          thickness=1));
      connect(membraneVariableCharges.particlesOutside, isf_ionChargeCorrection.port_b)
        annotation (Line(
          points={{2,-60},{10,-60}},
          color={107,45,134},
          thickness=1));
      connect(plasma_ionChargeCorrection.HCO3, molarFlowMeasure.q_out) annotation (
          Line(
          points={{-42,-50},{-48,-50},{-48,-40},{-30,-40},{-30,2}},
          color={107,45,134},
          thickness=1));
      connect(isf_ionChargeCorrection.HCO3, ISF_HCO3.q_out) annotation (Line(
          points={{30,-50},{30,-40},{2,-40},{2,2}},
          color={107,45,134},
          thickness=1));
      connect(isf_ionChargeCorrection.port_a, ions.q_out) annotation (Line(
          points={{30,-60},{74,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSF_initialization.HCO3, molarFlowMeasure.q_out) annotation (Line(
          points={{-20,-18},{-30,-18},{-30,2}},
          color={107,45,134},
          thickness=1));

      connect(iSF_initialization.plasma_conc, ions_plasma) annotation (Line(
          points={{-20,-28},{-72,-28},{-72,-100},{-120,-100}},
          color={107,45,134},
          thickness=1));
      connect(bloodABB_OSA.pH, isf_ionChargeCorrection.pH) annotation (Line(points={{-92,-34},
              {42,-34},{42,-56},{30,-56}},                  color={0,0,127}));
      connect(membrane.q_out, osmoticCell.q_in[1]) annotation (Line(
          points={{66,-120},{130,-120}},
          color={127,127,0},
          thickness=1));
      connect(plasma_ionChargeCorrection.osmolarity, unlimitedSolution.osmolarity)
        annotation (Line(points={{-22,-70},{-24,-70},{-24,-120},{-16,-120}},
            color={0,0,127}));
      connect(ions.solute, sum1.u) annotation (Line(points={{80,-70},{80,-74},{
              83.2,-74}}, color={0,0,127}));
      connect(sum1.y, multiSum.u[1]) annotation (Line(points={{92.4,-74},{104,
              -74},{104,-73.2},{108,-73.2}}, color={0,0,127}));
      connect(HCO3.solute, multiSum.u[2]) annotation (Line(points={{80,-16},{98,
              -16},{98,-76},{108,-76}},     color={0,0,127}));
      connect(multiSum.y, osmoticCell.impermeableSolutes[1]) annotation (Line(
            points={{121.02,-76},{122,-76},{122,-114}}, color={0,0,127}));
      connect(unlimitedSolution.port, flowMeasure.q_in) annotation (Line(
          points={{4,-120},{14,-120}},
          color={127,127,0},
          thickness=1));
      connect(membrane.q_in, flowMeasure.q_out) annotation (Line(
          points={{46,-120},{34,-120}},
          color={127,127,0},
          thickness=1));
      connect(osmoticCell.volume, gain.u) annotation (Line(points={{136,-130},{
              146,-130},{146,96},{134.8,96}}, color={0,0,127}));
      connect(port_Flow, unlimitedOutflowPump.q_in) annotation (Line(
          points={{-120,-120},{-80,-120}},
          color={0,0,0},
          thickness=1));
      connect(unlimitedOutflowPump.solutionFlow, flowMeasure.volumeFlowRate)
        annotation (Line(points={{-70,-127},{-70,-136},{24,-136},{24,-128}},
            color={0,0,127}));
      connect(HCO3.solutionVolume, ImpermeantSolutes.solutionVolume)
        annotation (Line(points={{70,-2},{70,-88}},color={0,0,127}));
      connect(ImpermeantSolutes.solute, multiSum.u[3]) annotation (Line(points={{80,-102},
              {108,-102},{108,-78.8}},            color={0,0,127}));
      connect(unlimitedSolutePump6.q_out, concentrationMeasure2.q_in)
        annotation (Line(
          points={{44,80},{52,80}},
          color={107,45,134},
          thickness=1));
      connect(dO2.solutionVolume, oneToMany.u) annotation (Line(points={{70,84},
              {74,84},{74,-40},{76,-40}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(extent={{-120,-140},{140,100}}),graphics={
            Line(
              points={{104,-34},{104,-12},{90,-12}},
              color={0,140,72},
              pattern=LinePattern.Dash,
              thickness=1,
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{104,-6},{104,32},{90,32}},
              color={0,140,72},
              pattern=LinePattern.Dash,
              thickness=1,
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{-4,-28},{104,-28},{104,-64},{92,-64}},
              color={0,140,72},
              pattern=LinePattern.Dash,
              thickness=1,
              arrow={Arrow.None,Arrow.Filled}),
            Text(
              extent={{-6,-26},{110,-18}},
              lineColor={0,140,72},
              pattern=LinePattern.Dash,
              lineThickness=1,
              fillColor={240,233,6},
              fillPattern=FillPattern.Solid,
              textString="Initialization via initial equations"),
            Rectangle(
              extent={{-132,-108},{116,-138}},
              lineColor={244,125,35},
              lineThickness=1,
              pattern=LinePattern.Dash),
            Text(
              extent={{70,-118},{112,-108}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="Conditional"),
            Text(
              extent={{26,-138},{114,-128}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="useOsmoticFlow",
              horizontalAlignment=TextAlignment.Right)}),                   Icon(
            coordinateSystem(extent={{-120,-140},{140,100}}), graphics={
                                             Bitmap(extent={{-98,-82},{120,80}},
                fileName="modelica://Physiolibrary/Resources/Icons/pojivovaTkan.png"),
                                                                        Text(
              extent={{-120,-140},{140,-80}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash,
              textString="ISF"), Rectangle(
              extent={{-120,100},{140,-140}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash)}));
    end ISF;

    model TissueCells
      extends AcidBaseBalance.Tissues.capillaryMembraneO2CO2;
      extends Physiolibrary.Icons.Cell;
      import Ions = AcidBaseBalance.Ions.IonsEnum;
      parameter Boolean useMetabolicUaProduction = false;
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump
        CO2_MetabolicProduction(useSoluteFlowInput=true, SoluteFlow=
            0.00016666666666667)
        annotation (Placement(transformation(extent={{58,18},{38,38}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{38,70},{58,90}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{0,70},{20,90}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure
        TissueCO2Concentration
        annotation (Placement(transformation(extent={{0,38},{20,18}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{18,40},{40,60}})));
      AcidBaseBalance.Tissues.limitO2Metabolism limitO2Metabolism(
          metabolismFlowRate=modelSettings.metabolismO2FlowRate)
        annotation (Placement(transformation(extent={{50,40},{70,60}})));
      tissuesOrganicAcidProduction tissuesOrganicAcidProduction1 if
        useMetabolicUaProduction
        annotation (Placement(transformation(extent={{-2,-54},{18,-34}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b ions[Ions] annotation (
          Placement(transformation(rotation=0, extent={{-130,-110},{-110,-90}}),
            iconTransformation(extent={{-130,-110},{-110,-90}})));
      Interfaces.IonSelector ionSelector(selectedIon=AcidBaseBalance.Ions.IonsEnum.Ua)
        annotation (Placement(transformation(extent={{-80,-70},{-60,-50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump
        CO2_MetabolicProduction1(useSoluteFlowInput=true, SoluteFlow=
            0.00016666666666667)
        annotation (Placement(transformation(extent={{66,-70},{46,-50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        CO2_MetabolicProduction2(useSoluteFlowInput=true, SoluteFlow=
            0.00016666666666667)
        annotation (Placement(transformation(extent={{38,12},{58,-8}})));
    equation

      connect(O2_MetabolicConsumption.q_in,TissueO2Concentration. q_in)
        annotation (Line(
          points={{38,80},{10,80}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in,CO2_MetabolicProduction. q_out)
        annotation (Line(
          points={{10,28},{38,28}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration,computationpO2pCO2_1. ctO2)
        annotation (Line(points={{10,72},{10,58},{20,58}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2,TissueCO2Concentration. concentration)
        annotation (Line(points={{20,40},{16.5,40},{16.5,36},{10,36}},
                           color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate,CO2_MetabolicProduction. soluteFlow)
        annotation (Line(points={{70,40},{74,40},{74,32},{44,32}},        color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow,limitO2Metabolism. O2FlowRate)
        annotation (Line(points={{52,84},{70,84},{70,60}},                color=
             {0,0,127}));
      connect(computationpO2pCO2_1.pO2,limitO2Metabolism. pO2) annotation (Line(
            points={{38,50},{52,50}},
            color={0,0,127}));
      connect(ions, ionSelector.port_a) annotation (Line(
          points={{-120,-100},{-84,-100},{-84,-60},{-80,-60}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector.port_b, tissuesOrganicAcidProduction1.UA) annotation (
         Line(
          points={{-60,-60},{-30,-60},{-30,-48.2},{-1.8,-48.2}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector.port_b, CO2_MetabolicProduction1.q_out) annotation (Line(
          points={{-60,-60},{46,-60}},
          color={107,45,134},
          thickness=1));
      connect(limitO2Metabolism.lactateFlowRate, CO2_MetabolicProduction2.soluteFlow)
        annotation (Line(points={{70,50},{90,50},{90,-30},{52,-30},{52,-2}},  color=
             {0,0,127}));
      connect(limitO2Metabolism.lactateFlowRate, CO2_MetabolicProduction1.soluteFlow)
        annotation (Line(points={{70,50},{90,50},{90,-30},{52,-30},{52,-56}}, color=
             {0,0,127}));
      connect(iSFMembraneO2.q_in, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{-6,44},{-6,80},{38,80}},
          color={107,45,134},
          thickness=1));
      connect(iSFMembraneCO2.q_in, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{-6,28},{38,28}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_out, tissuesOrganicAcidProduction1.HCO3)
        annotation (Line(
          points={{-30,2},{-30,-39.8},{-1.8,-39.8}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_out, CO2_MetabolicProduction2.q_in)
        annotation (Line(
          points={{-30,2},{38,2}},
          color={107,45,134},
          thickness=1));
      annotation (Diagram(coordinateSystem(extent={{-120,-100},{100,100}}),
            graphics={
            Rectangle(
              extent={{-22,-10},{40,-72}},
              lineColor={244,125,35},
              lineThickness=1,
              pattern=LinePattern.Dash),
            Text(
              extent={{-12,-20},{30,-10}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="Conditional"),
            Text(
              extent={{-34,-82},{54,-72}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="UseMetabolicUABalance")}),
          Icon(coordinateSystem(extent={{-120,-100},{100,100}}), graphics={
              Rectangle(
              extent={{-120,100},{100,-100}},
              lineColor={28,108,200},
              pattern=LinePattern.Dash), Text(
              extent={{-100,-40},{100,40}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              textString="Cells")}));
    end TissueCells;

    model limitO2Metabolism
      Physiolibrary.Types.RealIO.PressureInput pO2(start=6000)
        "Tissue partial pressure of O2" annotation(Placement(transformation(extent={{-100,-20},{-60,20}}), iconTransformation(extent = {{-20, -20}, {20, 20}}, rotation=0,     origin={-80,0})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput O2FlowRate annotation (Placement(
            transformation(extent={{80,80},{120,120}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={100,100})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput CO2FlowRate annotation (Placement(
            transformation(extent={{80,-20},{120,20}}),  iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={100,-100})));

      parameter Physiolibrary.Types.Pressure criticalPoint = 100;
      parameter Physiolibrary.Types.Fraction respiratoryQuotient = 0.85;
      parameter Physiolibrary.Types.MolarFlowRate metabolismFlowRate = 0.00018333333333333;
    //  Physiolibrary.Types.MolarFlowRate metabolismFlowRate;// = ramp.y;
      parameter Boolean limiterEnabled = true;
      Real FirstOrderFlowRate = pO2*metabolismFlowRate/100;
    //   Modelica.Blocks.Sources.Ramp ramp(
    //     duration=100000,
    //     startTime=60*100,
    //     height=0.00020,
    //     offset=0.00002)
    //     annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput lactateFlowRate annotation (
          Placement(transformation(extent={{80,-120},{120,-80}}),
            iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=0,
            origin={100,0})));
    equation
    //metabolismFlowRate = ramp.y;

      if limiterEnabled and (FirstOrderFlowRate < metabolismFlowRate) then
        O2FlowRate = FirstOrderFlowRate;
        lactateFlowRate = metabolismFlowRate - FirstOrderFlowRate;
      else
        O2FlowRate = metabolismFlowRate;
        lactateFlowRate = 0;
      end if;

    //  O2FlowRate = FirstOrderFlowRate > metabolismFlowRate + min(0, (criticalPoint-pO2)*limitedMetabolismSlope) else metabolismFlowRate;
      CO2FlowRate = metabolismFlowRate*respiratoryQuotient;
       annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end limitO2Metabolism;
  end Tissues;

  package Test

    model TestElastance
      BloodComponents.BloodElasticVesselElastance bloodElasticVesselElastance(
        ExternalPressure=0,
        O2_concentration=0.0,
        ZeroPressureVolume=0.001,
        Compliance=3.7503078792283e-6,
        volume_start=0.0005,
        Elastance=1333223874.15,
        CO2_concentration=0.0)
        annotation (Placement(transformation(extent={{-10,-20},{10,0}})));
      BloodComponents.BloodResistor bloodResistor(Resistance=799934324490)
        annotation (Placement(transformation(extent={{20,-20},{40,0}})));
      Interfaces.BloodPort_in_Extension bloodPort_a_Extension
        annotation (Placement(transformation(extent={{44,-20},{64,0}})));
      Interfaces.BloodPort_out_Extension bloodPort_b_Extension
        annotation (Placement(transformation(extent={{-34,-20},{-14,0}})));
      Physiolibrary.Chemical.Components.Stream O2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-68,-40},{-48,-20}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{-60,10},{-40,-10}})));
      Physiolibrary.Chemical.Components.Stream CO2flow(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{-68,-70},{-48,-50}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{-68,-100},{-48,-80}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(SolutionFlow=
            1.6666666666667e-5)
        annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageO2(Conc=10)
        annotation (Placement(transformation(extent={{-100,-40},{-80,-20}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageCO2(Conc=20)
        annotation (Placement(transformation(extent={{-100,-70},{-80,-50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageBEox(Conc=0)
        annotation (Placement(transformation(extent={{-100,-100},{-80,-80}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageO1(Conc=10)
        annotation (Placement(transformation(extent={{124,-40},{104,-20}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageCO1(Conc=60)
        annotation (Placement(transformation(extent={{124,-70},{104,-50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageBEox1(Conc=0)
        annotation (Placement(transformation(extent={{124,-100},{104,-80}})));
      Physiolibrary.Chemical.Components.Stream O2flow1(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{74,-40},{94,-20}})));
      Physiolibrary.Chemical.Components.Stream CO2flow1(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{76,-70},{96,-50}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow1(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{76,-100},{96,-80}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume
        annotation (Placement(transformation(extent={{124,-10},{104,10}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure1
        annotation (Placement(transformation(extent={{80,10},{100,-10}})));
      Physiolibrary.Chemical.Components.Stream ionFlow[AcidBaseBalance.Ions.IonsEnum](
         each useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-68,-130},{-48,-110}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ionUS[
        AcidBaseBalance.Ions.IonsEnum](each Conc=0)
        annotation (Placement(transformation(extent={{-100,-130},{-80,-110}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ionUS1[
        AcidBaseBalance.Ions.IonsEnum](each Conc=0)
        annotation (Placement(transformation(extent={{124,-130},{104,-110}})));
      Physiolibrary.Chemical.Components.Stream ionFlow1[AcidBaseBalance.Ions.IonsEnum](
         each useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{78,-130},{98,-110}})));
      Interfaces.OneToMany oneToMany annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            rotation=270,
            origin={-48,-106})));
      Interfaces.OneToMany oneToMany1 annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            rotation=270,
            origin={96,-106})));
    equation
      connect(bloodResistor.bloodPort_out, bloodPort_a_Extension.bloodPort_in)
        annotation (Line(
          points={{39,-10},{44,-10}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure.q_out,bloodPort_b_Extension. bloodFlow) annotation (
          Line(
          points={{-40,0},{-34,0}},
          color={0,0,0},
          thickness=1));
      connect(O2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{-58,-23},{-58,-22},{-50,-22},{-50,-12}},          color={0,
              0,127}));
      connect(CO2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{-58,-53},{-58,-52},{-50,-52},{-50,-12}},
                                                         color={0,0,127}));
      connect(BEoxflow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{-58,-83},{-58,-82},{-50,-82},{-50,-12}},
                                                           color={0,0,127}));
      connect(O2flow.q_out,bloodPort_b_Extension. O2) annotation (Line(
          points={{-48,-30},{-40,-30},{-40,-8},{-34,-8}},
          color={107,45,134},
          thickness=1));
      connect(CO2flow.q_out,bloodPort_b_Extension. CO2) annotation (Line(
          points={{-48,-60},{-38,-60},{-38,-12},{-34,-12}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_out,bloodPort_b_Extension. BEox) annotation (Line(
          points={{-48,-90},{-36,-90},{-36,-16},{-34,-16}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_b_Extension.bloodPort_out, bloodElasticVesselElastance.bloodPort_in)
        annotation (Line(
          points={{-14,-10},{-9.8,-10}},
          color={28,108,200},
          thickness=0.5));
      connect(unlimitedPump.q_out, flowMeasure.q_in) annotation (Line(
          points={{-80,0},{-60,0}},
          color={0,0,0},
          thickness=1));
      connect(unlimitedSolutionStorageO2.q_out, O2flow.q_in) annotation (Line(
          points={{-80,-30},{-68,-30}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutionStorageCO2.q_out, CO2flow.q_in) annotation (Line(
          points={{-80,-60},{-68,-60}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutionStorageBEox.q_out, BEoxflow.q_in) annotation (
          Line(
          points={{-80,-90},{-68,-90}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutionStorageBEox1.q_out, BEoxflow1.q_out) annotation (
         Line(
          points={{104,-90},{96,-90}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedVolume.y, flowMeasure1.q_out) annotation (Line(
          points={{104,0},{100,0}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure1.q_in, bloodPort_a_Extension.bloodFlow) annotation (
          Line(
          points={{80,0},{64,0}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure1.volumeFlow, O2flow1.solutionFlow) annotation (Line(
            points={{90,-12},{90,-20.1},{84,-20.1},{84,-23}}, color={0,0,127}));
      connect(flowMeasure1.volumeFlow, CO2flow1.solutionFlow) annotation (Line(
            points={{90,-12},{90,-53},{86,-53}}, color={0,0,127}));
      connect(flowMeasure1.volumeFlow, BEoxflow1.solutionFlow) annotation (Line(
            points={{90,-12},{90,-83},{86,-83}}, color={0,0,127}));
      connect(O2flow1.q_out, unlimitedSolutionStorageO1.q_out) annotation (Line(
          points={{94,-30},{104,-30}},
          color={107,45,134},
          thickness=1));
      connect(CO2flow1.q_out, unlimitedSolutionStorageCO1.q_out) annotation (
          Line(
          points={{96,-60},{104,-60}},
          color={107,45,134},
          thickness=1));
      connect(O2flow1.q_in, bloodPort_a_Extension.O2) annotation (Line(
          points={{74,-30},{74,-8},{64,-8}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.CO2, CO2flow1.q_in) annotation (Line(
          points={{64,-12.2},{64,-14},{72,-14},{72,-60},{76,-60}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.BEox, BEoxflow1.q_in) annotation (Line(
          points={{64,-16},{70,-16},{70,-90},{76,-90}},
          color={107,45,134},
          thickness=1));
      connect(bloodElasticVesselElastance.bloodPort_out, bloodResistor.bloodPort_in)
        annotation (Line(
          points={{10,-10},{21,-10}},
          color={28,108,200},
          thickness=0.5));
      connect(ionUS.q_out, ionFlow.q_in) annotation (Line(
          points={{-80,-120},{-68,-120}},
          color={107,45,134},
          thickness=1));
      connect(ionFlow.q_out, bloodPort_b_Extension.ions) annotation (Line(
          points={{-48,-120},{-34,-120},{-34,-20}},
          color={107,45,134},
          thickness=1));
      connect(ionUS1.q_out, ionFlow1.q_out) annotation (Line(
          points={{104,-120},{98,-120}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.ions, ionFlow1.q_in) annotation (Line(
          points={{64,-20},{64,-22},{68,-22},{68,-120},{78,-120}},
          color={107,45,134},
          thickness=1));
      connect(flowMeasure.volumeFlow, oneToMany.u)
        annotation (Line(points={{-50,-12},{-50,-102}}, color={0,0,127}));
      connect(ionFlow.solutionFlow, oneToMany.y) annotation (Line(points={{-58,-113},
              {-58,-110},{-50,-110}}, color={0,0,127}));
      connect(flowMeasure1.volumeFlow, oneToMany1.u)
        annotation (Line(points={{90,-12},{90,-102},{94,-102}}, color={0,0,127}));
      connect(oneToMany1.y, ionFlow1.solutionFlow) annotation (Line(points={{94,-110},
              {90,-110},{90,-113},{88,-113}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -120,-120},{140,20}})), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-120,-120},{140,20}})),
        experiment(StopTime=50));
    end TestElastance;

    model HemodynamicsMeurs_flatNorm
    extends Physiolibrary.Icons.CardioVascular;
      Physiolibrary.Hydraulic.Examples.MeursModel2011.Parts.AtrialElastance LAtrialElastance(
        Tav(displayUnit="s"),
        EMIN=15998686.4898,
        EMAX=37330268.4762)
        annotation (Placement(transformation(extent={{56,92},{94,124}})));
      Physiolibrary.Hydraulic.Examples.MeursModel2011.Parts.VentricularElastance LVentricularElastance(EMIN=
            11999014.86735, EMAX=533289549.66)
        annotation (Placement(transformation(extent={{122,92},{158,124}})));
      Physiolibrary.Hydraulic.Examples.MeursModel2011.Parts.AtrialElastance RAtrialElastance(EMIN=
            6666119.37075, EMAX=19998358.11225)
        annotation (Placement(transformation(extent={{-244,86},{-206,118}})));
      Physiolibrary.Hydraulic.Examples.MeursModel2011.Parts.VentricularElastance RVentricularElastance(EMIN=
            7599376.082655, EMAX=65327969.83335)
        annotation (Placement(transformation(extent={{-180,88},{-150,122}})));
      replaceable Physiolibrary.Types.Constants.FrequencyConst HeartRate(k(displayUnit = "1/min") = 1.2) annotation(Placement(visible = true, transformation(origin={-243,
                148.5},                                                                                                    extent = {{-11, -6.5}, {11, 6.5}}, rotation = 0)));
      BloodComponents.BloodElasticVesselElastance intrathoracicArteries(
        ZeroPressureVolume=0.00014,
        ExternalPressure=-533.28954966,
        Elastance=190651014.00345,
        volume_start=0.000204) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={188,0})));
      BloodComponents.BloodInertia aorticFlowInertia(I(displayUnit="mmHg.s2/ml")=
             93325.6711905, volumeFlow_start(displayUnit="ml/min") = 5e-9)
        annotation (Placement(transformation(
            extent={{12,-8},{-12,8}},
            rotation=0,
            origin={146,0})));
      BloodComponents.BloodResistor pulmonaryVenousResistance(Resistance(
            displayUnit="(mmHg.s)/ml") = 399967.162245)
        annotation (Placement(transformation(extent={{10,50},{30,70}})));
      BloodComponents.BloodValve AorticValve(
        _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245,
        _Goff=0,
        Pknee=0)
        annotation (Placement(transformation(extent={{196,30},{216,50}})));
      BloodComponents.BloodResistor extrathoracicArterialResistance(Resistance(
            displayUnit="(mmHg.s)/ml") = 7999343.2449) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={108,0})));
      BloodComponents.BloodElasticVesselElastance extrathoracicArteries(
        ExternalPressure=0,
        ZeroPressureVolume=0.00037,
        Elastance=74127247.40274,
        volume_start=0.000526) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={66,0})));
      BloodComponents.BloodResistor systemicArterioalResistance(Resistance(
            displayUnit="(mmHg.s)/ml") = 106657909.932) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={32,0})));
      BloodComponents.BloodElasticVesselElastance systemicTissues(
        ExternalPressure=0,
        ZeroPressureVolume=0.000185,
        Elastance=34930465.50273,
        volume_start=0.000283) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-14,0})));
      BloodComponents.BloodResistor smallVenuleResistance(Resistance(
            displayUnit="(mmHg.s)/ml") = 26664477.483) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-58,0})));
      BloodComponents.BloodElasticVesselElastance extrathoracicVeins(
        ExternalPressure=0,
        ZeroPressureVolume=0.001,
        Elastance=2253148.3473135,
        volume_start=0.00153) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-100,0})));
      BloodComponents.BloodResistor venousResistance(Resistance(displayUnit=
              "(mmHg.s)/ml") = 11999014.86735) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-140,0})));
      BloodComponents.BloodElasticVesselElastance intrathoracicVeins(
        ZeroPressureVolume=0.00119,
        ExternalPressure=-533.28954966,
        Elastance=2426467.450953,
        volume_start=0.00148) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-182,0})));
      BloodComponents.BloodResistor centralVenousResistance(Resistance(
            displayUnit="(mmHg.s)/ml") = 399967.162245) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-236,0})));
      BloodComponents.BloodValve TricuspidValve(
        _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245,
        _Goff=0,
        Pknee=0)
        annotation (Placement(transformation(extent={{-218,51},{-194,29}})));
      BloodComponents.BloodValve PulmonaryValve(_Ron(displayUnit="(mmHg.s)/ml")=
             399967.162245)
        annotation (Placement(transformation(extent={{-140,30},{-120,50}})));
      BloodComponents.BloodElasticVesselElastance pulmonaryArteries(
        ZeroPressureVolume=5e-5,
        ExternalPressure=-533.28954966,
        Elastance=31064116.267695,
        volume_start=0.000106)
        annotation (Placement(transformation(extent={{-94,50},{-74,70}})));
      BloodComponents.BloodResistor pulmonaryResistance(Resistance(displayUnit=
              "(mmHg.s)/ml") = 14665462.61565)
        annotation (Placement(transformation(extent={{-62,50},{-42,70}})));
      BloodComponents.BloodElasticVesselElastance pulmonaryVeins(
        ZeroPressureVolume=0.00035,
        ExternalPressure=-533.28954966,
        Elastance=6066168.6273825,
        volume_start=0.000518)
        annotation (Placement(transformation(extent={{-20,50},{0,70}})));
      BloodComponents.BloodValve MitralValve(
        _Ron(displayUnit="(mmHg.s)/ml") = 399967.162245,
        _Goff=0,
        Pknee=0)
        annotation (Placement(transformation(extent={{100,30},{120,50}})));
      BloodComponents.BloodElasticVesselCompliance LeftVentricle(
        ZeroPressureVolume=6e-5,
        ExternalPressure=-533.28954966,
        useComplianceInput=true,
        volume_start=0.000144)
        annotation (Placement(transformation(extent={{160,30},{180,50}})));
      BloodComponents.BloodElasticVesselCompliance RightAtrium(
        ZeroPressureVolume=3e-5,
        ExternalPressure=-533.28954966,
        useComplianceInput=true,
        volume_start=0.000135)
        annotation (Placement(transformation(extent={{-252,30},{-232,50}})));
      BloodComponents.BloodElasticVesselCompliance RightVentricle(
        ZeroPressureVolume=4e-5,
        ExternalPressure=-533.28954966,
        useComplianceInput=true,
        volume_start=0.000131)
        annotation (Placement(transformation(extent={{-178,30},{-158,50}})));
      BloodComponents.BloodElasticVesselCompliance leftAtrium(
        ZeroPressureVolume=3e-5,
        ExternalPressure=-533.28954966,
        useComplianceInput=true,
        volume_start=9.31e-5)
        annotation (Placement(transformation(extent={{66,30},{86,50}})));
    equation
      connect(HeartRate.y,RAtrialElastance. HR) annotation(Line(points={{-229.25,
              148.5},{-225,148.5},{-225,114.8}},                                                                           color = {0, 0, 127}, smooth = Smooth.None));
      connect(RVentricularElastance.HR, HeartRate.y) annotation(Line(points={{-165,
              118.6},{-165,148.5},{-229.25,148.5}},                                                                             color = {0, 0, 127}, smooth = Smooth.None));
      connect(LAtrialElastance.HR, HeartRate.y) annotation (Line(
          points={{75,120.8},{75,148.5},{-229.25,148.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(LVentricularElastance.HR, HeartRate.y) annotation (Line(
          points={{140,120.8},{140,148.5},{-229.25,148.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(PulmonaryValve.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-120,40},{-106,40},{-106,60},{-93.8,60}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryResistance.bloodPort_out, pulmonaryVeins.bloodPort_in)
        annotation (Line(
          points={{-43,60},{-19.8,60}},
          color={28,108,200},
          thickness=0.5));
      connect(MitralValve.bloodPort_out, LeftVentricle.bloodPort_in)
        annotation (Line(
          points={{120,40},{160.2,40}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVenousResistance.bloodPort_out, leftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,60},{48,60},{48,40},{66.2,40}},
          color={28,108,200},
          thickness=0.5));
      connect(TricuspidValve.bloodPort_out, RightVentricle.bloodPort_in)
        annotation (Line(
          points={{-194,40},{-177.8,40},{-177.8,40}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryArteries.bloodPort_out, pulmonaryResistance.bloodPort_in)
        annotation (Line(
          points={{-74,60},{-61,60}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVenousResistance.bloodPort_in, pulmonaryVeins.bloodPort_out)
        annotation (Line(
          points={{11,60},{0,60}},
          color={28,108,200},
          thickness=0.5));
      connect(MitralValve.bloodPort_in, leftAtrium.bloodPort_out) annotation (
          Line(
          points={{100.2,40},{86,40}},
          color={28,108,200},
          thickness=0.5));
      connect(AorticValve.bloodPort_in, LeftVentricle.bloodPort_out)
        annotation (Line(
          points={{196.2,40},{180,40}},
          color={28,108,200},
          thickness=0.5));
      connect(AorticValve.bloodPort_out, intrathoracicArteries.bloodPort_in)
        annotation (Line(
          points={{216,40},{230,40},{230,-1.77636e-15},{197.8,-1.77636e-15}},
          color={28,108,200},
          thickness=0.5));
      connect(aorticFlowInertia.bloodPort_in, intrathoracicArteries.bloodPort_out)
        annotation (Line(
          points={{156.8,0},{168,0},{168,6.66134e-16},{178,6.66134e-16}},
          color={28,108,200},
          thickness=0.5));
      connect(extrathoracicArterialResistance.bloodPort_in, aorticFlowInertia.bloodPort_out)
        annotation (Line(
          points={{117,-1.55431e-15},{126,-1.55431e-15},{126,0},{135.2,0}},
          color={28,108,200},
          thickness=0.5));
      connect(extrathoracicArteries.bloodPort_in,
        extrathoracicArterialResistance.bloodPort_out) annotation (Line(
          points={{75.8,-1.77636e-15},{88,-1.77636e-15},{88,0},{99,0}},
          color={28,108,200},
          thickness=0.5));
      connect(systemicArterioalResistance.bloodPort_in, extrathoracicArteries.bloodPort_out)
        annotation (Line(
          points={{41,-1.55431e-15},{48,-1.55431e-15},{48,7.21645e-16},{56,
              7.21645e-16}},
          color={28,108,200},
          thickness=0.5));

      connect(systemicTissues.bloodPort_in, systemicArterioalResistance.bloodPort_out)
        annotation (Line(
          points={{-4.2,-1.77636e-15},{14,-1.77636e-15},{14,5.55112e-16},{23,
              5.55112e-16}},
          color={28,108,200},
          thickness=0.5));

      connect(smallVenuleResistance.bloodPort_in, systemicTissues.bloodPort_out)
        annotation (Line(
          points={{-49,0},{-24,0}},
          color={28,108,200},
          thickness=0.5));
      connect(extrathoracicVeins.bloodPort_in, smallVenuleResistance.bloodPort_out)
        annotation (Line(
          points={{-90.2,-1.72085e-15},{-78,-1.72085e-15},{-78,5.55112e-16},{-67,
              5.55112e-16}},
          color={28,108,200},
          thickness=0.5));

      connect(venousResistance.bloodPort_in, extrathoracicVeins.bloodPort_out)
        annotation (Line(
          points={{-131,-1.55431e-15},{-120,-1.55431e-15},{-120,7.21645e-16},{-110,
              7.21645e-16}},
          color={28,108,200},
          thickness=0.5));

      connect(intrathoracicVeins.bloodPort_in, venousResistance.bloodPort_out)
        annotation (Line(
          points={{-172.2,-1.77636e-15},{-160,-1.77636e-15},{-160,4.44089e-16},
              {-149,4.44089e-16}},
          color={28,108,200},
          thickness=0.5));
      connect(centralVenousResistance.bloodPort_in, intrathoracicVeins.bloodPort_out)
        annotation (Line(
          points={{-227,-1.77636e-15},{-200,-1.77636e-15},{-200,0},{-192,0}},
          color={28,108,200},
          thickness=0.5));
      connect(RightVentricle.bloodPort_out, PulmonaryValve.bloodPort_in)
        annotation (Line(
          points={{-158,40},{-139.8,40}},
          color={28,108,200},
          thickness=0.5));
      connect(centralVenousResistance.bloodPort_out, RightAtrium.bloodPort_in)
        annotation (Line(
          points={{-245,4.44089e-16},{-256,4.44089e-16},{-256,0},{-268,0},{-268,
              40},{-251.8,40}},
          color={28,108,200},
          thickness=0.5));
      connect(RightAtrium.bloodPort_out, TricuspidValve.bloodPort_in)
        annotation (Line(
          points={{-232,40},{-217.76,40}},
          color={28,108,200},
          thickness=0.5));
      connect(leftAtrium.compliance, LAtrialElastance.Ct) annotation (Line(
            points={{76,48},{78,48},{78,70},{108,70},{108,107.84},{97.61,107.84}},
            color={0,0,127}));
      connect(LVentricularElastance.Ct, LeftVentricle.compliance) annotation (
          Line(points={{161.42,111.68},{170,111.68},{170,48}}, color={0,0,127}));
      connect(RightVentricle.compliance, RVentricularElastance.Ct) annotation (
          Line(points={{-168,48},{-168,76},{-130,76},{-130,108.91},{-147.15,
              108.91}}, color={0,0,127}));
      connect(RightAtrium.compliance, RAtrialElastance.Ct) annotation (Line(
            points={{-242,48},{-242,70},{-196,70},{-196,101.84},{-202.39,101.84}},
            color={0,0,127}));
      annotation(Diagram(coordinateSystem(extent={{-280,-180},{280,180}},      preserveAspectRatio=false)),             Icon(coordinateSystem(extent={{-280,
                -180},{280,180}},                                                                                                    preserveAspectRatio = false), graphics),
        Documentation(info="<html>
<p>Model of cardiovascular system using to demonstrate elastic and resistance features of veins and arteries in pulmonary and systemic circulation and influence of cardiac output on it.</p>
<ul>
<li>J. A. Goodwin, W. L. van Meurs, C. D. Sa Couto, J. E. W.Beneken, S. A. Graves, A model for educational simulation of infant cardiovascular physiology., Anesthesia and analgesia 99 (6)(2004) 1655&ndash;1664. doi:10.1213/01.ANE.0000134797.52793.AF.</li>
<li>C. D. Sa Couto, W. L. van Meurs, J. A. Goodwin, P. Andriessen,A Model for Educational Simulation of Neonatal Cardiovascular Pathophysiology, Simulation in Healthcare 1 (Inaugural) (2006) 4&ndash;12.</li>
<li>W. van Meurs, Modeling and Simulation in Biomedical Engineering: Applications in Cardiorespiratory Physiology, McGraw-Hill Professional, 2011.</li>
</ul>
</html>",     revisions="<html>
<ul>
<li><i>Jul 2015 </i>by Tomas Kulhanek: Created. </li>
</ul>
</html>"),
        experiment(StopTime=5));
    end HemodynamicsMeurs_flatNorm;

    model CardiovascularSystem_GCG_Physiolibrary
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      Hydraulic.Components.ElasticVessel pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-08)
        annotation (Placement(transformation(extent={{4,74},{24,94}})));
      Hydraulic.Components.ElasticVessel pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-08,
        volume_start(displayUnit="l") = 0.00038)
        annotation (Placement(transformation(extent={{-62,74},{-42,94}})));
      Hydraulic.Components.Conductor
               pulmonary(Conductance(displayUnit="l/(mmHg.min)")=
          4.1665920538226e-8)
        annotation (Placement(transformation(extent={{-30,74},{-10,94}})));
      Hydraulic.Components.ElasticVessel arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8)
        annotation (Placement(transformation(extent={{14,-46},{34,-26}})));
      Hydraulic.Components.ElasticVessel veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7)
        annotation (Placement(transformation(extent={{-64,-46},{-44,-26}})));
      Hydraulic.Components.Conductor
               nonMuscle(Conductance(displayUnit="l/(mmHg.min)")=
          3.5627924852669e-9)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-14,-36})));
      Hydraulic.Sensors.PressureMeasure pressureMeasure
        annotation (Placement(transformation(extent={{-78,26},{-58,46}})));
      Hydraulic.Components.Pump rightHeart(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-56,8},{-36,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit=
             "l/min") = 8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-60,40},{-52,48}})));
      Hydraulic.Sensors.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{-8,26},{12,46}})));
      Hydraulic.Components.Pump leftHeart(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit=
             "l/min") = 8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      Hydraulic.Components.Conductor
               kidney(Conductance(displayUnit="l/(mmHg.min)") = 1.4126159678427e-09)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-14,-54})));
      Hydraulic.Components.Conductor
               muscle(Conductance(displayUnit="l/(mmHg.min)")=
          1.3001067314658e-9)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-14,-18})));
      Hydraulic.Components.Conductor
               largeVeins(Conductance(displayUnit="l/(mmHg.min)")=
          1.6888886482791e-7)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-84,-8})));
      Hydraulic.Components.ElasticVessel rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-08)
        annotation (Placement(transformation(extent={{-82,8},{-62,28}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,
            0.104},{-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}},
          Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-56,22},{-36,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,
            0.29},{0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/
            760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{16,22},{36,42}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling1(data={{-6,0,0},{-3,
            0.15,0.104},{-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}},
          Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{76,52},{96,72}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling1(data={{-4,0,0},{-1,0.72,
            0.29},{0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/
            760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{76,32},{96,52}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO1(k(
            displayUnit="l/min") = 8.3333333333333e-05)
        annotation (Placement(transformation(extent={{74,74},{82,82}})));
      Modelica.Blocks.Sources.Ramp ramp(
        duration=100,
        height=10000,
        offset=-1000)
        annotation (Placement(transformation(extent={{44,50},{64,70}})));
      Hydraulic.Sources.UnlimitedVolume unlimitedVolume(usePressureInput=true)
        annotation (Placement(transformation(extent={{60,-2},{80,18}})));
      Hydraulic.Sources.UnlimitedOutflowPump unlimitedOutflowPump(
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{92,16},{112,36}})));
      Hydraulic.Sources.UnlimitedOutflowPump unlimitedOutflowPump1(
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{108,44},{128,64}})));
    equation
      connect(pulmonaryArteries.q_in,pulmonary. q_in) annotation (Line(
          points={{-52,84},{-30,84}},
          thickness=1));
      connect(pulmonary.q_out, pulmonaryVeinsAndLeftAtrium.q_in) annotation (
          Line(
          points={{-10,84},{14,84}},
          thickness=1));
      connect(rightHeart.q_out,pulmonaryArteries. q_in) annotation (Line(
          points={{-36,18},{-28,18},{-28,60},{-70,60},{-70,84},{-52,84}},
          thickness=1));
      connect(leftHeart.q_in, pulmonaryVeinsAndLeftAtrium.q_in) annotation (
          Line(
          points={{16,16},{-4,16},{-4,60},{32,60},{32,84},{14,84}},
          thickness=1));
      connect(leftHeart.q_out,arteries. q_in) annotation (Line(
          points={{36,16},{44,16},{44,-36},{24,-36}},
          thickness=1));
      connect(pressureMeasure.q_in,rightHeart. q_in) annotation (Line(
          points={{-72,30},{-72,18},{-56,18}},
          thickness=1));
      connect(pressureMeasure1.q_in, pulmonaryVeinsAndLeftAtrium.q_in)
        annotation (Line(
          points={{-2,30},{-4,30},{-4,60},{32,60},{32,84},{14,84}},
          thickness=1));
      connect(rightAtrium.q_in, rightHeart.q_in) annotation (Line(
          points={{-72,18},{-56,18}},
          thickness=1));
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-51,44},{-46,44},{-46,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pressureMeasure.q_in, rightAtrium.q_in) annotation (Line(
          points={{-72,30},{-72,18}},
          thickness=1));
      connect(rightHeart.solutionFlow, rightStarling.y) annotation (Line(
          points={{-46,25},{-46,28},{-46,28}},
          color={0,0,127}));
      connect(leftStarling.y, leftHeart.solutionFlow) annotation (Line(
          points={{26,28},{26,23}},
          color={0,0,127}));
      connect(pressureMeasure.pressure, rightStarling.u) annotation (Line(
          points={{-62,32},{-54,32}},
          color={0,0,127}));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
          points={{8,32},{18,32}},
          color={0,0,127}));
      connect(kidney.q_in, arteries.q_in) annotation (Line(
          points={{-4,-54},{10,-54},{10,-36},{24,-36}},
          color={0,0,0},
          thickness=1));
      connect(nonMuscle.q_in, arteries.q_in) annotation (Line(
          points={{-4,-36},{24,-36}},
          color={0,0,0},
          thickness=1));
      connect(muscle.q_in, arteries.q_in) annotation (Line(
          points={{-4,-18},{10,-18},{10,-36},{24,-36}},
          color={0,0,0},
          thickness=1));
      connect(muscle.q_out, veins.q_in) annotation (Line(
          points={{-24,-18},{-40,-18},{-40,-36},{-54,-36}},
          color={0,0,0},
          thickness=1));
      connect(nonMuscle.q_out, veins.q_in) annotation (Line(
          points={{-24,-36},{-54,-36}},
          color={0,0,0},
          thickness=1));
      connect(kidney.q_out, veins.q_in) annotation (Line(
          points={{-24,-54},{-40,-54},{-40,-36},{-54,-36}},
          color={0,0,0},
          thickness=1));
      connect(veins.q_in, largeVeins.q_in) annotation (Line(
          points={{-54,-36},{-84,-36},{-84,-18}},
          color={0,0,0},
          thickness=1));
      connect(largeVeins.q_out, rightAtrium.q_in) annotation (Line(
          points={{-84,2},{-84,18},{-72,18}},
          color={0,0,0},
          thickness=1));
      connect(LNormalCO1.y, rightStarling1.yBase) annotation (Line(points={{83,
              78},{86,78},{86,64},{86,64}}, color={0,0,127}));
      connect(LNormalCO1.y, leftStarling1.yBase)
        annotation (Line(points={{83,78},{86,78},{86,44}}, color={0,0,127}));
      connect(ramp.y, rightStarling1.u) annotation (Line(points={{65,60},{70,60},
              {70,62},{78,62}}, color={0,0,127}));
      connect(ramp.y, leftStarling1.u) annotation (Line(points={{65,60},{72,60},
              {72,42},{78,42}}, color={0,0,127}));
      connect(ramp.y, unlimitedVolume.pressure) annotation (Line(points={{65,60},
              {60,60},{60,8},{60,8}}, color={0,0,127}));
      connect(unlimitedOutflowPump.solutionFlow, leftStarling1.y) annotation (
          Line(points={{102,33},{94,33},{94,38},{86,38}}, color={0,0,127}));
      connect(unlimitedVolume.y, unlimitedOutflowPump.q_in) annotation (Line(
          points={{80,8},{88,8},{88,26},{92,26}},
          color={0,0,0},
          thickness=1));
      connect(unlimitedVolume.y, unlimitedOutflowPump1.q_in) annotation (Line(
          points={{80,8},{94,8},{94,54},{108,54}},
          color={0,0,0},
          thickness=1));
      connect(rightStarling1.y, unlimitedOutflowPump1.solutionFlow) annotation (
         Line(points={{86,58},{102,58},{102,61},{118,61}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300));
    end CardiovascularSystem_GCG_Physiolibrary;

    model CardiovascularSystem_GCG_Extension_simple
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8)
        annotation (Placement(transformation(extent={{4,74},{24,94}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8)
        annotation (Placement(transformation(extent={{-62,74},{-42,94}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-08)
        annotation (Placement(transformation(extent={{-30,74},{-10,94}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        CO2_concentration=10) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={24,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        CO2_concentration=20) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-54,-36})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-14,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-56,8},{-36,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-60,40},{-52,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-14,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-14,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-84,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-08)
        annotation (Placement(transformation(extent={{-82,8},{-62,28}})));
    equation
      connect(rightAtrium.bloodPort_out, rightHeart.bloodPort_in) annotation (
          Line(
          points={{-62,18},{-55,18}},
          color={28,108,200},
          thickness=0.5));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-37,18},{-26,18},{-26,64},{-82,64},{-82,84},{-61.8,84}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-42,84},{-29,84}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{-11,84},{-4,84},{-4,84},{4.2,84}},
          color={28,108,200},
          thickness=0.5));
      connect(leftHeart.bloodPort_in, pulmonaryVeinsAndLeftAtrium.bloodPort_out)
        annotation (Line(
          points={{17,16},{-12,16},{-12,64},{38,64},{38,84},{24,84}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-64,-36},{-84,-36},{-84,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-84,-1},{-84,18},{-81.8,18}},
          color={28,108,200},
          thickness=0.5));
      connect(leftHeart.bloodPort_out, arteries.bloodPort_in) annotation (Line(
          points={{35,16},{48,16},{48,-36},{33.8,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{14,-36},{4,-36},{4,-18},{-5,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{14,-36},{-5,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{14,-36},{4,-36},{4,-54},{-5,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(nonMuscle.bloodPort_out, veins.bloodPort_in) annotation (Line(
          points={{-23,-36},{-44.2,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(muscle.bloodPort_out, veins.bloodPort_in) annotation (Line(
          points={{-23,-18},{-34,-18},{-34,-36},{-44.2,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, veins.bloodPort_in) annotation (Line(
          points={{-23,-54},{-34,-54},{-34,-36},{-44.2,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(LNormalCO.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{21,46},{26,46},{26,20}}, color={0,0,127}));
      connect(RNormalCO.y,rightHeart.volumeFlowRate)  annotation (Line(points={
              {-51,44},{-46,44},{-46,22}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-100,-100},{100,120}})));
    end CardiovascularSystem_GCG_Extension_simple;

    model CardiovascularSystem_Infusion
      extends CardiovascularSystem_GCG_Extension_simple;
      Physiolibrary.Types.Constants.VolumeFlowRateConst volumeFlowRate(k=1.6666666666667e-6)
        annotation (Placement(transformation(extent={{-94,-58},{-86,-50}})));
      BloodComponents.Infusions.SodiumLactate infusion annotation (Placement(
            transformation(rotation=0, extent={{-80,-80},{-60,-60}})));
    equation
      connect(volumeFlowRate.y, infusion.solutionFlow)
        annotation (Line(points={{-85,-54},{-76,-54},{-76,-60}}, color={0,0,127}));
      connect(infusion.bloodPort_out, veins.bloodPort_in) annotation (Line(
          points={{-60,-64},{-44.2,-64},{-44.2,-36}},
          color={28,108,200},
          thickness=0.5));
    end CardiovascularSystem_Infusion;

    model TestAlvEq
      Package.AlvEqUnit_ alvEqUnit_
        annotation (Placement(transformation(extent={{-18,2},{60,58}})));
      Physiolibrary.Types.Constants.ConcentrationConst O2(k=6.0332)
        annotation (Placement(transformation(extent={{-78,18},{-70,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst Q(k=8.4166666666667e-5)
        annotation (Placement(transformation(extent={{-44,56},{-36,64}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.25e-5)
        annotation (Placement(transformation(extent={{-63,42},{-55,48}})));
      Physiolibrary.Types.Constants.ConcentrationConst CO2(k=23.6727)
        annotation (Placement(transformation(extent={{-64,6},{-56,14}})));
      Physiolibrary.Types.Constants.ConcentrationConst BEox(k=0)
        annotation (Placement(transformation(extent={{-52,-14},{-44,-6}})));
      inner Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
    equation
      connect(Q.y, alvEqUnit_.Q) annotation (Line(points={{-35,60},{-10,60},{
              -10,42.6},{1.89,42.6}}, color={0,0,127}));
      connect(VAi.y, alvEqUnit_.VAi) annotation (Line(points={{-54,45},{-54,
              28.04},{-9.03,28.04}}, color={0,0,127}));
      connect(O2.y, alvEqUnit_.O2_v) annotation (Line(points={{-69,22},{-26,22},
              {-26,16.56},{-14.88,16.56}}, color={0,0,127}));
      connect(CO2.y, alvEqUnit_.CO2_v) annotation (Line(points={{-55,10},{-34,
              10},{-34,11.52},{-14.88,11.52}}, color={0,0,127}));
      connect(BEox.y, alvEqUnit_.BEox_v) annotation (Line(points={{-43,-10},{
              -30,-10},{-30,6.48},{-14.88,6.48}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end TestAlvEq;

    model testO2CO2
      Acidbase.OSA.PO2PCO2 pO2PCO2_1
        annotation (Placement(transformation(extent={{-66,-24},{-8,44}})));
      Physiolibrary.Types.Constants.ConcentrationConst BEox(k=-10)
        annotation (Placement(transformation(extent={{-90,12},{-82,20}})));
      Physiolibrary.Types.Constants.PressureConst pO2(k=0.0133322387415)
        annotation (Placement(transformation(extent={{-92,44},{-84,52}})));
      Physiolibrary.Types.Constants.PressureConst pCO2(k=5332.8954966)
        annotation (Placement(transformation(extent={{-88,30},{-80,38}})));
      inner Interfaces.ModelSettings modelSettings(
        FiO2=0,
        FiCO2=0,
        cPi=1.15,
        ctHb=0,
        cDPG=0,
        FMetHb=0,
        FCOHb=0,
        FHbF=0,
        cAlb=3.3,
        Temperature=310.15)
        annotation (Placement(transformation(extent={{-100,78},{-80,98}})));
      Acidbase.OSA.O2CO2 o2CO2_1
        annotation (Placement(transformation(extent={{28,-26},{94,42}})));
      Physiolibrary.Types.Constants.ConcentrationConst ctO2(k=1e-12)
        annotation (Placement(transformation(extent={{0,68},{8,76}})));
    equation
      connect(BEox.y, pO2PCO2_1.BEox) annotation (Line(points={{-81,16},{-64,16},
              {-64,20.7667},{-56.3333,20.7667}},
                                          color={0,0,127}));
      connect(pO2.y, pO2PCO2_1.pO2) annotation (Line(points={{-83,48},{-66,48},
              {-66,32.1},{-56.3333,32.1}},
                               color={0,0,127}));
      connect(pCO2.y, pO2PCO2_1.pCO2) annotation (Line(points={{-79,34},{-62,34},
              {-62,26.4333},{-56.3333,26.4333}},
                               color={0,0,127}));
      connect(pO2PCO2_1.ctCO2, o2CO2_1.ctCO2) annotation (Line(points={{14.5556,
              21.3333},{14.45,21.3333},{14.45,20},{26.35,20}},
                                                            color={0,0,127}));
      connect(BEox.y, o2CO2_1.BEox) annotation (Line(points={{-81,16},{-70,16},
              {-70,-34},{16,-34},{16,16},{26.35,16}},color={0,0,127}));
      connect(ctO2.y, o2CO2_1.ctO2) annotation (Line(points={{9,72},{16,72},{16,
              24},{26.35,24}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end testO2CO2;

    model AlvVentilation_with_ISF_Interface
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{-4,-96},{-24,-76}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(SoluteFlow=0.00018333333333333)
        annotation (Placement(transformation(extent={{4,-84},{24,-64}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{-31,88},{-23,94}})));
      BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-14,90},{6,70}})));
      Physiolibrary.Types.Constants.FractionConst fraction(k=0.02)
        annotation (Placement(transformation(extent={{-106,74},{-98,82}})));
      Interfaces.Shunt shunt(G_total(displayUnit="l/(mmHg.min)")=
          4.1665920538226e-8)
        annotation (Placement(transformation(extent={{-68,68},{-60,76}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.AlveolocapillaryUnit_bad alveolocapillaryUnit
        annotation (Placement(transformation(extent={{-20,94},{8,118}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-46,-76},{-18,-44}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-14,-16},{14,16}},
            rotation=90,
            origin={72,-24})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{5,80},{10,80},{10,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-13,80},{-82,80},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(fraction.y, shunt.shunt_fraction) annotation (Line(points={{-97,
              78},{-82,78},{-82,72},{-67.2,72}}, color={0,0,127}));
      connect(shunt.G_main, pulmonary.cond) annotation (Line(points={{-60.4,
              75.6},{-56,75.6},{-56,94},{-66,94},{-66,103.4},{-64,103.4}},
            color={0,0,127}));
      connect(shunt.G_shunt, pulmonary1.cond) annotation (Line(points={{-60.4,
              68.4},{-4,68.4},{-4,73.4}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
        annotation (Line(
          points={{-31,110},{-20,110},{-20,113.2},{-10.76,113.2}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{-2.64,113.44},{3.68,113.44},{3.68,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(VAi.y, alveolocapillaryUnit.VAi) annotation (Line(points={{-22,91},{-20,
              91},{-20,105.16},{-16.78,105.16}}, color={0,0,127}));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-44.6,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-19.4,-60},{-10,-60},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(O2_MetabolicConsumption.q_in, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{4,-74},{-23.32,-74},{-23.32,-60}},
          color={107,45,134},
          thickness=1));
      connect(CO2_MetabolicProduction.q_out, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-24,-86},{-27.8,-86},{-27.8,-60}},
          color={107,45,134},
          thickness=1));
      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-36.6},{72,-36.6}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.4},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -100},{100,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-100},{100,140}})));
    end AlvVentilation_with_ISF_Interface;

    model TestISFBuffer
      Package.ISFBuffer iSFBuffer(
        initialO2concentration=0.053,
        initialCO2concentration=26,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-18,-62},{40,4}})));
      Physiolibrary.Types.Constants.ConcentrationConst concentration(k=6.6)
        annotation (Placement(transformation(extent={{-56,-40},{-48,-32}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.001)
        annotation (Placement(transformation(extent={{-62,-26},{-54,-18}})));
      Physiolibrary.Types.Constants.ConcentrationConst concentration1(k=1.15)
        annotation (Placement(transformation(extent={{-60,-52},{-52,-44}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
        annotation (Placement(transformation(extent={{-76,-82},{-68,-74}})));

    equation

      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-53,-22},{
              -40,-22},{-40,-33.5833},{5.06818,-33.5833}},
                                             color={0,0,127}));
      connect(concentration.y, iSFBuffer.cAlb) annotation (Line(points={{-47,-36},
              {-34,-36},{-34,-39.8167},{3.48636,-39.8167}},
                                                  color={0,0,127}));
      connect(concentration1.y, iSFBuffer.cPi) annotation (Line(points={{-51,-48},
              {-34,-48},{-34,-44.7667},{3.61818,-44.7667}},
                                                  color={0,0,127}));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-67,-78},
              {-44,-78},{-44,-50.0833},{3.48636,-50.0833}},
                                                  color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end TestISFBuffer;

    model AlvVentilation_with_ISF
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{52,-108},{32,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(SoluteFlow=0.00018333333333333)
        annotation (Placement(transformation(extent={{66,-86},{86,-66}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{-31,88},{-23,94}})));
      BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-14,90},{6,70}})));
      Physiolibrary.Types.Constants.FractionConst fraction(k=0.02)
        annotation (Placement(transformation(extent={{-106,74},{-98,82}})));
      Interfaces.Shunt shunt(G_total(displayUnit="l/(mmHg.min)")=
          4.1665920538226e-8)
        annotation (Placement(transformation(extent={{-68,68},{-60,76}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.AlveolocapillaryUnit_bad alveolocapillaryUnit
        annotation (Placement(transformation(extent={{-20,94},{8,118}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-46,-76},{-18,-44}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-14,-16},{14,16}},
            rotation=90,
            origin={72,-24})));
      Package.ISFBuffer iSFBuffer(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        initialBEox=0.892,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-36,-92},{-16,-72}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.01)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=2.2)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=1.15)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
        annotation (Placement(transformation(extent={{-106,-104},{-98,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance(
            displayUnit="ml/min") = 16666666.666667)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=
            16666666.666667)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false)
        annotation (Placement(transformation(extent={{18,-82},{30,-72}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false)
        annotation (Placement(transformation(extent={{14,-102},{28,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-22)
        annotation (Placement(transformation(extent={{-2,-92},{12,-86}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{5,80},{10,80},{10,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-13,80},{-82,80},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(fraction.y, shunt.shunt_fraction) annotation (Line(points={{-97,
              78},{-82,78},{-82,72},{-67.2,72}}, color={0,0,127}));
      connect(shunt.G_main, pulmonary.cond) annotation (Line(points={{-60.4,
              75.6},{-56,75.6},{-56,94},{-66,94},{-66,103.4},{-64,103.4}},
            color={0,0,127}));
      connect(shunt.G_shunt, pulmonary1.cond) annotation (Line(points={{-60.4,
              68.4},{-4,68.4},{-4,73.4}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
        annotation (Line(
          points={{-31,110},{-20,110},{-20,113.2},{-10.76,113.2}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{-2.64,113.44},{3.68,113.44},{3.68,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(VAi.y, alveolocapillaryUnit.VAi) annotation (Line(points={{-22,91},{-20,
              91},{-20,105.16},{-16.78,105.16}}, color={0,0,127}));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-44.6,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-19.4,-60},{-10,-60},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-36.6},{72,-36.6}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.4},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(iSFBuffer.HCO3_inflow, venous_blood_ISF_Interface.HCO3_inflow)
        annotation (Line(
          points={{-30.8,-77.8},{-32,-77.8},{-32,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-25.8,-78},{-25.8,-70},{-27.8,-70},{-27.8,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21,-78},{-21,-68},{-23.32,-68},{-23.32,-60}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-97,-100},
              {-66,-100},{-66,-89.5},{-35.7,-89.5}}, color={0,0,127}));
      connect(iSFBuffer.cPi, Phosphate.y) annotation (Line(points={{-35.6,-86.6},
              {-68,-86.6},{-68,-92},{-83,-92}}, color={0,0,127}));
      connect(iSFBuffer.cAlb, albumin.y) annotation (Line(points={{-35.7,-83.9},
              {-64,-83.9},{-64,-84},{-71,-84}}, color={0,0,127}));
      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-45,-76},{
              -40,-76},{-40,-80.5},{-34.5,-80.5}}, color={0,0,127}));
      connect(iSFBuffer.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBuffer.CO2_inflow) annotation (Line(
          points={{-10,-98},{-25.8,-98},{-25.8,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{18,-78},{18,-77},{24,-77}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{24,-77},{46,-77},{46,-76},{66,-76}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{21,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{21,-98},{32,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{13.75,-89},{18.2,-89},{18.2,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{21.6,-75},{21.6,-68},{13.75,-68},{13.75,-89}}, color={0,0,
              127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -100},{100,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-100},{100,140}})));
    end AlvVentilation_with_ISF;

    model TestVolumeConcentrations
        parameter Physiolibrary.Types.HydraulicResistance r=0.05;
        parameter Physiolibrary.Types.DiffusionPermeability c = 1;
      BloodComponents.BloodElasticVesselCompliance bloodElasticVesselCompliance(
        BEox_concentration=0,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-6,
        volume_start(displayUnit="l") = 0.001,
        O2_concentration=1,
        CO2_concentration=1)
        annotation (Placement(transformation(extent={{-4,-20},{16,0}})));
      BloodComponents.BloodElasticVesselCompliance
        bloodElasticVesselCompliance1(
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-6,
        CO2_concentration=0,
        volume_start(displayUnit="l") = 0.001,
        O2_concentration=1,
        BEox_concentration=1)
        annotation (Placement(transformation(extent={{-6,-90},{-26,-70}})));
      BloodComponents.BloodResistor bloodResistor(Resistance(displayUnit=
              "(mmHg.min)/l") = 7999343.2449)
        annotation (Placement(transformation(extent={{28,-22},{48,-2}})));
      BloodComponents.BloodResistor bloodResistor1(Resistance(displayUnit=
              "(mmHg.min)/l") = 7999343.2449)
        annotation (Placement(transformation(extent={{-52,-86},{-72,-66}})));
      BloodComponents.Pump pump annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-76,-42})));
      BloodComponents.Pump pump1 annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={52,-44})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst volumeFlowRate(k(
            displayUnit="l/min") = 1.6666666666667e-5)
        annotation (Placement(transformation(extent={{-12,-48},{-4,-40}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-84,18},{-64,38}})));
      Modelica.Blocks.Sources.Pulse pulse(
        period=1,
        amplitude=1e-3,
        width=100,
        nperiod=1,
        startTime=50)
        annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
      Modelica.Blocks.Continuous.Integrator integrator
        annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{-40,8},{-20,28}})));
    equation
      connect(bloodElasticVesselCompliance.bloodPort_out, bloodResistor.bloodPort_in)
        annotation (Line(
          points={{16,-10},{12,-10},{12,-12},{29,-12}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodElasticVesselCompliance1.bloodPort_out, bloodResistor1.bloodPort_in)
        annotation (Line(
          points={{-26,-80},{-40,-80},{-40,-76},{-53,-76}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodResistor1.bloodPort_out, pump.bloodPort_in) annotation (Line(
          points={{-71,-76},{-76,-76},{-76,-51}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodElasticVesselCompliance1.bloodPort_in, pump1.bloodPort_out)
        annotation (Line(
          points={{-6.2,-80},{22,-80},{22,-78},{52,-78},{52,-53}},
          color={28,108,200},
          thickness=0.5));
      connect(pump1.bloodPort_in, bloodResistor.bloodPort_out) annotation (Line(
          points={{52,-35},{52,-12},{47,-12}},
          color={28,108,200},
          thickness=0.5));
      connect(pump.volumeFlowRate, volumeFlowRate.y) annotation (Line(points={{
              -80,-42},{-42,-42},{-42,-44},{-3,-44}}, color={0,0,127}));
      connect(pump1.volumeFlowRate, volumeFlowRate.y)
        annotation (Line(points={{56,-44},{-3,-44}}, color={0,0,127}));
      connect(pulse.y, unlimitedPump.solutionFlow) annotation (Line(points={{-79,50},
              {-74,50},{-74,35}},                  color={0,0,127}));
      connect(integrator.u, unlimitedPump.solutionFlow) annotation (Line(points={{-62,50},
              {-74,50},{-74,35}},          color={0,0,127}));
      connect(pump.bloodPort_out, bloodElasticVesselCompliance.bloodPort_in)
        annotation (Line(
          points={{-76,-33},{-76,-10},{-3.8,-10}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_out_Extension.bloodPort_out,
        bloodElasticVesselCompliance.bloodPort_in) annotation (Line(
          points={{-20,18},{-3.8,18},{-3.8,-10}},
          color={28,108,200},
          thickness=0.5));
      connect(unlimitedPump.q_out, bloodPort_out_Extension.bloodFlow)
        annotation (Line(
          points={{-64,28},{-40,28}},
          color={0,0,0},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end TestVolumeConcentrations;

    model TestMetabolism
      Package.ComputationpO2pCO2 computationpO2pCO2 annotation (Placement(
            transformation(rotation=0, extent={{-20,-20},{0,0}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      Tissues.limitO2Metabolism limitO2Metabolism
        annotation (Placement(transformation(extent={{-40,40},{-20,60}})));
      Modelica.Blocks.Sources.Clock clock
        annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
      Physiolibrary.Types.Constants.ConcentrationConst tO2(k=1)
        annotation (Placement(transformation(extent={{-50,-4},{-42,4}})));
      Physiolibrary.Types.Constants.ConcentrationConst tCO2(k=1)
        annotation (Placement(transformation(extent={{-50,-22},{-42,-14}})));
    equation
      connect(clock.y, limitO2Metabolism.pO2)
        annotation (Line(points={{-59,50},{-38,50}}, color={0,0,127}));
      connect(tO2.y, computationpO2pCO2.ctO2) annotation (Line(points={{-41,0},
              {-30,0},{-30,-1.66667},{-18.1818,-1.66667}},
                                                      color={0,0,127}));
      connect(tCO2.y, computationpO2pCO2.ctCO2) annotation (Line(points={{-41,-18},
              {-32,-18},{-32,-18.3333},{-18.1818,-18.3333}},color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end TestMetabolism;

    model AlvVentilation_with_ISF_dPCO2
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{102,-108},{82,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{82,-88},{102,-68}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{-31,88},{-23,94}})));
      BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-14,90},{6,70}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-106,74},{-98,82}})));
      Interfaces.Shunt shunt(G_total(displayUnit="l/(mmHg.min)")=
          4.1665920538226e-8)
        annotation (Placement(transformation(extent={{-68,68},{-60,76}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.AlveolocapillaryUnit_bad alveolocapillaryUnit
        annotation (Placement(transformation(extent={{-20,94},{8,118}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-46,-36},{-18,-4}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-14,-16},{14,16}},
            rotation=90,
            origin={72,-24})));
      Package.ISFBuffer iSFBuffer(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        initialBEox=0.892,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-36,-92},{-16,-72}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.004917528)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-106,-104},{-98,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{18,-82},{26,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{18,-102},{26,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{2,-90},{16,-84}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{54,-60},{70,-74}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{56,-82},{72,-96}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{68,-62},{88,-48}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00033333333333333)
        annotation (Placement(transformation(extent={{96,-66},{116,-46}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{5,80},{10,80},{10,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-13,80},{-82,80},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(shuntFraction.y, shunt.shunt_fraction) annotation (Line(points={{
              -97,78},{-82,78},{-82,72},{-67.2,72}}, color={0,0,127}));
      connect(shunt.G_main, pulmonary.cond) annotation (Line(points={{-60.4,
              75.6},{-56,75.6},{-56,94},{-66,94},{-66,103.4},{-64,103.4}},
            color={0,0,127}));
      connect(shunt.G_shunt, pulmonary1.cond) annotation (Line(points={{-60.4,
              68.4},{-4,68.4},{-4,73.4}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
        annotation (Line(
          points={{-31,110},{-20,110},{-20,113.2},{-10.76,113.2}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{-2.64,113.44},{3.68,113.44},{3.68,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(VAi.y, alveolocapillaryUnit.VAi) annotation (Line(points={{-22,91},{-20,
              91},{-20,105.16},{-16.78,105.16}}, color={0,0,127}));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-48,-60},{-48,-20},{-44.6,-20}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-19.4,-20},{-10,-20},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-36.6},{72,-36.6}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.4},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(iSFBuffer.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-24.0909,-82},{-24.0909,-70},{-27.8,-70},{-27.8,-20}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21.9091,-82},{-21.9091,-68},{-23.32,-68},{-23.32,-20}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-97,-100},
              {-66,-100},{-66,-88.3889},{-28.5909,-88.3889}},
                                                     color={0,0,127}));
      connect(iSFBuffer.cPi, Phosphate.y) annotation (Line(points={{-28.5455,
              -86.7778},{-68,-86.7778},{-68,-92},{-83,-92}},
                                                color={0,0,127}));
      connect(iSFBuffer.cAlb, albumin.y) annotation (Line(points={{-28.5909,
              -85.2778},{-64,-85.2778},{-64,-84},{-71,-84}},
                                                color={0,0,127}));
      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-45,-76},{
              -40,-76},{-40,-83.3889},{-28.0455,-83.3889}},
                                                   color={0,0,127}));
      connect(iSFBuffer.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21.9091,-82},{-16,-82},{-16,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBuffer.CO2_inflow) annotation (Line(
          points={{-10,-98},{-24.0909,-98},{-24.0909,-82}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{22,-78}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{22,-78},{82,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{22,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{22,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{17.75,-87},{20.4,-87},{20.4,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{20.4,-76.4},{20.4,-88},{17.75,-88},{17.75,-87}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{82,-78},{72,-78},{72,-67},{62,-67}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{64,-89},{78,-89},{78,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{62,-61.4},{62,-49.1667},{69.8182,-49.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{69.8182,-60.8333},{68.5,-60.8333},{68.5,-83.4},
              {64,-83.4}}, color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{114,-48},{124,-48},{124,-94},{88,-94}}, color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{96,-74},{118,-74},{118,-64},{114,-64}}, color=
             {0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{86.1818,-56.1667},{92.0909,-56.1667},{92.0909,-56},{98,-56}},
            color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -100},{100,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-100},{100,140}})));
    end AlvVentilation_with_ISF_dPCO2;

    model AlvVentilation_with_ISF_dPCO2_respirationControl
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{102,-108},{82,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{82,-88},{102,-68}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{93,-38},{101,-32}})));
      BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-14,90},{6,70}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-106,74},{-98,82}})));
      Interfaces.Shunt shunt(G_total(displayUnit="l/(mmHg.min)")=
          4.1665920538226e-8)
        annotation (Placement(transformation(extent={{-68,68},{-60,76}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.AlveolocapillaryUnit alveolocapillaryUnit
        annotation (Placement(transformation(extent={{-20,94},{8,118}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-46,-76},{-18,-44}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-14,-16},{14,16}},
            rotation=90,
            origin={72,-24})));
      Package.ISFBuffer iSFBuffer(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        initialBEox=0.892,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-36,-92},{-16,-72}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.01)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-106,-104},{-98,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{18,-82},{26,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{18,-102},{26,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{2,-90},{16,-84}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{54,-60},{70,-74}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{56,-82},{72,-96}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{68,-62},{88,-48}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00018333333333333)
        annotation (Placement(transformation(extent={{96,-66},{116,-46}})));
      Respiratory.AlveolarVentilation alveolarVentilation
        annotation (Placement(transformation(extent={{114,-26},{134,-6}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{5,80},{10,80},{10,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-13,80},{-82,80},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(shuntFraction.y, shunt.shunt_fraction) annotation (Line(points={{
              -97,78},{-82,78},{-82,72},{-67.2,72}}, color={0,0,127}));
      connect(shunt.G_main, pulmonary.cond) annotation (Line(points={{-60.4,
              75.6},{-56,75.6},{-56,94},{-66,94},{-66,103.4},{-64,103.4}},
            color={0,0,127}));
      connect(shunt.G_shunt, pulmonary1.cond) annotation (Line(points={{-60.4,
              68.4},{-4,68.4},{-4,73.4}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
        annotation (Line(
          points={{-31,110},{-20,110},{-20,113.2},{-10.76,113.2}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{-2.64,113.44},{3.68,113.44},{3.68,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-44.6,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-19.4,-60},{-10,-60},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-36.6},{72,-36.6}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.4},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(iSFBuffer.HCO3_inflow, venous_blood_ISF_Interface.HCO3_inflow)
        annotation (Line(
          points={{-30.8,-77.8},{-32,-77.8},{-32,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-25.8,-78},{-25.8,-70},{-27.8,-70},{-27.8,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21,-78},{-21,-68},{-23.32,-68},{-23.32,-60}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-97,-100},
              {-66,-100},{-66,-89.5},{-35.7,-89.5}}, color={0,0,127}));
      connect(iSFBuffer.cPi, Phosphate.y) annotation (Line(points={{-35.6,-86.6},
              {-68,-86.6},{-68,-92},{-83,-92}}, color={0,0,127}));
      connect(iSFBuffer.cAlb, albumin.y) annotation (Line(points={{-35.7,-83.9},
              {-64,-83.9},{-64,-84},{-71,-84}}, color={0,0,127}));
      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-45,-76},{
              -40,-76},{-40,-80.5},{-34.5,-80.5}}, color={0,0,127}));
      connect(iSFBuffer.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBuffer.CO2_inflow) annotation (Line(
          points={{-10,-98},{-25.8,-98},{-25.8,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{22,-78}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{22,-78},{82,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{22,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{22,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{17.75,-87},{20.4,-87},{20.4,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{20.4,-76.4},{20.4,-88},{17.75,-88},{17.75,-87}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{82,-78},{72,-78},{72,-67},{62,-67}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{64,-89},{78,-89},{78,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{62,-61.4},{62,-49.1667},{69.8182,-49.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{69.8182,-60.8333},{68.5,-60.8333},{68.5,-83.4},
              {64,-83.4}}, color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{114,-48},{124,-48},{124,-94},{88,-94}}, color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{96,-74},{118,-74},{118,-64},{114,-64}}, color=
             {0,0,127}));
      connect(arterial_blood_ISF_Interface.pH, alveolarVentilation.pHa)
        annotation (Line(points={{68,-33.8},{66,-33.8},{66,-42},{90,-42},{90,
              -17.2},{114,-17.2}}, color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pCO2, alveolarVentilation.pCO2a)
        annotation (Line(points={{68,-30.72},{64,-30.72},{64,-46},{84,-46},{84,
              -12.2},{114,-12.2}},    color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pO2, alveolarVentilation.pO2a)
        annotation (Line(points={{68,-27.64},{62,-27.64},{62,-8},{114,-8}},
            color={0,0,127}));
      connect(VAi.y, alveolarVentilation.VA0) annotation (Line(points={{102,-35},
              {104,-35},{104,-22.4},{114,-22.4}}, color={0,0,127}));
      connect(alveolarVentilation.VA, alveolocapillaryUnit.VAi) annotation (
          Line(points={{135,-13},{138,-13},{138,130},{-24,130},{-24,105.16},{
              -16.78,105.16}}, color={0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{86.1818,-56.1667},{92.0909,-56.1667},{92.0909,-56},{98,-56}},
            color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -120},{140,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-120},{140,140}})));
    end AlvVentilation_with_ISF_dPCO2_respirationControl;

    model Test_BEINV_by_integration
      inner Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-94,64},{-74,84}})));
      Modelica.Blocks.Math.Gain BEoxInp(k=25)
        annotation (Placement(transformation(extent={{-28,40},{-8,60}})));
      Modelica.Blocks.Math.Sin sin
        annotation (Placement(transformation(extent={{-66,38},{-46,58}})));
      Modelica.Blocks.Sources.Ramp ramp(height=100, duration=10)
        annotation (Placement(transformation(extent={{-98,38},{-78,58}})));
      Physiolibrary.Types.Constants.PressureConst pressure(k=5332.8954966)
        annotation (Placement(transformation(extent={{-82,8},{-74,16}})));
      Physiolibrary.Types.Constants.FractionConst fraction(k=0.5)
        annotation (Placement(transformation(extent={{-68,-6},{-60,2}})));
      Acidbase.OSA.BEINV_by_integration bEINV_by_integration
        annotation (Placement(transformation(extent={{10,-18},{48,22}})));
    equation
      connect(BEoxInp.u, sin.y) annotation (Line(points={{-30,50},{-45,50},{-45,
              48}}, color={0,0,127}));
      connect(ramp.y, sin.u)
        annotation (Line(points={{-77,48},{-68,48}}, color={0,0,127}));
      connect(bEINV_by_integration.sO2, fraction.y) annotation (Line(points={{
              8.27273,-2.8},{-58,-2.8},{-58,-2},{-59,-2}}, color={0,0,127}));
      connect(bEINV_by_integration.pCO2, pressure.y) annotation (Line(points={{
              8.27273,10},{-48,10},{-48,12},{-73,12}}, color={0,0,127}));
      connect(bEINV_by_integration.BEox, BEoxInp.y) annotation (Line(points={{
              8.27273,18},{2,18},{2,50},{-7,50}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Test_BEINV_by_integration;

    model Test_PO2PCO2_by_integration
      inner Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-94,64},{-74,84}})));
      Modelica.Blocks.Math.Gain pCO2inp(k=35)
        annotation (Placement(transformation(extent={{-28,40},{-8,60}})));
      Modelica.Blocks.Math.Sin sin
        annotation (Placement(transformation(extent={{-66,38},{-46,58}})));
      Modelica.Blocks.Sources.Ramp ramp(height=100, duration=10)
        annotation (Placement(transformation(extent={{-98,38},{-78,58}})));
      Physiolibrary.Types.Constants.PressureConst pO2(k=13332.2387415)
        annotation (Placement(transformation(extent={{-32,-20},{-24,-12}})));
      Modelica.Blocks.Math.Add add
        annotation (Placement(transformation(extent={{8,34},{28,54}})));
      Modelica.Blocks.Sources.Constant const(k=40)
        annotation (Placement(transformation(extent={{-36,6},{-16,26}})));
      Acidbase.OSA.PO2PCO2_by_integration pO2PCO2_by_integration
        annotation (Placement(transformation(extent={{-8,-84},{60,-14}})));
      Physiolibrary.Types.Constants.ConcentrationConst BEox(k=-10)
        annotation (Placement(transformation(extent={{-72,-58},{-64,-50}})));
      Modelica.Blocks.Math.Gain from_mmHg_to_Pa(k=133.322365)
        annotation (Placement(transformation(extent={{38,32},{58,52}})));
    equation
      connect(pCO2inp.u, sin.y) annotation (Line(points={{-30,50},{-45,50},{-45,
              48}}, color={0,0,127}));
      connect(ramp.y, sin.u)
        annotation (Line(points={{-77,48},{-68,48}}, color={0,0,127}));
      connect(pCO2inp.y, add.u1)
        annotation (Line(points={{-7,50},{6,50}}, color={0,0,127}));
      connect(const.y, add.u2) annotation (Line(points={{-15,16},{-6,16},{-6,38},
              {6,38}}, color={0,0,127}));
      connect(BEox.y, pO2PCO2_by_integration.BEox) annotation (Line(points={{-63,-54},
              {-28,-54},{-28,-54.25},{-13.2889,-54.25}},          color={0,0,
              127}));
      connect(pO2PCO2_by_integration.pO2, pO2.y) annotation (Line(points={{
              -12.5333,-25.6667},{-20,-25.6667},{-20,-16},{-23,-16}}, color={0,
              0,127}));
      connect(from_mmHg_to_Pa.u, add.y) annotation (Line(points={{36,42},{32,42},
              {32,44},{29,44}}, color={0,0,127}));
      connect(from_mmHg_to_Pa.y, pO2PCO2_by_integration.pCO2) annotation (Line(
            points={{59,42},{70,42},{70,-8},{-38,-8},{-38,-40.8333},{-12.5333,
              -40.8333}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end Test_PO2PCO2_by_integration;

    model Test_O2PCO2_by_integration
      Acidbase.OSA.PO2PCO2_by_integration pO2PCO2_by_integration
        annotation (Placement(transformation(extent={{-68,-54},{2,40}})));
      Physiolibrary.Types.Constants.PressureConst pO2(k=13332.2387415)
        annotation (Placement(transformation(extent={{-94,20},{-86,28}})));
      Physiolibrary.Types.Constants.ConcentrationConst BEox(k=-10)
        annotation (Placement(transformation(extent={{-100,-18},{-92,-10}})));
      inner Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,82},{-80,102}})));
      Acidbase.OSA.O2CO2_by_integration o2CO2_by_integration
        annotation (Placement(transformation(extent={{38,-108},{92,-14}})));
      Modelica.Blocks.Sources.Ramp ramp(height=100, duration=10)
        annotation (Placement(transformation(extent={{-74,74},{-54,94}})));
      Modelica.Blocks.Math.Sin sin
        annotation (Placement(transformation(extent={{-36,74},{-16,94}})));
      Modelica.Blocks.Math.Gain pCO2inp(k=35)
        annotation (Placement(transformation(extent={{-4,74},{16,94}})));
      Modelica.Blocks.Math.Add add
        annotation (Placement(transformation(extent={{40,70},{60,90}})));
      Modelica.Blocks.Sources.Constant const(k=40)
        annotation (Placement(transformation(extent={{-12,46},{8,66}})));
      Modelica.Blocks.Math.Gain from_mmHg_to_Pa(k=133.322365)
        annotation (Placement(transformation(extent={{74,70},{94,90}})));
    equation
      connect(o2CO2_by_integration.ctO2, pO2PCO2_by_integration.ctO2)
        annotation (Line(points={{35.3,-40.8571},{28,-40.8571},{28,29.0333},{
              12.8889,29.0333}}, color={0,0,127}));
      connect(o2CO2_by_integration.ctCO2, pO2PCO2_by_integration.ctCO2)
        annotation (Line(points={{35.84,-57.6429},{20,-57.6429},{20,21.2},{
              12.8889,21.2}}, color={0,0,127}));
      connect(o2CO2_by_integration.BEox, BEox.y) annotation (Line(points={{35.3,
              -77.7857},{-86,-77.7857},{-86,-14},{-91,-14}}, color={0,0,127}));
      connect(pO2PCO2_by_integration.BEox, BEox.y) annotation (Line(points={{
              -73.4444,-14.05},{-86,-14},{-91,-14}}, color={0,0,127}));
      connect(pO2.y, pO2PCO2_by_integration.pO2) annotation (Line(points={{-85,24},
              {-82,24},{-82,24.3333},{-72.6667,24.3333}},     color={0,0,127}));
      connect(ramp.y, sin.u)
        annotation (Line(points={{-53,84},{-38,84}}, color={0,0,127}));
      connect(sin.y, pCO2inp.u)
        annotation (Line(points={{-15,84},{-6,84}}, color={0,0,127}));
      connect(pCO2inp.y, add.u1) annotation (Line(points={{17,84},{28,84},{28,
              86},{38,86}}, color={0,0,127}));
      connect(const.y, add.u2) annotation (Line(points={{9,56},{26,56},{26,74},
              {38,74}}, color={0,0,127}));
      connect(add.y, from_mmHg_to_Pa.u)
        annotation (Line(points={{61,80},{72,80}}, color={0,0,127}));
      connect(from_mmHg_to_Pa.y, pO2PCO2_by_integration.pCO2) annotation (Line(
            points={{95,80},{94,80},{94,38},{-98,38},{-98,3.96667},{-72.6667,
              3.96667}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-140},{100,100}})),                             Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-100,-140},{
                100,100}})));
    end Test_O2PCO2_by_integration;

    model AlvVentilation_with_ISF_dPCO2_by_integration_equlibrated
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{102,-108},{82,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{82,-88},{102,-68}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{-38,84},{-25,92}})));
      BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-14,90},{6,70}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-106,74},{-98,82}})));
      Interfaces.Shunt shunt(G_total(displayUnit="l/(mmHg.min)")=
          4.1665920538226e-8)
        annotation (Placement(transformation(extent={{-68,68},{-60,76}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.AlveolocapillaryUnit_by_integration alveolocapillaryUnit
        annotation (Placement(transformation(extent={{-20,94},{8,118}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-46,-76},{-18,-44}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-14,-16},{14,16}},
            rotation=90,
            origin={72,-24})));
      Package.ISFBuffer iSFBuffer(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        volume_start=0.01,
        initialBEox=1.475)
        annotation (Placement(transformation(extent={{-36,-92},{-16,-72}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.01)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-106,-104},{-98,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{18,-82},{26,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{18,-102},{26,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{2,-90},{16,-84}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{54,-60},{70,-74}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{56,-82},{72,-96}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{68,-62},{88,-48}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00019166666666667)
        annotation (Placement(transformation(extent={{96,-66},{116,-46}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{5,80},{10,80},{10,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-13,80},{-82,80},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(shuntFraction.y, shunt.shunt_fraction) annotation (Line(points={{
              -97,78},{-82,78},{-82,72},{-67.2,72}}, color={0,0,127}));
      connect(shunt.G_main, pulmonary.cond) annotation (Line(points={{-60.4,
              75.6},{-56,75.6},{-56,94},{-66,94},{-66,103.4},{-64,103.4}},
            color={0,0,127}));
      connect(shunt.G_shunt, pulmonary1.cond) annotation (Line(points={{-60.4,
              68.4},{-4,68.4},{-4,73.4}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
        annotation (Line(
          points={{-31,110},{-20,110},{-20,113.2},{-10.76,113.2}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{-2.64,113.44},{3.68,113.44},{3.68,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-44.6,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-19.4,-60},{-10,-60},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-36.6},{72,-36.6}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.4},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(iSFBuffer.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-24.0909,-82},{-24.0909,-70},{-27.8,-70},{-27.8,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21.9091,-82},{-21.9091,-68},{-23.32,-68},{-23.32,-60}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-97,-100},
              {-66,-100},{-66,-88.3889},{-28.5909,-88.3889}},
                                                     color={0,0,127}));
      connect(iSFBuffer.cPi, Phosphate.y) annotation (Line(points={{-28.5455,
              -86.7778},{-68,-86.7778},{-68,-92},{-83,-92}},
                                                color={0,0,127}));
      connect(iSFBuffer.cAlb, albumin.y) annotation (Line(points={{-28.5909,
              -85.2778},{-64,-85.2778},{-64,-84},{-71,-84}},
                                                color={0,0,127}));
      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-45,-76},{
              -40,-76},{-40,-83.3889},{-28.0455,-83.3889}},
                                                   color={0,0,127}));
      connect(iSFBuffer.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21.9091,-82},{-16,-82},{-16,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBuffer.CO2_inflow) annotation (Line(
          points={{-10,-98},{-24.0909,-98},{-24.0909,-82}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{22,-78}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{22,-78},{82,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{22,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{22,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{17.75,-87},{20.4,-87},{20.4,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{20.4,-76.4},{20.4,-88},{17.75,-88},{17.75,-87}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{82,-78},{72,-78},{72,-67},{62,-67}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{64,-89},{78,-89},{78,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{62,-61.4},{62,-49.1667},{69.8182,-49.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{69.8182,-60.8333},{68.5,-60.8333},{68.5,-83.4},
              {64,-83.4}}, color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{114,-48},{124,-48},{124,-94},{88,-94}}, color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{96,-74},{118,-74},{118,-64},{114,-64}}, color=
             {0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{86.1818,-56.1667},{92.0909,-56.1667},{92.0909,-56},{98,-56}},
            color={0,0,127}));
      connect(alveolocapillaryUnit.VAi, VAi.y) annotation (Line(points={{-16.78,
              105.16},{-23.375,105.16},{-23.375,88}},
                                              color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -120},{140,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-120},{140,140}})));
    end AlvVentilation_with_ISF_dPCO2_by_integration_equlibrated;

    model AlvVentilation_with_ISF_dPCO2_by_integration
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461,
        BEox_concentration=10)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053,
        BEox_concentration=10)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053,
        BEox_concentration=10) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461,
        BEox_concentration=10) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-36})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461,
        BEox_concentration=10)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-58,-36})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{102,-108},{82,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{82,-88},{102,-68}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 4.8625466666667e-5)
        annotation (Placement(transformation(extent={{-38,84},{-25,92}})));
      BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-14,90},{6,70}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-106,74},{-98,82}})));
      Interfaces.Shunt shunt(G_total(displayUnit="l/(mmHg.min)")=
          4.1665920538226e-8)
        annotation (Placement(transformation(extent={{-68,68},{-60,76}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.AlveolocapillaryUnit_by_integration alveolocapillaryUnit
        annotation (Placement(transformation(extent={{-20,94},{8,118}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-40,-40},{-20,-32}})));
      Package.ISFBuffer iSFBufferTest(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        plasmaO2CO2_by_integration(redeclare Acidbase.OSA.plasmaCombinedFigge
            plasmaBEINV_by_integration1),
        initialBEox=0,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-36,-92},{-16,-72}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.01)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-106,-104},{-98,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{18,-82},{26,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{18,-102},{26,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{2,-90},{16,-84}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{54,-60},{70,-74}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{56,-82},{72,-96}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{68,-62},{88,-48}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00019166666666667)
        annotation (Placement(transformation(extent={{96,-66},{116,-46}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-36},{-67,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-36},{-110,-36},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{5,80},{10,80},{10,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-13,80},{-82,80},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(shuntFraction.y, shunt.shunt_fraction) annotation (Line(points={{
              -97,78},{-82,78},{-82,72},{-67.2,72}}, color={0,0,127}));
      connect(shunt.G_main, pulmonary.cond) annotation (Line(points={{-60.4,
              75.6},{-56,75.6},{-56,94},{-66,94},{-66,103.4},{-64,103.4}},
            color={0,0,127}));
      connect(shunt.G_shunt, pulmonary1.cond) annotation (Line(points={{-60.4,
              68.4},{-4,68.4},{-4,73.4}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
        annotation (Line(
          points={{-31,110},{-20,110},{-20,113.2},{-10.76,113.2}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{-2.64,113.44},{3.68,113.44},{3.68,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-49,-36},{-39,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-21,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(iSFBufferTest.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-24.0909,-82},{-24.0909,-70},{-27,-70},{-27,-36}},
          color={107,45,134},
          thickness=1));
      connect(iSFBufferTest.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21.9091,-82},{-21.9091,-68},{-23.8,-68},{-23.8,-36}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBufferTest.Temp) annotation (Line(points={{-97,
              -100},{-66,-100},{-66,-88.3889},{-28.5909,-88.3889}},
                                                     color={0,0,127}));
      connect(iSFBufferTest.cPi, Phosphate.y) annotation (Line(points={{
              -28.5455,-86.7778},{-68,-86.7778},{-68,-92},{-83,-92}},
                                                color={0,0,127}));
      connect(iSFBufferTest.cAlb, albumin.y) annotation (Line(points={{-28.5909,
              -85.2778},{-64,-85.2778},{-64,-84},{-71,-84}},
                                                color={0,0,127}));
      connect(volume.y, iSFBufferTest.volume) annotation (Line(points={{-45,-76},
              {-40,-76},{-40,-83.3889},{-28.0455,-83.3889}},
                                               color={0,0,127}));
      connect(iSFBufferTest.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21.9091,-82},{-16,-82},{-16,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBufferTest.CO2_inflow) annotation (Line(
          points={{-10,-98},{-24.0909,-98},{-24.0909,-82}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{22,-78}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{22,-78},{82,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{22,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{22,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{17.75,-87},{20.4,-87},{20.4,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{20.4,-76.4},{20.4,-88},{17.75,-88},{17.75,-87}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{82,-78},{72,-78},{72,-67},{62,-67}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{64,-89},{78,-89},{78,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{62,-61.4},{62,-49.1667},{69.8182,-49.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{69.8182,-60.8333},{68.5,-60.8333},{68.5,-83.4},
              {64,-83.4}}, color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{114,-48},{124,-48},{124,-94},{88,-94}}, color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{96,-74},{118,-74},{118,-64},{114,-64}}, color=
             {0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{86.1818,-56.1667},{92.0909,-56.1667},{92.0909,-56},{98,-56}},
            color={0,0,127}));
      connect(alveolocapillaryUnit.VAi, VAi.y) annotation (Line(points={{-16.78,
              105.16},{-23.375,105.16},{-23.375,88}},
                                              color={0,0,127}));
      connect(arteries.bloodPort_in, flowMeasure_art.bloodPort_out) annotation (
          Line(
          points={{63.8,-36},{72,-36},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.HCO3_inflow, iSFBufferTest.HCO3_inflow)
        annotation (Line(
          points={{-30,-36},{-30,-56},{-30,-81.8889},{-26.3636,-81.8889}},
          color={107,45,134},
          thickness=1));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -120},{140,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-120},{140,140}})));
    end AlvVentilation_with_ISF_dPCO2_by_integration;

    model AlvVentilation_with_ISF_dPCO2_respirationControl_by_integration
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{102,-108},{82,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{82,-88},{102,-68}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{93,-38},{101,-32}})));
      BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-14,90},{6,70}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-106,74},{-98,82}})));
      Interfaces.Shunt shunt(G_total(displayUnit="l/(mmHg.min)")=
          4.1665920538226e-8)
        annotation (Placement(transformation(extent={{-68,68},{-60,76}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.AlveolocapillaryUnit_by_integration alveolocapillaryUnit
        annotation (Placement(transformation(extent={{-20,94},{8,118}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-44,-64},{-20,-56}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-12,-6},{12,6}},
            rotation=90,
            origin={72,-22})));
      Package.ISFBuffer iSFBuffer(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        initialBEox=0.892,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-36,-90},{-16,-70}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.01)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-106,-104},{-98,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{18,-82},{26,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{18,-102},{26,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{2,-90},{16,-84}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{54,-60},{70,-74}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{56,-82},{72,-96}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{68,-62},{88,-48}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00033333333333333)
        annotation (Placement(transformation(extent={{96,-66},{116,-46}})));
      Respiratory.AlveolarVentilation alveolarVentilation
        annotation (Placement(transformation(extent={{114,-26},{134,-6}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump HCO3Production(
          SoluteFlow(displayUnit="mol/s") = 0.00016666666666667,
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{36,-124},{16,-104}})));
      Modelica.Blocks.Sources.Pulse pulse(
        amplitude=0.00016666666666667,
        width=100,
        period=600,
        startTime=500,
        nperiod=0)
        annotation (Placement(transformation(extent={{58,-114},{48,-104}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{5,80},{10,80},{10,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-13,80},{-82,80},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(shuntFraction.y, shunt.shunt_fraction) annotation (Line(points={{
              -97,78},{-82,78},{-82,72},{-67.2,72}}, color={0,0,127}));
      connect(shunt.G_main, pulmonary.cond) annotation (Line(points={{-60.4,
              75.6},{-56,75.6},{-56,94},{-66,94},{-66,103.4},{-64,103.4}},
            color={0,0,127}));
      connect(shunt.G_shunt, pulmonary1.cond) annotation (Line(points={{-60.4,
              68.4},{-4,68.4},{-4,73.4}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
        annotation (Line(
          points={{-31,110},{-20,110},{-20,113.2},{-10.76,113.2}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{-2.64,113.44},{3.68,113.44},{3.68,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-42.8,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-21.2,-60},{-10,-60},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-32.8},{72,-32.8}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.2},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(iSFBuffer.HCO3_inflow, venous_blood_ISF_Interface.HCO3_inflow)
        annotation (Line(
          points={{-26.3636,-79.8889},{-32,-79.8889},{-32,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-24.0909,-80},{-24.0909,-60},{-28.4,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21.9091,-80},{-21.9091,-68},{-24.56,-68},{-24.56,-60}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-97,-100},
              {-66,-100},{-66,-86.3889},{-28.5909,-86.3889}},
                                                     color={0,0,127}));
      connect(iSFBuffer.cPi, Phosphate.y) annotation (Line(points={{-28.5455,
              -84.7778},{-68,-84.7778},{-68,-92},{-83,-92}},
                                                color={0,0,127}));
      connect(iSFBuffer.cAlb, albumin.y) annotation (Line(points={{-28.5909,
              -83.2778},{-64,-83.2778},{-64,-84},{-71,-84}},
                                                color={0,0,127}));
      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-45,-76},{
              -40,-76},{-40,-81.3889},{-28.0455,-81.3889}},
                                                   color={0,0,127}));
      connect(iSFBuffer.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21.9091,-80},{-16,-80},{-16,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBuffer.CO2_inflow) annotation (Line(
          points={{-10,-98},{-24.0909,-98},{-24.0909,-80}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{22,-78}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{22,-78},{82,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{22,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{22,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{17.75,-87},{20.4,-87},{20.4,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{20.4,-76.4},{20.4,-88},{17.75,-88},{17.75,-87}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{82,-78},{72,-78},{72,-67},{62,-67}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{64,-89},{78,-89},{78,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{62,-61.4},{62,-49.1667},{69.8182,-49.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{69.8182,-60.8333},{68.5,-60.8333},{68.5,-83.4},
              {64,-83.4}}, color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{114,-48},{124,-48},{124,-94},{88,-94}}, color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{96,-74},{118,-74},{118,-64},{114,-64}}, color=
             {0,0,127}));
      connect(arterial_blood_ISF_Interface.pH, alveolarVentilation.pHa)
        annotation (Line(points={{70.5,-30.4},{66,-30.4},{66,-42},{90,-42},{90,
              -17.2},{114,-17.2}}, color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pCO2, alveolarVentilation.pCO2a)
        annotation (Line(points={{70.5,-27.76},{64,-27.76},{64,-46},{84,-46},{
              84,-12.2},{114,-12.2}}, color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pO2, alveolarVentilation.pO2a)
        annotation (Line(points={{70.5,-25.12},{62,-25.12},{62,-8},{114,-8}},
            color={0,0,127}));
      connect(VAi.y, alveolarVentilation.VA0) annotation (Line(points={{102,-35},
              {104,-35},{104,-22.4},{114,-22.4}}, color={0,0,127}));
      connect(alveolarVentilation.VA, alveolocapillaryUnit.VAi) annotation (
          Line(points={{135,-13},{138,-13},{138,130},{-24,130},{-24,105.16},{
              -16.78,105.16}}, color={0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{86.1818,-56.1667},{92.0909,-56.1667},{92.0909,-56},{98,-56}},
            color={0,0,127}));
      connect(HCO3Production.q_out, iSFBuffer.HCO3_inflow) annotation (Line(
          points={{16,-114},{-30,-114},{-30,-79.8889},{-26.3636,-79.8889}},
          color={107,45,134},
          thickness=1));
      connect(pulse.y, HCO3Production.soluteFlow) annotation (Line(points={{
              47.5,-109},{34.75,-109},{34.75,-110},{22,-110}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -120},{140,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-120},{140,140}})));
    end AlvVentilation_with_ISF_dPCO2_respirationControl_by_integration;

    model TestBEinvs
      Acidbase.OSA.plasmaBEINV plasmaBEINV
        annotation (Placement(transformation(extent={{0,0},{22,20}})));
      Acidbase.OSA.plasmaCombinedFigge plasmaCombinedFigge
        annotation (Placement(transformation(extent={{0,-40},{20,-20}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-84,10},{-76,18}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-84,-4},{-76,4}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-84,-16},{-76,-8}})));
      Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      Modelica.Blocks.Sources.Step BE(height=5, startTime=5)
        annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
      Modelica.Blocks.Sources.Ramp ramp1(
        duration=10,
        startTime=10,
        height=2000,
        offset=5333)
        annotation (Placement(transformation(extent={{-80,-80},{-60,-60}})));
      Modelica.Blocks.Sources.Step BE1(
        height=2000,
        offset=5333,
        startTime=15)
        annotation (Placement(transformation(extent={{-54,20},{-34,40}})));
      Acidbase.OSA.plasmaBEINV_by_integration plasmaBEINV_by_integration1
        annotation (Placement(transformation(extent={{24,-20},{44,0}})));
    equation
      connect(BE.y, plasmaBEINV.BEox) annotation (Line(points={{-59,50},{-10,50},
              {-10,18},{-1,18}}, color={0,0,127}));
      connect(BE.y, plasmaCombinedFigge.BEox) annotation (Line(points={{-59,50},
              {-10,50},{-10,-22},{-1,-22}}, color={0,0,127}));
      connect(albumin.y, plasmaBEINV.cAlb) annotation (Line(points={{-75,14},{
              -38,14},{-38,9.5},{-1.1,9.5}}, color={0,0,127}));
      connect(albumin.y, plasmaCombinedFigge.cAlb) annotation (Line(points={{
              -75,14},{-38,14},{-38,-30.5},{-1.1,-30.5}}, color={0,0,127}));
      connect(Phosphate.y, plasmaBEINV.cPi) annotation (Line(points={{-75,0},{
              -38,0},{-38,5},{-1.2,5}}, color={0,0,127}));
      connect(Phosphate.y, plasmaCombinedFigge.cPi) annotation (Line(points={{
              -75,0},{-38,0},{-38,-35},{-1.2,-35}}, color={0,0,127}));
      connect(temperature.y, plasmaBEINV.Temp) annotation (Line(points={{-75,
              -12},{-38,-12},{-38,0.7},{-1.3,0.7}}, color={0,0,127}));
      connect(temperature.y, plasmaCombinedFigge.Temp) annotation (Line(points=
              {{-75,-12},{-38,-12},{-38,-39.3},{-1.3,-39.3}}, color={0,0,127}));
      connect(BE1.y, plasmaBEINV.pCO2) annotation (Line(points={{-33,30},{-24,
              30},{-24,14},{-1,14}}, color={0,0,127}));
      connect(BE1.y, plasmaCombinedFigge.pCO2) annotation (Line(points={{-33,30},
              {-24,30},{-24,-26},{-1,-26}}, color={0,0,127}));
      connect(plasmaBEINV.BEox, plasmaBEINV_by_integration1.BEox) annotation (
          Line(points={{-1,18},{23.0909,18},{23.0909,-2}}, color={0,0,127}));
      connect(plasmaBEINV.pCO2, plasmaBEINV_by_integration1.pCO2) annotation (
          Line(points={{-1,14},{8,14},{8,12},{18,12},{18,-6},{23.0909,-6}},
            color={0,0,127}));
      connect(plasmaBEINV.cAlb, plasmaBEINV_by_integration1.cAlb) annotation (
          Line(points={{-1.1,9.5},{14,9.5},{14,-10.5},{23,-10.5}}, color={0,0,
              127}));
      connect(plasmaBEINV.cPi, plasmaBEINV_by_integration1.cPi) annotation (
          Line(points={{-1.2,5},{10,5},{10,-15},{22.9091,-15}}, color={0,0,127}));
      connect(plasmaBEINV.Temp, plasmaBEINV_by_integration1.Temp) annotation (
          Line(points={{-1.3,0.7},{6,0.7},{6,-18},{8,-18},{8,-19.3},{22.8182,
              -19.3}}, color={0,0,127}));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio=false)),
        Diagram(coordinateSystem(preserveAspectRatio=false)),
        experiment(StopTime=20, __Dymola_NumberOfIntervals=2500));
    end TestBEinvs;

    model TissuesTest
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461,
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true) annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-56,-36})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{380,-88},{360,-68}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{360,-68},{380,-48}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 4.8625466666667e-5)
        annotation (Placement(transformation(extent={{-38,84},{-25,92}})));
      BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-14,90},{6,70}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-106,74},{-98,82}})));
      Interfaces.Shunt shunt(G_total(displayUnit="l/(mmHg.min)")=
          4.1665920538226e-8)
        annotation (Placement(transformation(extent={{-68,68},{-60,76}})));
      inner Interfaces.ModelSettings modelSettings(PB(displayUnit="Pa"),
          ISFHCO3_start=22)
        annotation (Placement(transformation(extent={{-122,120},{-102,140}})));
      Package.AlveolocapillaryUnit_by_integration alveolocapillaryUnit
        annotation (Placement(transformation(extent={{-20,94},{8,118}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{166,-36},{174,-28}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{268,-68},{288,-48}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{288,-88},{268,-68}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{312,-74},{320,-66}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{300,-76},{308,-68}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{280,-70},{294,-64}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{332,-40},{348,-54}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{334,-62},{350,-76}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{328,-38},{348,-24}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00019166666666667)
        annotation (Placement(transformation(extent={{356,-42},{376,-22}})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure annotation (
          Placement(transformation(
            extent={{-8,8},{8,-8}},
            rotation=0,
            origin={52,-110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
                                                         unlimitedSolutePumpOut2(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-18,-110},{2,-90}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage hCO3_inflow(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{6,-6},{-6,6}},
            rotation=180,
            origin={28,-110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
                                                         unlimitedSolutePumpOut3(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{10,12},{-10,-12}},
            rotation=180,
            origin={-8,-120})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage o2_inflow(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={28,-68})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure1
                                                                       annotation (
          Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={52,-68})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
                                                         unlimitedSolutePumpOut(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{9.5,10.5},{-9.5,-10.5}},
            rotation=180,
            origin={-8.5,-67.5})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage co2_inflow(
          useConcentrationInput=true) annotation (Placement(transformation(
            extent={{6,-6},{-6,6}},
            rotation=180,
            origin={28,-84})));
      Physiolibrary.Chemical.Sensors.MolarFlowMeasure molarFlowMeasure2
                                                                       annotation (
          Placement(transformation(
            extent={{8,-8},{-8,8}},
            rotation=180,
            origin={52,-84})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
                                                         unlimitedSolutePumpOut1(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-18,-94},{2,-74}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISFO2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{132,-74},{120,-62}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump4(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{144,-84},{160,-68}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump5(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{144,-114},{160,-98}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISFHCO3(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{132,-116},{120,-104}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=modelSettings.ISFCO2solute_start)
        annotation (Placement(transformation(extent={{180,-86},{200,-66}})));
      Physiolibrary.Chemical.Components.Substance HCO3(useNormalizedVolume=
            false, solute_start=modelSettings.ISFHCO3solute_start)
        annotation (Placement(transformation(extent={{180,-116},{200,-96}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=modelSettings.ISFO2solute_start)
        annotation (Placement(transformation(extent={{180,-60},{200,-40}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump6(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{142,-40},{162,-60}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ISFCO2(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{132,-90},{120,-78}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(extent={{-6,6},{6,-6}},
            rotation=270,
            origin={216,-106})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(extent={{-8,-8},{8,8}},
            rotation=90,
            origin={216,-86})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(extent={{-8,8},{8,-8}},
            rotation=270,
            origin={216,-58})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump7(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{144,-84},{160,-100}})));
      Package.TissueHCO3 tissueHCO3_2
        annotation (Placement(transformation(extent={{234,-146},{254,-126}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature2(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{266,-132},{258,-124}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneHco3(Conductance(
            displayUnit="m3/s") = 1000)
        annotation (Placement(transformation(extent={{100,-120},{80,-100}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneCO2(Conductance(
            displayUnit="l/min") = 0.016666666666667)
        annotation (Placement(transformation(extent={{100,-94},{80,-74}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneO2(Conductance(
            displayUnit="l/min") = 0.016666666666667)
        annotation (Placement(transformation(extent={{100,-78},{80,-58}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_2
        annotation (Placement(transformation(extent={{228,-34},{248,-20}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure3
        annotation (Placement(transformation(extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-50,-68})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure4
        annotation (Placement(transformation(extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-54,-100})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure5
        annotation (Placement(transformation(extent={{-4,4},{4,-4}},
            rotation=180,
            origin={-58,-120})));
      Acidbase.OSA.BloodABB_OSA bloodABB_OSA annotation (Placement(
            transformation(rotation=0, extent={{-54,-210},{-34,-190}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-66,-36},{-110,-36},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{5,80},{10,80},{10,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-13,80},{-82,80},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(shuntFraction.y, shunt.shunt_fraction) annotation (Line(points={{
              -97,78},{-82,78},{-82,72},{-67.2,72}}, color={0,0,127}));
      connect(shunt.G_main, pulmonary.cond) annotation (Line(points={{-60.4,
              75.6},{-56,75.6},{-56,94},{-66,94},{-66,103.4},{-64,103.4}},
            color={0,0,127}));
      connect(shunt.G_shunt, pulmonary1.cond) annotation (Line(points={{-60.4,
              68.4},{-4,68.4},{-4,73.4}}, color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
        annotation (Line(
          points={{-31,110},{-20,110},{-20,113.2},{-10.76,113.2}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{-2.64,113.44},{3.68,113.44},{3.68,110},{11,110}},
          color={28,108,200},
          thickness=0.5));

      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{295.75,-67},{302.4,-67},{302.4,-70.4}},
                                                          color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{314.4,-68.4},{314.4,-68},{295.75,-68},{295.75,-67}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{360,-58},{350,-58},{350,-47},{340,-47}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{342,-69},{356,-69},{356,-78},{360,-78}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{340,-41.4},{340,-25.1667},{329.818,-25.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{329.818,-36.8333},{346.5,-36.8333},{346.5,
              -63.4},{342,-63.4}},
                           color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{374,-24},{402,-24},{402,-74},{366,-74}},color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{374,-54},{396,-54},{396,-40},{374,-40}},color=
             {0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{346.182,-32.1667},{346.091,-32.1667},{346.091,-32},{358,
              -32}},
            color={0,0,127}));
      connect(alveolocapillaryUnit.VAi, VAi.y) annotation (Line(points={{-16.78,
              105.16},{-23.375,105.16},{-23.375,88}},
                                              color={0,0,127}));
      connect(arteries.bloodPort_in, flowMeasure_art.bloodPort_out) annotation (
          Line(
          points={{63.8,-36},{72,-36},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(molarFlowMeasure2.molarFlowRate, unlimitedSolutePumpOut1.soluteFlow)
        annotation (Line(points={{52,-77.6},{-4,-77.6},{-4,-80}}, color={0,0,
              127}));
      connect(molarFlowMeasure.molarFlowRate, unlimitedSolutePumpOut2.soluteFlow)
        annotation (Line(points={{52,-103.6},{52,-96},{-4,-96}}, color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate, unlimitedSolutePumpOut3.soluteFlow)
        annotation (Line(points={{52,-103.6},{52,-96},{4,-96},{4,-112},{-4,-112},
              {-4,-115.2}}, color={0,0,127}));
      connect(concentrationMeasure.q_in,HCO3. q_out) annotation (Line(
          points={{216,-106},{190,-106}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in,CO2. q_out) annotation (Line(
          points={{216,-86},{204,-86},{204,-76},{190,-76}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in,O2. q_out) annotation (Line(
          points={{216,-58},{216,-50},{190,-50}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump7.q_out,CO2. q_out) annotation (Line(
          points={{160,-92},{190,-92},{190,-76}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump6.q_out, O2.q_out) annotation (Line(
          points={{162,-50},{190,-50}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump4.q_out, CO2.q_out) annotation (Line(
          points={{160,-76},{190,-76}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump5.q_out,HCO3. q_out) annotation (Line(
          points={{160,-106},{190,-106}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.molarFlowRate, unlimitedSolutePump5.soluteFlow)
        annotation (Line(points={{52,-103.6},{52,-98},{155.2,-98},{155.2,-102.8}},
            color={0,0,127}));
      connect(molarFlowMeasure.molarFlowRate, unlimitedSolutePump7.soluteFlow)
        annotation (Line(points={{52,-103.6},{52,-98},{156,-98},{156,-95.2},{
              155.2,-95.2}}, color={0,0,127}));
      connect(volume.y, O2.solutionVolume) annotation (Line(points={{175,-32},{
              186,-32},{186,-46}}, color={0,0,127}));
      connect(volume.y, CO2.solutionVolume) annotation (Line(points={{175,-32},
              {186,-32},{186,-72}}, color={0,0,127}));
      connect(volume.y,HCO3. solutionVolume) annotation (Line(points={{175,-32},
              {186,-32},{186,-102}}, color={0,0,127}));
      connect(molarFlowMeasure2.molarFlowRate, unlimitedSolutePump4.soluteFlow)
        annotation (Line(points={{52,-77.6},{52,-72.8},{155.2,-72.8}}, color={0,
              0,127}));
      connect(molarFlowMeasure1.molarFlowRate, unlimitedSolutePump6.soluteFlow)
        annotation (Line(points={{52,-61.6},{156,-61.6},{156,-54}}, color={0,0,
              127}));
      connect(O2.q_out, diffusion.q_in) annotation (Line(
          points={{190,-50},{268,-50},{268,-58}},
          color={107,45,134},
          thickness=1));
      connect(CO2.q_out, diffusion1.q_out) annotation (Line(
          points={{190,-76},{230,-76},{230,-78},{268,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{288,-58},{360,-58}},
          color={107,45,134},
          thickness=1));
      connect(co2_inflow.concentration, bloodABB_OSA.dCO2) annotation (Line(
            points={{22,-84},{18,-84},{18,-132},{-37.8,-132},{-37.8,-190}},
            color={0,0,127}));
      connect(bloodABB_OSA.dO2, o2_inflow.concentration) annotation (Line(
            points={{-41.8,-190},{-41.8,-174},{14,-174},{14,-68},{22,-68}},
            color={0,0,127}));
      connect(diffusion1.q_in, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{288,-78},{360,-78}},
          color={107,45,134},
          thickness=1));
      connect(ISFO2.concentration, concentrationMeasure2.concentration)
        annotation (Line(points={{132,-68},{232,-68},{232,-58},{222.4,-58}},
            color={0,0,127}));
      connect(tissueHCO3_2.tCO2, concentrationMeasure1.concentration)
        annotation (Line(points={{235,-131.8},{230,-131.8},{230,-86},{222.4,-86}},
            color={0,0,127}));
      connect(concentrationMeasure.concentration, tissueHCO3_2.cHCO3)
        annotation (Line(points={{220.8,-106},{266,-106},{266,-148},{252,-148}},
            color={0,0,127}));
      connect(tissueHCO3_2.T, temperature2.y)
        annotation (Line(points={{253,-128},{257,-128}}, color={0,0,127}));
      connect(ISFCO2.concentration, tissueHCO3_2.cdCO2_) annotation (Line(
            points={{132,-84},{176,-84},{176,-136.8},{235,-136.8}}, color={0,0,
              127}));
      connect(concentrationMeasure.concentration, ISFHCO3.concentration)
        annotation (Line(points={{220.8,-106},{222,-106},{222,-110},{132,-110}},
            color={0,0,127}));
      connect(bloodABB_OSA.cHCO3, hCO3_inflow.concentration) annotation (Line(
            points={{-34,-190},{24,-190},{24,-110},{22,-110}},   color={0,0,127}));
      connect(ISFHCO3.q_out, iSFMembraneHco3.q_in) annotation (Line(
          points={{120,-110},{100,-110}},
          color={107,45,134},
          thickness=1));
      connect(ISFCO2.q_out, iSFMembraneCO2.q_in) annotation (Line(
          points={{120,-84},{100,-84}},
          color={107,45,134},
          thickness=1));
      connect(ISFO2.q_out, iSFMembraneO2.q_in) annotation (Line(
          points={{120,-68},{100,-68}},
          color={107,45,134},
          thickness=1));
      connect(computationpO2pCO2_2.ctCO2, concentrationMeasure1.concentration)
        annotation (Line(points={{229.818,-32.8333},{229.818,-85.4167},{222.4,
              -85.4167},{222.4,-86}}, color={0,0,127}));
      connect(concentrationMeasure2.concentration, computationpO2pCO2_2.ctO2)
        annotation (Line(points={{222.4,-58},{222,-58},{222,-21.1667},{229.818,
              -21.1667}}, color={0,0,127}));
      connect(veins.bloodPort_in, nonMuscle.bloodPort_out) annotation (Line(
          points={{-46.2,-36},{7,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, nonMuscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-36},{7,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.port_O2, concentrationMeasure3.q_in) annotation (Line(
          points={{-50.2,-45.8},{-50,-45.8},{-50,-68}},
          color={107,45,134},
          thickness=1));
      connect(bloodABB_OSA.tO2_input, concentrationMeasure3.concentration)
        annotation (Line(points={{-49.6,-190},{-49.6,-130},{-50,-130},{-50,
              -71.2}}, color={0,0,127}));
      connect(bloodABB_OSA._BEox, concentrationMeasure5.concentration)
        annotation (Line(points={{-53.6,-190},{-53.6,-138},{-58,-138},{-58,
              -123.2}},
            color={0,0,127}));
      connect(bloodABB_OSA.tCO2_input, concentrationMeasure4.concentration)
        annotation (Line(points={{-45.8,-190},{-45.8,-134},{-54,-134},{-54,
              -103.2}}, color={0,0,127}));
      connect(o2_inflow.q_out, molarFlowMeasure1.q_in) annotation (Line(
          points={{34,-68},{44,-68}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure1.q_out, iSFMembraneO2.q_out) annotation (Line(
          points={{60,-68},{80,-68}},
          color={107,45,134},
          thickness=1));
      connect(hCO3_inflow.q_out, molarFlowMeasure.q_in) annotation (Line(
          points={{34,-110},{44,-110}},
          color={107,45,134},
          thickness=1));
      connect(co2_inflow.q_out, molarFlowMeasure2.q_in) annotation (Line(
          points={{34,-84},{44,-84}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut.soluteFlow, molarFlowMeasure1.molarFlowRate)
        annotation (Line(points={{-4.7,-63.3},{-4.35,-63.3},{-4.35,-61.6},{52,
              -61.6}}, color={0,0,127}));
      connect(unlimitedSolutePumpOut.q_in, concentrationMeasure3.q_in)
        annotation (Line(
          points={{-18,-67.5},{-34,-67.5},{-34,-68},{-50,-68}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure2.q_out, iSFMembraneCO2.q_out) annotation (Line(
          points={{60,-84},{80,-84}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut1.q_in, veins.port_CO2) annotation (Line(
          points={{-18,-84},{-54,-84},{-53.8,-45.8}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut2.q_in, concentrationMeasure4.q_in)
        annotation (Line(
          points={{-18,-100},{-54,-100}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut2.q_in, veins.port_CO2) annotation (Line(
          points={{-18,-100},{-54,-100},{-54,-84},{-53.8,-45.8}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut3.q_in, concentrationMeasure5.q_in)
        annotation (Line(
          points={{-18,-120},{-58,-120}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePumpOut3.q_in, veins.port_BEox) annotation (Line(
          points={{-18,-120},{-58,-120},{-58,-45.8}},
          color={107,45,134},
          thickness=1));
      connect(molarFlowMeasure.q_out, iSFMembraneHco3.q_out) annotation (Line(
          points={{60,-110},{80,-110}},
          color={107,45,134},
          thickness=1));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -380},{360,140}})),           Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-380},{360,140}})));
    end TissuesTest;

    model TestTissuesAB
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-96,-62},{-88,-54}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-98,-80},{-90,-72}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-98,-96},{-90,-88}})));
      Acidbase.OSA.plasmaO2CO2 plasmaO2CO2_by_integration
        annotation (Placement(transformation(extent={{6,-12},{92,110}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=modelSettings.ISFO2solute_start)
        annotation (Placement(transformation(extent={{-98,82},{-78,102}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=modelSettings.ISFCO2solute_start)
        annotation (Placement(transformation(extent={{-98,56},{-78,76}})));
      Physiolibrary.Chemical.Components.Substance BEox(useNormalizedVolume=
            false, solute_start=modelSettings.ISFBEoxsolute_start)
        annotation (Placement(transformation(extent={{-98,26},{-78,46}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(extent={{-8,-8},{8,8}},
            rotation=90,
            origin={-62,56})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(extent={{-8,8},{8,-8}},
            rotation=270,
            origin={-62,84})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(extent={{-6,6},{6,-6}},
            rotation=270,
            origin={-62,36})));
      Acidbase.OSA.plasmaO2CO2_by_integration plasmaO2CO2_by_integration1
        annotation (Placement(transformation(extent={{0,-100},{60,-20}})));
      inner Interfaces.ModelSettings modelSettings(ISFHCO3_start=23.37)
        annotation (Placement(transformation(extent={{80,-100},{100,-80}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=modelSettings.ISFvolume_start)
        annotation (Placement(transformation(extent={{-108,110},{-100,118}})));
      Acidbase.OSA.CO2totalSI_eq cO2totalSI_eq
        annotation (Placement(transformation(extent={{10,108},{30,128}})));
      Acidbase.OSA.ctCO2content ctCO2content
        annotation (Placement(transformation(extent={{10,130},{30,150}})));
      Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=modelSettings.ctHb)
        annotation (Placement(transformation(extent={{-22,112},{-14,120}})));
      Physiolibrary.Types.Constants.FractionConst fraction(k=1)
        annotation (Placement(transformation(extent={{-26,102},{-18,110}})));
      Physiomodel.Gases.CO2.TissueHCO3 tissueHCO3_1
        annotation (Placement(transformation(extent={{10,162},{30,182}})));
      FullBloodAcidBase.PlasmaElectrochemical.Plasma plasma
        annotation (Placement(transformation(extent={{10,192},{30,212}})));
      Modelica.Blocks.Sources.Constant plasmaBE(k=-0.546)
        annotation (Placement(transformation(extent={{-4,206},{4,214}})));
      Package.TissueHCO3 tissueHCO3_2
        annotation (Placement(transformation(extent={{10,230},{30,250}})));
      Physiolibrary.Chemical.Components.Substance iSFHCO3(useNormalizedVolume=
            false, solute_start=modelSettings.ISFHCO3solute_start)
        annotation (Placement(transformation(extent={{-98,0},{-78,20}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure3
        annotation (Placement(transformation(extent={{-6,6},{6,-6}},
            rotation=270,
            origin={-66,10})));
    equation
      connect(concentrationMeasure.concentration,plasmaO2CO2_by_integration. BEox)
        annotation (Line(points={{-57.2,36},{-52,36},{-52,63.3529},{3.85,
              63.3529}},                         color={0,0,127}));
      connect(plasmaO2CO2_by_integration.ctCO2,concentrationMeasure1. concentration)
        annotation (Line(points={{3.85,70.5294},{-26,70.5294},{-26,56},{-55.6,
              56}},        color={0,0,127}));
      connect(plasmaO2CO2_by_integration.Temp,temperature. y) annotation (Line(
            points={{2.05833,14.9118},{-30,14.9118},{-30,-92},{-89,-92}},
            color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cAlb,albumin. y) annotation (Line(
            points={{2.05833,46.4882},{-28,46.4882},{-28,-58},{-87,-58}},
            color={0,0,127}));
      connect(plasmaO2CO2_by_integration.cPi,Phosphate. y) annotation (Line(
            points={{1.7,30.3412},{-24,30.3412},{-24,-76},{-89,-76}},
            color={0,0,127}));
      connect(concentrationMeasure.q_in,BEox. q_out) annotation (Line(
          points={{-62,36},{-88,36}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in,CO2. q_out) annotation (Line(
          points={{-62,56},{-74,56},{-74,66},{-88,66}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in,O2. q_out) annotation (Line(
          points={{-62,84},{-62,92},{-88,92}},
          color={107,45,134},
          thickness=1));
      connect(plasmaO2CO2_by_integration.ctO2, concentrationMeasure2.concentration)
        annotation (Line(points={{3.85,77.7059},{-6,77.7059},{-6,78},{-14,78},{
              -14,84},{-55.6,84}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration1.ctO2, concentrationMeasure2.concentration)
        annotation (Line(points={{-1.5,-41.1765},{-14,-41.1765},{-14,84},{-55.6,
              84}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration1.ctCO2, concentrationMeasure1.concentration)
        annotation (Line(points={{-1.5,-45.8824},{-26,-45.8824},{-26,56},{-55.6,
              56}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration1.BEox, plasmaO2CO2_by_integration.BEox)
        annotation (Line(points={{-1.5,-50.5882},{-20,-50.5882},{-20,63.3529},{
              3.85,63.3529}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration1.cAlb, albumin.y) annotation (Line(
            points={{-2.75,-61.6471},{-28,-61.6471},{-28,-58},{-87,-58}}, color=
             {0,0,127}));
      connect(plasmaO2CO2_by_integration1.cPi, Phosphate.y) annotation (Line(
            points={{-3,-72.2353},{-24,-72.2353},{-24,-76},{-89,-76}}, color={0,
              0,127}));
      connect(plasmaO2CO2_by_integration1.Temp, temperature.y) annotation (Line(
            points={{-2.75,-82.3529},{-30,-82.3529},{-30,-92},{-89,-92}}, color=
             {0,0,127}));
      connect(volume.y, O2.solutionVolume) annotation (Line(points={{-99,114},{
              -92,114},{-92,96}}, color={0,0,127}));
      connect(volume.y, CO2.solutionVolume) annotation (Line(points={{-99,114},
              {-92,114},{-92,70}}, color={0,0,127}));
      connect(volume.y, BEox.solutionVolume) annotation (Line(points={{-99,114},
              {-92,114},{-92,40}}, color={0,0,127}));
      connect(ctHb.y, cO2totalSI_eq.ctHb) annotation (Line(points={{-13,116},{2,
              116},{2,116.4},{9,116.4}}, color={0,0,127}));
      connect(temperature.y, cO2totalSI_eq.T) annotation (Line(points={{-89,-92},
              {-30,-92},{-30,119.8},{9,119.8}}, color={0,0,127}));
      connect(fraction.y, cO2totalSI_eq.sO2) annotation (Line(points={{-17,106},
              {-4,106},{-4,113},{9,113}}, color={0,0,127}));
      connect(fraction.y, ctCO2content.sO2) annotation (Line(points={{-17,106},
              {-4,106},{-4,132},{9,132}}, color={0,0,127}));
      connect(plasmaO2CO2_by_integration.pH, ctCO2content.pH) annotation (Line(
            points={{94.15,59.7647},{20,59.7647},{20,144},{9,144}}, color={0,0,
              127}));
      connect(plasmaO2CO2_by_integration.pH, cO2totalSI_eq.pH) annotation (Line(
            points={{94.15,59.7647},{20,59.7647},{20,126.6},{9,126.6}}, color={
              0,0,127}));
      connect(plasmaO2CO2_by_integration.pCO2, cO2totalSI_eq.pCO2) annotation (
          Line(points={{94.15,67.6588},{24,67.6588},{24,123.2},{9,123.2}},
            color={0,0,127}));
      connect(plasmaO2CO2_by_integration.pCO2, ctCO2content.pCO2) annotation (
          Line(points={{94.15,67.6588},{24,67.6588},{24,148},{9,148}}, color={0,
              0,127}));
      connect(temperature.y, tissueHCO3_1.T) annotation (Line(points={{-89,-92},
              {-30,-92},{-30,186},{29,186},{29,180}}, color={0,0,127}));
      connect(tissueHCO3_1.tCO2, concentrationMeasure1.concentration)
        annotation (Line(points={{11,176.2},{-26,176.2},{-26,56},{-55.6,56}},
            color={0,0,127}));
      connect(albumin.y, plasma.alb) annotation (Line(points={{-87,-58},{-28,
              -58},{-28,206},{11,206}}, color={0,0,127}));
      connect(Phosphate.y, plasma.Pi) annotation (Line(points={{-89,-76},{-24,
              -76},{-24,202},{11,202}}, color={0,0,127}));
      connect(plasma.pH, tissueHCO3_1.pH) annotation (Line(points={{29,202},{38,
              202},{38,188},{11,188},{11,180}}, color={0,0,127}));
      connect(plasma.pCO2, tissueHCO3_1.pCO2) annotation (Line(points={{11,198},
              {24,198},{24,160}}, color={0,0,127}));
      connect(plasmaBE.y, plasma.BE)
        annotation (Line(points={{4.4,210},{11,210}}, color={0,0,127}));
      connect(volume.y, iSFHCO3.solutionVolume) annotation (Line(points={{-99,
              114},{-92,114},{-92,14}}, color={0,0,127}));
      connect(concentrationMeasure3.q_in, iSFHCO3.q_out) annotation (Line(
          points={{-66,10},{-88,10}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, tissueHCO3_2.T) annotation (Line(points={{-89,-92},
              {-30,-92},{-30,252},{29,252},{29,248}}, color={0,0,127}));
      connect(concentrationMeasure3.concentration, tissueHCO3_2.cHCO3)
        annotation (Line(points={{-61.2,10},{-46,10},{-46,228},{28,228}}, color=
             {0,0,127}));
      connect(concentrationMeasure1.concentration, tissueHCO3_2.tCO2)
        annotation (Line(points={{-55.6,56},{-26,56},{-26,244.2},{11,244.2}},
            color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end TestTissuesAB;

    model TestBloodAB
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlb)
        annotation (Placement(transformation(extent={{-58,204},{-50,212}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-58,178},{-50,186}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-98,-96},{-90,-88}})));
      Acidbase.OSA.O2CO2 o2CO2_1
        annotation (Placement(transformation(extent={{6,-12},{92,110}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=modelSettings.arterialO2conc_start)
        annotation (Placement(transformation(extent={{-98,82},{-78,102}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=modelSettings.arterialCO2conc_start)
        annotation (Placement(transformation(extent={{-98,56},{-78,76}})));
      Physiolibrary.Chemical.Components.Substance BEox(useNormalizedVolume=
            false, solute_start=modelSettings.ISFBEoxsolute_start)
        annotation (Placement(transformation(extent={{-98,26},{-78,46}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(extent={{-8,-8},{8,8}},
            rotation=90,
            origin={-62,56})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure2
        annotation (Placement(transformation(extent={{-8,8},{8,-8}},
            rotation=270,
            origin={-62,84})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(extent={{-6,6},{6,-6}},
            rotation=270,
            origin={-62,36})));
      Acidbase.OSA.O2CO2_by_integration o2CO2_by_integration
        annotation (Placement(transformation(extent={{24,-70},{84,10}})));
      inner Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{80,-100},{100,-80}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k(displayUnit="m3") = 1)
        annotation (Placement(transformation(extent={{-108,110},{-100,118}})));
      Acidbase.OSA.CO2totalSI_eq cO2totalSI_eq
        annotation (Placement(transformation(extent={{10,108},{30,128}})));
      Acidbase.OSA.ctCO2content ctCO2content
        annotation (Placement(transformation(extent={{44,104},{64,124}})));
      Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=modelSettings.ctHb)
        annotation (Placement(transformation(extent={{-24,126},{-16,134}})));
      Physiolibrary.Types.Constants.FractionConst sO2(k=1)
        annotation (Placement(transformation(extent={{-24,136},{-16,144}})));
    Physiomodel.Electrolytes.AcidBase.BloodPhMeassure
                    veinsPH(_cTHox(start=0), pH(start=7.37))
      annotation (Placement(transformation(extent={{32,194},{4,222}})));
      Physiomodel.Gases.CO2.MeassureBloodCO2 meassureBloodCO2_1
        annotation (Placement(transformation(extent={{10,162},{30,182}})));
      Modelica.Blocks.Sources.Constant ctHb1(k=0)
        annotation (Placement(transformation(extent={{46,220},{38,228}})));
      Physiolibrary.Types.Constants.FractionConst hct(k=modelSettings.ctHb/(
            33.34/6.65*4))
        annotation (Placement(transformation(extent={{48,172},{40,180}})));
      Physiolibrary.Types.Constants.MassConcentrationConst cGlob(k=34.16 - 10*(
            modelSettings.cAlb/(0.63/1.45) - 1.45))
        annotation (Placement(transformation(extent={{-58,192},{-50,200}})));
      Physiomodel.Gases.O2.MeassureBloodO2 meassureBloodO2_1
        annotation (Placement(transformation(extent={{26,240},{6,260}})));
      Physiolibrary.Types.Constants.ConcentrationConst dPG(k=modelSettings.cDPG)
        annotation (Placement(transformation(extent={{-56,252},{-48,260}})));
      Physiolibrary.Types.Constants.FractionConst fMetHb(k=modelSettings.FMetHb)
        annotation (Placement(transformation(extent={{-44,248},{-36,256}})));
      Physiolibrary.Types.Constants.FractionConst FHbF(k=modelSettings.FHbF)
        annotation (Placement(transformation(extent={{-34,244},{-26,252}})));
      Physiolibrary.Types.Constants.PressureConst COpressure(k=0)
        annotation (Placement(transformation(extent={{-22,240},{-14,248}})));
    equation
      connect(concentrationMeasure.concentration, o2CO2_1.BEox) annotation (
          Line(points={{-57.2,36},{-52,36},{-52,63.3529},{3.85,63.3529}}, color=
             {0,0,127}));
      connect(o2CO2_1.ctCO2, concentrationMeasure1.concentration) annotation (
          Line(points={{3.85,70.5294},{-26,70.5294},{-26,56},{-55.6,56}}, color=
             {0,0,127}));
      connect(concentrationMeasure.q_in,BEox. q_out) annotation (Line(
          points={{-62,36},{-88,36}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.q_in,CO2. q_out) annotation (Line(
          points={{-62,56},{-74,56},{-74,66},{-88,66}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure2.q_in,O2. q_out) annotation (Line(
          points={{-62,84},{-62,92},{-88,92}},
          color={107,45,134},
          thickness=1));
      connect(o2CO2_1.ctO2, concentrationMeasure2.concentration) annotation (
          Line(points={{3.85,77.7059},{-6,77.7059},{-6,78},{-14,78},{-14,84},{
              -55.6,84}}, color={0,0,127}));
      connect(o2CO2_by_integration.ctO2, concentrationMeasure2.concentration)
        annotation (Line(points={{21,-12.8571},{-14,-12.8571},{-14,84},{-55.6,
              84}}, color={0,0,127}));
      connect(o2CO2_by_integration.ctCO2, concentrationMeasure1.concentration)
        annotation (Line(points={{21.6,-27.1429},{-26,-27.1429},{-26,56},{-55.6,
              56}}, color={0,0,127}));
      connect(o2CO2_by_integration.BEox, o2CO2_1.BEox) annotation (Line(points={{21,
              -44.2857},{-20,-44.2857},{-20,63.3529},{3.85,63.3529}},
            color={0,0,127}));
      connect(volume.y, O2.solutionVolume) annotation (Line(points={{-99,114},{
              -92,114},{-92,96}}, color={0,0,127}));
      connect(volume.y, CO2.solutionVolume) annotation (Line(points={{-99,114},
              {-92,114},{-92,70}}, color={0,0,127}));
      connect(volume.y, BEox.solutionVolume) annotation (Line(points={{-99,114},
              {-92,114},{-92,40}}, color={0,0,127}));
      connect(ctHb.y, cO2totalSI_eq.ctHb) annotation (Line(points={{-15,130},{
              -10,130},{-10,116.4},{9,116.4}}, color={0,0,127}));
      connect(temperature.y, cO2totalSI_eq.T) annotation (Line(points={{-89,-92},
              {-30,-92},{-30,119.8},{9,119.8}}, color={244,125,35}));
      connect(sO2.y, cO2totalSI_eq.sO2) annotation (Line(points={{-15,140},{-4,
              140},{-4,113},{9,113}}, color={0,0,127}));
      connect(sO2.y, ctCO2content.sO2) annotation (Line(points={{-15,140},{14,
              140},{14,106},{43,106}}, color={0,0,127}));
      connect(o2CO2_1.pH, ctCO2content.pH) annotation (Line(points={{94.15,
              59.0471},{20,59.0471},{20,118},{43,118}}, color={0,0,127}));
      connect(o2CO2_1.pCO2, cO2totalSI_eq.pCO2) annotation (Line(points={{94.15,
              67.6588},{24,67.6588},{24,123.2},{9,123.2}}, color={0,0,127}));
      connect(o2CO2_1.pCO2, ctCO2content.pCO2) annotation (Line(points={{94.15,
              67.6588},{24,67.6588},{24,122},{43,122}}, color={0,0,127}));
      connect(sO2.y, veinsPH.sO2) annotation (Line(points={{-15,140},{-4,140},{
              -4,198},{9.6,198},{9.6,223.4}}, color={0,0,127}));
      connect(veinsPH.cHCO3, meassureBloodCO2_1.cHCO3) annotation (Line(points=
              {{5.4,219.2},{28,219.2},{28,160}}, color={0,0,127}));
      connect(veinsPH.pH_ery, meassureBloodCO2_1.pH_ery) annotation (Line(
            points={{15.2,191.2},{15.2,176},{11,176}}, color={0,0,127}));
      connect(veinsPH.pH, meassureBloodCO2_1.pH) annotation (Line(points={{20.8,
              191.2},{22,191.2},{22,180},{11,180}}, color={0,0,127}));
      connect(temperature.y, meassureBloodCO2_1.T) annotation (Line(points={{
              -89,-92},{-30,-92},{-30,154},{34,154},{34,180},{29,180}}, color={
              244,125,35}));
      connect(ctHb1.y, veinsPH.BEox) annotation (Line(points={{37.6,224},{29.2,
              224},{29.2,222}}, color={0,0,127}));
      connect(sO2.y, meassureBloodCO2_1.sO2) annotation (Line(points={{-15,140},
              {-4,140},{-4,172},{29,172}}, color={0,0,127}));
      connect(hct.y, meassureBloodCO2_1.Hct)
        annotation (Line(points={{39,176},{29,176}}, color={0,0,127}));
      connect(ctHb.y, veinsPH.ctHb) annotation (Line(points={{-15,130},{-10,130},
              {-10,213.6},{5.4,213.6}}, color={0,0,127}));
      connect(albumin.y, veinsPH.ctAlb)
        annotation (Line(points={{-49,208},{5.4,208}}, color={0,0,127}));
      connect(veinsPH.ctGlb, cGlob.y) annotation (Line(points={{5.4,202.4},{-40,
              202.4},{-40,196},{-49,196}}, color={0,0,127}));
      connect(Phosphate.y, veinsPH.ctPO4) annotation (Line(points={{-49,182},{
              -36,182},{-36,196},{5.4,196},{5.4,196.8}}, color={0,0,127}));
      connect(concentrationMeasure1.q_in, meassureBloodCO2_1.q_in) annotation (
          Line(
          points={{-62,56},{-58,56},{-58,164},{20,164}},
          color={107,45,134},
          thickness=1));
      connect(o2CO2_1.pH, cO2totalSI_eq.pH) annotation (Line(points={{94.15,
              59.0471},{20,59.0471},{20,126.6},{9,126.6}}, color={0,0,127}));
      connect(concentrationMeasure2.q_in, meassureBloodO2_1.q_in) annotation (
          Line(
          points={{-62,84},{-62,242},{16,242}},
          color={107,45,134},
          thickness=1));
      connect(veinsPH.pH, meassureBloodO2_1.pH) annotation (Line(points={{20.8,
              191.2},{20.8,260},{25,260}}, color={0,0,127}));
      connect(meassureBloodCO2_1.pCO2, meassureBloodO2_1.pCO2) annotation (Line(
            points={{24,160},{24,256},{25,256}}, color={0,0,127}));
      connect(temperature.y, meassureBloodO2_1.T) annotation (Line(points={{-89,
              -92},{-30,-92},{-30,252},{25,252}}, color={244,125,35}));
      connect(ctHb.y, meassureBloodO2_1.ctHb) annotation (Line(points={{-15,130},
              {-10,130},{-10,260},{7,260}}, color={0,0,127}));
      connect(dPG.y, meassureBloodO2_1.cDPG)
        annotation (Line(points={{-47,256},{7,256}}, color={0,0,127}));
      connect(fMetHb.y, meassureBloodO2_1.FMetHb)
        annotation (Line(points={{-35,252},{7,252}}, color={0,0,127}));
      connect(FHbF.y, meassureBloodO2_1.FHbF)
        annotation (Line(points={{-25,248},{7,248}}, color={0,0,127}));
      connect(COpressure.y, meassureBloodO2_1.pCO)
        annotation (Line(points={{-13,244},{7,244}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -120,-100},{100,280}})), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-120,-100},{100,280}})));
    end TestBloodAB;

    model TestFlows
      BloodComponents.BloodElasticVesselElastance bloodElasticVesselElastance(
        ExternalPressure=0,
        useO2_input=true,
        ZeroPressureVolume=0.001,
        Compliance=3.7503078792283e-6,
        volume_start=0.0005,
        O2_concentration=0,
        CO2_concentration=0,
        Elastance=1333223874.15)
        annotation (Placement(transformation(extent={{-54,-20},{-34,0}})));
      BloodComponents.BloodResistor bloodResistor(Resistance=799934324490)
        annotation (Placement(transformation(extent={{20,-20},{40,0}})));
      Interfaces.BloodPort_in_Extension bloodPort_a_Extension
        annotation (Placement(transformation(extent={{76,-20},{96,0}})));
      Interfaces.BloodPort_out_Extension bloodPort_b_Extension
        annotation (Placement(transformation(extent={{-78,-20},{-58,0}})));
      Physiolibrary.Chemical.Components.Stream O2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-112,-40},{-92,-20}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{-104,10},{-84,-10}})));
      Physiolibrary.Chemical.Components.Stream CO2flow(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{-112,-70},{-92,-50}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{-112,-100},{-92,-80}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedPump unlimitedPump(SolutionFlow=
            1.6666666666667e-5)
        annotation (Placement(transformation(extent={{-144,-10},{-124,10}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageO2(Conc=10)
        annotation (Placement(transformation(extent={{-144,-40},{-124,-20}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageCO2(Conc=20)
        annotation (Placement(transformation(extent={{-144,-70},{-124,-50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageBEox(Conc=0)
        annotation (Placement(transformation(extent={{-144,-100},{-124,-80}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageO1(Conc=10)
        annotation (Placement(transformation(extent={{156,-40},{136,-20}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageCO1(Conc=60)
        annotation (Placement(transformation(extent={{156,-70},{136,-50}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorageBEox1(Conc=0)
        annotation (Placement(transformation(extent={{156,-100},{136,-80}})));
      Physiolibrary.Chemical.Components.Stream O2flow1(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{106,-40},{126,-20}})));
      Physiolibrary.Chemical.Components.Stream CO2flow1(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{108,-70},{128,-50}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow1(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{108,-100},{128,-80}})));
      Physiolibrary.Hydraulic.Sources.UnlimitedVolume unlimitedVolume
        annotation (Placement(transformation(extent={{156,-10},{136,10}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure1
        annotation (Placement(transformation(extent={{112,10},{132,-10}})));
      Physiolibrary.Chemical.Components.Stream ionFlow[AcidBaseBalance.Ions.IonsEnum](
         each useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-112,-130},{-92,-110}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ionUS[
        AcidBaseBalance.Ions.IonsEnum](each Conc=0) annotation (Placement(
            transformation(extent={{-144,-130},{-124,-110}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage ionUS1[
        AcidBaseBalance.Ions.IonsEnum](each Conc=0)
        annotation (Placement(transformation(extent={{156,-130},{136,-110}})));
      Physiolibrary.Chemical.Components.Stream ionFlow1[AcidBaseBalance.Ions.IonsEnum](
         each useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{110,-130},{130,-110}})));
      Interfaces.OneToMany oneToMany annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            rotation=270,
            origin={-92,-106})));
      Interfaces.OneToMany oneToMany1 annotation (Placement(transformation(
            extent={{-4,-4},{4,4}},
            rotation=270,
            origin={128,-106})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump
                                               O2flow2(useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-32,-82},{-12,-62}})));
      Modelica.Blocks.Sources.Pulse pulse(
        period=1,
        amplitude=1e-3,
        width=100,
        nperiod=1,
        startTime=5)
        annotation (Placement(transformation(extent={{-54,-56},{-34,-36}})));
    equation
      connect(bloodResistor.bloodPort_out, bloodPort_a_Extension.bloodPort_in)
        annotation (Line(
          points={{39,-10},{76,-10}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure.q_out,bloodPort_b_Extension. bloodFlow) annotation (
          Line(
          points={{-84,0},{-78,0}},
          color={0,0,0},
          thickness=1));
      connect(O2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{-102,-23},{-102,-22},{-94,-22},{-94,-12}},        color={0,
              0,127}));
      connect(CO2flow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{-102,-53},{-102,-52},{-94,-52},{-94,-12}},
                                                         color={0,0,127}));
      connect(BEoxflow.solutionFlow,flowMeasure. volumeFlow) annotation (Line(
            points={{-102,-83},{-102,-82},{-94,-82},{-94,-12}},
                                                           color={0,0,127}));
      connect(O2flow.q_out,bloodPort_b_Extension. O2) annotation (Line(
          points={{-92,-30},{-84,-30},{-84,-8},{-78,-8}},
          color={107,45,134},
          thickness=1));
      connect(CO2flow.q_out,bloodPort_b_Extension. CO2) annotation (Line(
          points={{-92,-60},{-82,-60},{-82,-12},{-78,-12}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_out,bloodPort_b_Extension. BEox) annotation (Line(
          points={{-92,-90},{-80,-90},{-80,-16},{-78,-16}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_b_Extension.bloodPort_out, bloodElasticVesselElastance.bloodPort_in)
        annotation (Line(
          points={{-58,-10},{-53.8,-10}},
          color={28,108,200},
          thickness=0.5));
      connect(unlimitedPump.q_out, flowMeasure.q_in) annotation (Line(
          points={{-124,0},{-104,0}},
          color={0,0,0},
          thickness=1));
      connect(unlimitedSolutionStorageO2.q_out, O2flow.q_in) annotation (Line(
          points={{-124,-30},{-112,-30}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutionStorageCO2.q_out, CO2flow.q_in) annotation (Line(
          points={{-124,-60},{-112,-60}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutionStorageBEox.q_out, BEoxflow.q_in) annotation (
          Line(
          points={{-124,-90},{-112,-90}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutionStorageBEox1.q_out, BEoxflow1.q_out) annotation (
         Line(
          points={{136,-90},{128,-90}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedVolume.y, flowMeasure1.q_out) annotation (Line(
          points={{136,0},{132,0}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure1.q_in, bloodPort_a_Extension.bloodFlow) annotation (
          Line(
          points={{112,0},{96,0}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure1.volumeFlow, O2flow1.solutionFlow) annotation (Line(
            points={{122,-12},{122,-20.1},{116,-20.1},{116,-23}},
                                                              color={0,0,127}));
      connect(flowMeasure1.volumeFlow, CO2flow1.solutionFlow) annotation (Line(
            points={{122,-12},{122,-53},{118,-53}},
                                                 color={0,0,127}));
      connect(flowMeasure1.volumeFlow, BEoxflow1.solutionFlow) annotation (Line(
            points={{122,-12},{122,-83},{118,-83}},
                                                 color={0,0,127}));
      connect(O2flow1.q_out, unlimitedSolutionStorageO1.q_out) annotation (Line(
          points={{126,-30},{136,-30}},
          color={107,45,134},
          thickness=1));
      connect(CO2flow1.q_out, unlimitedSolutionStorageCO1.q_out) annotation (
          Line(
          points={{128,-60},{136,-60}},
          color={107,45,134},
          thickness=1));
      connect(O2flow1.q_in, bloodPort_a_Extension.O2) annotation (Line(
          points={{106,-30},{106,-8},{96,-8}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.CO2, CO2flow1.q_in) annotation (Line(
          points={{96,-12.2},{96,-14},{104,-14},{104,-60},{108,-60}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.BEox, BEoxflow1.q_in) annotation (Line(
          points={{96,-16},{102,-16},{102,-90},{108,-90}},
          color={107,45,134},
          thickness=1));
      connect(ionUS.q_out, ionFlow.q_in) annotation (Line(
          points={{-124,-120},{-112,-120}},
          color={107,45,134},
          thickness=1));
      connect(ionFlow.q_out, bloodPort_b_Extension.ions) annotation (Line(
          points={{-92,-120},{-78,-120},{-78,-20}},
          color={107,45,134},
          thickness=1));
      connect(ionUS1.q_out, ionFlow1.q_out) annotation (Line(
          points={{136,-120},{130,-120}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.ions, ionFlow1.q_in) annotation (Line(
          points={{96,-20},{96,-22},{100,-22},{100,-120},{110,-120}},
          color={107,45,134},
          thickness=1));
      connect(flowMeasure.volumeFlow, oneToMany.u)
        annotation (Line(points={{-94,-12},{-94,-102}}, color={0,0,127}));
      connect(ionFlow.solutionFlow, oneToMany.y) annotation (Line(points={{-102,
              -113},{-102,-110},{-94,-110}},
                                      color={0,0,127}));
      connect(flowMeasure1.volumeFlow, oneToMany1.u)
        annotation (Line(points={{122,-12},{122,-102},{126,-102}},
                                                                color={0,0,127}));
      connect(oneToMany1.y, ionFlow1.solutionFlow) annotation (Line(points={{126,
              -110},{122,-110},{122,-113},{120,-113}},
                                              color={0,0,127}));
      connect(pulse.y, O2flow2.soluteFlow) annotation (Line(points={{-33,-46},{
              -18,-46},{-18,-68}}, color={0,0,127}));
      connect(bloodElasticVesselElastance.bloodPort_out, bloodResistor.bloodPort_in)
        annotation (Line(
          points={{-34,-10},{21,-10}},
          color={28,108,200},
          thickness=0.5));
      connect(O2flow2.q_out, bloodElasticVesselElastance.port_O2) annotation (
          Line(
          points={{-12,-72},{-10,-72},{-10,12},{-52,12},{-52,-19.8},{-49.8,
              -19.8}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -120,-120},{140,20}})), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-120,-120},{140,20}})),
        experiment(StopTime=50));
    end TestFlows;

    model AlvVentilation_with_2Alveoli_respirationControl
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary2(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-40,120},{-20,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{102,-108},{82,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{82,-88},{102,-68}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-76,100},{-56,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{93,-38},{101,-32}})));
      BloodComponents.BloodConductor pulmonaryShunt(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-14,90},{6,70}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-180,70},{-160,78}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-192,158},{-172,178}})));
      Package.AlveolocapillaryUnit alveolocapillaryUnit
        annotation (Placement(transformation(extent={{-16,94},{12,118}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-46,-76},{-18,-44}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-14,-16},{14,16}},
            rotation=90,
            origin={72,-24})));
      Package.ISFBuffer iSFBuffer(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        initialBEox=0.892,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-36,-92},{-16,-72}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.01)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-110,-104},{-102,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{18,-82},{26,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{18,-102},{26,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{2,-90},{16,-84}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{54,-60},{70,-74}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{56,-82},{72,-96}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{68,-62},{88,-48}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00018333333333333)
        annotation (Placement(transformation(extent={{96,-66},{116,-46}})));
      Respiratory.AlveolarVentilation alveolarVentilation
        annotation (Placement(transformation(extent={{114,-26},{134,-6}})));
      Package.AlveolocapillaryUnit alveolocapillaryUnit1
        annotation (Placement(transformation(extent={{-18,126},{10,150}})));
      BloodComponents.BloodConductor pulmonary1(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=true)
        annotation (Placement(transformation(extent={{-42,152},{-22,132}})));
      Physiolibrary.Types.Constants.FractionConst perfusionFraction(k=0.5)
        annotation (Placement(transformation(extent={{-174,88},{-156,98}})));
      Package.Ventilation_to_perfusion_2_units_distribution g_distrib
        annotation (Placement(transformation(extent={{-138,84},{-120,102}})));
      Physiolibrary.Types.Constants.FractionConst ventilationFraction(k=0.5)
        annotation (Placement(transformation(extent={{-166,114},{-148,124}})));
      Physiolibrary.Types.Constants.HydraulicConductanceConst
        pulmonaryConductaance(k=4.1665920538226e-11)
        annotation (Placement(transformation(extent={{-152,56},{-134,68}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi1(k(displayUnit=
              "ml/min") = 4.8625466666667e-5)
        annotation (Placement(transformation(extent={{-164,148},{-151,156}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryShunt.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{5,80},{10,80},{10,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryShunt.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-13,80},{-82,80},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{1.36,113.44},{3.68,113.44},{3.68,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-44.6,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-19.4,-60},{-10,-60},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-36.6},{72,-36.6}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.4},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(iSFBuffer.HCO3_inflow, venous_blood_ISF_Interface.HCO3_inflow)
        annotation (Line(
          points={{-26.3636,-81.8889},{-32,-81.8889},{-32,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-24.0909,-82},{-24.0909,-70},{-27.8,-70},{-27.8,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21.9091,-82},{-21.9091,-68},{-23.32,-68},{-23.32,-60}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-101,
              -100},{-66,-100},{-66,-88.3889},{-28.5909,-88.3889}},
                                                     color={0,0,127}));
      connect(iSFBuffer.cPi, Phosphate.y) annotation (Line(points={{-28.5455,
              -86.7778},{-68,-86.7778},{-68,-92},{-83,-92}},
                                                color={0,0,127}));
      connect(iSFBuffer.cAlb, albumin.y) annotation (Line(points={{-28.5909,
              -85.2778},{-64,-85.2778},{-64,-84},{-71,-84}},
                                                color={0,0,127}));
      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-45,-76},{
              -40,-76},{-40,-83.3889},{-28.0455,-83.3889}},
                                                   color={0,0,127}));
      connect(iSFBuffer.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21.9091,-82},{-16,-82},{-16,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBuffer.CO2_inflow) annotation (Line(
          points={{-10,-98},{-24.0909,-98},{-24.0909,-82}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{22,-78}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{22,-78},{82,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{22,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{22,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{17.75,-87},{20.4,-87},{20.4,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{20.4,-76.4},{20.4,-88},{17.75,-88},{17.75,-87}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{82,-78},{72,-78},{72,-67},{62,-67}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{64,-89},{78,-89},{78,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{62,-61.4},{62,-49.1667},{69.8182,-49.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{69.8182,-60.8333},{68.5,-60.8333},{68.5,-83.4},
              {64,-83.4}}, color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{114,-48},{124,-48},{124,-94},{88,-94}}, color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{96,-74},{118,-74},{118,-64},{114,-64}}, color=
             {0,0,127}));
      connect(arterial_blood_ISF_Interface.pH, alveolarVentilation.pHa)
        annotation (Line(points={{68,-33.8},{66,-33.8},{66,-42},{90,-42},{90,
              -17.2},{114,-17.2}}, color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pCO2, alveolarVentilation.pCO2a)
        annotation (Line(points={{68,-30.72},{64,-30.72},{64,-46},{84,-46},{84,
              -12.2},{114,-12.2}},    color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pO2, alveolarVentilation.pO2a)
        annotation (Line(points={{68,-27.64},{62,-27.64},{62,-8},{114,-8}},
            color={0,0,127}));
      connect(VAi.y, alveolarVentilation.VA0) annotation (Line(points={{102,-35},
              {104,-35},{104,-22.4},{114,-22.4}}, color={0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{86.1818,-56.1667},{92.0909,-56.1667},{92.0909,-56},{98,-56}},
            color={0,0,127}));
      connect(flowMeasure_alv.bloodPort_in, alveolocapillaryUnit1.bloodPort_out)
        annotation (Line(
          points={{11,110},{11,145.44},{-0.64,145.44}},
          color={28,108,200},
          thickness=0.5));
      connect(g_distrib.F_perfusion, perfusionFraction.y) annotation (Line(
            points={{-136.2,93.36},{-137.3,93.36},{-137.3,93},{-153.75,93}},
            color={0,0,127}));
      connect(g_distrib.G_2, pulmonary2.cond) annotation (Line(points={{-120.9,
              89.4},{-30,89.4},{-30,103.4}}, color={0,0,127}));
      connect(g_distrib.G_1, pulmonary1.cond) annotation (Line(points={{-120.9,
              98.04},{-112,98.04},{-112,126},{-32,126},{-32,135.4}}, color={0,0,
              127}));
      connect(flowConcentrationMeasure.bloodPort_in, pulmonaryArteries.bloodPort_out)
        annotation (Line(
          points={{-75,110},{-82,110},{-82,110}},
          color={28,108,200},
          thickness=0.5));
      connect(flowConcentrationMeasure.bloodPort_out, pulmonary2.bloodPort_in)
        annotation (Line(
          points={{-57,110},{-39,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_in, flowConcentrationMeasure.bloodPort_out)
        annotation (Line(
          points={{-41,142},{-57,142},{-57,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary1.bloodPort_out, alveolocapillaryUnit1.bloodPort_in)
        annotation (Line(
          points={{-23,142},{-16,142},{-16,145.2},{-8.76,145.2}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary2.bloodPort_out, alveolocapillaryUnit.bloodPort_in)
        annotation (Line(
          points={{-21,110},{-14,110},{-14,113.2},{-6.76,113.2}},
          color={28,108,200},
          thickness=0.5));
      connect(shuntFraction.y, g_distrib.F_shunt) annotation (Line(points={{
              -157.5,74},{-138,74},{-138,87.78},{-136.2,87.78}}, color={0,0,127}));
      connect(g_distrib.F_ventilation, ventilationFraction.y) annotation (Line(
            points={{-136.2,99.12},{-136,99.12},{-136,119},{-145.75,119}},
            color={0,0,127}));
      connect(pulmonaryConductaance.y, g_distrib.G_total) annotation (Line(
            points={{-131.75,62},{-128,62},{-128,83.64},{-129.18,83.64}}, color=
             {0,0,127}));
      connect(g_distrib.G_shunt, pulmonaryShunt.cond) annotation (Line(points={
              {-120.9,85.08},{-98,85.08},{-98,66},{-4,66},{-4,73.4}}, color={0,
              0,127}));
      connect(g_distrib.VA_1, alveolocapillaryUnit1.VAi) annotation (Line(
            points={{-120.9,100.92},{-114,100.92},{-114,132},{-14.78,132},{
              -14.78,137.16}}, color={0,0,127}));
      connect(g_distrib.VA_2, alveolocapillaryUnit.VAi) annotation (Line(points=
             {{-120.9,92.1},{-18,92.1},{-18,105.16},{-12.78,105.16}}, color={0,
              0,127}));
      connect(VAi1.y, g_distrib.VA_total) annotation (Line(points={{-149.375,
              152},{-128.73,152},{-128.73,102.27}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-200,
                -120},{140,180}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-200,-120},{140,180}})));
    end AlvVentilation_with_2Alveoli_respirationControl;

    model AlvVentilation_with_shunts_ISF_dPCO2_respirationControl
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{102,-108},{82,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{82,-88},{102,-68}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{93,-38},{101,-32}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-94,78},{-86,86}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-46,-76},{-18,-44}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-14,-16},{14,16}},
            rotation=90,
            origin={72,-24})));
      Package.ISFBuffer iSFBuffer(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        initialBEox=0.892,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-36,-92},{-16,-72}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.01)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-106,-104},{-98,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{18,-82},{26,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{18,-102},{26,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{2,-90},{16,-84}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{54,-60},{70,-74}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{56,-82},{72,-96}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{68,-62},{88,-48}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00018333333333333)
        annotation (Placement(transformation(extent={{96,-66},{116,-46}})));
      Respiratory.AlveolarVentilation alveolarVentilation
        annotation (Placement(transformation(extent={{114,-26},{134,-6}})));
      Package.AlveolocapillaryUnit_with_shunts alveolocapillaryUnit_with_shunts
        annotation (Placement(transformation(extent={{-26,86},{6,116}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-44.6,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-19.4,-60},{-10,-60},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-36.6},{72,-36.6}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.4},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(iSFBuffer.HCO3_inflow, venous_blood_ISF_Interface.HCO3_inflow)
        annotation (Line(
          points={{-26.3636,-81.8889},{-32,-81.8889},{-32,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-24.0909,-82},{-24.0909,-70},{-27.8,-70},{-27.8,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21.9091,-82},{-21.9091,-68},{-23.32,-68},{-23.32,-60}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-97,-100},
              {-66,-100},{-66,-88.3889},{-28.5909,-88.3889}},
                                                     color={0,0,127}));
      connect(iSFBuffer.cPi, Phosphate.y) annotation (Line(points={{-28.5455,
              -86.7778},{-68,-86.7778},{-68,-92},{-83,-92}},
                                                color={0,0,127}));
      connect(iSFBuffer.cAlb, albumin.y) annotation (Line(points={{-28.5909,
              -85.2778},{-64,-85.2778},{-64,-84},{-71,-84}},
                                                color={0,0,127}));
      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-45,-76},{
              -40,-76},{-40,-83.3889},{-28.0455,-83.3889}},
                                                   color={0,0,127}));
      connect(iSFBuffer.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21.9091,-82},{-16,-82},{-16,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBuffer.CO2_inflow) annotation (Line(
          points={{-10,-98},{-24.0909,-98},{-24.0909,-82}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{22,-78}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{22,-78},{82,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{22,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{22,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{17.75,-87},{20.4,-87},{20.4,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{20.4,-76.4},{20.4,-88},{17.75,-88},{17.75,-87}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{82,-78},{72,-78},{72,-67},{62,-67}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{64,-89},{78,-89},{78,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{62,-61.4},{62,-49.1667},{69.8182,-49.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{69.8182,-60.8333},{68.5,-60.8333},{68.5,-83.4},
              {64,-83.4}}, color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{114,-48},{124,-48},{124,-94},{88,-94}}, color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{96,-74},{118,-74},{118,-64},{114,-64}}, color=
             {0,0,127}));
      connect(arterial_blood_ISF_Interface.pH, alveolarVentilation.pHa)
        annotation (Line(points={{68,-33.8},{66,-33.8},{66,-42},{90,-42},{90,
              -17.2},{114,-17.2}}, color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pCO2, alveolarVentilation.pCO2a)
        annotation (Line(points={{68,-30.72},{64,-30.72},{64,-46},{84,-46},{84,
              -12.2},{114,-12.2}},    color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pO2, alveolarVentilation.pO2a)
        annotation (Line(points={{68,-27.64},{62,-27.64},{62,-8},{114,-8}},
            color={0,0,127}));
      connect(VAi.y, alveolarVentilation.VA0) annotation (Line(points={{102,-35},
              {104,-35},{104,-22.4},{114,-22.4}}, color={0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{86.1818,-56.1667},{92.0909,-56.1667},{92.0909,-56},{98,-56}},
            color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out,
        alveolocapillaryUnit_with_shunts.bloodPort_in) annotation (Line(
          points={{-31,110},{-15.44,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillaryUnit_with_shunts.bloodPort_out, flowMeasure_alv.bloodPort_in)
        annotation (Line(
          points={{-6.16,110.3},{2.92,110.3},{2.92,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolarVentilation.VA, alveolocapillaryUnit_with_shunts.VAi)
        annotation (Line(points={{135,-13},{146,-13},{146,134},{-28,134},{-28,
              99.95},{-22.32,99.95}}, color={0,0,127}));
      connect(shuntFraction.y, alveolocapillaryUnit_with_shunts.Fsh)
        annotation (Line(points={{-85,82},{-52,82},{-52,92.15},{-19.76,92.15}},
            color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -120},{140,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-120},{140,140}})));
    end AlvVentilation_with_shunts_ISF_dPCO2_respirationControl;

    model AlvVentilation_with_2Alveoli_and_shunts_ISF_dPCO2_respirationControl
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{102,-108},{82,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{82,-88},{102,-68}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{93,-38},{101,-32}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-48,72},{-40,80}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-46,-76},{-18,-44}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-14,-16},{14,16}},
            rotation=90,
            origin={72,-24})));
      Package.ISFBuffer iSFBuffer(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        initialBEox=0.892,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-36,-92},{-16,-72}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.01)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-106,-104},{-98,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{18,-82},{26,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{18,-102},{26,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{2,-90},{16,-84}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{54,-60},{70,-74}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{56,-82},{72,-96}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{68,-62},{88,-48}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00018333333333333)
        annotation (Placement(transformation(extent={{96,-66},{116,-46}})));
      Respiratory.AlveolarVentilation alveolarVentilation
        annotation (Placement(transformation(extent={{114,-26},{134,-6}})));
      Package.Alveolocapillary_2Units_with_shunts
        alveolocapillary_2Units_with_shunts
        annotation (Placement(transformation(extent={{-22,88},{12,116}})));
      Physiolibrary.Types.Constants.FractionConst VAi_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-92,90},{-84,98}})));
      Physiolibrary.Types.Constants.FractionConst Perfusion_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-88,82},{-80,90}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-44.6,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-19.4,-60},{-10,-60},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-36.6},{72,-36.6}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.4},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(iSFBuffer.HCO3_inflow, venous_blood_ISF_Interface.HCO3_inflow)
        annotation (Line(
          points={{-26.3636,-81.8889},{-32,-81.8889},{-32,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-24.0909,-82},{-24.0909,-70},{-27.8,-70},{-27.8,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21.9091,-82},{-21.9091,-68},{-23.32,-68},{-23.32,-60}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-97,-100},
              {-66,-100},{-66,-88.3889},{-28.5909,-88.3889}},
                                                     color={0,0,127}));
      connect(iSFBuffer.cPi, Phosphate.y) annotation (Line(points={{-28.5455,
              -86.7778},{-68,-86.7778},{-68,-92},{-83,-92}},
                                                color={0,0,127}));
      connect(iSFBuffer.cAlb, albumin.y) annotation (Line(points={{-28.5909,
              -85.2778},{-64,-85.2778},{-64,-84},{-71,-84}},
                                                color={0,0,127}));
      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-45,-76},{
              -40,-76},{-40,-83.3889},{-28.0455,-83.3889}},
                                                   color={0,0,127}));
      connect(iSFBuffer.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21.9091,-82},{-16,-82},{-16,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBuffer.CO2_inflow) annotation (Line(
          points={{-10,-98},{-24.0909,-98},{-24.0909,-82}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{22,-78}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{22,-78},{82,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{22,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{22,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{17.75,-87},{20.4,-87},{20.4,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{20.4,-76.4},{20.4,-88},{17.75,-88},{17.75,-87}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{82,-78},{72,-78},{72,-67},{62,-67}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{64,-89},{78,-89},{78,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{62,-61.4},{62,-49.1667},{69.8182,-49.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{69.8182,-60.8333},{68.5,-60.8333},{68.5,-83.4},
              {64,-83.4}}, color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{114,-48},{124,-48},{124,-94},{88,-94}}, color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{96,-74},{118,-74},{118,-64},{114,-64}}, color=
             {0,0,127}));
      connect(arterial_blood_ISF_Interface.pH, alveolarVentilation.pHa)
        annotation (Line(points={{68,-33.8},{66,-33.8},{66,-42},{90,-42},{90,
              -17.2},{114,-17.2}}, color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pCO2, alveolarVentilation.pCO2a)
        annotation (Line(points={{68,-30.72},{64,-30.72},{64,-46},{84,-46},{84,
              -12.2},{114,-12.2}},    color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pO2, alveolarVentilation.pO2a)
        annotation (Line(points={{68,-27.64},{62,-27.64},{62,-8},{114,-8}},
            color={0,0,127}));
      connect(VAi.y, alveolarVentilation.VA0) annotation (Line(points={{102,-35},
              {104,-35},{104,-22.4},{114,-22.4}}, color={0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{86.1818,-56.1667},{92.0909,-56.1667},{92.0909,-56},{98,-56}},
            color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out,
        alveolocapillary_2Units_with_shunts.bloodPort_in) annotation (Line(
          points={{-31,110},{-22,110},{-22,110.4},{-10.78,110.4}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillary_2Units_with_shunts.bloodPort_out,
        flowMeasure_alv.bloodPort_in) annotation (Line(
          points={{-0.92,110.68},{3.54,110.68},{3.54,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillary_2Units_with_shunts.VAi, alveolarVentilation.VA)
        annotation (Line(points={{-15.03,105.78},{-22,105.78},{-22,130},{140,
              130},{140,-13},{135,-13}}, color={0,0,127}));
      connect(shuntFraction.y, alveolocapillary_2Units_with_shunts.Fsh)
        annotation (Line(points={{-39,76},{-16,76},{-16,91.22},{-10.95,91.22}},
            color={0,0,127}));
      connect(VAi_fraction.y, alveolocapillary_2Units_with_shunts.F_VAi1)
        annotation (Line(points={{-83,94},{-24,94},{-24,100.18},{-17.07,100.18}},
            color={0,0,127}));
      connect(alveolocapillary_2Units_with_shunts.F_q1, Perfusion_fraction.y)
        annotation (Line(points={{-17.07,97.38},{-22,97.38},{-22,86},{-79,86}},
            color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -120},{140,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-120},{140,140}})));
    end AlvVentilation_with_2Alveoli_and_shunts_ISF_dPCO2_respirationControl;

    model
      AlvVentilation_with_2Alveoli_and_shunts_mixing_ISF_dPCO2_respirationControl
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        BEox_concentration=0,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,108},{-90,128}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-94,-62})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowMeasure flowMeasure_art annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_tissue annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-60,-60})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2_MetabolicProduction(
          useSoluteFlowInput=true, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{102,-108},{82,-88}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
        O2_MetabolicConsumption(useSoluteFlowInput=true, SoluteFlow=
            0.00018333333333333)
        annotation (Placement(transformation(extent={{82,-88},{102,-68}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{93,-38},{101,-32}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-48,72},{-40,80}})));
      inner Interfaces.ModelSettings modelSettings(PB=106657.909932)
        annotation (Placement(transformation(extent={{-120,120},{-100,140}})));
      Package.Blood_ISF_Interface venous_blood_ISF_Interface
        annotation (Placement(transformation(extent={{-46,-76},{-18,-44}})));
      Package.Blood_ISF_Interface arterial_blood_ISF_Interface annotation (
          Placement(transformation(
            extent={{-14,-16},{14,16}},
            rotation=90,
            origin={72,-24})));
      Package.ISFBuffer iSFBuffer(
        initialCO2concentration=27.296,
        initialO2concentration=0.05666,
        initialBEox=0.892,
        volume_start=0.01)
        annotation (Placement(transformation(extent={{-36,-92},{-16,-72}})));
      Physiolibrary.Types.Constants.VolumeConst volume(k=0.01)
        annotation (Placement(transformation(extent={{-54,-80},{-46,-72}})));
      Physiolibrary.Types.Constants.ConcentrationConst albumin(k=modelSettings.cAlbISF)
        annotation (Placement(transformation(extent={{-80,-88},{-72,-80}})));
      Physiolibrary.Types.Constants.ConcentrationConst Phosphate(k=
            modelSettings.cPi)
        annotation (Placement(transformation(extent={{-92,-96},{-84,-88}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=
            modelSettings.Temperature)
        annotation (Placement(transformation(extent={{-106,-104},{-98,-96}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion(Conductance=0.005)
        annotation (Placement(transformation(extent={{-10,-88},{10,-68}})));
      Physiolibrary.Chemical.Components.Diffusion diffusion1(Conductance=0.005)
        annotation (Placement(transformation(extent={{10,-108},{-10,-88}})));
      Physiolibrary.Chemical.Components.Substance O2Buffer(useNormalizedVolume=
            false, solute_start(displayUnit="mol") = 2e-11)
        annotation (Placement(transformation(extent={{18,-82},{26,-74}})));
      Physiolibrary.Chemical.Components.Substance CO2buffer(useNormalizedVolume=
           false, solute_start=1.6e-9)
        annotation (Placement(transformation(extent={{18,-102},{26,-94}})));
      Physiolibrary.Types.Constants.VolumeConst nearToZeroVolume(k=1e-9)
        annotation (Placement(transformation(extent={{2,-90},{16,-84}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueO2Concentration
        annotation (Placement(transformation(extent={{54,-60},{70,-74}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure TissueCO2Concentration
        annotation (Placement(transformation(extent={{56,-82},{72,-96}})));
      Package.ComputationpO2pCO2 computationpO2pCO2_1
        annotation (Placement(transformation(extent={{68,-62},{88,-48}})));
      Tissues.limitO2Metabolism limitO2Metabolism(limiterEnabled=true,
          metabolismFlowRate=0.00018333333333333)
        annotation (Placement(transformation(extent={{96,-66},{116,-46}})));
      Respiratory.AlveolarVentilation alveolarVentilation
        annotation (Placement(transformation(extent={{114,-26},{134,-6}})));
      Package.Alveolocapillary_2Units_with_shunts_and_mixing
        alveolocapillary_2Units_with_shunts_and_mixing
        annotation (Placement(transformation(extent={{-22,88},{12,116}})));
      Physiolibrary.Types.Constants.FractionConst VAi_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-92,90},{-84,98}})));
      Physiolibrary.Types.Constants.FractionConst Perfusion_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-88,82},{-80,90}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-90,118},{-90,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowMeasure_art.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_in, flowMeasure_tissue.bloodPort_out) annotation (
         Line(
          points={{-84.2,-62},{-76,-62},{-76,-60},{-69,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-104,-62},{-110,-62},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,118},{-109.8,118}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_tissue.bloodPort_in, venous_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{-51,-60},{-44.6,-60}},
          color={28,108,200},
          thickness=0.5));
      connect(venous_blood_ISF_Interface.bloodPort_in, muscle.bloodPort_out)
        annotation (Line(
          points={{-19.4,-60},{-10,-60},{-10,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, arterial_blood_ISF_Interface.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{68,-36},{68,-36.6},{72,-36.6}},
          color={28,108,200},
          thickness=0.5));
      connect(arterial_blood_ISF_Interface.bloodPort_in, flowMeasure_art.bloodPort_out)
        annotation (Line(
          points={{72,-11.4},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(iSFBuffer.HCO3_inflow, venous_blood_ISF_Interface.HCO3_inflow)
        annotation (Line(
          points={{-26.3636,-81.8889},{-32,-81.8889},{-32,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.CO2_inflow, venous_blood_ISF_Interface.CO2_inflow)
        annotation (Line(
          points={{-24.0909,-82},{-24.0909,-70},{-27.8,-70},{-27.8,-60}},
          color={107,45,134},
          thickness=1));
      connect(iSFBuffer.O2_inflow, venous_blood_ISF_Interface.O2_inflow)
        annotation (Line(
          points={{-21.9091,-82},{-21.9091,-68},{-23.32,-68},{-23.32,-60}},
          color={107,45,134},
          thickness=1));
      connect(temperature.y, iSFBuffer.Temp) annotation (Line(points={{-97,-100},
              {-66,-100},{-66,-88.3889},{-28.5909,-88.3889}},
                                                     color={0,0,127}));
      connect(iSFBuffer.cPi, Phosphate.y) annotation (Line(points={{-28.5455,
              -86.7778},{-68,-86.7778},{-68,-92},{-83,-92}},
                                                color={0,0,127}));
      connect(iSFBuffer.cAlb, albumin.y) annotation (Line(points={{-28.5909,
              -85.2778},{-64,-85.2778},{-64,-84},{-71,-84}},
                                                color={0,0,127}));
      connect(volume.y, iSFBuffer.volume) annotation (Line(points={{-45,-76},{
              -40,-76},{-40,-83.3889},{-28.0455,-83.3889}},
                                                   color={0,0,127}));
      connect(iSFBuffer.O2_inflow, diffusion.q_in) annotation (Line(
          points={{-21.9091,-82},{-16,-82},{-16,-78},{-10,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_out, iSFBuffer.CO2_inflow) annotation (Line(
          points={{-10,-98},{-24.0909,-98},{-24.0909,-82}},
          color={107,45,134},
          thickness=1));
      connect(diffusion.q_out, O2Buffer.q_out) annotation (Line(
          points={{10,-78},{22,-78}},
          color={107,45,134},
          thickness=1));
      connect(O2Buffer.q_out, O2_MetabolicConsumption.q_in) annotation (Line(
          points={{22,-78},{82,-78}},
          color={107,45,134},
          thickness=1));
      connect(diffusion1.q_in, CO2buffer.q_out) annotation (Line(
          points={{10,-98},{22,-98}},
          color={107,45,134},
          thickness=1));
      connect(CO2buffer.q_out, CO2_MetabolicProduction.q_out) annotation (Line(
          points={{22,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(nearToZeroVolume.y, CO2buffer.solutionVolume) annotation (Line(
            points={{17.75,-87},{20.4,-87},{20.4,-96.4}}, color={0,0,127}));
      connect(O2Buffer.solutionVolume, nearToZeroVolume.y) annotation (Line(
            points={{20.4,-76.4},{20.4,-88},{17.75,-88},{17.75,-87}},
                                                                    color={0,0,
              127}));
      connect(O2_MetabolicConsumption.q_in, TissueO2Concentration.q_in)
        annotation (Line(
          points={{82,-78},{72,-78},{72,-67},{62,-67}},
          color={107,45,134},
          thickness=1));
      connect(TissueCO2Concentration.q_in, CO2_MetabolicProduction.q_out)
        annotation (Line(
          points={{64,-89},{78,-89},{78,-98},{82,-98}},
          color={107,45,134},
          thickness=1));
      connect(TissueO2Concentration.concentration, computationpO2pCO2_1.ctO2)
        annotation (Line(points={{62,-61.4},{62,-49.1667},{69.8182,-49.1667}},
            color={0,0,127}));
      connect(computationpO2pCO2_1.ctCO2, TissueCO2Concentration.concentration)
        annotation (Line(points={{69.8182,-60.8333},{68.5,-60.8333},{68.5,-83.4},
              {64,-83.4}}, color={0,0,127}));
      connect(limitO2Metabolism.CO2FlowRate, CO2_MetabolicProduction.soluteFlow)
        annotation (Line(points={{114,-48},{124,-48},{124,-94},{88,-94}}, color=
             {0,0,127}));
      connect(O2_MetabolicConsumption.soluteFlow, limitO2Metabolism.O2FlowRate)
        annotation (Line(points={{96,-74},{118,-74},{118,-64},{114,-64}}, color=
             {0,0,127}));
      connect(arterial_blood_ISF_Interface.pH, alveolarVentilation.pHa)
        annotation (Line(points={{68,-33.8},{66,-33.8},{66,-42},{90,-42},{90,
              -17.2},{114,-17.2}}, color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pCO2, alveolarVentilation.pCO2a)
        annotation (Line(points={{68,-30.72},{64,-30.72},{64,-46},{84,-46},{84,
              -12.2},{114,-12.2}},    color={0,0,127}));
      connect(arterial_blood_ISF_Interface.pO2, alveolarVentilation.pO2a)
        annotation (Line(points={{68,-27.64},{62,-27.64},{62,-8},{114,-8}},
            color={0,0,127}));
      connect(VAi.y, alveolarVentilation.VA0) annotation (Line(points={{102,-35},
              {104,-35},{104,-22.4},{114,-22.4}}, color={0,0,127}));
      connect(computationpO2pCO2_1.pO2, limitO2Metabolism.pO2) annotation (Line(
            points={{86.1818,-56.1667},{92.0909,-56.1667},{92.0909,-56},{98,-56}},
            color={0,0,127}));
      connect(alveolocapillary_2Units_with_shunts_and_mixing.Fsh, shuntFraction.y)
        annotation (Line(points={{-10.95,91.22},{-18,91.22},{-18,76},{-39,76}},
            color={0,0,127}));
      connect(Perfusion_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing.F_q1) annotation (Line(
            points={{-79,86},{-20,86},{-20,97.38},{-17.07,97.38}}, color={0,0,
              127}));
      connect(VAi_fraction.y, alveolocapillary_2Units_with_shunts_and_mixing.F_VAi1)
        annotation (Line(points={{-83,94},{-24,94},{-24,100.18},{-17.07,100.18}},
            color={0,0,127}));
      connect(alveolocapillary_2Units_with_shunts_and_mixing.bloodPort_in,
        flowConcentrationMeasure.bloodPort_out) annotation (Line(
          points={{-10.78,110.4},{-20.39,110.4},{-20.39,110},{-31,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillary_2Units_with_shunts_and_mixing.bloodPort_out,
        flowMeasure_alv.bloodPort_in) annotation (Line(
          points={{-0.92,110.68},{5.54,110.68},{5.54,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolarVentilation.VA,
        alveolocapillary_2Units_with_shunts_and_mixing.VAi) annotation (Line(
            points={{135,-13},{136,-13},{136,132},{-24,132},{-24,105.78},{
              -15.03,105.78}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -120},{140,140}}), graphics={Text(
              extent={{-82,-80},{80,-100}},
              lineColor={175,175,175},
              textString=
                  "Circulation part of Guyton-Coleman-Granger's model from 1972")}),
                                              Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=300),
        Icon(coordinateSystem(extent={{-120,-120},{140,140}})));
    end
      AlvVentilation_with_2Alveoli_and_shunts_mixing_ISF_dPCO2_respirationControl;

    model Combination
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
        annotation (Placement(transformation(extent={{-74,120},{-54,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure1
        annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      BloodComponents.FlowMeasure flowMeasure_alv annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={20,110})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure
        annotation (Placement(transformation(extent={{-50,100},{-30,120}})));
      inner Interfaces.ModelSettings modelSettings(PB(displayUnit="Pa"),
          ISFHCO3_start=22)
        annotation (Placement(transformation(extent={{-122,120},{-102,140}})));
      Tissues.Deprecated.VeinsEquilibratedWithTissues
        veinsEquilibratedWithTissues annotation (Placement(transformation(
              rotation=0, extent={{-90,-62},{-36,-22}})));
      Acidbase.OSA.O2CO2 o2CO2
        annotation (Placement(transformation(extent={{92,-24},{136,20}})));
      Physiolibrary.Types.Constants.FractionConst VAi_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-60,90},{-52,98}})));
      Physiolibrary.Types.Constants.FractionConst Perfusion_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-42,82},{-34,90}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-36,72},{-28,80}})));
      Package.Alveolocapillary_2Units_with_shunts_and_mixing
        alveolocapillary_2Units_with_shunts_and_mixing
        annotation (Placement(transformation(extent={{-28,88},{6,116}})));
      Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0)
        annotation (Placement(transformation(extent={{146,-10},{166,10}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{133,-38},{141,-32}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(pulmonaryArteries.bloodPort_out, pulmonary.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-73,110}},
          color={28,108,200},
          thickness=0.5));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowConcentrationMeasure1.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_alv.bloodPort_out, pulmonaryVeinsAndLeftAtrium.bloodPort_in)
        annotation (Line(
          points={{29,110},{40.2,110}},
          color={28,108,200},
          thickness=0.5));
      connect(veinsEquilibratedWithTissues.bloodPort_out,
                                   largeVeins.bloodPort_in) annotation (Line(
          points={{-89.8,-36.2},{-110,-36.2},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonary.bloodPort_out, flowConcentrationMeasure.bloodPort_in)
        annotation (Line(
          points={{-55,110},{-49,110}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, flowConcentrationMeasure1.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{72,-36},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(veinsEquilibratedWithTissues.bloodPort_in,
                                  nonMuscle.bloodPort_out) annotation (Line(
          points={{-35.8,-36},{7,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, nonMuscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-36},{7,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{84,12},{98,12},{98,8.35294},{90.9,8.35294}}, color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{90.9,5.76471},{98.45,5.76471},{98.45,4},{84,4}}, color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{90.9,3.17647},{90.9,-4},{84,-4}}, color={0,0,127}));
      connect(Perfusion_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing.F_q1) annotation (Line(
            points={{-33,86},{-26,86},{-26,97.38},{-23.07,97.38}}, color={0,0,
              127}));
      connect(VAi_fraction.y,alveolocapillary_2Units_with_shunts_and_mixing. F_VAi1)
        annotation (Line(points={{-51,94},{-30,94},{-30,100.18},{-23.07,100.18}},
            color={0,0,127}));
      connect(alveolocapillary_2Units_with_shunts_and_mixing.Fsh,shuntFraction. y)
        annotation (Line(points={{-16.95,91.22},{-24,91.22},{-24,76},{-27,76}},
            color={0,0,127}));
      connect(alveolarVentilation.VA,
        alveolocapillary_2Units_with_shunts_and_mixing.VAi) annotation (Line(
            points={{167,3},{168,3},{168,134},{-22,134},{-22,105.78},{-21.03,
              105.78}},        color={0,0,127}));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{142,-35},
              {144,-35},{144,-6.4},{146,-6.4}},   color={0,0,127}));
      connect(flowConcentrationMeasure.bloodPort_out,
        alveolocapillary_2Units_with_shunts_and_mixing.bloodPort_in)
        annotation (Line(
          points={{-31,110},{-24,110},{-24,110.4},{-16.78,110.4}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillary_2Units_with_shunts_and_mixing.bloodPort_out,
        flowMeasure_alv.bloodPort_in) annotation (Line(
          points={{-6.92,110.68},{2.54,110.68},{2.54,110},{11,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{
              146,8},{142,8},{142,7.31765},{137.1,7.31765}}, color={0,0,127}));
      connect(o2CO2.pCO2, alveolarVentilation.pCO2a) annotation (Line(points={{
              137.1,4.72941},{141.55,4.72941},{141.55,3.8},{146,3.8}}, color={0,
              0,127}));
      connect(o2CO2.pH, alveolarVentilation.pHa) annotation (Line(points={{
              137.1,1.62353},{141.55,1.62353},{141.55,-1.2},{146,-1.2}}, color=
              {0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{160,140}})),            Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{160,140}})));
    end Combination;

    model Combination_alvVentDirect
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
      BloodComponents.BloodElasticVesselCompliance pulmonaryArteries(
        ZeroPressureVolume(displayUnit="l") = 0.00030625,
        volume_start(displayUnit="l") = 0.00038,
        Compliance(displayUnit="l/mmHg") = 3.6002955640592e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-102,100},{-82,120}})));
      BloodComponents.BloodElasticVesselCompliance pulmonaryVeinsAndLeftAtrium(
        volume_start(displayUnit="l") = 0.0004,
        ZeroPressureVolume(displayUnit="l") = 0.0004,
        Compliance(displayUnit="l/mmHg") = 7.5006157584566e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053)
        annotation (Placement(transformation(extent={{40,100},{60,120}})));
      BloodComponents.BloodConductor pulmonary(Conductance(displayUnit=
              "l/(mmHg.min)") = 4.1665920538226e-8, useConductanceInput=false)
        annotation (Placement(transformation(extent={{6,120},{26,100}})));
      BloodComponents.BloodElasticVesselCompliance arteries(
        volume_start(displayUnit="l") = 0.00085,
        ZeroPressureVolume(displayUnit="l") = 0.000495,
        Compliance(displayUnit="l/mmHg") = 2.6627185942521e-8,
        O2_concentration=8.29769,
        CO2_concentration=21.6053) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={54,-36})));
      BloodComponents.BloodConductor nonMuscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 3.5627924852669e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-36})));
      BloodComponents.Pump rightHeart
        annotation (Placement(transformation(extent={{-52,8},{-32,28}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst RNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-56,40},{-48,48}})));
      BloodComponents.Pump leftHeart
        annotation (Placement(transformation(extent={{16,6},{36,26}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst LNormalCO(k(displayUnit="l/min")=
             8.3333333333333e-05)
        annotation (Placement(transformation(extent={{12,42},{20,50}})));
      BloodComponents.BloodConductor kidney(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.4126159678427e-09) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-54})));
      BloodComponents.BloodConductor muscle(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.3001067314658e-9) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={16,-18})));
      BloodComponents.BloodConductor largeVeins(Conductance(displayUnit=
              "l/(mmHg.min)") = 1.6888886482791e-07) annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-110,-10})));
      BloodComponents.BloodElasticVesselCompliance rightAtrium(
        volume_start(displayUnit="l") = 0.0001,
        ZeroPressureVolume(displayUnit="l") = 0.0001,
        Compliance(displayUnit="l/mmHg") = 3.7503078792283e-8,
        O2_concentration=6.02579,
        CO2_concentration=23.6461)
        annotation (Placement(transformation(extent={{-110,12},{-90,32}})));
      Physiolibrary.Blocks.Factors.Spline rightStarling(data={{-6,0,0},{-3,0.15,0.104},
            {-1,0.52,0.48},{2,1.96,0.48},{4,2.42,0.123},{8,2.7,0}}, Xscale=101325/760)
        "At filling pressure 0mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{-50,22},{-30,42}})));
      Physiolibrary.Blocks.Factors.Spline leftStarling(data={{-4,0,0},{-1,0.72,0.29},
            {0,1.01,0.29},{3,1.88,0.218333},{10,2.7,0}}, Xscale=101325/760)
        "At filling pressure -0.0029mmHg (because external thorax pressure is -4mmHg) is normal cardiac output (effect=1)."
        annotation (Placement(transformation(extent={{36,22},{16,42}})));
      BloodComponents.PressureMeasure pressureMeasure1
        annotation (Placement(transformation(extent={{60,58},{80,78}})));
      BloodComponents.PressureMeasure pressureMeasure2
        annotation (Placement(transformation(extent={{-90,44},{-76,58}})));
      BloodComponents.FlowConcentrationMeasure flowConcentrationMeasure1
        annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=270,
            origin={72,4})));
      BloodComponents.FlowMeasure flowMeasure_ven annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-68,18})));
      inner Interfaces.ModelSettings modelSettings(PB(displayUnit="Pa"),
          ISFHCO3_start=22)
        annotation (Placement(transformation(extent={{-122,120},{-102,140}})));
      Acidbase.OSA.O2CO2 o2CO2
        annotation (Placement(transformation(extent={{92,-24},{136,20}})));
      Physiolibrary.Types.Constants.FractionConst VAi_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-60,90},{-52,98}})));
      Physiolibrary.Types.Constants.FractionConst Perfusion_fraction(k=0.5)
        annotation (Placement(transformation(extent={{-42,82},{-34,90}})));
      Physiolibrary.Types.Constants.FractionConst shuntFraction(k=0.02)
        annotation (Placement(transformation(extent={{-36,72},{-28,80}})));
      Package.Alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors
        annotation (Placement(transformation(extent={{-28,88},{6,116}})));
      Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0)
        annotation (Placement(transformation(extent={{146,-10},{166,10}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
              "ml/min") = 8.19588e-5)
        annotation (Placement(transformation(extent={{133,-38},{141,-32}})));
      BloodComponents.BloodElasticVesselCompliance veins(
        volume_start(displayUnit="l") = 0.00325,
        ZeroPressureVolume(displayUnit="l") = 0.00295,
        Compliance(displayUnit="l/mmHg") = 6.1880080007267e-7,
        O2_concentration=6.02579,
        CO2_concentration=23.6461,
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true) annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=180,
            origin={-62,-36})), __Dymola_choicesAllMatching=true);
      Tissues.TissuesOld tissues annotation (Placement(transformation(rotation=
                0, extent={{-40,-80},{18,-56}})));
    equation
      connect(RNormalCO.y, rightStarling.yBase) annotation (Line(
          points={{-47,44},{-40,44},{-40,34}},
          color={0,0,127}));
      connect(LNormalCO.y, leftStarling.yBase) annotation (Line(
          points={{21,46},{26,46},{26,34}},
          color={0,0,127}));
      connect(leftStarling.y,leftHeart.volumeFlowRate)
        annotation (Line(points={{26,28},{26,20}}, color={0,0,127}));
      connect(rightStarling.y,rightHeart.volumeFlowRate)
        annotation (Line(points={{-40,28},{-40,26},{-42,26},{-42,22}},
                                                     color={0,0,127}));
      connect(arteries.bloodPort_out, muscle.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-18},{25,-18}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, nonMuscle.bloodPort_in) annotation (Line(
          points={{44,-36},{25,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(arteries.bloodPort_out, kidney.bloodPort_in) annotation (Line(
          points={{44,-36},{34,-36},{34,-54},{25,-54}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_out, pressureMeasure1.bloodPort_in)
        annotation (Line(
          points={{60,110},{60,61},{65.1,61}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.bloodPort_out, leftHeart.bloodPort_in)
        annotation (Line(
          points={{78.6,60.9},{78.6,54},{4,54},{4,16},{17,16}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure1.pressure, leftStarling.u) annotation (Line(
            points={{75.8,65.2},{84,65.2},{84,32},{34,32}}, color={0,0,127}));
      connect(nonMuscle.bloodPort_out, muscle.bloodPort_out) annotation (Line(
          points={{7,-36},{-8,-36},{-8,-18},{7,-18}},
          color={28,108,200},
          thickness=0.5));

      connect(leftHeart.bloodPort_out, flowConcentrationMeasure1.bloodPort_in)
        annotation (Line(
          points={{35,16},{72,16},{72,13}},
          color={28,108,200},
          thickness=0.5));
      connect(largeVeins.bloodPort_out, rightAtrium.bloodPort_in) annotation (
          Line(
          points={{-110,-1},{-110,22},{-109.8,22}},
          color={28,108,200},
          thickness=0.5));
      connect(rightAtrium.bloodPort_out, pressureMeasure2.bloodPort_in)
        annotation (Line(
          points={{-90,22},{-88,22},{-88,46.1},{-86.43,46.1}},
          color={28,108,200},
          thickness=0.5));
      connect(flowMeasure_ven.bloodPort_in, pressureMeasure2.bloodPort_out)
        annotation (Line(
          points={{-77,18},{-80,18},{-80,46.03},{-76.98,46.03}},
          color={28,108,200},
          thickness=0.5));
      connect(pressureMeasure2.pressure, rightStarling.u) annotation (Line(
            points={{-78.94,49.04},{-66,49.04},{-66,32},{-48,32}}, color={0,0,
              127}));
      connect(rightHeart.bloodPort_out, pulmonaryArteries.bloodPort_in)
        annotation (Line(
          points={{-33,18},{-20,18},{-20,62},{-110,62},{-110,110},{-101.8,110}},
          color={28,108,200},
          thickness=0.5));

      connect(flowMeasure_ven.bloodPort_out, rightHeart.bloodPort_in)
        annotation (Line(
          points={{-59,18},{-51,18}},
          color={28,108,200},
          thickness=0.5));

      connect(arteries.bloodPort_in, flowConcentrationMeasure1.bloodPort_out)
        annotation (Line(
          points={{63.8,-36},{72,-36},{72,-5}},
          color={28,108,200},
          thickness=0.5));
      connect(kidney.bloodPort_out, nonMuscle.bloodPort_out) annotation (Line(
          points={{7,-54},{-8,-54},{-8,-36},{7,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{84,12},{98,12},{98,8.35294},{90.9,8.35294}}, color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{90.9,5.76471},{98.45,5.76471},{98.45,4},{84,4}}, color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{90.9,3.17647},{90.9,-4},{84,-4}}, color={0,0,127}));
      connect(Perfusion_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_q1)
        annotation (Line(points={{-33,86},{-26,86},{-26,97.38},{-23.07,97.38}},
            color={0,0,127}));
      connect(VAi_fraction.y,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.F_VAi1)
        annotation (Line(points={{-51,94},{-30,94},{-30,100.18},{-23.07,100.18}},
            color={0,0,127}));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.Fsh,
        shuntFraction.y) annotation (Line(points={{-16.95,91.22},{-24,91.22},{-24,
              76},{-27,76}}, color={0,0,127}));
      connect(alveolarVentilation.VA,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.VAi)
        annotation (Line(points={{167,3},{168,3},{168,134},{-22,134},{-22,
              105.78},{-21.03,105.78}}, color={0,0,127}));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{142,-35},
              {144,-35},{144,-6.4},{146,-6.4}},   color={0,0,127}));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{
              146,8},{142,8},{142,7.31765},{137.1,7.31765}}, color={0,0,127}));
      connect(o2CO2.pCO2, alveolarVentilation.pCO2a) annotation (Line(points={{
              137.1,4.72941},{141.55,4.72941},{141.55,3.8},{146,3.8}}, color={0,
              0,127}));
      connect(o2CO2.pH, alveolarVentilation.pHa) annotation (Line(points={{
              137.1,1.62353},{141.55,1.62353},{141.55,-1.2},{146,-1.2}}, color=
              {0,0,127}));
      connect(pulmonaryVeinsAndLeftAtrium.bloodPort_in, pulmonary.bloodPort_out)
        annotation (Line(
          points={{40.2,110},{25,110}},
          color={28,108,200},
          thickness=0.5));
      connect(alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_out,
        pulmonary.bloodPort_in) annotation (Line(
          points={{-6.92,110.68},{0,110.68},{0,110},{7,110}},
          color={28,108,200},
          thickness=0.5));
      connect(pulmonaryArteries.bloodPort_out,
        alveolocapillary_2Units_with_shunts_and_mixing_direct_connectors.bloodPort_in)
        annotation (Line(
          points={{-82,110},{-50,110},{-50,110.4},{-16.78,110.4}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.port_O2,tissues. tO2) annotation (Line(
          points={{-56.2,-45.8},{-56,-45.8},{-56,-58.4},{-40,-58.4}},
          color={107,45,134},
          thickness=1));
      connect(tissues.tCO2,veins. port_CO2) annotation (Line(
          points={{-40,-63.2},{-59.8,-63.2},{-59.8,-45.8}},
          color={107,45,134},
          thickness=1));
      connect(tissues.BE,veins. port_BEox) annotation (Line(
          points={{-40,-68},{-64,-68},{-64,-45.8}},
          color={107,45,134},
          thickness=1));
      connect(veins.bloodPort_in, nonMuscle.bloodPort_out) annotation (Line(
          points={{-52.2,-36},{7,-36}},
          color={28,108,200},
          thickness=0.5));
      connect(veins.bloodPort_out, largeVeins.bloodPort_in) annotation (Line(
          points={{-72,-36},{-110,-36},{-110,-19}},
          color={28,108,200},
          thickness=0.5));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{160,140}})),            Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{160,140}})));
    end Combination_alvVentDirect;
  end Test;

  package Trash

    model BloodConductor_error
      extends Physiolibrary.Icons.HydraulicResistor;

       parameter Boolean useConductanceInput = false
        "=true, if external conductance value is used";

       parameter Physiolibrary.Types.HydraulicConductance bloodConductance=0
        "Hydraulic conductance if useConductanceInput=false";

      Interfaces.BloodPort_in bloodPort_a(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-104,-10},{-84,10}}),
            iconTransformation(extent={{-100,-10},{-80,10}})));
      Interfaces.BloodPort_out bloodPort_b(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{80,-10},{100,10}}),
            iconTransformation(extent={{80,-10},{100,10}})));
      Physiolibrary.Hydraulic.Components.Conductor conductor(cond=bloodConductance,
          useConductanceInput=true)
        annotation (Placement(transformation(extent={{-10,-3},{10,17}})));
      Interfaces.BloodPort_in_Extension bloodPort_a_Extension
        annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
      Interfaces.BloodPort_out_Extension bloodPort_b_Extension
        annotation (Placement(transformation(extent={{50,-10},{70,10}})));
      Physiolibrary.Types.RealIO.HydraulicConductanceInput
                                             cond(start=bloodConductance)=conductor.cond if useConductanceInput
                                                       annotation (Placement(
            transformation(extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,60}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,60})));
    equation
      connect(bloodPort_b, bloodPort_b_Extension.bloodPort_out) annotation (
          Line(
          points={{90,0},{69,0},{69,0}},
          color={28,108,200},
          thickness=0.5));
      connect(conductor.q_out, bloodPort_b_Extension.bloodFlow) annotation (
          Line(
          points={{10,7},{51,7},{51,3.4}},
          color={0,0,0},
          thickness=1));
      connect(conductor.q_in, bloodPort_a_Extension.bloodFlow) annotation (Line(
          points={{-10,7},{-51,7},{-51,4}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_a, bloodPort_a_Extension.bloodPort_in) annotation (Line(
          points={{-94,0},{-69,0},{-69,0}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_a_Extension.O2, bloodPort_b_Extension.O2) annotation (
          Line(
          points={{-51,0},{-34,0},{-34,-10},{38,-10},{38,-1},{51,-1}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.CO2, bloodPort_b_Extension.CO2) annotation (
         Line(
          points={{-51,-4.4},{-38,-4.4},{-38,-12},{40,-12},{40,-4.8},{51,-4.8}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.BEox, bloodPort_b_Extension.BEox)
        annotation (Line(
          points={{-51,-8},{-40,-8},{-40,-14},{42,-14},{42,-8.6},{51,-8.6}},
          color={107,45,134},
          thickness=1));

      connect(conductor.cond, cond)
        annotation (Line(points={{0,13},{0,60}},        color={0,0,127}));
        annotation (Line(points={{0,60},{0,13}},        color={0,0,127}),
                  Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}),
                       graphics={Text(
              extent={{-220,-40},{200,-80}},
              lineColor={0,0,255},
              fillColor={58,117,175},
              fillPattern=FillPattern.Solid,
              textString="%name")}),
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"));
    end BloodConductor_error;

    model BloodElasticVesselElastance
      extends Physiolibrary.Icons.ElasticBalloon;
      parameter Physiolibrary.Types.Volume BloodZeroPressureVolume;
      parameter Physiolibrary.Types.Pressure BloodExternalPressure;
      parameter Physiolibrary.Types.HydraulicElastance BloodElastance;
      parameter Physiolibrary.Types.Volume Blood_volume_start;
     // parameter Physiolibrary.Types.Concentration O2_startConcentration;
     // parameter Physiolibrary.Types.Concentration CO2_startConcentration;
     // parameter Physiolibrary.Types.Concentration BEox_startConcentration;

      parameter Physiolibrary.Types.AmountOfSubstance O2_solute_start;//=Blood_volume_start* O2_startConcentration;
      parameter Physiolibrary.Types.AmountOfSubstance CO2_solute_start;//=Blood_volume_start* CO2_startConcentration;
      parameter Physiolibrary.Types.AmountOfSubstance BEox_solute_start;//=Blood_volume_start* BEox_startConcentration;

      Interfaces.BloodPort_in bloodPort_a(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-104,-10},{-84,10}}),
            iconTransformation(extent={{-12,-8},{8,12}})));
      Interfaces.BloodPort_in_Extension bloodPort_a_Extension
        annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));
      Physiolibrary.Types.RealIO.HydraulicComplianceInput
                          BloodCompliance(start=1/BloodElastance) = 1/BloodElastance if useComplianceInput
                                                            annotation (Placement(
            transformation(extent={{-20,-20},{20,20}},
            rotation=270,
            origin={4,80}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,80})));
        parameter Boolean useComplianceInput = false
        "=true, if external pressure input is used"
        annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));
      Physiolibrary.Hydraulic.Components.ElasticVesselElastance
        elasticVesselElastance( ZeroPressureVolume=
            BloodZeroPressureVolume,
        ExternalPressure=BloodExternalPressure,
        volume_start=Blood_volume_start,
        useComplianceInput=false)
        annotation (Placement(transformation(extent={{52,-6},{72,14}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=O2_solute_start)
        annotation (Placement(transformation(extent={{62,-36},{82,-16}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=CO2_solute_start)
        annotation (Placement(transformation(extent={{48,-60},{68,-40}})));
      Physiolibrary.Chemical.Components.Substance BEox(useNormalizedVolume=false,
          solute_start=BEox_solute_start)
        annotation (Placement(transformation(extent={{40,-84},{60,-64}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{-24,15},{-2,-7}})));
      Physiolibrary.Chemical.Components.Stream O2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-18,-36},{2,-16}})));
      Physiolibrary.Chemical.Components.Stream CO2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-2,-60},{18,-40}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{14,-84},{34,-64}})));
    equation

      connect(bloodPort_a, bloodPort_a_Extension.bloodPort_in) annotation (Line(
          points={{-94,0},{-69,0},{-69,0}},
          color={28,108,200},
          thickness=0.5));
      connect(elasticVesselElastance.volume, O2.solutionVolume)
        annotation (Line(points={{68,-6},{68,-14},{68,-22}},color={0,0,127}));
      connect(CO2.solutionVolume, O2.solutionVolume) annotation (Line(points={{54,-46},
              {54,-10},{68,-10},{68,-22}},color={0,0,127}));
      connect(BEox.solutionVolume, O2.solutionVolume) annotation (Line(points={{46,-70},
              {46,-34},{46,-10},{68,-10},{68,-22}},              color={0,0,127}));
      connect(bloodPort_a_Extension.bloodFlow, flowMeasure.q_in) annotation (Line(
          points={{-51,4},{-37.5,4},{-24,4}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure.q_out, elasticVesselElastance.q_in) annotation (Line(
          points={{-2,4},{62,4}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_a_Extension.O2, O2flow.q_in) annotation (Line(
          points={{-51,0},{-42,0},{-32,0},{-32,-26},{-18,-26}},
          color={107,45,134},
          thickness=1));
      connect(O2flow.q_out, O2.q_out) annotation (Line(
          points={{2,-26},{2,-26},{72,-26}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.CO2, CO2flow.q_in) annotation (Line(
          points={{-51,-4.4},{-34,-4.4},{-34,-50},{-2,-50}},
          color={107,45,134},
          thickness=1));
      connect(CO2flow.q_out, CO2.q_out) annotation (Line(
          points={{18,-50},{18,-50},{58,-50}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_out, BEox.q_out) annotation (Line(
          points={{34,-74},{50,-74}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_in, bloodPort_a_Extension.BEox) annotation (Line(
          points={{14,-74},{-40,-74},{-40,-8},{-51,-8}},
          color={107,45,134},
          thickness=1));
      connect(flowMeasure.volumeFlow, O2flow.solutionFlow) annotation (Line(points={
              {-13,-9.2},{-13,-14},{-8,-14},{-8,-19}}, color={0,0,127}));
      connect(CO2flow.solutionFlow, O2flow.solutionFlow) annotation (Line(points={{8,
              -43},{8,-16},{-8,-16},{-8,-19}}, color={0,0,127}));
      connect(BEoxflow.solutionFlow, O2flow.solutionFlow) annotation (Line(points={{
              24,-67},{24,-40},{8,-40},{8,-16},{-8,-16},{-8,-19}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={
                                      Text(
              extent={{-318,-140},{160,-100}},
              textString="%name",
              lineColor={0,0,255})}),
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"));
    end BloodElasticVesselElastance;

    model BloodElasticVesselComplianceInput
      extends BloodComponents.BloodElasticVesselElastance;

      Physiolibrary.Types.RealIO.HydraulicComplianceInput Compl annotation (
          Placement(transformation(extent={{-88,66},{-48,106}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-6,114})));
    equation

            annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"),
                  Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={
                                      Text(
              extent={{-318,-140},{160,-100}},
              textString="%name",
              lineColor={0,0,255})}),
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"));
    end BloodElasticVesselComplianceInput;

    model BloodElasticVesselElastanceParam
      extends Physiolibrary.Icons.ElasticBalloon;
      parameter Physiolibrary.Types.Volume BloodZeroPressureVolume;
      parameter Physiolibrary.Types.Pressure BloodExternalPressure;
      parameter Physiolibrary.Types.HydraulicElastance BloodElastance;
      parameter Physiolibrary.Types.Volume Blood_volume_start;
     // parameter Physiolibrary.Types.Concentration O2_startConcentration;
     // parameter Physiolibrary.Types.Concentration CO2_startConcentration;
     // parameter Physiolibrary.Types.Concentration BEox_startConcentration;

      parameter Physiolibrary.Types.AmountOfSubstance O2_solute_start;//=Blood_volume_start* O2_startConcentration;
      parameter Physiolibrary.Types.AmountOfSubstance CO2_solute_start;//=Blood_volume_start* CO2_startConcentration;
      parameter Physiolibrary.Types.AmountOfSubstance BEox_solute_start;//=Blood_volume_start* BEox_startConcentration;

      Interfaces.BloodPort_in bloodPort_a(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-104,-10},{-84,10}}),
            iconTransformation(extent={{-12,-8},{8,12}})));
      Interfaces.BloodPort_in_Extension bloodPort_a_Extension
        annotation (Placement(transformation(extent={{-70,-10},{-50,10}})));

      Physiolibrary.Hydraulic.Components.ElasticVesselElastance
        elasticVesselElastance( ZeroPressureVolume=
            BloodZeroPressureVolume,
        ExternalPressure=BloodExternalPressure,
        volume_start=Blood_volume_start,
        useComplianceInput=false)
        annotation (Placement(transformation(extent={{52,-6},{72,14}})));
      Physiolibrary.Chemical.Components.Substance O2(useNormalizedVolume=false,
          solute_start=O2_solute_start)
        annotation (Placement(transformation(extent={{62,-36},{82,-16}})));
      Physiolibrary.Chemical.Components.Substance CO2(useNormalizedVolume=false,
          solute_start=CO2_solute_start)
        annotation (Placement(transformation(extent={{48,-60},{68,-40}})));
      Physiolibrary.Chemical.Components.Substance BEox(useNormalizedVolume=false,
          solute_start=BEox_solute_start)
        annotation (Placement(transformation(extent={{40,-84},{60,-64}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{-24,15},{-2,-7}})));
      Physiolibrary.Chemical.Components.Stream O2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-18,-36},{2,-16}})));
      Physiolibrary.Chemical.Components.Stream CO2flow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-2,-60},{18,-40}})));
      Physiolibrary.Chemical.Components.Stream BEoxflow(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{14,-84},{34,-64}})));
    equation

      connect(bloodPort_a, bloodPort_a_Extension.bloodPort_in) annotation (Line(
          points={{-94,0},{-69,0},{-69,0}},
          color={28,108,200},
          thickness=0.5));
      connect(elasticVesselElastance.volume, O2.solutionVolume)
        annotation (Line(points={{68,-6},{68,-14},{68,-22}},color={0,0,127}));
      connect(CO2.solutionVolume, O2.solutionVolume) annotation (Line(points={{54,-46},
              {54,-10},{68,-10},{68,-22}},color={0,0,127}));
      connect(BEox.solutionVolume, O2.solutionVolume) annotation (Line(points={{46,-70},
              {46,-34},{46,-10},{68,-10},{68,-22}},              color={0,0,127}));
      connect(bloodPort_a_Extension.bloodFlow, flowMeasure.q_in) annotation (Line(
          points={{-51,4},{-37.5,4},{-24,4}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure.q_out, elasticVesselElastance.q_in) annotation (Line(
          points={{-2,4},{62,4}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_a_Extension.O2, O2flow.q_in) annotation (Line(
          points={{-51,0},{-42,0},{-32,0},{-32,-26},{-18,-26}},
          color={107,45,134},
          thickness=1));
      connect(O2flow.q_out, O2.q_out) annotation (Line(
          points={{2,-26},{2,-26},{72,-26}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_a_Extension.CO2, CO2flow.q_in) annotation (Line(
          points={{-51,-4.4},{-34,-4.4},{-34,-50},{-2,-50}},
          color={107,45,134},
          thickness=1));
      connect(CO2flow.q_out, CO2.q_out) annotation (Line(
          points={{18,-50},{18,-50},{58,-50}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_out, BEox.q_out) annotation (Line(
          points={{34,-74},{50,-74}},
          color={107,45,134},
          thickness=1));
      connect(BEoxflow.q_in, bloodPort_a_Extension.BEox) annotation (Line(
          points={{14,-74},{-40,-74},{-40,-8},{-51,-8}},
          color={107,45,134},
          thickness=1));
      connect(flowMeasure.volumeFlow, O2flow.solutionFlow) annotation (Line(points={
              {-13,-9.2},{-13,-14},{-8,-14},{-8,-19}}, color={0,0,127}));
      connect(CO2flow.solutionFlow, O2flow.solutionFlow) annotation (Line(points={{8,
              -43},{8,-16},{-8,-16},{-8,-19}}, color={0,0,127}));
      connect(BEoxflow.solutionFlow, O2flow.solutionFlow) annotation (Line(points={{
              24,-67},{24,-40},{8,-40},{8,-16},{-8,-16},{-8,-19}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={
                                      Text(
              extent={{-318,-140},{160,-100}},
              textString="%name",
              lineColor={0,0,255})}),
        Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>", info="<html>
<p>This hydraulic conductance (resistance) element contains two connector sides. No hydraulic medium volume is changing in this element during simulation. That means that sum of flow in both connector sides is zero. The flow through element is determined by <b>Ohm&apos;s law</b>. It is used conductance (=1/resistance) because it could be numerical zero better then infinity in resistance. </p>
</html>"));
    end BloodElasticVesselElastanceParam;

    model BloodConjunction_
      parameter Integer numberOfFlows;
      Interfaces.BloodPort_in bloodPort_in[numberOfFlows] annotation (Placement(
            transformation(extent={{84,-8},{104,12}}), iconTransformation(
              extent={{80,-10},{100,10}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{-106,-10},{-86,10}}), iconTransformation(
              extent={{-100,-10},{-80,10}})));

     Integer jsubstance;

    equation
     bloodPort_out.bloodFlow+sum(bloodPort_in.bloodFlow)=0;
     for jsubstance in 1:bloodPort_out.numberOfSubstances loop
           bloodPort_out.q[jsubstance]+sum(bloodPort_in[i].q[jsubstance] for i in 1:numberOfFlows)=0;
           bloodPort_out.conc[jsubstance]=bloodPort_out[jsubstance].q/(bloodPort_out.bloodFlow);
      end for;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(points={{58,0},{-60,0}}, color={0,0,0}),
            Line(
              points={{-80,0},{80,0}},
              color={191,0,0},
              thickness=0.5),
            Polygon(
              points={{-20,-20},{-20,20},{20,0},{-20,-20}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid,
              origin={60,0},
              rotation=180),
            Line(
              points={{-80,0},{40,60}},
              color={191,0,0},
              thickness=0.5),
            Line(
              points={{-80,0},{40,-60}},
              color={191,0,0},
              thickness=0.5),
            Polygon(
              points={{-20,-20},{-20,20},{20,0},{-20,-20}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid,
              origin={60,60},
              rotation=180),
            Polygon(
              points={{-20,-20},{-20,20},{20,0},{-20,-20}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid,
              origin={60,-60},
              rotation=180)}), Diagram(coordinateSystem(preserveAspectRatio=false)));
    end BloodConjunction_;

    model junction_T_old
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
      Interfaces.BloodPort_in bloodPort_a(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-108,-10},{-88,10}}),
            iconTransformation(extent={{-108,-10},{-88,10}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{60,-10},{80,10}})));
      Interfaces.BloodPort_out bloodPort_b(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{90,-10},{110,10}}),
            iconTransformation(extent={{90,-10},{110,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_O2 annotation (
          Placement(transformation(extent={{-30,70},{-10,90}}),
            iconTransformation(extent={{10,90},{30,110}})));
    equation
      connect(bloodPort_a, bloodPort_in_Extension.bloodPort_in) annotation (
          Line(
          points={{-98,0},{-80,0}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_out_Extension.bloodPort_out, bloodPort_b) annotation (
          Line(
          points={{80,0},{100,0}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.bloodFlow, bloodPort_out_Extension.bloodFlow)
        annotation (Line(
          points={{-60,10},{60,10}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_in_Extension.O2, bloodPort_out_Extension.O2)
        annotation (Line(
          points={{-60,0},{60,0}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.CO2, bloodPort_out_Extension.CO2)
        annotation (Line(
          points={{-60,-4.2},{12,-4.2},{12,-4},{60,-4}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_in_Extension.BEox, bloodPort_out_Extension.BEox)
        annotation (Line(
          points={{-60,-8},{60,-8}},
          color={107,45,134},
          thickness=1));
      connect(port_O2, bloodPort_out_Extension.O2) annotation (Line(
          points={{-20,80},{-20,0},{60,0}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(
              points={{-86,0},{88,0}},
              color={0,0,0},
              thickness=0.5),
            Line(
              points={{-40,88},{-40,0},{-40,0}},
              color={0,0,0},
              thickness=0.5),
            Line(
              points={{20,90},{20,0}},
              color={0,0,0},
              thickness=0.5),
            Line(
              points={{60,90},{60,0}},
              color={0,0,0},
              thickness=0.5),
            Line(
              points={{100,90},{100,2}},
              color={0,0,0},
              thickness=0.5)}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end junction_T_old;

    model BloodEmbranchment
      parameter Integer numberOfFlows;
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{84,-8},{104,12}}), iconTransformation(extent={{80,-10},{
                100,10}})));
      Interfaces.BloodPort_out bloodPort_out[numberOfFlows] annotation (
          Placement(transformation(extent={{-106,-10},{-86,10}}),
            iconTransformation(extent={{-100,-10},{-80,10}})));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(points={{58,0},{-60,0}}, color={0,0,0}),
            Polygon(
              points={{-20,-20},{-20,20},{20,0},{-20,-20}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid,
              origin={-60,0},
              rotation=180),
            Line(
              points={{-72,0},{84,0}},
              color={191,0,0},
              thickness=0.5),
            Polygon(
              points={{-20,-20},{-20,20},{20,0},{-20,-20}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid,
              origin={-60,60},
              rotation=180),
            Polygon(
              points={{-20,-20},{-20,20},{20,0},{-20,-20}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid,
              origin={-60,-60},
              rotation=180),
            Line(
              points={{-40,60},{80,10}},
              color={191,0,0},
              thickness=0.5),
            Line(
              points={{-40,-56},{80,-10}},
              color={191,0,0},
              thickness=0.5)}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodEmbranchment;

    model BloodConjunction
      parameter Integer numberOfFlows;
      Interfaces.BloodPort_in bloodPort_in[numberOfFlows] annotation (Placement(
            transformation(extent={{84,-8},{104,12}}), iconTransformation(
              extent={{80,-10},{100,10}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{-106,-10},{-86,10}}), iconTransformation(
              extent={{-100,-10},{-80,10}})));

      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(points={{58,0},{-60,0}}, color={0,0,0}),
            Line(
              points={{-80,0},{80,0}},
              color={191,0,0},
              thickness=0.5),
            Polygon(
              points={{-20,-20},{-20,20},{20,0},{-20,-20}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid,
              origin={60,0},
              rotation=180),
            Line(
              points={{-80,0},{40,60}},
              color={191,0,0},
              thickness=0.5),
            Line(
              points={{-80,0},{40,-60}},
              color={191,0,0},
              thickness=0.5),
            Polygon(
              points={{-20,-20},{-20,20},{20,0},{-20,-20}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid,
              origin={60,60},
              rotation=180),
            Polygon(
              points={{-20,-20},{-20,20},{20,0},{-20,-20}},
              lineColor={191,0,0},
              fillColor={191,0,0},
              fillPattern=FillPattern.Solid,
              origin={60,-60},
              rotation=180)}), Diagram(coordinateSystem(preserveAspectRatio=false)));
    end BloodConjunction;

    model BloodSplitting_2
      parameter Integer splitFraction;
      //constant Integer numberOfFlows=2;
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{68,-10},{88,10}}), iconTransformation(extent={{80,-10},{
                100,10}})));
      Interfaces.BloodPort_out bloodPort_out[2] annotation (Placement(
            transformation(extent={{-98,-10},{-78,10}}), iconTransformation(
              extent={{-100,-10},{-80,10}})));

      BloodComponents.Pump pump2 annotation (Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={2,0})));

      BloodComponents.Pump pump1 annotation (Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={0,26})));
      Integer i;
    equation

      pump1.volumeFlowRate=bloodPort_in.bloodFlow*(1-splitFraction);
      pump2.volumeFlowRate=bloodPort_in.bloodFlow*splitFraction;

      connect(pump1.bloodPort_in, bloodPort_in);
      connect(pump2.bloodPort_in, bloodPort_in);
      connect(bloodPort_out[1], pump1.bloodPort_out);
      connect(bloodPort_out[2],pump2.bloodPort_out);

       annotation (Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={-2,20})),
                    Icon(coordinateSystem(preserveAspectRatio=false)),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodSplitting_2;

    model AlveolocapillaryUnit_old
      extends Icons.Alveolus;

      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{84,-84},{104,-64}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={-13,101})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{84,-64},{104,-44}}), iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=90,
            origin={15,101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation(Placement(transformation(extent={{-76,-50},
                {-64,-38}}),                                                                                                    iconTransformation(extent={{-13,-13},
                {13,13}},                                                                                                    rotation = 0, origin={-77,-7})));
      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-106,66},{-86,86}}), iconTransformation(extent={{-44,50},
                {-24,70}})));
      Interfaces.BloodPort_out bloodPort_out annotation (Placement(
            transformation(extent={{86,64},{106,84}}), iconTransformation(
              extent={{14,52},{34,72}})));
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-72,60},{-42,92}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{32,60},{68,92}})));
      Physiolibrary.Types.Constants.PressureConst PB(k=101325.0144354)
        annotation (Placement(transformation(extent={{-95,-28},{-87,-22}})));
      Physiolibrary.Types.Constants.FractionConst FiO2(k=0.21)
        annotation (Placement(transformation(extent={{-79,-34},{-71,-28}})));
      Physiolibrary.Types.Constants.FractionConst FiCO2(k=0.0004)
        annotation (Placement(transformation(extent={{-95,-42},{-87,-36}})));
      Physiolibrary.Types.Constants.ConcentrationConst cAlb(k=0.66)
        annotation (Placement(transformation(extent={{-59,-68},{-53,-60}})));
      Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8.4)
        annotation (Placement(transformation(extent={{-95,-60},{-89,-52}})));
      Physiolibrary.Types.Constants.ConcentrationConst cPi(k=1.15)
        annotation (Placement(transformation(extent={{-93,-67},{-85,-62}})));
      Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)
        annotation (Placement(transformation(extent={{-79,-74},{-71,-68}})));
      Physiolibrary.Types.Constants.FractionConst fMetHb1(k=0.005)
        annotation (Placement(transformation(extent={{-93,-80},{-85,-72}})));
      Physiolibrary.Types.Constants.FractionConst fCOHb(k=0.005)
        annotation (Placement(transformation(extent={{-81,-84},{-75,-78}})));
      Physiolibrary.Types.Constants.FractionConst fCOHb1(k=0.005)
        annotation (Placement(transformation(extent={{-89,-88},{-83,-82}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
        annotation (Placement(transformation(extent={{-77,-100},{-71,-92}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(extent={{-14,72},{6,92}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(extent={{-30,62},{-10,82}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure3
        annotation (Placement(transformation(extent={{-26,40},{-6,60}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{14,98},{28,84}})));
      Physiolibrary.Chemical.Components.Stream Stream(useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{68,-18},{88,2}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage CO2out(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{46,-14},{58,-2}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage O2out(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{44,8},{56,20}})));
      Physiolibrary.Chemical.Components.Stream Stream1(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{68,4},{88,24}})));
      Physiolibrary.Chemical.Components.Stream Stream2(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{-22,14},{-10,26}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage O2in(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{12,14},{-2,24}})));
      Physiolibrary.Chemical.Components.Stream Stream3(useSolutionFlowInput=
            true)
        annotation (Placement(transformation(extent={{-22,-10},{-10,2}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage CO2in(
          useConcentrationInput=true)
        annotation (Placement(transformation(extent={{14,-8},{0,2}})));
    equation
      //balance equation
      //bloodPort_in_Extension.O2.q+bloodPort_out_Extension.O2.q+alvEq.VO2=0;
      //bloodPort_in_Extension.CO2.q+bloodPort_out_Extension.CO2.q-alvEq.VCO2=0;
      //concentration of O2 and CO2 in outflowing blood;
      //bloodPort_out_Extension.O2.conc=alvEq.CpcO2;
      //bloodPort_out_Extension.CO2.conc=alvEq.CpcCO2;

      connect(alvEq.VCO2, VCO2) annotation (Line(points={{36.32,-67.68},{75.68,
              -67.68},{75.68,-74},{94,-74}},
                                     color={0,0,127}));
      connect(alvEq.VO2, VO2) annotation (Line(points={{36.32,-62.1},{79.68,
              -62.1},{79.68,-54},{94,-54}},
                                   color={0,0,127}));
      connect(alvEq.VAi, VAi) annotation (Line(points={{-25.74,-42.88},{-57.26,
              -42.88},{-57.26,-44},{-70,-44}},
                           color={0,0,127}));
      connect(bloodPort_in, bloodPort_in_Extension.bloodPort_in) annotation (Line(
          points={{-96,76},{-72,76}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_out_Extension.bloodPort_out, bloodPort_out) annotation (
          Line(
          points={{68,76},{90,76},{90,74},{96,74}},
          color={28,108,200},
          thickness=0.5));
      connect(PB.y, alvEq.PB) annotation (Line(points={{-86,-25},{-60,-25},{-60,
              -31.72},{-25.74,-31.72}},
                              color={0,0,127}));
      connect(alvEq.FiO2, FiO2.y) annotation (Line(points={{-25.74,-35.44},{-64,
              -35.44},{-64,-31},{-70,-31}},
                                  color={0,0,127}));
      connect(FiCO2.y, alvEq.FiCO2) annotation (Line(points={{-86,-39},{-66,-39},
              {-66,-39.16},{-25.74,-39.16}},
                                    color={0,0,127}));
      connect(cAlb.y, alvEq.ctAlb)
        annotation (Line(points={{-52.25,-64},{-50,-64},{-50,-65.2},{-25.74,
              -65.2}},                                       color={0,0,127}));
      connect(ctHb.y, alvEq.ctHb) annotation (Line(points={{-88.25,-56},{-76,
              -56},{-76,-61.48},{-25.74,-61.48}},
                                      color={0,0,127}));
      connect(cPi.y, alvEq.ctPi) annotation (Line(points={{-84,-64.5},{-64,
              -64.5},{-64,-68.92},{-25.74,-68.92}},
                                      color={0,0,127}));
      connect(cDPG.y, alvEq.cDPG) annotation (Line(points={{-70,-71},{-58,-71},
              {-58,-72.64},{-25.74,-72.64}},
                                      color={0,0,127}));
      connect(fMetHb1.y, alvEq.FMetHb) annotation (Line(points={{-84,-76},{-56,
              -76},{-56,-76.36},{-25.74,-76.36}},
                                           color={0,0,127}));
      connect(fCOHb.y, alvEq.FCOHb) annotation (Line(points={{-74.25,-81},{-54,
              -81},{-54,-80.08},{-25.74,-80.08}},
                                           color={0,0,127}));
      connect(fCOHb1.y, alvEq.FHbF) annotation (Line(points={{-82.25,-85},{-52,
              -85},{-52,-83.8},{-25.74,-83.8}},
                                       color={0,0,127}));
      connect(temperature.y, alvEq.T) annotation (Line(points={{-70.25,-96},{
              -48,-96},{-48,-87.52},{-25.74,-87.52}},
                                           color={0,0,127}));
      connect(bloodPort_in_Extension.O2, concentrationMeasure.q_in) annotation (
          Line(
          points={{-42,76},{-34,76},{-34,82},{-4,82}},
          color={107,45,134},
          thickness=1));
      connect(alvEq.CvO2, concentrationMeasure.concentration) annotation (Line(
            points={{-25.74,-54.04},{-52,-54.04},{-52,58},{-4,58},{-4,74}},
                                                                        color={0,0,127}));
      connect(bloodPort_in_Extension.CO2, concentrationMeasure1.q_in) annotation (
          Line(
          points={{-42,69.28},{-31,69.28},{-31,72},{-20,72}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.concentration, alvEq.CvCO2) annotation (Line(
            points={{-20,64},{-20,60},{-22,60},{-22,56},{-48,56},{-48,-57.76},{
              -25.74,-57.76}},
            color={0,0,127}));
      connect(bloodPort_in_Extension.BEox, concentrationMeasure3.q_in) annotation (
          Line(
          points={{-42,63.2},{-30,63.2},{-30,50},{-16,50}},
          color={107,45,134},
          thickness=1));
      connect(alvEq.BEox, concentrationMeasure3.concentration) annotation (Line(
            points={{-25.74,-50.32},{-42,-50.32},{-42,36},{-16,36},{-16,42}},
                                                                          color={0,0,
              127}));
      connect(bloodPort_in_Extension.bloodFlow, flowMeasure.q_in) annotation (Line(
          points={{-42,92},{-14,92},{-14,91},{14,91}},
          color={0,0,0},
          thickness=1));
      connect(flowMeasure.q_out, bloodPort_out_Extension.bloodFlow) annotation (
          Line(
          points={{28,91},{36,91},{36,92},{32,92}},
          color={0,0,0},
          thickness=1));
      connect(alvEq.Q, flowMeasure.volumeFlow) annotation (Line(points={{-25.74,
              -46.6},{-36,-46.6},{-36,34},{21,34},{21,82.6}},
                                                  color={0,0,127}));
      connect(VO2, VO2)
        annotation (Line(points={{94,-54},{94,-54}},   color={0,0,127}));
      connect(concentrationMeasure3.q_in, bloodPort_out_Extension.BEox) annotation (
         Line(
          points={{-16,50},{32,50},{32,63.2}},
          color={107,45,134},
          thickness=1));
      connect(CO2out.q_out, Stream.q_in) annotation (Line(
          points={{58,-8},{68,-8}},
          color={107,45,134},
          thickness=1));
      connect(O2out.q_out, Stream1.q_in) annotation (Line(
          points={{56,14},{68,14}},
          color={107,45,134},
          thickness=1));
      connect(alvEq.CpcO2, O2out.concentration) annotation (Line(points={{36.32,
              -73.88},{52,-73.88},{52,-24},{34,-24},{34,14},{44,14}}, color={0,
              0,127}));
      connect(alvEq.CpcCO2, CO2out.concentration) annotation (Line(points={{36.32,
              -80.08},{54,-80.08},{54,-22},{38,-22},{38,-8},{46,-8}},
            color={0,0,127}));
      connect(Stream1.solutionFlow, flowMeasure.volumeFlow) annotation (Line(
            points={{78,21},{78,24},{20,24},{20,34},{21,34},{21,82.6}}, color={
              0,0,127}));
      connect(Stream.solutionFlow, flowMeasure.volumeFlow) annotation (Line(
            points={{78,-1},{78,2},{20,2},{20,34},{21,34},{21,82.6}}, color={0,
              0,127}));
      connect(Stream1.q_out, bloodPort_out_Extension.O2) annotation (Line(
          points={{88,14},{90,14},{90,66},{62,66},{62,84},{32,84},{32,76}},
          color={107,45,134},
          thickness=1));
      connect(Stream.q_out, bloodPort_out_Extension.CO2) annotation (Line(
          points={{88,-8},{92,-8},{92,56},{56,56},{56,69.6},{32,69.6}},
          color={107,45,134},
          thickness=1));
      connect(Stream2.q_out, O2in.q_out) annotation (Line(
          points={{-10,20},{-2,20},{-2,19}},
          color={107,45,134},
          thickness=1));
      connect(Stream2.solutionFlow, flowMeasure.volumeFlow) annotation (Line(
            points={{-16,24.2},{-16,30},{20,30},{20,34},{21,34},{21,82.6}},
            color={0,0,127}));
      connect(Stream3.q_out, CO2in.q_out) annotation (Line(
          points={{-10,-4},{-6,-4},{-6,-3},{0,-3}},
          color={107,45,134},
          thickness=1));
      connect(Stream3.solutionFlow, flowMeasure.volumeFlow) annotation (Line(
            points={{-16,0.2},{-16,8},{20,8},{20,34},{21,34},{21,82.6}}, color=
              {0,0,127}));
      connect(CO2in.concentration, alvEq.CvCO2) annotation (Line(points={{14,-3},
              {20,-3},{20,-16},{-48,-16},{-48,-57.76},{-25.74,-57.76}}, color={
              0,0,127}));
      connect(O2in.concentration, concentrationMeasure.concentration)
        annotation (Line(points={{12,19},{16,19},{16,6},{-52,6},{-52,58},{-4,58},
              {-4,74}}, color={0,0,127}));
      connect(Stream2.q_in, concentrationMeasure.q_in) annotation (Line(
          points={{-22,20},{-24,20},{-24,38},{6,38},{6,82},{-4,82}},
          color={107,45,134},
          thickness=1));
      connect(Stream3.q_in, concentrationMeasure1.q_in) annotation (Line(
          points={{-22,-4},{-30,-4},{-30,40},{2,40},{2,72},{-20,72}},
          color={107,45,134},
          thickness=1));
      annotation(Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}),
            graphics={Text(
              extent={{-86,114},{-16,88}},
              lineColor={28,108,200},
              textString="CO2"), Text(
              extent={{14,114},{82,86}},
              lineColor={28,108,200},
              textString="O2")}),                                                                                                    Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})));
    end AlveolocapillaryUnit_old;

    model BloodResistors2Split
    extends Physiolibrary.Icons.HydraulicResistor;
      parameter Real shuntFraction;
      parameter Physiolibrary.Types.HydraulicResistance Resistance;

      Interfaces.BloodPort_in bloodPort_in annotation (Placement(transformation(
              extent={{-86,10},{-66,30}}), iconTransformation(extent={{-100,-10},
                {-80,10}})));
      Interfaces.BloodPort_out bloodPortMain_out annotation (Placement(
            transformation(extent={{30,-22},{50,-2}}), iconTransformation(
              extent={{80,24},{100,44}})));

      Interfaces.BloodPort_out bloodPortShunt_out annotation (Placement(
            transformation(extent={{34,44},{54,64}}), iconTransformation(extent=
               {{82,-42},{102,-22}})));
      Interfaces.Shunt shuntCalculation(G_total=1/Resistance)
        annotation (Placement(transformation(extent={{-42,10},{-22,30}})));
      BloodComponents.BloodConductor bloodConductorMain(useConductanceInput=
            true)
        annotation (Placement(transformation(extent={{-12,46},{8,66}})));
      BloodComponents.BloodConductor bloodConductorShunt(useConductanceInput=
            true)
        annotation (Placement(transformation(extent={{-12,-22},{8,-2}})));
    equation
      shuntCalculation.shunt_fraction=shuntFraction;
      connect(bloodConductorShunt.bloodPort_out, bloodPortMain_out) annotation (
          Line(
          points={{8,-12},{40,-12}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodConductorMain.bloodPort_out, bloodPortShunt_out) annotation (
          Line(
          points={{8,56},{26,56},{26,54},{44,54}},
          color={28,108,200},
          thickness=0.5));
      connect(shuntCalculation.G_main, bloodConductorMain.cond) annotation (Line(
            points={{-23,29},{-23,74},{-2,74},{-2,62.6}}, color={0,0,127}));
      connect(shuntCalculation.G_shunt, bloodConductorShunt.cond)
        annotation (Line(points={{-23,11},{-2,11},{-2,-5.4}},
                                                            color={0,0,127}));
      connect(bloodConductorMain.bloodPort_in, bloodPort_in) annotation (Line(
          points={{-11,56},{-50,56},{-50,20},{-76,20}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodConductorShunt.bloodPort_in, bloodPort_in) annotation (Line(
          points={{-11,-12},{-50,-12},{-50,20},{-76,20}},
          color={28,108,200},
          thickness=0.5));
     annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-6,-34})),
                   Placement(transformation(
            extent={{12,-12},{-12,12}},
            rotation=0,
            origin={-2,20})),
                    Icon(coordinateSystem(preserveAspectRatio=false)),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end BloodResistors2Split;

    partial model Conditional_junction_T_test
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_O2 if useO2PortInput annotation (
          Placement(transformation(extent={{8,-10},{28,10}}),
            iconTransformation(extent={{-72,-10},{-52,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_CO2 if useCO2PortInput annotation (
          Placement(transformation(extent={{-16,-38},{4,-18}}),
            iconTransformation(extent={{-36,-10},{-16,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_BEox if useBEoxPortInput annotation (
          Placement(transformation(extent={{-54,-78},{-34,-58}}),
            iconTransformation(extent={{6,-10},{26,10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_Flow if useFlowPortInput annotation (
          Placement(transformation(extent={{-12,62},{8,82}}),
            iconTransformation(extent={{46,-12},{70,12}})));

      parameter Boolean useO2PortInput = false;
      parameter Boolean useCO2PortInput = false;
      parameter Boolean useBEoxPortInput = false;
      parameter Boolean useFlowPortInput = false;

    initial equation

    equation

      annotation (Icon(coordinateSystem(preserveAspectRatio=false)),
                                Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end Conditional_junction_T_test;

    model Junction_T_test
      extends Trash.Conditional_junction_T_test;
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_O2 if useO2PortInput annotation (
          Placement(transformation(extent={{8,-10},{28,10}}),
            iconTransformation(extent={{-72,-10},{-52,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_CO2 if useCO2PortInput annotation (
          Placement(transformation(extent={{-16,-38},{4,-18}}),
            iconTransformation(extent={{-36,-10},{-16,10}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a port_BEox if useBEoxPortInput annotation (
          Placement(transformation(extent={{-54,-78},{-34,-58}}),
            iconTransformation(extent={{6,-10},{26,10}})));
      Physiolibrary.Hydraulic.Interfaces.HydraulicPort_a port_Flow if useFlowPortInput annotation (
          Placement(transformation(extent={{-12,62},{8,82}}),
            iconTransformation(extent={{46,-12},{70,12}})));

      Interfaces.BloodPort_in bloodPort_in(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{-104,-18},{-84,2}}),
            iconTransformation(extent={{-108,-10},{-88,10}})));
      Interfaces.BloodPort_out bloodPort_out(numberOfSubstances=3) annotation (
          Placement(transformation(extent={{82,-10},{102,10}}),
            iconTransformation(extent={{90,-10},{110,10}})));
      Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{-86,-26},{-58,10}})));
      Interfaces.BloodPort_out_Extension bloodPort_out_Extension
        annotation (Placement(transformation(extent={{52,-24},{82,12}})));
      Physiolibrary.Hydraulic.Sensors.FlowMeasure flowMeasure
        annotation (Placement(transformation(extent={{14,48},{40,20}})));
      Package.FickPrinciplePort fickPrinciple1
        annotation (Placement(transformation(extent={{-12,-56},{8,-36}})));
      Package.FickPrinciplePort fickPrinciple2
        annotation (Placement(transformation(extent={{-50,-98},{-30,-78}})));
      Package.FickPrinciplePort fickPrinciple
        annotation (Placement(transformation(extent={{12,-28},{32,-8}})));
    initial equation

    equation

      connect(flowMeasure.q_out,bloodPort_out_Extension. bloodFlow) annotation (
         Line(
          points={{40,34},{52,34},{52,12}},
          color={0,0,0},
          thickness=1));
      connect(bloodPort_in_Extension.bloodFlow,flowMeasure. q_in) annotation (
          Line(
          points={{-58,10},{-58,34},{14,34}},
          color={0,0,0},
          thickness=1));
      connect(port_Flow,flowMeasure. q_in) annotation (Line(
          points={{-2,72},{-2,34},{14,34}},
          color={0,0,0},
          thickness=1));
      connect(fickPrinciple.port_in,bloodPort_in_Extension. O2) annotation (
          Line(
          points={{13,-17.8},{-34,-17.8},{-34,-8},{-58,-8}},
          color={107,45,134},
          thickness=1));
      connect(fickPrinciple1.port_in,bloodPort_in_Extension. CO2) annotation (
          Line(
          points={{-11,-45.8},{-48,-45.8},{-48,-15.56},{-58,-15.56}},
          color={107,45,134},
          thickness=1));
      connect(fickPrinciple2.port_in,bloodPort_in_Extension. BEox) annotation (
          Line(
          points={{-49,-87.8},{-76,-87.8},{-76,-40},{-58,-40},{-58,-22.4}},
          color={107,45,134},
          thickness=1));
      connect(fickPrinciple.volumeFlow,flowMeasure. volumeFlow) annotation (
          Line(points={{25.4,-12},{24,12},{27,12},{27,17.2}}, color={0,0,127}));
      connect(fickPrinciple2.volumeFlow,flowMeasure. volumeFlow) annotation (
          Line(points={{-36.6,-82},{-28,-82},{-28,12},{27,12},{27,17.2}}, color=
             {0,0,127}));
      connect(fickPrinciple1.volumeFlow,flowMeasure. volumeFlow) annotation (
          Line(points={{1.4,-40},{1.4,12},{27,12},{27,17.2}}, color={0,0,127}));
      connect(fickPrinciple1.port_out,bloodPort_out_Extension. CO2) annotation (
         Line(
          points={{7,-46},{42,-46},{42,-13.2},{52,-13.2}},
          color={107,45,134},
          thickness=1));
      connect(fickPrinciple.port_out,bloodPort_out_Extension. O2) annotation (
          Line(
          points={{31,-18},{38,-18},{38,-6},{52,-6}},
          color={107,45,134},
          thickness=1));
      connect(fickPrinciple2.port_out, bloodPort_out_Extension.BEox)
        annotation (Line(
          points={{-31,-88},{46,-88},{46,-20.4},{52,-20.4}},
          color={107,45,134},
          thickness=1));
      connect(bloodPort_out_Extension.bloodPort_out, bloodPort_out) annotation (
         Line(
          points={{82,-6},{88,-6},{88,0},{92,0}},
          color={28,108,200},
          thickness=0.5));
      connect(bloodPort_in_Extension.bloodPort_in, bloodPort_in) annotation (Line(
          points={{-86,-8},{-94,-8}},
          color={28,108,200},
          thickness=0.5));
      connect(fickPrinciple.port_add, port_O2) annotation (Line(
          points={{18.2,-11},{18.2,-7.5},{18,-7.5},{18,0}},
          color={107,45,134},
          thickness=1));
      connect(fickPrinciple1.port_add, port_CO2) annotation (Line(
          points={{-5.8,-39},{-5.8,-34.5},{-6,-34.5},{-6,-28}},
          color={107,45,134},
          thickness=1));
      connect(fickPrinciple2.port_add, port_BEox) annotation (Line(
          points={{-43.8,-81},{-43.8,-74.5},{-44,-74.5},{-44,-68}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
            Line(
              points={{-88,0},{90,0}},
              color={0,0,0},
              thickness=0.5)}), Diagram(coordinateSystem(preserveAspectRatio=
                false)));
    end Junction_T_test;

    model testO2CO2_fromNewBloodyMary
      Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit = "kPa") = 5330) annotation(Placement(transformation(extent={{-90,94},
                {-82,102}})));
      Physiolibrary.Types.Constants.ConcentrationConst cAlb(k = 0.66) annotation(Placement(transformation(extent={{-90,56},
                {-82,64}})));
      Physiolibrary.Types.Constants.TemperatureConst temperature(k = 310.15) annotation(Placement(transformation(extent={{-104,
                -102},{-96,-94}})));
      Physiolibrary.Types.Constants.ConcentrationConst BEox(k = -19) annotation(Placement(transformation(extent={{-94,80},
                {-86,88}})));
      Physiolibrary.Types.Constants.PressureConst pO2(k(displayUnit = "kPa") = 13300) annotation(Placement(transformation(extent = {{-74, 60}, {-66, 68}}, origin={-12.334,
                50},                                                                                                    rotation = 0), visible = true));
      Physiolibrary.Types.Constants.ConcentrationConst cPi(k = 1.15) annotation(Placement(transformation(extent={{-94,40},
                {-86,48}})));
      NewBloodyMary_testing.OSA.O2CO2 o2CO2_1
        annotation (Placement(transformation(extent={{-20,-108},{96,2}})));
      NewBloodyMary_testing.OSA.PO2PCO2 pO2PCO2_1
        annotation (Placement(transformation(extent={{-20,18},{86,112}})));
      Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8.4)   annotation(Placement(transformation(extent={{-95,68},
                {-86,74}})));
      Physiolibrary.Types.Constants.FractionConst fMetHb(k=0.005)   annotation(Placement(transformation(extent={{-85,-20},
                {-77,-12}})));
      Physiolibrary.Types.Constants.FractionConst fCOHb(k=0.005)   annotation(Placement(transformation(extent={{-61,-88},
                {-54,-80}})));
      Physiolibrary.Types.Constants.FractionConst fHbF(k=0.005)   annotation(Placement(transformation(extent={{-53,-98},
                {-45,-92}})));
      Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)   annotation(Placement(transformation(extent={{-61,-66},
                {-53,-60}})));
    equation
      connect(o2CO2_1.T, temperature.y) annotation (Line(points={{-25.8,-105.8},
              {-95,-105.8},{-95,-98}}, color={0,0,127}));
      connect(pO2PCO2_1.T, temperature.y) annotation (Line(points={{-25.3,18},{
              -95,18},{-95,-98}}, color={0,0,127}));
      connect(pO2.y, pO2PCO2_1.pO2) annotation (Line(points={{-77.334,114},{-52,
              114},{-52,111.06},{-25.3,111.06}}, color={0,0,127}));
      connect(pCO2.y, pO2PCO2_1.pCO2) annotation (Line(points={{-81,98},{-56,98},
              {-56,101.66},{-25.3,101.66}}, color={0,0,127}));
      connect(BEox.y, pO2PCO2_1.BEox) annotation (Line(points={{-85,84},{-58,84},
              {-58,92.26},{-25.3,92.26}}, color={0,0,127}));
      connect(o2CO2_1.BEox, pO2PCO2_1.BEox) annotation (Line(points={{-25.8,0.9},
              {-74,0.9},{-74,84},{-58,84},{-58,92.26},{-25.3,92.26}}, color={0,
              0,127}));
      connect(cAlb.y, pO2PCO2_1.ctAlb) annotation (Line(points={{-81,60},{-56,
              60},{-56,73.46},{-25.3,73.46}}, color={0,0,127}));
      connect(o2CO2_1.ctAlb, pO2PCO2_1.ctAlb) annotation (Line(points={{-25.8,
              -42},{-56,-42},{-56,73.46},{-25.3,73.46}}, color={0,0,127}));
      connect(cPi.y, pO2PCO2_1.ctPi) annotation (Line(points={{-85,44},{-50,44},
              {-50,64.06},{-25.3,64.06}}, color={0,0,127}));
      connect(o2CO2_1.ctPi, pO2PCO2_1.ctPi) annotation (Line(points={{-25.8,
              -51.9},{-50,-51.9},{-50,64.06},{-25.3,64.06}}, color={0,0,127}));
      connect(o2CO2_1.ctO2, pO2PCO2_1.ctO2) annotation (Line(points={{-25.8,-9},
              {-42,-9},{-42,12},{102,12},{102,102.6},{91.3,102.6}}, color={0,0,
              127}));
      connect(o2CO2_1.ctCO2, pO2PCO2_1.ctCO2) annotation (Line(points={{-25.8,
              -20},{-38,-20},{-38,8},{106,8},{106,93.2},{91.3,93.2}}, color={0,
              0,127}));
      connect(ctHb.y, pO2PCO2_1.ctHb) annotation (Line(points={{-84.875,71},{
              -62,71},{-62,82.86},{-25.3,82.86}}, color={0,0,127}));
      connect(o2CO2_1.ctHb, pO2PCO2_1.ctHb) annotation (Line(points={{-25.8,-31},
              {-62,-31},{-62,82.86},{-25.3,82.86}}, color={0,0,127}));
      connect(o2CO2_1.FMetHb, fMetHb.y) annotation (Line(points={{-25.8,-72.8},
              {-64,-72.8},{-64,-16},{-76,-16}}, color={0,0,127}));
      connect(pO2PCO2_1.FMetHb, fMetHb.y) annotation (Line(points={{-25.3,46.2},
              {-68,46.2},{-68,-16},{-76,-16}}, color={0,0,127}));
      connect(o2CO2_1.cDPG, cDPG.y) annotation (Line(points={{-25.8,-62.9},{
              -39.9,-62.9},{-39.9,-63},{-52,-63}}, color={0,0,127}));
      connect(pO2PCO2_1.cDPG, cDPG.y) annotation (Line(points={{-25.3,55.6},{
              -48,55.6},{-48,-63},{-52,-63}}, color={0,0,127}));
      connect(o2CO2_1.FCOHb, fCOHb.y) annotation (Line(points={{-25.8,-83.8},{
              -40.9,-83.8},{-40.9,-84},{-53.125,-84}}, color={0,0,127}));
      connect(pO2PCO2_1.FCOHb, fCOHb.y) annotation (Line(points={{-25.3,36.8},{
              -46,36.8},{-46,-84},{-53.125,-84}}, color={0,0,127}));
      connect(o2CO2_1.FHbF, fHbF.y) annotation (Line(points={{-25.8,-94.8},{
              -34.9,-94.8},{-34.9,-95},{-44,-95}}, color={0,0,127}));
      connect(pO2PCO2_1.FHbF, fHbF.y) annotation (Line(points={{-25.3,27.4},{
              -44,27.4},{-44,-95}}, color={0,0,127}));
      annotation(Diagram(coordinateSystem(preserveAspectRatio=false,   extent={{-100,
                -100},{100,100}})));
    end testO2CO2_fromNewBloodyMary;

    model ObjectIcons

      AcidBaseBalance.Interfaces.BloodPort_in_Extension bloodPort_in_Extension
        annotation (Placement(transformation(extent={{10,0},{30,20}})));
      AcidBaseBalance.Interfaces.BloodPort_out_Extension
        bloodPort_out_Extension
        annotation (Placement(transformation(extent={{-24,0},{-4,20}})));
      AcidBaseBalance.BloodComponents.BloodElasticVesselElastance
        bloodElasticVesselElastance(
        useO2_input=false,
        useCO2_input=false,
        useBEox_input=false)
        annotation (Placement(transformation(extent={{-64,-44},{-44,-24}})));
      AcidBaseBalance.BloodComponents.BloodResistor bloodResistor
        annotation (Placement(transformation(extent={{10,-54},{30,-34}})));
      AcidBaseBalance.Tissues.SimpleCells simpleCells
        annotation (Placement(transformation(extent={{-72,54},{-52,74}})));
      AcidBaseBalance.Tissues.TissueCells tissueCells
        annotation (Placement(transformation(extent={{8,54},{30,74}})));
      AcidBaseBalance.Tissues.ISF iSF
        annotation (Placement(transformation(extent={{-78,-8},{-52,16}})));
      AcidBaseBalance.Respiratory.LungsOneCompartment lungsOneCompartment
        annotation (Placement(transformation(extent={{-16,-90},{4,-70}})));
      AcidBaseBalance.Respiratory.LungsTwoCompartments lungsTwoCompartments
        annotation (Placement(transformation(extent={{14,-90},{34,-70}})));
      AcidBaseBalance.Respiratory.LungsBase lungsBase
        annotation (Placement(transformation(extent={{-48,-90},{-28,-70}})));
      AcidBaseBalance.Respiratory.AlveolarVentilation alveolarVentilation
        annotation (Placement(transformation(extent={{46,-90},{66,-70}})));
      Kidney.KidneyMetabolicCompensation ammoniumExcretion1 if
                                                     modelSettings.UseMetabolicUABalance
        annotation (Placement(transformation(extent={{60,20},{86,40}})));
    equation
      connect(bloodPort_out_Extension.bloodPort_out, bloodPort_in_Extension.bloodPort_in)
        annotation (Line(
          points={{-4,10},{10,10}},
          color={28,108,200},
          thickness=1));
    end ObjectIcons;
  end Trash;

  package Visualization

    model Iontograms
      // init
      parameter Physiolibrary.Types.Concentration Na_init = 140;
      parameter Physiolibrary.Types.Concentration Cl_init = 100;
      parameter Physiolibrary.Types.Concentration At_init=0.56;
      parameter Physiolibrary.Types.Concentration UA_init = 5;
      parameter Physiolibrary.Types.Pressure pCO2 = 40*133;
      parameter Physiolibrary.Types.Volume volume_start = 1e-3;

      // modificators

      Physiolibrary.Types.AmountOfSubstance Na_solute = Na_init*volume_start;
      Physiolibrary.Types.AmountOfSubstance Cl_solute = Cl_init*volume_start;
      Physiolibrary.Types.AmountOfSubstance At_solute = At_init*volume_start;
      Physiolibrary.Types.AmountOfSubstance UA_solute = UA_init*volume_start;



      Physiolibrary.Types.Concentration Na = Na_solute/volume;
      Physiolibrary.Types.Concentration Cl = Cl_solute/volume;
      Physiolibrary.Types.Concentration At = At_solute/volume;
      Physiolibrary.Types.Concentration UA = UA_solute/volume;

      parameter Physiolibrary.Types.Volume volume = 1e-3;

      Physiolibrary.Types.Concentration HCO3 = Na - Cl - albChrg - UA;
      Physiolibrary.Types.Concentration SIDa = Na - Cl "SIDapp = [Na+] + [K+] + [Ca2+] + [Mg2+] - [Cl-] - [lactate-]. PMC270679";
      Physiolibrary.Types.Concentration SIDe = HCO3 + albChrg "SIDeff = 12.2 × pCO2 / (10-pH) + 10 × [albumin] × (0.123 × pH - 0.631) + [PO4-] × (0.309 × pH - 0.469) ";
      Physiolibrary.Types.Concentration SIG = SIDa - SIDe;
      Physiolibrary.Types.pH pH( start = 7);
      Real albGpDl(unit = "g/dl") = 1/10/1000*66500*At;
      Physiolibrary.Types.Concentration albChrg = 10*albGpDl*(0.123*pH - 0.631) "[meq/l] according to Figge";

    //   Boolean addNaOH;
    //   Boolean addHCl;
    //   Boolean addNaCl;
    //   Boolean dilute;
    //   Boolean concentrate;

      parameter Physiolibrary.Types.AmountOfSubstance addAmount = 10e-3;

      AcidBaseBalance.Acidbase.FullBloodAcidbase.PlasmaElectrochemical.PlasmaFencl pf( alb = albGpDl, pCO2 = pCO2/133.32, Pi = 0, SID = SIDe);
      Physiolibrary.Types.Concentration NSID = pf.NSID;
      Real BE = SIDe - NSID;
    equation

      // henderson hasselbach
      HCO3 = 2.46e-8 *(pCO2/133)/(10^(-pH)) "Kellum";

    //   when false then
    //    // addNaOH = true;
    //     At_solute = 0;
    //     UA_solute = 0;
    //     addNaCl = false;
    //     concentrate = false;
    //     dilute  =false;
    //   end when;
    //
    //
    //   when addNaOH then
    //     Na_solute = pre(Na_solute) + addAmount;
    //   end when;
    //
    //   when addHCl then
    //     Cl_solute = pre(Cl_solute) + addAmount;
    //   end when;
    //
    //   if addNaCl then
    //     addHCl = true;
    //     addNaOH = true;
    //   else
    //     addHCl = false;
    //     addNaOH = false;
    //   end if;
    //
    //   when concentrate then
    //     volume = pre(volume) * 1.1;
    //   elsewhen dilute then
    //     volume = pre(volume) / 1.1;
    //   end when;

      for i in {Na, Cl, At, UA} loop
        assert(i >= 0, "Drž se koni svýho klacku, koncentrace nesmí být mínus", AssertionLevel.error);
      end for;

      assert(UA < 10, "Ya sure bout tha UA?", AssertionLevel.warning);

      if HCO3 < 0 then
        terminate("Model is NOT elektrovoleneutral!");
      end if;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)),
        experiment(
          StopTime=10,
          __Dymola_NumberOfIntervals=5000,
          __Dymola_Algorithm="Sdirk34hw"));
    end Iontograms;

    model ODC "Oxygen dissociation curve"
      Real pCO2_kPa = o2CO2_by_integration.pCO2/1000;
      Real pO2_kPa = o2CO2_by_integration.pO2/1000;
        Acidbase.OSA.O2CO2_by_integration
                           o2CO2_by_integration
          annotation (Placement(transformation(extent={{-2,38},{42,82}})));
      inner Interfaces.ModelSettings modelSettings
        annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      Physiolibrary.Types.Constants.ConcentrationConst BEox(k=0)
        annotation (Placement(transformation(extent={{-26,44},{-18,52}})));
      Physiolibrary.Types.Constants.ConcentrationConst pCO2(k=21.65)
        annotation (Placement(transformation(extent={{-30,58},{-22,66}})));
      Modelica.Blocks.Sources.Ramp ramp(
        height=10,
        duration=1000,
        offset=1e-3,
        startTime=10.0)
        annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
    equation
      connect(o2CO2_by_integration.BEox, BEox.y) annotation (Line(points={{-4.2,
              52.1429},{-4.2,51.5883},{-17,51.5883},{-17,48}},
                                                       color={0,0,127}));
      connect(ramp.y, o2CO2_by_integration.ctO2) annotation (Line(points={{-39,70},
              {-18,70},{-18,69.4286},{-4.2,69.4286}},color={0,0,127}));
      connect(pCO2.y, o2CO2_by_integration.ctCO2) annotation (Line(points={{-21,62},
              {-12,62},{-12,61.5714},{-3.76,61.5714}}, color={0,0,127}));
      annotation (
        Icon(coordinateSystem(preserveAspectRatio=false)),
        Diagram(coordinateSystem(preserveAspectRatio=false)),
        experiment(StopTime=840));
    end ODC;

    model TheGradientEffect
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneO2(Conductance(
            displayUnit="l/min") = 1.6666666666667e-5)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump production(
          useSoluteFlowInput=false, SoluteFlow=0.00016666666666667)
        annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
      Physiolibrary.Chemical.Components.Clearance destruction annotation (
          Placement(transformation(
            extent={{10,10},{-10,-10}},
            rotation=180,
            origin={70,0})));
      Physiolibrary.Chemical.Components.Substance volProduction(Simulation=
            Physiolibrary.Types.SimulationType.NoInit, useNormalizedVolume=true)
        annotation (Placement(transformation(extent={{-50,10},{-30,30}})));
      Physiolibrary.Chemical.Components.Substance volDestruction(Simulation=
            Physiolibrary.Types.SimulationType.NoInit, useNormalizedVolume=true)
        annotation (Placement(transformation(extent={{30,10},{50,30}})));
    equation
      connect(production.q_out, volProduction.q_out) annotation (Line(
          points={{-60,0},{-40,0},{-40,20}},
          color={107,45,134},
          thickness=1));
      connect(production.q_out, iSFMembraneO2.q_out) annotation (Line(
          points={{-60,0},{-10,0}},
          color={107,45,134},
          thickness=1));
      connect(iSFMembraneO2.q_in, destruction.q_in) annotation (Line(
          points={{10,0},{36,0},{36,1.77636e-15},{60,1.77636e-15}},
          color={107,45,134},
          thickness=1));
      connect(destruction.q_in, volDestruction.q_out) annotation (Line(
          points={{60,1.72085e-15},{40,1.72085e-15},{40,20}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end TheGradientEffect;

    model GradientsHvsHCO3
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneO2(Conductance(
            displayUnit="l/min") = 1.6666666666667e-5)
        annotation (Placement(transformation(extent={{10,-10},{-10,10}})));
      Physiolibrary.Chemical.Components.Substance HCO3_1(
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        useNormalizedVolume=true,
        solute_start=0.024)
        annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
      Physiolibrary.Chemical.Components.Substance HCO3_2(
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        useNormalizedVolume=true,
        solute_start=0.02)
        annotation (Placement(transformation(extent={{40,-10},{60,10}})));
      Physiolibrary.Chemical.Components.Diffusion iSFMembraneO1(Conductance(
            displayUnit="l/min") = 1.6666666666667e-5)
        annotation (Placement(transformation(extent={{10,-60},{-10,-40}})));
      Physiolibrary.Chemical.Components.Substance H_1(
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        useNormalizedVolume=true,
        solute_start(displayUnit="nmol") = 2.4e-8)
        annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
      Physiolibrary.Chemical.Components.Substance H_2(
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        useNormalizedVolume=true,
        solute_start(displayUnit="nmol") = 2e-8)
        annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
    equation
      connect(HCO3_1.q_out, iSFMembraneO2.q_out) annotation (Line(
          points={{-50,0},{-10,0}},
          color={107,45,134},
          thickness=1));
      connect(iSFMembraneO2.q_in, HCO3_2.q_out) annotation (Line(
          points={{10,0},{50,0}},
          color={107,45,134},
          thickness=1));
      connect(H_1.q_out, iSFMembraneO1.q_out) annotation (Line(
          points={{-50,-50},{-10,-50}},
          color={107,45,134},
          thickness=1));
      connect(iSFMembraneO1.q_in, H_2.q_out) annotation (Line(
          points={{10,-50},{50,-50}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
            coordinateSystem(preserveAspectRatio=false)));
    end GradientsHvsHCO3;

    model LungVentilationPerfusion
     extends Results.SimplestCircWithGas(                redeclare Respiratory.LungsTwoCompartments
          lungsOneCompartment);
      Real pO2_kPa = floor(o2CO2.pO2/10 + 0.5)/100;
      Real pCO2_kPa = floor(o2CO2.pCO2/10 + 0.5)/100;
      Real timeHours = time/60/60;
    end LungVentilationPerfusion;

    model AcidBaseCompensations
      extends Results.CompleteModel;
      Real pO2_kPa = floor(o2CO2.pO2/10 + 0.5)/100;
      Real pCO2_kPa = floor(o2CO2.pCO2/10 + 0.5)/100;
      Real timeHours = time/60/60;

    end AcidBaseCompensations;
  end Visualization;

  package Validation
    package old
      model NormalState
        SimplestCircWithTissues3 simplestCircWithTissues3_1(veins(useFlow_input=
                true), tissues(membrane(cond(displayUnit="m3/(Pa.s)") = 1e-10),
              useOsmoticFlow=false))
          annotation (Placement(transformation(extent={{-34,10},{-6,32}})));
        inner Interfaces.ModelSettings modelSettings(
          O2DiffusionPermeability(displayUnit="l/min"),
          CO2DiffusionPermeability(displayUnit="l/min"),
          HCO3Permeability(displayUnit="l/min"))
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      equation
        connect(simplestCircWithTissues3_1.VAi_input1, simplestCircWithTissues3_1.VAi_input)
          annotation (Line(points={{-15.7125,21.5},{2,21.5},{2,36},{-42,36},{
                -42,20.7},{-28.6625,20.7}},
                                     color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=1000000, __Dymola_NumberOfIntervals=5000));
      end NormalState;

      model CompareVentilationStep
        import Physiolibrary.Types.*;
        import AcidBaseBalance;
        import AcidBaseBalance;
        parameter DiffusionPermeability HCO3Permeability = 100;
        parameter Physiolibrary.Types.Volume isf_volume = 0.01;

        AcidBaseBalance.Validation.old.SimplestCircWithTissues2
          simplestCircWithTissues2_1
          annotation (Placement(transformation(extent={{-32,10},{-4,32}})));
        Modelica.Blocks.Sources.Step stepLowToHigh(
          offset=8.66667e-5,
          height=0.000166667 - 8.66667e-5,
          startTime=5*60*100)
          annotation (Placement(transformation(extent={{-84,-90},{-64,-70}})));
        Modelica.Blocks.Sources.Step step14to3_3(
          startTime=5*60*100,
          height=-(2.3e-4 - 5.5e-5),
          offset=2.3e-4)
          annotation (Placement(transformation(extent={{-112,-52},{-92,-32}})));
        AcidBaseBalance.Validation.old.SimplestCircWithTissues2
          simplestCircWithTissues2_2
          annotation (Placement(transformation(extent={{-36,-24},{-8,-2}})));
        inner Interfaces.ModelSettings modelSettings(
          O2DiffusionPermeability(displayUnit="l/min") = 0.005,
          CO2DiffusionPermeability(displayUnit="l/min") = 0.005,
          HCO3Permeability(displayUnit="l/min") = 5e-5,
          UseMetabolicUABalance=true,
          metabolismO2FlowRate=0.000125)
          annotation (Placement(transformation(extent={{-100,78},{-80,98}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=0.000266667,
          duration=100000,
          offset=4.66667e-5,
          startTime=60*100)
          annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
        Modelica.Blocks.Sources.Step step3_3to14(
          startTime=5*60*100,
          offset=5.5e-5,
          height=(2.3e-4 - 5.5e-5))
          annotation (Placement(transformation(extent={{-112,28},{-92,48}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst volumeFlowRateLow(k(
              displayUnit="l/min") = 5.5e-5)
          annotation (Placement(transformation(extent={{-110,14},{-102,22}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst volumeFlowRateHigh(k(
              displayUnit="l/min") = 0.00023333333333333)
          annotation (Placement(transformation(extent={{-110,-20},{-102,-12}})));
        Modelica.Blocks.Math.Add add(k2=-1)
          annotation (Placement(transformation(extent={{-70,2},{-56,16}})));
        Modelica.Blocks.Math.Add add1(k1=-1)
          annotation (Placement(transformation(extent={{-70,-18},{-56,-4}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst DeadVolume(k(
              displayUnit="l/min") = 8.3333333333333e-6)
          annotation (Placement(transformation(extent={{-92,-4},{-84,4}})));
      equation
        connect(add1.y, simplestCircWithTissues2_2.VAi_input) annotation (Line(
              points={{-55.3,-11},{-52.65,-11},{-52.65,-13.3},{-30.6625,-13.3}},
              color={0,0,127}));
        connect(add.y, simplestCircWithTissues2_1.VAi_input) annotation (Line(
              points={{-55.3,9},{-41.65,9},{-41.65,20.7},{-26.6625,20.7}},
                                                                        color={0,
                0,127}));
        connect(add.u2, DeadVolume.y) annotation (Line(points={{-71.4,4.8},{-78,
                4.8},{-78,0},{-83,0}}, color={0,0,127}));
        connect(add1.u1, DeadVolume.y) annotation (Line(points={{-71.4,-6.8},{-78,
                -6.8},{-78,0},{-83,0}}, color={0,0,127}));
        connect(step3_3to14.y, add.u1) annotation (Line(points={{-91,38},{-84,38},
                {-84,36},{-80,36},{-80,13.2},{-71.4,13.2}}, color={0,0,127}));
        connect(step14to3_3.y, add1.u2) annotation (Line(points={{-91,-42},{-84,
                -42},{-84,-40},{-80,-40},{-80,-15.2},{-71.4,-15.2}}, color={0,0,
                127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=40000, __Dymola_NumberOfIntervals=5000));
      end CompareVentilationStep;

      model RespiratoryAcidosis
        SimplestCircWithTissues3 simplestCircWithTissues3_1(alveolarVentilation(
              respiratoryCompensationEnabled=modelSettings.UseRespiratoryCompensation),
          VAi(k=7.68333E-05))
          annotation (Placement(transformation(extent={{-34,10},{-6,32}})));
        inner Interfaces.ModelSettings modelSettings(
          O2DiffusionPermeability(displayUnit="l/min"),
          CO2DiffusionPermeability(displayUnit="l/min"),
          HCO3Permeability(displayUnit="l/min"),
          makeCO2FractionStep=true,
          breakTime=7*24*60*60,
          UseRespiratoryCompensation=false)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      equation
        connect(simplestCircWithTissues3_1.VAi_input1, simplestCircWithTissues3_1.VAi_input)
          annotation (Line(points={{-15.7125,21.5},{2,21.5},{2,36},{-42,36},{
                -42,20.7},{-28.6625,20.7}},
                                     color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=1000000, __Dymola_NumberOfIntervals=5000));
      end RespiratoryAcidosis;

      model SimplestCircWithTissues3
        import AcidBaseBalance;
        extends AcidBaseBalance.Validation.old.SimplestCircWithTissues2;
        Physiolibrary.Types.RealIO.VolumeFlowRateOutput VAi_input1
                                                                 annotation (
            Placement(transformation(extent={{192,94},{204,106}}),
              iconTransformation(
              extent={{-13,-13},{13,13}},
              rotation=0,
              origin={89,35})));
        Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0,
            respiratoryCompensationEnabled=modelSettings.UseRespiratoryCompensation)
          annotation (Placement(transformation(extent={{170,36},{190,56}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit=
                "ml/min") = modelSettings.NormalAlveolarVentilation)
          annotation (Placement(transformation(extent={{194,14},{183,24}})));
        Ions.vomiting vomiting
          annotation (Placement(transformation(extent={{-70,-72},{-90,-52}})));
      equation
        connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{170,54},
                {170,53.3176},{155.1,53.3176}},                color={0,0,127}));
        connect(alveolarVentilation.pCO2a, o2CO2.pCO2) annotation (Line(points={{170,
                49.8},{155.1,49.8},{155.1,50.7294}},               color={0,0,127}));
        connect(alveolarVentilation.pHa, o2CO2.pH) annotation (Line(points={{170,
                44.8},{170,47.6235},{155.1,47.6235}},            color={0,0,127}));
        connect(VAi.y, alveolarVentilation.VA0) annotation (Line(points={{181.625,
                19},{164,19},{164,39.6},{170,39.6}},
                                                  color={0,0,127}));
        connect(alveolarVentilation.VA, VAi_input1) annotation (Line(points={{191,49},
                {191,50},{198,50},{198,100}},       color={0,0,127}));
        connect(vomiting.HCO3, veins.port_BEox) annotation (Line(
            points={{-70,-62},{-42,-62},{-42,14},{-12,14},{-12,20}},
            color={107,45,134},
            thickness=1));
        connect(vomiting.port_a, tissues.ions_plasma) annotation (Line(
            points={{-70,-66},{-46,-66},{-46,20},{-20,20},{-20,0}},
            color={107,45,134},
            thickness=1));
        connect(ionRegulation.q_out, veins.port_ions) annotation (Line(
            points={{-70,-40},{-46,-40},{-46,20},{-19.8,20}},
            color={107,45,134},
            thickness=1));
        annotation (Diagram(coordinateSystem(extent={{-120,-80},{200,140}})),
            Icon(coordinateSystem(extent={{-120,-80},{200,140}})));
      end SimplestCircWithTissues3;

      model RespiratoryAlkalosis
        old.SimplestCircWithTissues3 simplestCircWithTissues3_1(
            alveolarVentilation(respiratoryCompensationEnabled=modelSettings.UseRespiratoryCompensation),
            VAi(k=0.00016666666666667))
          annotation (Placement(transformation(extent={{-32,10},{-4,32}})));
        inner Interfaces.ModelSettings modelSettings(
          O2DiffusionPermeability(displayUnit="l/min"),
          CO2DiffusionPermeability(displayUnit="l/min"),
          HCO3Permeability(displayUnit="l/min"),
          UseRespiratoryCompensation=false,
          makeCO2FractionStep=false)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      equation
        connect(simplestCircWithTissues3_1.VAi_input1, simplestCircWithTissues3_1.VAi_input)
          annotation (Line(points={{-13.7125,21.5},{2,21.5},{2,36},{-42,36},{
                -42,20.7},{-26.6625,20.7}},
                                     color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end RespiratoryAlkalosis;

      model MetabolicAcidosisChronic
        old.SimplestCircWithTissues3 simplestCircWithTissues3_1(
            ammoniumExcretion(ammonium(metabolicRateNormalizer1(T=43200))))
          annotation (Placement(transformation(extent={{-32,10},{-4,32}})));
        inner Interfaces.ModelSettings modelSettings(
          O2DiffusionPermeability(displayUnit="l/min"),
          CO2DiffusionPermeability(displayUnit="l/min"),
          HCO3Permeability(displayUnit="l/min"),
          makeUAstep=true,
          breakTime(displayUnit="d") = 864000,
          breakLength(displayUnit="d") = 86400000,
          UAstepRatio=2)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      equation
        connect(simplestCircWithTissues3_1.VAi_input1, simplestCircWithTissues3_1.VAi_input)
          annotation (Line(points={{-13.7125,21.5},{2,21.5},{2,36},{-42,36},{
                -42,20.7},{-26.6625,20.7}},
                                     color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end MetabolicAcidosisChronic;

      model CompareVentilationStep2
        import Physiolibrary.Types.*;
        import AcidBaseBalance;
        parameter DiffusionPermeability HCO3Permeability = 100;
        parameter Physiolibrary.Types.Volume isf_volume = 0.01;

        AcidBaseBalance.Validation.old.SimplestCircWithTissues2
          simplestCircWithTissues2_1(cells(limitO2Metabolism(metabolismFlowRate=
                 modelSettings.metabolismO2FlowRate)))
          annotation (Placement(transformation(extent={{-32,10},{-4,32}})));
        inner Interfaces.ModelSettings modelSettings(
          O2DiffusionPermeability(displayUnit="l/min") = 0.005,
          CO2DiffusionPermeability(displayUnit="l/min") = 0.005,
          HCO3Permeability(displayUnit="l/min") = 5e-5,
          UseMetabolicUABalance=false,
          UseRespiratoryCompensation=false,
          metabolismO2FlowRate=0.00016666666666667)
          annotation (Placement(transformation(extent={{-100,78},{-80,98}})));
        Modelica.Blocks.Sources.Ramp ramp(
          duration=100000,
          startTime=60*100,
          height=2.3e-4,
          offset=5.5e-5)
          annotation (Placement(transformation(extent={{-118,12},{-98,32}})));
        Modelica.Blocks.Math.Add add(k2=-1)
          annotation (Placement(transformation(extent={{-70,2},{-56,16}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst DeadVolume(k(
              displayUnit="l/min") = 8.3333333333333e-6)
          annotation (Placement(transformation(extent={{-92,-4},{-84,4}})));
      equation
        connect(add.y, simplestCircWithTissues2_1.VAi_input) annotation (Line(
              points={{-55.3,9},{-41.65,9},{-41.65,20.7},{-26.6625,20.7}},
                                                                        color={0,
                0,127}));
        connect(add.u2, DeadVolume.y) annotation (Line(points={{-71.4,4.8},{-78,
                4.8},{-78,0},{-83,0}}, color={0,0,127}));
        connect(ramp.y, add.u1) annotation (Line(points={{-97,22},{-80,22},{-80,
                13.2},{-71.4,13.2}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=40000, __Dymola_NumberOfIntervals=5000));
      end CompareVentilationStep2;

      model MetabolicAcidosisAcute
        old.SimplestCircWithTissues3 simplestCircWithTissues3_1
          annotation (Placement(transformation(extent={{-32,10},{-4,32}})));
        inner Interfaces.ModelSettings modelSettings(
          O2DiffusionPermeability(displayUnit="l/min"),
          CO2DiffusionPermeability(displayUnit="l/min"),
          HCO3Permeability(displayUnit="l/min"),
          makeUAstep=true,
          UAstepRatio=5.0,
          breakTime(displayUnit="d") = 86400,
          breakLength(displayUnit="d") = 172800)
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      equation
        connect(simplestCircWithTissues3_1.VAi_input1, simplestCircWithTissues3_1.VAi_input)
          annotation (Line(points={{-13.7125,21.5},{2,21.5},{2,36},{-42,36},{
                -42,20.7},{-26.6625,20.7}},
                                     color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)));
      end MetabolicAcidosisAcute;

      model MetabolicAlkalosis
        old.SimplestCircWithTissues3 simplestCircWithTissues3_1(vomiting(
              totalHCO3Amount=10, pulse(startTime=86400.0)))
          annotation (Placement(transformation(extent={{-34,10},{-6,32}})));
        inner Interfaces.ModelSettings modelSettings(
          O2DiffusionPermeability(displayUnit="l/min"),
          CO2DiffusionPermeability(displayUnit="l/min"),
          HCO3Permeability(displayUnit="l/min"))
          annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
      equation
        connect(simplestCircWithTissues3_1.VAi_input1, simplestCircWithTissues3_1.VAi_input)
          annotation (Line(points={{-15.7125,21.5},{2,21.5},{2,36},{-42,36},{
                -42,20.7},{-28.6625,20.7}},
                                     color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=1000000, __Dymola_NumberOfIntervals=5000));
      end MetabolicAlkalosis;

    model SimplestCircWithTissues2
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
        extends Circulation.SimplestCirculation(pulmonaryVeins(
            useO2_input=true,
            useCO2_input=true,
            useBEox_input=true,
            useFlow_input=false,
            useFlowMeasureOutput=true), veins(
            useO2_input=true,
            useCO2_input=true,
            useBEox_input=true,
            useFlow_input=true,
            useIons_input=true));
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
        Acidbase.OSA.O2CO2 o2CO2
          annotation (Placement(transformation(extent={{-22,-22},{22,22}},
            rotation=0,
            origin={132,44})));
        Tissues.Tissues2 tissues(isf_ionChargeCorrection(elementaryCharges=
                modelSettings.IonElemChrgs), plasma_ionChargeCorrection(
              elementaryCharges=modelSettings.IonElemChrgs)) annotation (
            Placement(transformation(
              rotation=90,
              extent={{15,12},{-15,-12}},
              origin={-12,-15})));

        Kidney.KidneyMetabolicCompensation ammoniumExcretion if
                                                    modelSettings.UseMetabolicUABalance
          annotation (Placement(transformation(extent={{-108,-8},{-72,14}})));
        Interfaces.IonSelector ionSelector(selectedIon=AcidBaseBalance.Ions.IonsEnum.Ua)
          annotation (Placement(transformation(extent={{-54,-2},{-68,12}})));
        Tissues.SimpleCells cells(
          useMetabolicUaProduction=modelSettings.UseMetabolicUABalance,
          diffusion(Conductance(displayUnit="l/min") = 0.16666666666667),
          diffusion1(Conductance=0.00016666666666667),
          limitO2Metabolism(respiratoryQuotient=modelSettings.respiratoryQuotient,
              limiterEnabled=false)) annotation (Placement(transformation(
              extent={{9.875,9.875},{-9.875,-9.875}},
              rotation=90,
              origin={-9.875,-50.125})));
        Interfaces.IonSelector ionSelector1(selectedIon=AcidBaseBalance.Ions.IonsEnum.Cl)
          annotation (Placement(transformation(extent={{-54,-12},{-68,2}})));
        Ions.IonRegulation ionRegulation if modelSettings.UseMetabolicUABalance
          annotation (Placement(transformation(extent={{-98,-42},{-78,-22}})));
        Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0,
            respiratoryCompensationEnabled=modelSettings.UseRespiratoryCompensation)
          annotation (Placement(transformation(extent={{170,36},{190,56}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit="ml/min")=
             modelSettings.NormalAlveolarVentilation)
        annotation (Placement(transformation(extent={{194,14},{183,24}})));
      Ions.vomiting vomiting
        annotation (Placement(transformation(extent={{-70,-78},{-90,-58}})));
        Respiratory.LungsOneCompartment lungsOneCompartment
          annotation (Placement(transformation(extent={{20,108},{40,88}})));
    equation

      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{92,58},{92,54.3529},{108.9,54.3529}},        color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{108.9,51.7647},{104.45,51.7647},{104.45,50},{92,50}},
                                                                      color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{108.9,49.1765},{108.9,42},{92,42}},
                                                       color={0,0,127}));
        connect(veins.port_O2, tissues.tO2) annotation (Line(
            points={{-4,20},{-4,-2}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tCO2, veins.port_CO2) annotation (Line(
            points={{-8,-2},{-8,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.BE, veins.port_BEox) annotation (Line(
            points={{-12,-2},{-12,20}},
            color={107,45,134},
            thickness=1));
        connect(o2CO2.pH, ammoniumExcretion.pH) annotation (Line(points={{155.1,
                47.6235},{160,47.6235},{160,-80},{-120,-80},{-120,11.8},{
                -106.615,11.8}},
                     color={0,0,127}));
        connect(tissues.ions_plasma, veins.port_ions) annotation (Line(
            points={{-20,0},{-19.8,20}},
            color={107,45,134},
            thickness=1));
        connect(ammoniumExcretion.hco3_outflow, tissues.BE) annotation (Line(
            points={{-72,0.8},{-12,0.8},{-12,-2}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tO2_ISF, cells.O2) annotation (Line(
            points={{-4,-30},{-3.95,-40.25}},
            color={107,45,134},
            thickness=1));
        connect(cells.CO2, tissues.tCO2_ISF) annotation (Line(
            points={{-7.9,-40.25},{-7.9,-30},{-8,-30}},
            color={107,45,134},
            thickness=1));
        connect(tissues.HCO3_ISF, cells.HCO3) annotation (Line(
            points={{-12,-30},{-11.85,-40.25}},
            color={107,45,134},
            thickness=1));
        connect(tissues.ions_ISF, cells.ions) annotation (Line(
            points={{-20,-30},{-20,-40.25},{-19.75,-40.25}},
            color={107,45,134},
            thickness=1));
        connect(ammoniumExcretion.UA_outflow, ionSelector.port_b) annotation (
            Line(
            points={{-72.2769,5.75},{-70.138,5.75},{-70.138,5},{-68,5}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_ions, ionSelector.port_a) annotation (Line(
            points={{-19.8,20},{-46,20},{-46,5},{-54,5}},
            color={107,45,134},
            thickness=1));
      connect(ionSelector1.port_b, ammoniumExcretion.Cl_outflow) annotation (Line(
          points={{-68,-5},{-72.2769,-5},{-72.2769,0.25}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector1.port_a, veins.port_ions) annotation (Line(
          points={{-54,-5},{-46,-5},{-46,20},{-19.8,20}},
          color={107,45,134},
          thickness=1));
        connect(veins.port_Flow, tissues.port_Flow) annotation (Line(
            points={{-1.77636e-15,20},{5.32907e-15,0}},
            color={0,0,0},
            thickness=1));
        connect(o2CO2.cHCO3, ammoniumExcretion.HCO3) annotation (Line(points={{155.1,
                45.0353},{158,45.0353},{158,-78},{-118,-78},{-118,9.6},{
                -106.615,9.6}},    color={0,0,127}));
        connect(ionRegulation.q_out, veins.port_ions) annotation (Line(
            points={{-78,-32},{-46,-32},{-46,20},{-19.8,20}},
            color={107,45,134},
            thickness=1));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{181.625,19},
              {164,19},{164,39.6},{170,39.6}},  color={0,0,127}));
      connect(vomiting.HCO3, veins.port_BEox) annotation (Line(
          points={{-70,-68},{-42,-68},{-42,14},{-12,14},{-12,20}},
          color={107,45,134},
          thickness=1));
      connect(vomiting.port_a, tissues.ions_plasma) annotation (Line(
          points={{-70,-76},{-46,-76},{-46,20},{-20,20},{-20,0}},
          color={107,45,134},
          thickness=1));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{170,54},
                {170,53.3176},{155.1,53.3176}},              color={0,0,127}));
      connect(alveolarVentilation.pCO2a, o2CO2.pCO2) annotation (Line(points={{170,
                49.8},{155.1,49.8},{155.1,50.7294}},             color={0,0,127}));
      connect(alveolarVentilation.pHa, o2CO2.pH) annotation (Line(points={{170,
                44.8},{170,47.6235},{155.1,47.6235}},          color={0,0,127}));
        connect(alveolarVentilation.VA, lungsOneCompartment.VAi) annotation (Line(
              points={{191,49},{192,49},{192,50},{196,50},{196,112},{30,112},{30,
                108}}, color={0,0,127}));
        connect(pulmonaryVeins.volumeFlow, lungsOneCompartment.bloodFlow)
          annotation (Line(points={{20,74},{10,74},{10,94},{20,94}}, color={0,0,
                127}));
        connect(lungsOneCompartment.O2, pulmonaryVeins.port_O2) annotation (Line(
            points={{24,88},{24,80}},
            color={107,45,134},
            thickness=1));
        connect(pulmonaryVeins.port_CO2, lungsOneCompartment.CO2) annotation (
            Line(
            points={{28,80},{28,88}},
            color={107,45,134},
            thickness=1));
        connect(pulmonaryVeins.port_BEox, lungsOneCompartment.BEox) annotation (
            Line(
            points={{32,80},{32,88}},
            color={107,45,134},
            thickness=1));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{200,140}}), graphics={
            Rectangle(
              extent={{-110,18},{-68,-16}},
              lineColor={244,125,35},
              lineThickness=1,
              pattern=LinePattern.Dash),
            Text(
              extent={{-110,-18},{-68,-8}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="UseMetabolicUABalance"),
            Text(
              extent={{-108,-50},{-66,-40}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="UseMetabolicUABalance"),
            Rectangle(
              extent={{-110,-20},{-66,-48}},
              lineColor={244,125,35},
              lineThickness=1,
              pattern=LinePattern.Dash)}),    Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{200,140}})));
    end SimplestCircWithTissues2;
    end old;

    model noRegulations
      import AcidBaseBalance;
      extends AcidBaseBalance.Validation.old.SimplestCircWithTissues2(
                                       modelSettings(
          UseRespiratoryCompensation=false,
          UseMetabolicUABalance=false,
          venousCO2conc_start=23.53,
          useIons=true,
          useOsmoticFlow=true));
    end noRegulations;

    model RespiratoryRegulation
      import AcidBaseBalance;
      extends AcidBaseBalance.Validation.old.SimplestCircWithTissues2(
                                       modelSettings(
          UseMetabolicUABalance=false,
          venousCO2conc_start=23.53,
          useIons=true,
          useOsmoticFlow=true,
          UseRespiratoryCompensation=true));
    end RespiratoryRegulation;

    model metabolicRegulation
      import AcidBaseBalance;
      extends AcidBaseBalance.Validation.old.SimplestCircWithTissues2(
                                       modelSettings(
          UseRespiratoryCompensation=false,
          venousCO2conc_start=23.69,
          useIons=true,
          UseMetabolicUABalance=true,
          metabolismUAFlowRate_norm(displayUnit="mmol/day"),
          useOsmoticFlow=false,
          CO2DiffusionPermeability=0.00166667,
          arterialCO2conc_start=21.82), tissues(iSF_initialization(
            pHisf=7.347,
            isf_dCO2=-0.15,
            isf_dHCO3=-0.65)));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump pump_hco3(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-140,70},{-120,50}})));
      Physiolibrary.Types.Constants.MolarFlowRateConst HCO3excretion(k(
            displayUnit="mmol/day") = 0)
        annotation (Placement(transformation(extent={{-154,38},{-146,46}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
                                                         pump_hco1(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-120,22},{-140,42}})));
    equation
      connect(HCO3excretion.y, pump_hco1.soluteFlow) annotation (Line(points={{
              -145,42},{-134,42},{-134,36}}, color={0,0,127}));
      connect(HCO3excretion.y, pump_hco3.soluteFlow) annotation (Line(points={{
              -145,42},{-126,42},{-126,56}}, color={0,0,127}));
      connect(pump_hco3.q_out, ammoniumExcretion.hco3_outflow) annotation (Line(
          points={{-120,60},{-96,60},{-96,0.8},{-72,0.8}},
          color={107,45,134},
          thickness=1));
      connect(pump_hco1.q_in, ammoniumExcretion.UA_outflow) annotation (Line(
          points={{-120,32},{-104,32},{-104,5.75},{-72.2769,5.75}},
          color={107,45,134},
          thickness=1));
    end metabolicRegulation;

    package TornApproach

    model SimplestCircWithGasAndTissues
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
        extends Circulation.SimplestCirculation(
          pulmonaryVeins(
            useO2_input=true,
            useCO2_input=true,
            useBEox_input=true,
            useFlow_input=false,
            useFlowMeasureOutput=true),
          veins(
            useO2_input=true,
            useCO2_input=true,
            useBEox_input=true,
            useFlow_input=true,
            useIons_input=true),
          modelSettings(
            useIons=true,
            UseMetabolicUABalance=false,
            UseRespiratoryCompensation=false,
            arterialCO2conc_start=22.25,
            venousCO2conc_start=24.12,
            venousO2conc_start=3.889,
            useOsmoticFlow=true,
            NormalAlveolarVentilation=9e-5));
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
        Acidbase.OSA.O2CO2 o2CO2
          annotation (Placement(transformation(extent={{-22,-22},{22,22}},
            rotation=0,
            origin={132,44})));

        Tissues.SimpleCells cells(
          useMetabolicUaProduction=modelSettings.UseMetabolicUABalance,
          diffusion(Conductance(displayUnit="l/min") = 0.16666666666667),
          diffusion1(Conductance=0.00016666666666667),
          limitO2Metabolism(respiratoryQuotient=modelSettings.respiratoryQuotient,
              limiterEnabled=false)) annotation (Placement(transformation(
              extent={{9.875,9.875},{-9.875,-9.875}},
              rotation=90,
              origin={40.125,-8.125})));
        Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0,
            respiratoryCompensationEnabled=modelSettings.UseRespiratoryCompensation)
          annotation (Placement(transformation(extent={{170,36},{190,56}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit="ml/min")=
             modelSettings.NormalAlveolarVentilation)
        annotation (Placement(transformation(extent={{194,14},{183,24}})));
        Respiratory.LungsOneCompartment lungsOneCompartment
          annotation (Placement(transformation(extent={{20,108},{40,88}})));
        Tissues.Tissues2 tissues(
          ImpermeantSolutes(Simulation=Physiolibrary.Types.SimulationType.NormalInit),
          isf_ionChargeCorrection(elementaryCharges=modelSettings.IonElemChrgs),
          plasma_ionChargeCorrection(elementaryCharges=modelSettings.IonElemChrgs),
          iSF_initialization(
            isf_dCO2=0,
            isf_dHCO3=0,
            pHisf=7.361),
          tissueHCO3_2(pH(start=7.36)),
          membrane(HydraulicPressureIn=0.0, cond=1.15741E-09)) annotation (
            Placement(transformation(
              rotation=90,
              extent={{15,12},{-15,-12}},
              origin={-12,-31})));

      Hydraulic.Sources.UnlimitedOutflowPump               unlimitedOutflowPump(
            useSolutionFlowInput=true) if
                                        modelSettings.useOsmoticFlow
        annotation (Placement(transformation(extent={{80,30},{100,10}})));
        Modelica.Blocks.Sources.Pulse pulse(
          amplitude=1.6666666666667e-5,
          width=100,
          period=60,
          nperiod=1,
          startTime=10000)
          annotation (Placement(transformation(extent={{140,0},{120,20}})));
    equation

      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{92,58},{92,54.3529},{108.9,54.3529}},        color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{108.9,51.7647},{104.45,51.7647},{104.45,50},{92,50}},
                                                                      color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{108.9,49.1765},{108.9,42},{92,42}},
                                                       color={0,0,127}));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{181.625,19},
              {164,19},{164,39.6},{170,39.6}},  color={0,0,127}));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{170,54},
                {170,53.3176},{155.1,53.3176}},              color={0,0,127}));
      connect(alveolarVentilation.pCO2a, o2CO2.pCO2) annotation (Line(points={{170,
                49.8},{155.1,49.8},{155.1,50.7294}},             color={0,0,127}));
      connect(alveolarVentilation.pHa, o2CO2.pH) annotation (Line(points={{170,
                44.8},{170,47.6235},{155.1,47.6235}},          color={0,0,127}));
        connect(alveolarVentilation.VA, lungsOneCompartment.VAi) annotation (
            Line(points={{191,49},{192,49},{192,50},{196,50},{196,112},{30,112},
                {30,108}}, color={0,0,127}));
        connect(pulmonaryVeins.volumeFlow, lungsOneCompartment.bloodFlow)
          annotation (Line(points={{20,74},{10,74},{10,94},{20,94}}, color={0,0,
                127}));
        connect(lungsOneCompartment.O2, pulmonaryVeins.port_O2) annotation (
            Line(
            points={{24,88},{24,80}},
            color={107,45,134},
            thickness=1));
        connect(pulmonaryVeins.port_CO2, lungsOneCompartment.CO2) annotation (
            Line(
            points={{28,80},{28,88}},
            color={107,45,134},
            thickness=1));
        connect(pulmonaryVeins.port_BEox, lungsOneCompartment.BEox) annotation (
           Line(
            points={{32,80},{32,88}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_ions, cells.ions) annotation (Line(
            points={{-19.8,20},{-20,20},{-20,1.75},{30.25,1.75}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_BEox, cells.HCO3) annotation (Line(
            points={{-12,20},{-12,10},{38.15,10},{38.15,1.75}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_CO2, cells.CO2) annotation (Line(
            points={{-8,20},{-8,12},{42.1,12},{42.1,1.75}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_O2, cells.O2) annotation (Line(
            points={{-4,20},{-4,14},{46.05,14},{46.05,1.75}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tO2, veins.port_O2) annotation (Line(
            points={{-4,-18},{-4,20},{-4,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tCO2, veins.port_CO2) annotation (Line(
            points={{-8,-18},{-8,20},{-8,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.BE, veins.port_BEox) annotation (Line(
            points={{-12,-18},{-12,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.ions_plasma, veins.port_ions) annotation (Line(
            points={{-20,-16},{-20,20},{-19.8,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.port_Flow, veins.port_Flow) annotation (Line(
            points={{0,-16},{0,20}},
            color={0,0,0},
            thickness=1));
        connect(unlimitedOutflowPump.q_in, veins.port_Flow) annotation (Line(
            points={{80,20},{0,20}},
            color={0,0,0},
            thickness=1));
        connect(unlimitedOutflowPump.solutionFlow, pulse.y) annotation (Line(
              points={{90,13},{104,13},{104,10},{119,10}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{200,140}})),            Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{200,140}})));
    end SimplestCircWithGasAndTissues;

    model SimplestCircWithGasAndTissuesAndRespiration
        "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
        extends Circulation.SimplestCirculation(
          pulmonaryVeins(
            useO2_input=true,
            useCO2_input=true,
            useBEox_input=true,
            useFlow_input=false,
            useFlowMeasureOutput=true),
          veins(
            useO2_input=true,
            useCO2_input=true,
            useBEox_input=true,
            useFlow_input=true,
            useIons_input=true),
          modelSettings(
            useIons=true,
            UseMetabolicUABalance=false,
            arterialCO2conc_start=22.25,
            venousCO2conc_start=24.12,
            venousO2conc_start=3.889,
            useOsmoticFlow=true,
            NormalAlveolarVentilation=7.6833333333333e-5,
            UseRespiratoryCompensation=true));
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
        Acidbase.OSA.O2CO2 o2CO2
          annotation (Placement(transformation(extent={{-22,-22},{22,22}},
            rotation=0,
            origin={132,44})));

        Tissues.SimpleCells cells(
          useMetabolicUaProduction=modelSettings.UseMetabolicUABalance,
          diffusion(Conductance(displayUnit="l/min") = 0.16666666666667),
          diffusion1(Conductance=0.00016666666666667),
          limitO2Metabolism(respiratoryQuotient=modelSettings.respiratoryQuotient,
              limiterEnabled=false)) annotation (Placement(transformation(
              extent={{9.875,9.875},{-9.875,-9.875}},
              rotation=90,
              origin={40.125,-8.125})));
        Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0,
            respiratoryCompensationEnabled=modelSettings.UseRespiratoryCompensation)
          annotation (Placement(transformation(extent={{170,36},{190,56}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit="ml/min")=
             modelSettings.NormalAlveolarVentilation)
        annotation (Placement(transformation(extent={{194,14},{183,24}})));
        Respiratory.LungsOneCompartment lungsOneCompartment
          annotation (Placement(transformation(extent={{20,108},{40,88}})));
        Tissues.Tissues2 tissues(
          ImpermeantSolutes(Simulation=Physiolibrary.Types.SimulationType.NormalInit),
          isf_ionChargeCorrection(elementaryCharges=modelSettings.IonElemChrgs),
          plasma_ionChargeCorrection(elementaryCharges=modelSettings.IonElemChrgs),
          iSF_initialization(
            isf_dCO2=0,
            isf_dHCO3=0,
            pHisf=7.361),
          tissueHCO3_2(pH(start=7.36)),
          membrane(HydraulicPressureIn=0.0, cond=1.15741E-09)) annotation (
            Placement(transformation(
              rotation=90,
              extent={{15,12},{-15,-12}},
              origin={-12,-31})));

        BloodComponents.PressureMeasure pressureMeasure
          annotation (Placement(transformation(extent={{-18,86},{2,106}})));
    equation

      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{92,58},{92,54.3529},{108.9,54.3529}},        color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{108.9,51.7647},{104.45,51.7647},{104.45,50},{92,50}},
                                                                      color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{108.9,49.1765},{108.9,42},{92,42}},
                                                       color={0,0,127}));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{181.625,19},
              {164,19},{164,39.6},{170,39.6}},  color={0,0,127}));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{170,54},
                {170,53.3176},{155.1,53.3176}},              color={0,0,127}));
      connect(alveolarVentilation.pCO2a, o2CO2.pCO2) annotation (Line(points={{170,
                49.8},{155.1,49.8},{155.1,50.7294}},             color={0,0,127}));
      connect(alveolarVentilation.pHa, o2CO2.pH) annotation (Line(points={{170,
                44.8},{170,47.6235},{155.1,47.6235}},          color={0,0,127}));
        connect(alveolarVentilation.VA, lungsOneCompartment.VAi) annotation (
            Line(points={{191,49},{192,49},{192,50},{196,50},{196,112},{30,112},
                {30,108}}, color={0,0,127}));
        connect(pulmonaryVeins.volumeFlow, lungsOneCompartment.bloodFlow)
          annotation (Line(points={{20,74},{10,74},{10,94},{20,94}}, color={0,0,
                127}));
        connect(lungsOneCompartment.O2, pulmonaryVeins.port_O2) annotation (
            Line(
            points={{24,88},{24,80}},
            color={107,45,134},
            thickness=1));
        connect(pulmonaryVeins.port_CO2, lungsOneCompartment.CO2) annotation (
            Line(
            points={{28,80},{28,88}},
            color={107,45,134},
            thickness=1));
        connect(pulmonaryVeins.port_BEox, lungsOneCompartment.BEox) annotation (
           Line(
            points={{32,80},{32,88}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_ions, cells.ions) annotation (Line(
            points={{-19.8,20},{-20,20},{-20,1.75},{30.25,1.75}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_BEox, cells.HCO3) annotation (Line(
            points={{-12,20},{-12,10},{38.15,10},{38.15,1.75}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_CO2, cells.CO2) annotation (Line(
            points={{-8,20},{-8,12},{42.1,12},{42.1,1.75}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_O2, cells.O2) annotation (Line(
            points={{-4,20},{-4,14},{46.05,14},{46.05,1.75}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tO2, veins.port_O2) annotation (Line(
            points={{-4,-18},{-4,20},{-4,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tCO2, veins.port_CO2) annotation (Line(
            points={{-8,-18},{-8,20},{-8,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.BE, veins.port_BEox) annotation (Line(
            points={{-12,-18},{-12,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.ions_plasma, veins.port_ions) annotation (Line(
            points={{-20,-16},{-20,20},{-19.8,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.port_Flow, veins.port_Flow) annotation (Line(
            points={{0,-16},{0,20}},
            color={0,0,0},
            thickness=1));
        connect(pressureMeasure.bloodPort_in, pulmonary.bloodPort_out)
          annotation (Line(
            points={{-12.9,89},{-12.9,80},{-1,80},{-1,70}},
            color={28,108,200},
            thickness=1));
        connect(pressureMeasure.concO2, lungsOneCompartment.cvO2) annotation (
            Line(points={{1,105},{10.5,105},{10.5,106},{20,106}}, color={0,0,
                127}));
        connect(lungsOneCompartment.cvCO2, pressureMeasure.concCO2) annotation (
           Line(points={{20,102},{12,102},{12,101},{1,101}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{200,140}})),            Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{200,140}})));
    end SimplestCircWithGasAndTissuesAndRespiration;

    model SimplestCircWithGasTissuesRespirationMet
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
        extends Circulation.SimplestCirculation(
          pulmonaryVeins(
            useO2_input=true,
            useCO2_input=true,
            useBEox_input=true,
            useFlow_input=false,
            useFlowMeasureOutput=true),
          veins(
            useO2_input=true,
            useCO2_input=true,
            useBEox_input=true,
            useFlow_input=true,
            useIons_input=true),
          modelSettings(
            useIons=true,
            useOsmoticFlow=true,
          UseMetabolicUABalance=true,
          UseRespiratoryCompensation=true,
            NormalAlveolarVentilation=7.6833333333333e-5));
       extends Modelica.Icons.Example;
       import Physiolibrary.Hydraulic;
        Acidbase.OSA.O2CO2 o2CO2
          annotation (Placement(transformation(extent={{-22,-22},{22,22}},
            rotation=0,
            origin={132,44})));

        Tissues.SimpleCells cells(
          useMetabolicUaProduction=modelSettings.UseMetabolicUABalance,
          diffusion(Conductance(displayUnit="l/min") = 0.16666666666667),
          diffusion1(Conductance=0.00016666666666667),
          limitO2Metabolism(respiratoryQuotient=modelSettings.respiratoryQuotient,
              limiterEnabled=false)) annotation (Placement(transformation(
              extent={{9.875,9.875},{-9.875,-9.875}},
              rotation=180,
              origin={30.125,9.875})));
        Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0,
            respiratoryCompensationEnabled=modelSettings.UseRespiratoryCompensation)
          annotation (Placement(transformation(extent={{170,36},{190,56}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst VAi(k(displayUnit="ml/min")=
             modelSettings.NormalAlveolarVentilation)
        annotation (Placement(transformation(extent={{194,14},{183,24}})));
        Respiratory.LungsOneCompartment lungsOneCompartment
          annotation (Placement(transformation(extent={{20,108},{40,88}})));
      Tissues.Tissues2 tissues(
        ImpermeantSolutes(Simulation=Physiolibrary.Types.SimulationType.NormalInit),
        isf_ionChargeCorrection(elementaryCharges=modelSettings.IonElemChrgs),
        plasma_ionChargeCorrection(elementaryCharges=modelSettings.IonElemChrgs),
        iSF_initialization(
          isf_dCO2=0,
          isf_dHCO3=0,
          pHisf=7.361),
        tissueHCO3_2(pH(start=7.36)),
        membrane(HydraulicPressureIn=0.0, cond=1.15741E-09)) annotation (Placement(
            transformation(
            rotation=90,
            extent={{15,12},{-15,-12}},
            origin={-12,-31})));

      BloodComponents.PressureMeasure pressureMeasure
        annotation (Placement(transformation(extent={{-18,86},{2,106}})));
        Kidney.KidneyMetabolicCompensation ammoniumExcretion(ammonium(
              PT_NH3_ChronicEffect(HalfTime(displayUnit="s") = 90000))) if
                                                    modelSettings.UseMetabolicUABalance
          annotation (Placement(transformation(extent={{-108,-8},{-72,14}})));
        Interfaces.IonSelector ionSelector(selectedIon=AcidBaseBalance.Ions.IonsEnum.Ua)
          annotation (Placement(transformation(extent={{-54,-2},{-68,12}})));
        Interfaces.IonSelector ionSelector1(selectedIon=AcidBaseBalance.Ions.IonsEnum.Cl)
          annotation (Placement(transformation(extent={{-54,-12},{-68,2}})));
        Ions.IonRegulation ionRegulation(
        UAunlim(Conc=10),
        cldiff(Conductance=1.15741E-07),
        uadiff(Conductance=1.15741E-07)) if modelSettings.UseMetabolicUABalance
          annotation (Placement(transformation(extent={{-98,-42},{-78,-22}})));
      Ions.vomiting vomiting
        annotation (Placement(transformation(extent={{-70,-78},{-90,-58}})));
    equation

      connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
            points={{92,58},{92,54.3529},{108.9,54.3529}},        color={0,0,
              127}));
      connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
            points={{108.9,51.7647},{104.45,51.7647},{104.45,50},{92,50}},
                                                                      color={0,
              0,127}));
      connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
            points={{108.9,49.1765},{108.9,42},{92,42}},
                                                       color={0,0,127}));
      connect(VAi.y,alveolarVentilation. VA0) annotation (Line(points={{181.625,19},
              {164,19},{164,39.6},{170,39.6}},  color={0,0,127}));
      connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{170,54},
                {170,53.3176},{155.1,53.3176}},              color={0,0,127}));
      connect(alveolarVentilation.pCO2a, o2CO2.pCO2) annotation (Line(points={{170,
                49.8},{155.1,49.8},{155.1,50.7294}},             color={0,0,127}));
      connect(alveolarVentilation.pHa, o2CO2.pH) annotation (Line(points={{170,
                44.8},{170,47.6235},{155.1,47.6235}},          color={0,0,127}));
      connect(alveolarVentilation.VA, lungsOneCompartment.VAi) annotation (Line(
            points={{191,49},{192,49},{192,50},{196,50},{196,112},{30,112},{30,108}},
            color={0,0,127}));
      connect(pulmonaryVeins.volumeFlow, lungsOneCompartment.bloodFlow) annotation (
         Line(points={{20,74},{10,74},{10,94},{20,94}}, color={0,0,127}));
      connect(lungsOneCompartment.O2, pulmonaryVeins.port_O2) annotation (Line(
          points={{24,88},{24,80}},
          color={107,45,134},
          thickness=1));
      connect(pulmonaryVeins.port_CO2, lungsOneCompartment.CO2) annotation (Line(
          points={{28,80},{28,88}},
          color={107,45,134},
          thickness=1));
      connect(pulmonaryVeins.port_BEox, lungsOneCompartment.BEox) annotation (Line(
          points={{32,80},{32,88}},
          color={107,45,134},
          thickness=1));
        connect(veins.port_ions, cells.ions) annotation (Line(
            points={{-19.8,20},{-20,20},{-20,-1.77636e-15},{20.25,-1.77636e-15}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_BEox, cells.HCO3) annotation (Line(
            points={{-12,20},{-12,8},{20.25,8},{20.25,7.9}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_CO2, cells.CO2) annotation (Line(
            points={{-8,20},{-8,12},{20.25,12},{20.25,11.85}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_O2, cells.O2) annotation (Line(
            points={{-4,20},{-4,14},{20.25,14},{20.25,15.8}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tO2, veins.port_O2) annotation (Line(
            points={{-4,-18},{-4,20},{-4,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.tCO2, veins.port_CO2) annotation (Line(
            points={{-8,-18},{-8,20},{-8,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.BE, veins.port_BEox) annotation (Line(
            points={{-12,-18},{-12,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.ions_plasma, veins.port_ions) annotation (Line(
            points={{-20,-16},{-20,20},{-19.8,20}},
            color={107,45,134},
            thickness=1));
        connect(tissues.port_Flow, veins.port_Flow) annotation (Line(
            points={{0,-16},{0,20}},
            color={0,0,0},
            thickness=1));
      connect(pressureMeasure.bloodPort_in, pulmonary.bloodPort_out) annotation (
          Line(
          points={{-12.9,89},{-12.9,80},{-1,80},{-1,70}},
          color={28,108,200},
          thickness=1));
      connect(pressureMeasure.concO2, lungsOneCompartment.cvO2) annotation (Line(
            points={{1,105},{10.5,105},{10.5,106},{20,106}}, color={0,0,127}));
      connect(lungsOneCompartment.cvCO2, pressureMeasure.concCO2) annotation (Line(
            points={{20,102},{12,102},{12,101},{1,101}}, color={0,0,127}));
        connect(o2CO2.pH,ammoniumExcretion. pH) annotation (Line(points={{155.1,
                47.6235},{160,47.6235},{160,-80},{-120,-80},{-120,11.8},{
                -106.615,11.8}},
                     color={0,0,127}));
        connect(ammoniumExcretion.hco3_outflow, tissues.BE) annotation (Line(
            points={{-72,0.8},{-12,0.8},{-12,-18}},
            color={107,45,134},
            thickness=1));
        connect(ammoniumExcretion.UA_outflow,ionSelector. port_b) annotation (
            Line(
            points={{-72.2769,5.75},{-70.138,5.75},{-70.138,5},{-68,5}},
            color={107,45,134},
            thickness=1));
        connect(veins.port_ions,ionSelector. port_a) annotation (Line(
            points={{-19.8,20},{-46,20},{-46,5},{-54,5}},
            color={107,45,134},
            thickness=1));
      connect(ionSelector1.port_b,ammoniumExcretion. Cl_outflow) annotation (Line(
          points={{-68,-5},{-72.2769,-5},{-72.2769,0.25}},
          color={107,45,134},
          thickness=1));
      connect(ionSelector1.port_a, veins.port_ions) annotation (Line(
          points={{-54,-5},{-46,-5},{-46,20},{-19.8,20}},
          color={107,45,134},
          thickness=1));
        connect(o2CO2.cHCO3,ammoniumExcretion. HCO3) annotation (Line(points={{155.1,
                45.0353},{158,45.0353},{158,-78},{-118,-78},{-118,9.6},{
                -106.615,9.6}},    color={0,0,127}));
        connect(ionRegulation.q_out, veins.port_ions) annotation (Line(
            points={{-78,-32},{-46,-32},{-46,20},{-19.8,20}},
            color={107,45,134},
            thickness=1));
      connect(vomiting.HCO3, veins.port_BEox) annotation (Line(
          points={{-70,-68},{-42,-68},{-42,14},{-12,14},{-12,20}},
          color={107,45,134},
          thickness=1));
      connect(vomiting.port_a, tissues.ions_plasma) annotation (Line(
          points={{-70,-76},{-46,-76},{-46,20},{-20,20},{-20,-16}},
          color={107,45,134},
          thickness=1));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                -80},{200,140}}), graphics={
            Rectangle(
              extent={{-110,18},{-68,-16}},
              lineColor={244,125,35},
              lineThickness=1,
              pattern=LinePattern.Dash),
            Text(
              extent={{-108,-50},{-66,-40}},
              lineColor={244,125,35},
              pattern=LinePattern.Dash,
              lineThickness=1,
              textString="UseMetabolicUABalance"),
            Rectangle(
              extent={{-110,-20},{-66,-48}},
              lineColor={244,125,35},
              lineThickness=1,
              pattern=LinePattern.Dash)}),    Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>", revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
        experiment(StopTime=100000),
        Icon(coordinateSystem(extent={{-120,-80},{200,140}})));
    end SimplestCircWithGasTissuesRespirationMet;

      package validation

        package AcidbaseDisorders

          model MetabolicAcidosisChronic
            extends Results.CompleteModel(
                                  modelSettings(makeUAstep=true,
              breakTime(displayUnit="d") = 864000,
              breakLength(displayUnit="d") = 86400000,
                UAstepRatio=1.8), ammoniumExcretion1(ammonium(
                    metabolicRateNormalizer1(upperRatioLimit=3))));
          end MetabolicAcidosisChronic;

        end AcidbaseDisorders;
      end validation;

    end TornApproach;
  end Validation;

  package Results
    extends Modelica.Icons.ExamplesPackage;
  model SimplestCircWithGas
      "Cardiovascular part of Guyton-Coleman-Granger's model from 1972"
      extends Circulation.SimplestCirculation(
        pulmonaryVeins(
          useO2_input=true,
          useCO2_input=true,
          useBEox_input=true,
          useFlow_input=false,
          useFlowMeasureOutput=true),
        veins(
          useO2_input=true,
          useCO2_input=true,
          useBEox_input=true,
          useFlow_input=true,
          useIons_input=true),
        modelSettings(
          useIons=true,
          useOsmoticFlow=false,
          UseMetabolicUABalance=false,
          arterialO2conc_start=8.23882,
          arterialCO2conc_start=21.659,
          venousO2conc_start=6.03882,
          venousCO2conc_start=23.529,
          UseRespiratoryCompensation=true));
     extends Modelica.Icons.Example;
     import Physiolibrary.Hydraulic;
      Acidbase.OSA.O2CO2 o2CO2
        annotation (Placement(transformation(extent={{-22,-22},{22,22}},
          rotation=0,
          origin={132,44})));

      Tissues.SimpleCells cells(
        useMetabolicUaProduction=modelSettings.UseMetabolicUABalance,
        diffusion(Conductance(displayUnit="l/min") = 0.16666666666667),
        diffusion1(Conductance=0.00016666666666667),
        limitO2Metabolism(respiratoryQuotient=modelSettings.respiratoryQuotient,
            limiterEnabled=false)) annotation (Placement(transformation(
            extent={{9.875,9.875},{-9.875,-9.875}},
            rotation=180,
            origin={30.125,9.875})));
      Respiratory.AlveolarVentilation alveolarVentilation(VRD_T=80000.0,
          respiratoryCompensationEnabled=modelSettings.UseRespiratoryCompensation)
        annotation (Placement(transformation(extent={{170,36},{190,56}})));
      replaceable
      Respiratory.LungsOneCompartment lungsOneCompartment constrainedby
        Respiratory.LungsBase
        annotation (Placement(transformation(extent={{20,108},{40,88}})),
          __Dymola_choicesAllMatching=true);
    BloodComponents.PressureMeasure pressureMeasure
      annotation (Placement(transformation(extent={{-18,86},{2,106}})));
  equation

    connect(flowConcentrationMeasure1.O2_conc, o2CO2.ctO2) annotation (Line(
          points={{92,58},{92,54.3529},{108.9,54.3529}},        color={0,0,
            127}));
    connect(o2CO2.ctCO2, flowConcentrationMeasure1.CO2_conc) annotation (Line(
          points={{108.9,51.7647},{104.45,51.7647},{104.45,50},{92,50}},
                                                                    color={0,
            0,127}));
    connect(o2CO2.BEox, flowConcentrationMeasure1.BEox_conc) annotation (Line(
          points={{108.9,49.1765},{108.9,42},{92,42}},
                                                     color={0,0,127}));
    connect(alveolarVentilation.pO2a, o2CO2.pO2) annotation (Line(points={{170,54},
              {170,53.3176},{155.1,53.3176}},              color={0,0,127}));
    connect(alveolarVentilation.pCO2a, o2CO2.pCO2) annotation (Line(points={{170,
              49.8},{155.1,49.8},{155.1,50.7294}},             color={0,0,127}));
    connect(alveolarVentilation.pHa, o2CO2.pH) annotation (Line(points={{170,
              44.8},{170,47.6235},{155.1,47.6235}},          color={0,0,127}));
      connect(alveolarVentilation.VA, lungsOneCompartment.VAi) annotation (
          Line(points={{191,49},{192,49},{192,50},{196,50},{196,112},{30,112},
              {30,108}}, color={0,0,127}));
      connect(pulmonaryVeins.volumeFlow, lungsOneCompartment.bloodFlow)
        annotation (Line(points={{20,74},{10,74},{10,94},{20,94}}, color={0,0,
              127}));
      connect(lungsOneCompartment.O2, pulmonaryVeins.port_O2) annotation (
          Line(
          points={{24,88},{24,80}},
          color={107,45,134},
          thickness=1));
      connect(pulmonaryVeins.port_CO2, lungsOneCompartment.CO2) annotation (
          Line(
          points={{28,80},{28,88}},
          color={107,45,134},
          thickness=1));
      connect(pulmonaryVeins.port_BEox, lungsOneCompartment.BEox) annotation (
         Line(
          points={{32,80},{32,88}},
          color={107,45,134},
          thickness=1));
      connect(veins.port_ions, cells.ions) annotation (Line(
          points={{-19.8,20},{-20,20},{-20,-1.77636e-15},{20.25,-1.77636e-15}},
          color={107,45,134},
          thickness=1));
      connect(veins.port_BEox, cells.HCO3) annotation (Line(
          points={{-12,20},{-12,8},{20.25,8},{20.25,7.9}},
          color={107,45,134},
          thickness=1));
      connect(veins.port_CO2, cells.CO2) annotation (Line(
          points={{-8,20},{-8,12},{20.25,12},{20.25,11.85}},
          color={107,45,134},
          thickness=1));
      connect(veins.port_O2, cells.O2) annotation (Line(
          points={{-4,20},{-4,16},{20.25,16},{20.25,15.8}},
          color={107,45,134},
          thickness=1));
    connect(pressureMeasure.bloodPort_in, pulmonary.bloodPort_out) annotation (
        Line(
        points={{-12.9,89},{-12.9,80},{-1,80},{-1,70}},
        color={28,108,200},
        thickness=1));
    connect(pressureMeasure.concO2, lungsOneCompartment.cvO2) annotation (Line(
          points={{1,105},{10.5,105},{10.5,106},{20,106}}, color={0,0,127}));
    connect(lungsOneCompartment.cvCO2,pressureMeasure. concCO2) annotation (Line(
          points={{20,102},{12,102},{12,101},{1,101}}, color={0,0,127}));
    annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-120,
              -80},{200,140}})),            Documentation(info="<html>
<p>Cardiovascular subsystem in famous Guyton-Coleman-Granger model from 1972. </p>
<p><br/>Model, all parameters and all initial values are from article: </p>
<p>A.C. Guyton, T.G. Coleman, H.J. Granger (1972). &quot;Circulation: overall regulation.&quot; Annual review of physiology 34(1): 13-44.</p>
</html>",
        revisions="<html>
<p><i>2014</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),
      experiment(StopTime=100000),
      Icon(coordinateSystem(extent={{-120,-80},{200,140}})));
  end SimplestCircWithGas;

    model CompleteModel
      extends Results.SimplestCircWithGas(
                                  modelSettings(UseMetabolicUABalance=true,
            UseRespiratoryCompensation=true),
                          alveolarVentilation(VRD_T(displayUnit="s") = 1,
          t_var(displayUnit="h") = 21600,
          k1_ac=0.03));
      Kidney.KidneyMetabolicCompensation ammoniumExcretion1 if
                                                     modelSettings.UseMetabolicUABalance
        annotation (Placement(transformation(extent={{-86,0},{-60,20}})));
      Tissues.ISF iSF(iSF_initialization(isf_dCO2=0.0, isf_dHCO3=0.0))
                      annotation (Placement(transformation(
            extent={{-14,-12},{14,12}},
            rotation=270,
            origin={-12,-30})));
    equation
      connect(o2CO2.pH,ammoniumExcretion1. pH) annotation (Line(points={{155.1,
              47.6235},{162,47.6235},{162,-78},{-116,-78},{-116,18},{-85,18}},
                             color={0,0,127}));
      connect(ammoniumExcretion1.HCO3, o2CO2.cHCO3) annotation (Line(points={{-85,16},
              {-114,16},{-114,-76},{160,-76},{160,45.0353},{155.1,45.0353}},
                                         color={0,0,127}));
      connect(veins.port_BEox,ammoniumExcretion1. hco3_outflow) annotation (
         Line(
          points={{-12,20},{-12,8},{-60,8}},
          color={107,45,134},
          thickness=1));
      connect(ammoniumExcretion1.ions, veins.port_ions) annotation (Line(
          points={{-60,0},{-20,0},{-20,20},{-19.8,20}},
          color={107,45,134},
          thickness=1));
      connect(veins.port_Flow, iSF.port_Flow) annotation (Line(
          points={{0,20},{0,-16}},
          color={0,0,0},
          thickness=1));
      connect(iSF.tO2, veins.port_O2) annotation (Line(
          points={{-4,-16},{-4,20}},
          color={107,45,134},
          thickness=1));
      connect(iSF.tCO2, veins.port_CO2) annotation (Line(
          points={{-8,-16},{-8,-16},{-8,20}},
          color={107,45,134},
          thickness=1));
      connect(veins.port_BEox, iSF.BE) annotation (Line(
          points={{-12,20},{-12,-16}},
          color={107,45,134},
          thickness=1));
      connect(veins.port_ions, iSF.ions_plasma) annotation (Line(
          points={{-19.8,20},{-20,20},{-20,-16}},
          color={107,45,134},
          thickness=1));
    end CompleteModel;

    model ImpairedLungVentilation
     extends Results.SimplestCircWithGas(                redeclare Respiratory.LungsTwoCompartments
          lungsOneCompartment, modelSettings(
          makeVentilationPerfusionFractionStep=true,
          breakLength(displayUnit="d") = 1728000,
          breakTime(displayUnit="h") = 3600,
          break2Time(displayUnit="h") = 7200));
      Real pO2_kPa = floor(o2CO2.pO2 + 0.5)/100;
      Real pCO2_kPa = floor(o2CO2.pO2 + 0.5)/100;
      Real timeHours = time/60/60;
    end ImpairedLungVentilation;

    model TissuePerfusion
      extends Results.SimplestCircWithGas(
        pulmonaryVeins(useIons_input=false, useIons=false),
        nonMuscle(useConductanceInput=true),
        cells(useMetabolicUaProduction=true),
        modelSettings(fixedMetabolismCompensation=true));
        BloodComponents.BloodConductor nonMuscle1(useConductanceInput=true,
          Conductance(displayUnit="l/(mmHg.min)") = 3.5627924852669e-9)
                                                       annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={30,-22})));
      Interfaces.Shunt shunt(G_total(displayUnit="l/(kPa.d)") = 3.5532407407407e-9)
        annotation (Placement(transformation(extent={{110,-6},{90,14}})));
        BloodComponents.BloodVesselConstVolume       veins1(
        ion_start=modelSettings.IonConcentration,
        O2_concentration=modelSettings.venousO2conc_start,
        CO2_concentration=modelSettings.venousCO2conc_start,
        useFlowMeasureOutput=false,
        volume_start(displayUnit="l") = 0.001,
        useFlow_input=false,
        useO2_input=true,
        useCO2_input=true,
        useBEox_input=true,
        useIons_input=true,
        useIons=true)         annotation (Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-10,-22})), __Dymola_choicesAllMatching=true);
      Tissues.TissueCells tissueCells(limitO2Metabolism(
          criticalPoint(displayUnit="Pa"),
          limiterEnabled=true,
          metabolismFlowRate=modelSettings.metabolismO2FlowRate/100),
        iSFMembraneO2(Conductance=modelSettings.O2DiffusionPermeability/100),
        iSFMembraneCO2(Conductance=modelSettings.CO2DiffusionPermeability/
              100),
        useMetabolicUaProduction=false)
        annotation (Placement(transformation(extent={{12,-56},{34,-36}})));

      Kidney.KidneyMetabolicCompensation ammoniumExcretion1(normalUA(k=
              modelSettings.metabolismUAFlowRate_norm))
        annotation (Placement(transformation(extent={{-96,-2},{-60,20}})));
        Real tissuePerfusionRatio = if time > 36000 then 0.2 else if time > 3600 then 0.5 else 1;
        parameter Real tp = 0.5;
      Physiolibrary.Types.Constants.FractionConst       VAi1(k(displayUnit="%") = 0.01)
        annotation (Placement(transformation(extent={{136,-2},{125,8}})));
    equation
          shunt.shunt_fraction = tissuePerfusionRatio/100;
               // shunt.shunt_fraction = tp/100;
      connect(nonMuscle1.bloodPort_in, flowConcentrationMeasure1.bloodPort_out)
        annotation (Line(
          points={{39,-22},{80,-22},{80,41}},
          color={28,108,200},
          thickness=1));
      connect(shunt.G_main, nonMuscle.cond) annotation (Line(points={{91,13},
              {48,13},{48,23.4},{30,23.4}},     color={0,0,127}));
      connect(shunt.G_shunt, nonMuscle1.cond) annotation (Line(points={{91,-5},
              {48,-5},{48,-15.4},{30,-15.4}},       color={0,0,127}));
      connect(nonMuscle1.bloodPort_out, veins1.bloodPort_in) annotation (
          Line(
          points={{21,-22},{-0.2,-22}},
          color={28,108,200},
          thickness=1));
      connect(veins1.bloodPort_out, pulmonary.bloodPort_in) annotation (
          Line(
          points={{-20,-22},{-40,-22},{-40,70},{-19,70}},
          color={28,108,200},
          thickness=1));
      connect(veins1.port_O2, tissueCells.tO2) annotation (Line(
          points={{-4,-32},{-4,-40},{12,-40}},
          color={107,45,134},
          thickness=1));
      connect(veins1.port_CO2, tissueCells.tCO2) annotation (Line(
          points={{-8,-32},{-8,-44},{12,-44}},
          color={107,45,134},
          thickness=1));
      connect(veins1.port_BEox, tissueCells.BE) annotation (Line(
          points={{-12,-32},{-12,-48},{12,-48}},
          color={107,45,134},
          thickness=1));
      connect(o2CO2.pH, ammoniumExcretion1.pH) annotation (Line(points={{155.1,
              47.6235},{162,47.6235},{162,-78},{-116,-78},{-116,17.8},{-94.6154,
              17.8}},        color={0,0,127}));
      connect(ammoniumExcretion1.HCO3, o2CO2.cHCO3) annotation (Line(points={{
              -94.6154,15.6},{-114,15.6},{-114,-76},{160,-76},{160,45.0353},{
              155.1,45.0353}},           color={0,0,127}));
      connect(tissueCells.ions, veins1.port_ions) annotation (Line(
          points={{12,-56},{-19.8,-56},{-19.8,-32}},
          color={107,45,134},
          thickness=1));
      connect(veins.port_BEox, ammoniumExcretion1.hco3_outflow) annotation (
         Line(
          points={{-12,20},{-12,6.8},{-60,6.8}},
          color={107,45,134},
          thickness=1));
      connect(ammoniumExcretion1.ions, veins.port_ions) annotation (Line(
          points={{-60,-2},{-20,-2},{-20,20},{-19.8,20}},
          color={107,45,134},
          thickness=1));
    end TissuePerfusion;

    model RespiratoryAcidosis
      extends Results.CompleteModel(
                            modelSettings(
          UseRespiratoryCompensation=true,makeCO2FractionStep=
                                                             true,
          breakTime(displayUnit="d") = 86400,
          breakLength(displayUnit="d") = 604800,
          useIons=true),
        alveolarVentilation(VRD_T=1, t_var=259200.0),
        ammoniumExcretion1(ammonium(metabolicRateNormalizer1(T=172800.0)),
            titratableAcid(HalfTime(displayUnit="d") = 86400)));
    end RespiratoryAcidosis;

    model RespiratoryAlkalosis
      extends Results.CompleteModel(
                            modelSettings(
          fixedMetabolismCompensation=false,
          makeVAstep=true,
          breakTime(displayUnit="d") = 86400,
          UseRespiratoryCompensation=false,
          useIons=true,
          VAstepRatio=2,
          breakLength(displayUnit="d") = 864000),
                          alveolarVentilation(VRD_T=800));
    end RespiratoryAlkalosis;

    model MetabolicAcidosisAcute
      extends Results.CompleteModel(
                            modelSettings(
          useIons=true,
          breakTime(displayUnit="d") = 86400,
          breakLength(displayUnit="h") = 3600,
          makeUAstep=true,
          fixedMetabolismCompensation=false,
          UAstepRatio=100),                  alveolarVentilation(k1_ac=0.03, t_var=
              21600));
      annotation (experiment(StopTime=864000, Interval=150));
    end MetabolicAcidosisAcute;

    model MetabolicAlkalosis
      extends Results.CompleteModel(alveolarVentilation(k1_al=2.5),
          ammoniumExcretion1(titratableAcid(HalfTime=172800)));
      Ions.vomiting vomiting(totalHCO3Amount=0.15,pulse(startTime=86400))
        annotation (Placement(transformation(extent={{-60,-40},{-80,-20}})));
    equation
      connect(vomiting.HCO3, veins.port_BEox) annotation (Line(
          points={{-60,-30},{-40,-30},{-40,8},{-12,8},{-12,20}},
          color={107,45,134},
          thickness=1));
      connect(veins.port_ions, vomiting.port_a) annotation (Line(
          points={{-19.8,20},{-20,20},{-20,0},{-34,0},{-34,-38},{-60,-38}},
          color={107,45,134},
          thickness=1));

      annotation (experiment(StopTime=518400, Interval=149.999904));
    end MetabolicAlkalosis;

  end Results;
  annotation(uses(Physiolibrary(version="2.3.2-beta"), Modelica(version="3.2.2"),
      Physiomodel(version="1.0.0")));
end AcidBaseBalance;
