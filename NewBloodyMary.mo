within ;
package NewBloodyMary_testing
  package OSA
    function HbFromGramDlToMmolL
      "recalculation of hemoglobin concentration form g/dl to mmol/l"
      input Real Hbg "concentration of hemoglobin in g/dl";
      output Real ctHb "concentration of hemoglobin concentration in mmol/l";
    algorithm
      ctHb := Hbg/1.6114;
    end HbFromGramDlToMmolL;

    function aFrom
      input Real pH;
      input Real pCO2;
      input Real MetHb;
      input Real HbF;
      input Real cDPG;
      output Real returnValue;
    protected
      Real dadpH =   -0.88;
      Real dadlnpCO2 =   0.048;
      Real dadxMetHb =   -0.7;
      Real dadxHbF =   -0.25;
      Real dadcDPG0 =   0.3;
      Real pH0 =   7.40;
      Real pCO20 =   5.33;
      Real dadcDPGxHbF =   -0.1;
      Real cDPG0 =   5.0;
    algorithm
      returnValue:= dadpH*(pH - pH0)
          + dadlnpCO2*log(pCO2/pCO20)
          + dadxMetHb*MetHb
          + dadxHbF*HbF
          + (dadcDPG0 + dadcDPGxHbF*HbF)*(cDPG/cDPG0 - 1.0);
    end aFrom;

    function sCO
      input Real FCOHb;
      input Real FMetHb;
      output Real returnValue;
    protected
      Real xFCOHb;
    algorithm
      if FCOHb < 0 then
         xFCOHb := 0;
      else xFCOHb := FCOHb;
      end if;
      returnValue := xFCOHb/(1.0 - FMetHb);
    end sCO;

    function antilogit
      input Real x;
      output Real returnValue;
    algorithm
      returnValue := exp(x)/(1.0 + exp(x));
    end antilogit;

    function logit
      input Real x;
      output Real returnValue;
    algorithm
      returnValue :=  log(x/(1 - x));
    end logit;

    function h
      input Real a;
      output Real returnValue;
    protected
      Real h0 =   3.5;
    algorithm
      returnValue:=h0+a;
    end h;

    function x
     input Real pO2CO;
     input Real a;
     input Real T;
     output Real returnValue;
    protected
     Real p0 =    7.0;
     Real T0 =   37.0;
     Real dbdT =   0.055;
    algorithm
     returnValue := log(pO2CO/p0) - a - dbdT*(T - T0);
    end x;

    function dydx
      input Real pO2CO;
      input Real a;
      input Real T;
      output Real returnValue;
    protected
      Real k =    0.5342857;
    algorithm
      returnValue :=1 + h(a)*k*(1 - (tanh(k*x(pO2CO, a, T)))^2);
    end dydx;

    function y
      input Real pO2CO;
      input Real a;
      input Real T;
      output Real returnValue;
    protected
      Real y0 =   1.8747;
      Real k =   0.5342857;
    algorithm
      returnValue := y0 + x(pO2CO, a, T) + h(a)*tanh(k*x(pO2CO, a, T));
    end y;

    function sO2CO
      input Real pO2CO;
      input Real a;
      input Real T;
      output Real returnValue;
    algorithm
      returnValue := antilogit(y(pO2CO, a, T));
    end sO2CO;

    function MpCOof
      input Real pO2CO;
      input Real a;
      input Real T;
      input Real FCOHb;
      input Real FMetHb;
      output Real returnValue;
    algorithm
      returnValue := (pO2CO/sO2CO(pO2CO, a, T))*sCO(FCOHb, FMetHb);
    end MpCOof;

    function pO2fr
      input Real sO2;
      input Real a;
      input Real T;
      input Real FCOHb;
      input Real FMetHb;
      output Real returnValue;
    protected
      Real pO2CO;
      Real sO2CO;
      Real ym;
      Real yc;
      Real dydxc;
      Real p0 =    7.0;
      Real dbdT =    0.055;
      Real T0 =   37;
      Boolean doit;
      Real Epsilon =   0.000001;
    algorithm
      pO2CO := exp(log(p0) + a + dbdT*(T - T0));
      sO2CO := sO2 + sCO(FCOHb, FMetHb)*(1 - sO2);
      ym := logit(sO2CO);
      doit := false;
      while not doit loop
        yc := y(pO2CO, a, T);
        dydxc := dydx(pO2CO, a, T);
        pO2CO := exp(log(pO2CO) + (ym - yc)/dydxc);
        doit := abs(ym - yc) < Epsilon;
      end while;
        returnValue := pO2CO - MpCOof(pO2CO, a, T, FCOHb, FMetHb);
    end pO2fr;

    function sO2fr
      input Real pO2CO;
      input Real a;
      input Real T;
      input Real FCOHb;
      input Real FMetHb;
      output Real returnValue;
    protected
      Real sO2COc;
      Real sCOc;
    algorithm
      sO2COc := sO2CO(pO2CO, a, T);
      sCOc := sCO(FCOHb, FMetHb);
      returnValue := (sO2COc - sCOc)/(1 - sCOc);
    end sO2fr;

    function sO2of "calculation of oxygen hemoglobin saturation"
      input Real pO2T "Po2 at given temperature in kPa";
      input Real pHT "pH at given temperature";
      input Real pCO2T "pCO2 at given temperature in kPa";
      input Real cDPG "2'3 DPG koncentration in mmol/l";
      input Real FCOHb "substance fraction of carboxyhemoglobin";
      input Real FMetHb "substance fraction of hemiglobin";
      input Real FHbF "substance fraction of fetal hemoglobin";
      input Real TPt "temperature in°C";
      output Real returnValue "oxygen hemoglobin saturation";
    protected
      Real MpCOa;
      Real MpCOb;
      Real sCOc;
      Boolean doit;
      Real a;
      Real Epsilon =  0.000001;
    algorithm
      a := aFrom(pHT, pCO2T, FMetHb, FHbF, cDPG);
      sCOc := sCO(FCOHb, FMetHb);
      if sCOc > 0 then
         MpCOa := pO2fr(sCOc, a, TPt, 0, FMetHb);
      else MpCOa := 0;
      end if;
      MpCOb := MpCOa;
      doit := false;
      while (not doit) loop
          MpCOb := 0.6*MpCOa + 0.4*MpCOb;
          MpCOa := MpCOof(pO2T + MpCOb, a, TPt, FCOHb, FMetHb);
          doit := (abs(MpCOa - MpCOb) < Epsilon);
      end while;
      returnValue := sO2fr(pO2T + MpCOa, a, TPt, FCOHb, FMetHb);
    end sO2of;

    function aO2
     input Real temp;
     output Real returnValue;
    algorithm
      returnValue := exp(log(0.0105) - 0.0115*(temp - 37.0) + 0.5*0.00042*(temp - 37.0)^2);
    end aO2;

    function dissO2 "concentration of dissolved oxygen in blood"
      input Real pO2;
      input Real temp;
      output Real returnValue "dissolved blood oxygen in mmol/l";
    algorithm
      returnValue := aO2(temp)*pO2;
    end dissO2;

    function ceHbof "effective hemoglobin concentration in mmol/l"
      input Real ctHb "concentration of hemoglobin in mmol/l";
      input Real FCOHb "substance fraction of carboxyhemoglobin";
      input Real FMetHb "substance fraction of hemoglobin";
      output Real returnValue "effective contentration of hemoglobin";
    algorithm
       returnValue := ctHb*(1 - FCOHb - FMetHb);
    end ceHbof;

    function ctO2Bof "Calculation of concentration of total oxygen"
      input Real ctHb "conentration of hemoglobin in mmol/l";
      input Real pO2 "pO2 at givent temperature in kPa";
      input Real pHp "pH in plasma at given temperature";
      input Real pCO2 "pCO2 at given temperature in kPa";
      input Real cDPG "concentration of 2,3 diphosphoglycerate in mmol/l";
      input Real FCOHb "substance fraction of carboxyhemoglobin";
      input Real FMetHb "substance fraction of hemiglobin";
      input Real FHbF "substance fraction of fetal hemogobin";
      input Real temp "temperature in °C";
      output Real ctO2
        "concentration of total blood oxygen concentration in mmol/l";
    protected
       Real sO2t "oxygen saturation of hemoglobin at given temperature";
       Real dissO2t "koncentration of dissolved oxygen in blood in mmol/l";
       Real ceHb "effective hemoglobin concentration in mmol/l";
    algorithm

      sO2t := sO2of( pO2, pHp, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
      ceHb := ceHbof(ctHb, FCOHb, FMetHb);

      dissO2t := dissO2(pO2, temp);
      ctO2 := dissO2t + sO2t * ceHb;
    end ctO2Bof;

    function O2total "Calculation of concentration of total oxygen"
      input Real ctHb "conentration of hemoglobin in mmol/l";
      input Real pO2 "pO2 at givent temperature in kPa";
      input Real pHp "pH in plasma at given temperature";
      input Real pCO2 "pCO2 at given temperature in kPa";
      input Real cDPG "concentration of 2,3 diphosphoglycerate in mmol/l";
      input Real FCOHb "substance fraction of carboxyhemoglobin";
      input Real FMetHb "substance fraction of hemiglobin";
      input Real FHbF "substance fraction of fetal hemogobin";
      input Real temp "temperature in °C";
      output Real ctO2
        "concentration of total blood oxygen concentration in mmol/l";
      output Real sO2t "oxygen saturation of hemoglobin at given temperature";
      output Real dissO2t
        "koncentration of dissolved oxygen in blood in mmol/l";
      output Real ceHb "effective hemoglobin concentration in mmol/l";
    algorithm

      sO2t := sO2of( pO2, pHp, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
      ceHb := ceHbof(ctHb, FCOHb, FMetHb);
      dissO2t := dissO2(pO2, temp);
      ctO2 := dissO2t + sO2t * ceHb;
    end O2total;

    function O2totalSI "Calculation of concentration of total oxygen"
      input Real ctHb "conentration of hemoglobin in mmol/l";
      input Real pO2 "pO2 at givent temperature in Pa";
      input Real pHp "pH in plasma at given temperature";
      input Real pCO2 "pCO2 at given temperature in Pa";
      input Real cDPG "concentration of 2,3 diphosphoglycerate in mmol/l";
      input Real FCOHb "substance fraction of carboxyhemoglobin";
      input Real FMetHb "substance fraction of hemiglobin";
      input Real FHbF "substance fraction of fetal hemogobin";
      input Real temp "temperature in Â°K";
      output Real ctO2
        "concentration of total blood oxygen concentration in mmol/l";
      output Real sO2t "oxygen saturation of hemoglobin at given temperature";
      output Real dissO2t
        "koncentration of dissolved oxygen in blood in mmol/l";
      output Real ceHb "effective hemoglobin concentration in mmol/l";
    algorithm

      sO2t := sO2of( pO2/1000, pHp, pCO2/1000, cDPG, FCOHb, FMetHb, FHbF, temp-273.15);
      ceHb := ceHbof(ctHb, FCOHb, FMetHb);
      dissO2t := dissO2(pO2/1000, temp-273.15);
      ctO2 := dissO2t + sO2t * ceHb;
    end O2totalSI;

    function lg
      input Real x;
      output Real result;
    algorithm
        result := (log(x))/log( 10); //it is not necessary, in Modelica exists embeded function log10
    end lg;

    function antilg
      input Real x;
      output Real result;
    algorithm
      result :=exp( log(10)*x);
    end antilg;

    function aCO2of
      input Real T;
      output Real result;
    protected
     Real aCO2T0 =   0.23;  //mM/kPa
     Real dlgaCO2dT =   -0.0092;  // lg(mM/kPa)/K
     Real T0 =  37;
    algorithm
     result:= aCO2T0 * antilg(dlgaCO2dT*(T - T0));
    end aCO2of;

    function pKof
     input Real T;
     output Real result;
    protected
       Real pKT0 = 6.1;
       Real dpKdT = -0.0026;
       Real T0 = 37;
    algorithm
       result := pKT0 + dpKdT*(T - T0);
    end pKof;

    function ctCO2Pof
      input Real pH;
      input Real pCO2;
      input Real T;
      output Real result;
    algorithm
      result := pCO2 * aCO2of(T)*(1 + antilg(pH-pKof(T)));
    end ctCO2Pof;

    function cHCO3of "calculation of plasma bicarbonate concentration"
      input Real pH "plasma pH at given temperature in mmol/l";
      input Real pCO2 "pCO2 in kPa";
      input Real T "temperature in Â°C";
      output Real HCO3p "plasma bicarbonate concentration in mmol/l";
    algorithm
      HCO3p := pCO2*aCO2of( T)*antilg( pH - pKof( T));
    end cHCO3of;

    function pCO22of
      input Real pCO21;
      input Real T1;
      input Real T2;
      input Real cHb;
      input Real cAlb;
      input Real pH1;
      output Real result;
    protected
      Real betaX;
      Real dpHdT1;
      Real pH2;
      Real cHCO3;
      Real dlgpCO2dT1;
      Real pCO22;
      Real dpHdT2;
      Real dlgpCO2dT2;
      Real dpHdTmean;
      Real dlgpCO2dTmean;
      Real cAlbN= 0.66;
    algorithm
       betaX := 7.7 + 8*(cAlb - cAlbN) + 2.3*cHb;

       dpHdT1 := (-0.0026 -
          betaX*0.016*(1/(2.3*cHCO3of( pH1, pCO21, T1)) +
          1/(2.3*pCO21*aCO2of( T1))))/(1 +
          betaX*(1/(2.3*cHCO3of( pH1, pCO21, T1)) +
          1/(2.3*pCO21*aCO2of( T1))));
       pH2 := pH1 + dpHdT1*(T2 - T1);

       cHCO3 := cHCO3of( pH1, pCO21, T1);
       dlgpCO2dT1 := -0.0026 - (-0.0092) -
          dpHdT1 + (1/(2.3*cHCO3))*(betaX*dpHdT1 + betaX*0.016);
       pCO22 := antilg( lg( pCO21) + dlgpCO2dT1*(T2 - T1));

       dpHdT2 := (-0.0026 -
          betaX*0.016*(1/(2.3*cHCO3of( pH2, pCO22, T2)) +
          1/(2.3*pCO22*aCO2of( T2))))/(1 +
          betaX*(1/(2.3*cHCO3of( pH2, pCO22, T2)) +
          1/(2.3*pCO22*aCO2of( T2))));
       dpHdTmean := (dpHdT1 + dpHdT2)/2;
       pH2 := pH1 + dpHdTmean*(T2 - T1);

       cHCO3 := cHCO3of( pH2, pCO22, T2);
       dlgpCO2dT2 := -0.0026 - (-0.0092) -
           dpHdT2 + (1/(2.3*cHCO3))*(betaX*dpHdT2 + betaX*0.016);
       dlgpCO2dTmean := (dlgpCO2dT1 + dlgpCO2dT2)/2;

       result := antilg( lg( pCO21) + dlgpCO2dTmean*(T2 - T1));
    end pCO22of;

    function pH2of
      input Real pH1;
      input Real T1;
      input Real T2;
      input Real cHb;
      input Real cAlb;
      input Real pCO21;
      output Real result;
    protected
      Real betaX;
      Real dpHdT1;
      Real pH2;
      Real cHCO3;
      Real dlgpCO2dT1;
      Real pCO22;
      Real dpHdT2;
      Real dpHdTmean;
      Real cAlbN = 0.66;
    algorithm
      betaX := 7.7 + 8*(cAlb - cAlbN) + 2.3*cHb;
      dpHdT1 := (-0.0026 -
         betaX*0.016*(1/(2.3*cHCO3of( pH1, pCO21, T1)) +
            1/(2.3*pCO21*aCO2of( T1))))/(1 +
         betaX*(1/(2.3*cHCO3of( pH1, pCO21, T1)) +
            1/(2.3*pCO21*aCO2of( T1))));
      pH2 := pH1 + dpHdT1*(T2 - T1);

      cHCO3 := cHCO3of( pH1, pCO21, T1);
      dlgpCO2dT1 := -0.0026 - (-0.0092) -
      dpHdT1 + (1/(2.3*cHCO3))*(betaX*dpHdT1 + betaX*0.016);
      pCO22 := antilg( lg( pCO21) + dlgpCO2dT1*(T2 - T1));

      dpHdT2 := (-0.0026 -
         betaX*0.016*(1/(2.3*cHCO3of( pH2, pCO22, T2)) +
            1/(2.3*pCO22*aCO2of( T2))))/(1 +
         betaX*(1/(2.3*cHCO3of( pH2, pCO22, T2)) +
            1/(2.3*pCO22*aCO2of( T2))));
      dpHdTmean := (dpHdT1 + dpHdT2)/2;
      result := pH1 + dpHdTmean*(T2 - T1);

    end pH2of;

    function dissCO2 "concentration of dissolved CO2 in blood"
      //may be better calculated by ctCO2Pof
      input Real pCO2;
      input Real pH;
      input Real temp;
      input Real ctHb;
      input Real cAlb;
      output Real dCO2 "dissolved CO2 in blood mmol/l";
    protected
      Real T0=37;
      Real aCO2;
      Real pCO2T0;
    algorithm
      pCO2T0 :=  pCO22of( pCO2, temp, T0, ctHb, cAlb, pH);
      aCO2 := aCO2of(T0);
      dCO2 := aCO2*pCO2T0;
    end dissCO2;

    function ctCO2Bof "Calculation of blood total CO2 concentration"
      input Real pH "plasma pH at given temperature";
      input Real pCO2 "pCO2 at given temperatura in kPa";
      input Real T "temperature in°C";
      input Real ctHb "Hemoglobin concentration in mmol/l";
      input Real sO2 "O2 hemoglobin saturation";
      output Real ctCO2B "Total blood CO2 concetratoin in mmol/l";
    protected
      Real dpHEdpHP = 0.77;
      Real dpHEdsO2 = 0.035;
      Real pHEx = 7.84;
      Real sO2x = 0.06;
      Real aCO2E0 = 0.195;
      Real ctHbE = 21;
      Real pHE0 = 7.19;
      Real pKE0 = 6.125;
      Real pHT0;
      Real pCO2T0;
      Real pKE;
      Real pHE;
      Real ctCO2E;
      Real phiEB;
      Real T0=37;
      Real cAlbN = 0.66;
      Real cAlb;
      Real  pH0 = 7.40;
    algorithm
      // pCO2T0 := pCO22of (pCO2, T, T0, ctHb);
      cAlb := cAlbN; // albumin has minimal influence on total CO2 concentration
      pCO2T0 :=  pCO22of( pCO2, T, T0, ctHb, cAlb, pH);
       // pHT0 := pH2of (pH, T, T0, ctHb);
      pHT0 :=   pH2of( pH, T, T0, ctHb, cAlb, pCO2);
      pHE :=   pHE0 + dpHEdpHP*(pHT0 - pH0) + dpHEdsO2*(1 - sO2);
      //or : (pHE - 6.9) = alpha*(pHP - pH0), where alpha = 0.7 + f*(1 - sO2)
      pKE :=  pKE0 - lg( 1 + antilg( pHE - pHEx - sO2x*sO2));
      ctCO2E :=  aCO2E0*pCO2T0*(1 + antilg( pHE - pKE));
      phiEB :=  ctHb/ctHbE; // !! !! it is hematokrit!!!!!!!
      ctCO2B :=  ctCO2E*phiEB + ctCO2Pof( pHT0, pCO2T0, T0)*(1 - phiEB);
    end ctCO2Bof;

    function CO2totalSI "Calculation of blood total CO2 concentration"
      input Real pH "plasma pH at given temperature";
      input Real pCO2 "pCO2 at given temperatura in Pa";
      input Real T "temperature in °C";
      input Real ctHb "Hemoglobin concentration in mmol/l";
      input Real sO2 "O2 hemoglobin saturation";
      output Real ctCO2B "Total blood CO2 concetratoin in mmol/l";
      output Real cHCO3 "plasma concentration of bicarbonate in mmol/l";
      output Real dCO2 "dissolved CO2 concentration in plasma";
    protected
      Real dpHEdpHP = 0.77;
      Real dpHEdsO2 = 0.035;
      Real pHEx = 7.84;
      Real sO2x = 0.06;
      Real aCO2E0 = 0.195;
      Real ctHbE = 21;
      Real pHE0 = 7.19;
      Real pKE0 = 6.125;
      Real pHT0;
      Real pCO2T0;
      Real pKE;
      Real pHE;
      Real ctCO2E;
      Real phiEB;
      Real T0=37;
      Real cAlbN = 0.66;
      Real cAlb;
      Real pH0 = 7.40;
      Real aCO2;
      Real tCO2p;

    algorithm
       // pCO2T0 := pCO22of (pCO2, T, T0, ctHb);
      cAlb := cAlbN; // albumin has minimal influence on total CO2 concentration
      pCO2T0 :=  pCO22of( pCO2/1000, T-273.15, T0, ctHb, cAlb, pH);
       // pHT0 := pH2of (pH, T, T0, ctHb);
      pHT0 :=   pH2of( pH, T-273.15, T0, ctHb, cAlb, pCO2);
      pHE :=   pHE0 + dpHEdpHP*(pHT0 - pH0) + dpHEdsO2*(1 - sO2);
      //or : (pHE - 6.9) = alpha*(pHP - pH0), where alpha = 0.7 + f*(1 - sO2)
      pKE :=  pKE0 - lg( 1 + antilg( pHE - pHEx - sO2x*sO2));
      ctCO2E :=  aCO2E0*pCO2T0*(1 + antilg( pHE - pKE));
      phiEB :=  ctHb/ctHbE; // !! !! it is hematokrit!!!!!!!
      //tCO2p := pCO2T0 * aCO2of(T0)*(1 + antilg(pHT0-pKof(T0)));
      aCO2 := aCO2of(T0);
      cHCO3 := aCO2*pCO2T0 *antilg(pHT0-pKof(T0));
      dCO2 := aCO2*pCO2T0;
      ctCO2B := ctCO2E*phiEB + (dCO2+cHCO3)*(1 - phiEB);
      //ctCO2B :=  ctCO2E*phiEB + ctCO2Pof( pHT0, pCO2T0, T0)*(1 - phiEB);
      //ctCO2B :=  ctCO2E*phiEB + tCO2p*(1 - phiEB);

    end CO2totalSI;

    function cBaseOf "Van Slyke equation"
      input Real pH;
      input Real pCO2;
      input Real cHb;
      input Real T;
      input Real cAlb;
      output Real result_cBEox;
    protected
      Real cAlbN = 0.66;
      Real T0 = 37;
      Real ctHbb = 43.0;
      Real betaHb = 2.3;
      Real betaP = 7.7;
      Real pH0 =  7.40;
      Real pCO20 = 5.33;
      Real pHT0;
      Real pCO2T0;
    algorithm
        //pCO2T0 := pCO22of(pCO2, T, T0, ctHb);
        pCO2T0 := pCO22of(pCO2, T, T0, cHb, cAlb, pH);
        //pHT0   := pH2of(pH, T, T0, ctHb);
        pHT0 := pH2of(pH, T, T0, cHb, cAlb, pCO2);
        result_cBEox := (1-cHb/ctHbb)
                   *(cHCO3of(pHT0,pCO2T0,T0) - cHCO3of(pH0, pCO20, T0)
                   + (betaHb*cHb + betaP+8*(cAlb-cAlbN))*(pHT0-pH0));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}})));
    end cBaseOf;

    function pHfr "Conversion to 37 C, calculation, conversion to T"
      input Real pCO2;
      input Real cBEox;
      input Real cHb;
      input Real T;
      input Real cAlb;
      output Real result_pH;
    protected
      Real pCO237;
      Real pH37Guess=7.4;
      Real cBEoxGuess;
      Real pH0 = 7.4;
      Real T0 = 37;
      Real cAlbN = 0.66;
      Real betaHb = 7.7;
      Real betaP = 2.3;
      Real ctHbb = 43.0;
      Boolean doit;
      Real epsilon = 0.000001;
    algorithm
       //pCO237:=pCO22of(pCO2, T, T0, cHb);
       pCO237:= pCO22of(pCO2, T, T0, cHb, cAlb, pH37Guess);

       cBEoxGuess:=cBaseOf(pH37Guess, pCO237, cHb, T0, cAlb);
       // Newton Raphson: We know cBase as a function of pH at constant pCO2,
       //   but cannot express pH as a function of cBase}
       doit := false;
       while not doit loop
          pH37Guess:=pH37Guess + (cBEox - cBEoxGuess)/((1-cHb/ctHbb)*
                 (betaP+8*(cAlb-cAlbN) + betaHb*cHb)
                 + log(10.0)*cHCO3of(pH37Guess, pCO237, T0));
          cBEoxGuess:=cBaseOf(pH37Guess, pCO237, cHb, T0,cAlb);
          doit := abs(cBEox - cBEoxGuess) < epsilon;
       end while;
        //Result:= pH2of(pH37Guess, T0, T, cHb);
        result_pH:=pH2of(pH37Guess, T0, T, cHb, cAlb, pCO237);
    end pHfr;

    function cBaseEcfOf "Van Slyke equation"
      input Real pH "pH at given temperature";
      input Real pCO2 "pCO2 at given temperature in kPa";
      input Real cHb "hemoglobin concentration in mmol/l";
      input Real T "temperature in °C";
      input Real cAlb "concentration of albumin in mmol/l";
      output Real result_cBEcf "Extracellular fluid BE - mmo/l";
    protected
      Real cAlbN = 0.66;
      Real T0 = 37;
      Real ctHbb = 43.0;
      Real betaHb = 2.3;
      Real betaP = 7.7;
      Real pH0 =  7.40;
      Real pCO20 = 5.33;
      Real fVBtoVEcf = 0.33;
      Real cHbEcf;
      Real pHT0;
      Real pCO2T0;
    algorithm
        cHbEcf:=cHb*fVBtoVEcf;
        //pCO2T0 := pCO22of(pCO2, T, T0, ctHb);
        pCO2T0 := pCO22of(pCO2, T, T0, cHbEcf, cAlb, pH);
        //pHT0   := pH2of(pH, T, T0, ctHb);
        pHT0 := pH2of(pH, T, T0, cHbEcf, cAlb, pCO2);
        result_cBEcf := (1-cHbEcf/ctHbb)
                   *(cHCO3of(pHT0,pCO2T0,T0) - cHCO3of(pH0, pCO20, T0)
                   + (betaHb*cHb + betaP+8*(cAlb-cAlbN))*(pHT0-pH0));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}})));
    end cBaseEcfOf;

    function cBEoxOf "Van Slyke equation"
      input Real pH "pH at given temperature";
      input Real pCO2 "pCO2 in kPA at given temperature";
      input Real cHb "hemoglobin concentration in mmol/l";
      input Real T "temperature in °C";
      input Real cAlb "albumin concentration in mmol/l";
      input Real cPi "phosphate concentration in mmol/l";
      input Real sO2 "O2 hemoglobin saturation (as fraction)";
      output Real result_cBEox
        "BE on virtually fully oxygenated blood in mmol/l";
    protected
      Real cAlbN = 0.66;
      Real T0 = 37;
      Real ctHbb = 43.0;
      Real betaHb = 2.3;
      Real betaP = 7.7;
      Real pH0 =  7.40;
      Real pCO20 = 5.33;
      Real cPiN=1.15;
      Real pHT0;
      Real pCO2T0;
    algorithm
        //pCO2T0 := pCO22of(pCO2, T, T0, ctHb);
        pCO2T0 := pCO22of(pCO2, T, T0, cHb, cAlb, pH);
        //pHT0   := pH2of(pH, T, T0, ctHb);
        pHT0 := pH2of(pH, T, T0, cHb, cAlb, pCO2);
        result_cBEox := (1-cHb/ctHbb)
                   *(cHCO3of(pHT0,pCO2T0,T0) - cHCO3of(pH0, pCO20, T0)
                   + (betaHb*cHb + betaP+8*(cAlb-cAlbN)+0.309*(cPi-cPiN))*(pHT0-pH0))-0.2*cHb*(1-sO2);
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}})));
    end cBEoxOf;

    function BEINVof
      input Real BEox "Base excess in virtually oxygenated blood in mmol/l";
      input Real pCO2 "pCO2 in kPa";
      input Real cHb "hemoglobin concentration in mmol/l";
      input Real cAlb "albumin concentration in plasma in mmol/l";
      input Real cPi "plasma phosphate concentration in mmol/l";
      input Real sO2 "O2 hemoglobin saturation";
      input Real temp "temperature in °C";
      output Real pH "plasma pH";
    protected
      Real epsilon = 0.000001;
      Real pHx = 7.4;
      Real xBEox;
      Real dBEox;
      Real dpH;
      Real pHlow = 0;
      Real pHhigh = 0;
      Real pHmean;
      Boolean done=false;
    algorithm
      dpH:=0.1;
      while (not done) loop
        xBEox := cBEoxOf(pHx,pCO2,cHb,temp,cAlb,cPi,sO2);
        dBEox:=BEox-xBEox;
        if (dBEox>0) then
          pHlow := pHx;
          pHx := pHx+dpH;
        else
          pHhigh := pHx;
          pHx := pHx - dpH;
        end if;
        done := (pHlow<>0 and pHhigh<>0);
      end while;

      while abs(pHhigh-pHlow)>epsilon loop
        pHmean := (pHlow + pHhigh)/2;

        if ((BEox - cBEoxOf(pHlow,pCO2,cHb,temp,cAlb,cPi,sO2))*
        (BEox - cBEoxOf(pHmean,pCO2,cHb,temp,cAlb,cPi,sO2))>0) then
          pHlow := pHmean;
        else
          pHhigh := pHmean;
        end if;
      end while;

      pH := (pHlow + pHhigh)/2;

    end BEINVof;

    function PO2PCO2of
      input Real pO2 "pO2 in kPa";
      input Real pCO2 "pCO2 in kPa";
      input Real BEox "Base Excess in virtually oxyganated blood in mmol/l";
      input Real cHb "conentration of hemoglobin in mmol/l";
      input Real cAlb "albumin consntration in plasma in mmol/l";
      input Real cPi "phospahate concentration in plasma in mmol/l";
      input Real cDPG "concentration of 2,3 diphosphoglycerate in mmol/l";
      input Real FCOHb "substance fraction of carboxyhemoglobin";
      input Real FMetHb "substance fraction of hemiglobin";
      input Real FHbF "substance fraction of fetal hemogobin";
      input Real temp "temperature in °C";
      output Real ctO2 "blood total O2 concantration in mmol/l";
      output Real ctCO2 "blood total CO2 concentration in mmol/l";
      output Real pH "plasma pH";
      output Real sO2 "O2 hemoglobin saturation";
    protected
      Real EpsSO2 = 0.000001;
      Real Sx;
      Boolean done;
      Real ceHb;
      Real dissO2t;
    algorithm
      sO2:=1;
      done := false;
      while (not done) loop
        Sx := sO2;
        pH := BEINVof(BEox,pCO2,cHb,cAlb,cPi,sO2,temp);
        sO2 := sO2of(pO2,pH,pCO2,cDPG,FCOHb,FMetHb,FHbF,temp);
        done := abs(sO2-Sx)<EpsSO2;
      end while;
        ceHb := ceHbof(cHb, FCOHb, FMetHb);
        dissO2t := dissO2(pO2, temp);
        ctO2 := dissO2t + sO2 * ceHb;
        ctCO2 := ctCO2Bof(pH,pCO2,temp,cHb,sO2);
    end PO2PCO2of;

    function O2CO2of
      input Real tO2 "blood total O2 concantration in mmol/l";
      input Real tCO2 "blood total CO2 concentration in mmol/l";
      input Real BEox "Base Excess in virtually oxyganated blood in mmol/l";
      input Real cHb "conentration of hemoglobin in mmol/l";
      input Real cAlb "albumin consntration in plasma in mmol/l";
      input Real cPi "phospahate concentration in plasma in mmol/l";
      input Real cDPG "concentration of 2,3 diphosphoglycerate in mmol/l";
      input Real FCOHb "substance fraction of carboxyhemoglobin";
      input Real FMetHb "substance fraction of hemiglobin";
      input Real FHbF "substance fraction of fetal hemogobin";
      input Real temp "temperature in °C";
      output Real pO2 "pO2 in kPa";
      output Real pCO2 "pCO2 in kPa";
      output Real pH "plasma pH";
      output Real sO2 "O2 hemoglobin saturation";

    protected
       Real epsPO2 = 0.000001;
       Real epsPCO2 = 0.000001;
       Real DPO2;
       Real AO2;
       Real CO2;
       Real O2;
       Real DCO2;
       Real DO2;
       Real DPCO2;
       Real pCO2mean;
       Real pCO2low;
       Real pCO2high;
       Real DCO2low;
       Real DCO2mean;
       Real pO2mean;
       Real pO2low;
       Real pO2high;
       Real DO2low;
       Real DO2mean;
    algorithm
      //initialisation
      pCO2 := 5.33;
      pO2 := 13.3;
      sO2 := 0.9591382375911204;
      DPO2 := 2;
      //main iteration loop
      while (abs(DPO2) > epsPO2) loop
        //pCO2 and pH iteration calculation
        AO2:= pO2;
        pH := BEINVof(BEox, pCO2, cHb, cAlb, cPi, sO2, temp);
        CO2 := ctCO2Bof(pH, pCO2, temp, cHb, sO2);
        DCO2 := tCO2 - CO2;
        DPCO2 := 1;
        if (DCO2 > 0) then
          pCO2low := pCO2;
          while (DCO2 > 0) loop
            pCO2 := pCO2 + DPCO2;
            pH := BEINVof(BEox, pCO2, cHb, cAlb, cPi, sO2, temp);
            CO2 := ctCO2Bof(pH, pCO2, temp, cHb, sO2);
            DCO2 := tCO2 - CO2;
          end while;
          pCO2high := pCO2;
        else
          pCO2high := pCO2;
          while (DCO2 < 0) loop
            pCO2 :=pCO2 - DPCO2;
            if (pCO2 < 0) then
              pCO2 := 0.0001;
            end if;
            pH := BEINVof(BEox, pCO2, cHb, cAlb, cPi, sO2, temp);
            CO2 := ctCO2Bof(pH, pCO2, temp, cHb, sO2);
            DCO2 := tCO2 - CO2;
          end while;
          pCO2low := pCO2;
        end if;
        while (abs(pCO2high - pCO2low) > epsPCO2) loop
          pCO2mean := (pCO2low + pCO2high) / 2;
          pH := BEINVof(BEox, pCO2low, cHb, cAlb, cPi, sO2, temp);
          CO2 := ctCO2Bof(pH, pCO2low, temp, cHb, sO2);
          DCO2low := tCO2 - CO2;
          pH := BEINVof(BEox, pCO2mean, cHb, cAlb, cPi, sO2, temp);
          CO2 := ctCO2Bof(pH, pCO2mean, temp, cHb, sO2);
          DCO2mean := tCO2 - CO2;
          if (DCO2low * DCO2mean > 0) then
            pCO2low := pCO2mean;
          else
            pCO2high := pCO2mean;
          end if;
        end while;
        pCO2 := (pCO2low + pCO2high) / 2;

        //iteration of PO2 and SO2
        sO2 := sO2of(pO2, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
        O2 := ctO2Bof(cHb, pO2, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
        DO2 := tO2 - O2;
        if (DO2 > 0) then
          pO2low := pO2;
          while (DO2 > 0) loop
            pO2 := pO2 + DPO2;
            sO2 := sO2of(pO2, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
            O2 := ctO2Bof(cHb, pO2, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
            DO2 := tO2 - O2;
          end while;
          pO2high := pO2;
        else
          pO2high := pO2;
          while (DO2 < 0) loop
            pO2 := pO2 - DPO2;
            if (pO2 < 0.001) then
              pO2 :=0.001;
            end if;
            sO2 := sO2of(pO2, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
            O2 := ctO2Bof(cHb, pO2, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
            DO2 := tO2 - O2;
          end while;
          pO2low := pO2;
        end if;
        while (abs(pO2high - pO2low) > epsPO2) loop
          pO2mean := (pO2low + pO2high) / 2;
          sO2 := sO2of(pO2low, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
          O2 := ctO2Bof(cHb, pO2low, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
          DO2low := tO2 - O2;
          sO2 := sO2of(pO2mean, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
          O2 := ctO2Bof(cHb, pO2mean, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
          DO2mean := tO2 - O2;
          if (DO2low * DO2mean > 0) then
            pO2low := pO2mean;
          else
            pO2high := pO2mean;
          end if;
        end while;
        pO2 := (pO2high + pO2high) / 2;
        sO2 := sO2of(pO2, pH, pCO2, cDPG, FCOHb, FMetHb, FHbF, temp);
        //connection of pCO2 and pO2 iteration loops
        DPO2 := abs(pO2 - AO2);
      end while;

    end O2CO2of;

    function pH2Oof
      input Real temp "temperature in °C";
      output Real vaporPressure "in mmHg";
    algorithm
      if (temp < 0) then
         vaporPressure :=0;
      else
         if (temp > 100) then
            vaporPressure := 760;
         else
     vaporPressure :=  exp(18.6686 - (4030.183 / (temp + 235)));
         end if;
      end if;
    end pH2Oof;

    function BTPS_to_STPD "coefficient for conversion volume from BTPS to STPD"
      input Real PB "barometric pressure in mmHg";
      input Real temp "temperature in °C";
      output Real coefficient_BTPS_to_STP
        "from BTPS to STPD conversion coefficient";
    protected
      Real pH2O;
    algorithm
      pH2O :=pH2Oof(temp);
      coefficient_BTPS_to_STP := (PB - pH2O) * 273.15 / (760 * (273.15 + temp));
    end BTPS_to_STPD;

    function AlvEquil "Alveola equilibration"
      input Real VAi "inspired alveolar ventilation in l BTPS/min";
      input Real FiO2 "fraction concentration of O2 in dry nspired gas";
      input Real FiCO2 "fraction concentationo of CO2 in dry inspired gas";
      input Real temp "temperature in °C";
      input Real PB "barometric pressure";
      input Real Q "blood perfusion";
      input Real CvO2
        "total concentration of oxygen in inflowing venous blood in l/min";
      input Real CvCO2
        "total concentration of carbon dioxide in inflowinf venous blood in l/min";
      input Real BEox
        "base excess in virtually fully oxygenated blood in mmol/l";
      input Real Hb "hemoglobin concentration in mmol/l";
      input Real cAlb "plasma albumin concentration in mmol/l";
      input Real cPi "plasma phosphate concentration in mmol/l";
      input Real cDPG "2,3 DPG - concentration in mmol/l";
      input Real FCOHb "substance fraction of carboxyhemoglobin";
      input Real FMetHb "substance fraction of hemiglobin";
      input Real FHbF "substance fraction of fetal hemogobin";
      output Real VA "expired alveolar ventilation in l/min";
      output Real VO2 "rate of oxygen comsumption [l STPD/min]";
      output Real VCO2 "rate of carbon dioxide production [l STPD/min]";
      output Real CpcO2
        "O2 content in end pulmonary capillary blood [l STPD/l of blood]";
      output Real CpcCO2
        "CO2 content in pulmonary capillary blood [l STPD/l of blood]";
      output Real PAO2 "alveolar pO2 [kPa]";
      output Real PACO2 "alveolar PCO2 [kPA]";
      output Real PpcO2 "pO2 in end pulmonary capillary blood [kPa]";
      output Real PpcCO2 "pCO2 in end pulmonary capillary blood  PCO2 [kPA]";
      output Real sO2pc
        "oxyhemoglobin saturation in end pulmonary capillary blood [ratio form 0 to 1]";
      output Real pHpc "pH in end pulmonary capillary blood ";
      output Real HCO3pc
        "actual bicarbonate concentration in end pulmonary capillary blood [mmol/l]";
    protected
      Real FAO2 "fraction concentration of O2 in alveoli";
      Real FACO2 "fraction concentration of CO2 in alveoli";

      Real cx1;
      Boolean done;
      Boolean doneCO2;
      Boolean doneO2;
      Real kBTPS_to_STPD;
      Real inflowCO2 "inflow CO2 in alveolo-cappillary unit in mmol/min";
      Real inflowO2 "inflow CO2 in alveolo-cappillary unit in mmol/min";
      Real outflowCO2 "outflow CO2 in alveolo-capllary unit in mmol/min";
      Real outflowO2 "outflow CO2 in alveolo-cappillary unit in mmol/min";
      Real ViCO2 "inflow CO2 in alveoli in l STPD/min";
      Real ViO2 "inflow O2 in alveoli in l STPD/min";
      Real VeCO2 "outflow CO2 from alveoli in l STPD/min";
      Real VeO2 "outflow O2 from alveoli in lSTPD/min";
      Real VCO2_STPD "CO2 excretion rate in l STPD/min";
      Real VO2_STPD "O2 consuption rate in l STPD/min";
      Real PACO2max;
      Real PACO2min;
      Real PAO2max;
      Real PAO2min;
      Real PAO2old;
      Real dPCO2 = 2;
      Real dPO2 = 2;
      Real EpsCO2;
      Real EpsO2;
      Real EpsP = 0.000001;
    algorithm
      //initialisation
      EpsCO2 := 0.000001;
      EpsO2 := 0.000001;
      PAO2min := 0;
      PACO2min :=0;
      PAO2max :=260;
      PACO2max :=260;

      cx1 :=(PB - pH2Oof(temp))*0.133322368;   //cx1 = PB - pH2O_BTPS
      kBTPS_to_STPD :=BTPS_to_STPD(PB, temp);

      if (Q == 0) then //shunt blood flow
        VO2 := 0;
        VCO2 := 0;
        PAO2 := FiO2 * cx1; //cx1 = PB - pH2O_BTPS
        PACO2 := FiCO2 * cx1; //cx1 = PB - pH2O_BTPS
        CpcO2 := CvO2;
        CpcCO2 := CvCO2;
        VA := VAi;
        (PpcO2,PpcCO2,pHpc,sO2pc) := O2CO2of(CpcO2, CpcCO2, BEox, Hb, cAlb, cPi, cDPG, FCOHb, FMetHb, FHbF, temp);
      else  //iteration calculation of pAO2 and pACO2
        //init
        PAO2 := 13.99;
        PACO2 := 5.33;
        kBTPS_to_STPD := BTPS_to_STPD(PB, temp);
        ViO2 := FiO2 * VAi * kBTPS_to_STPD; //l STPD/min
        ViCO2 := FiCO2 * VAi * kBTPS_to_STPD; //l STPD/min
        inflowCO2 := ViCO2 / 0.022414 + CvCO2 * Q; //in mmol/min
        inflowO2 := ViO2 / 0.022414 + CvO2 * Q; //in mmol,/min
        done := false;
        PAO2old := 0;
        //main iteration loop of PACO2 and PAO2;
        while (not done) loop
          doneCO2 := false;
          while (not doneCO2) loop
            (CpcO2,CpcCO2,pHpc,sO2pc)  :=PO2PCO2of(
              PAO2,
              PACO2,
              BEox,
              Hb,
              cAlb,
              cPi,
              cDPG,
              FCOHb,
              FMetHb,
              FHbF,
              temp);
            VCO2 := (CvCO2 - CpcCO2) * Q; // in mmol min
            VO2 := (CpcO2 - CvO2) * Q; //in mmol/min
            VCO2_STPD := VCO2 * 0.022414; //l STPD
            VO2_STPD := VO2 * 0.022414; //l STPD
            VA := VAi + (VCO2_STPD - VO2_STPD) / kBTPS_to_STPD; //VA in l BTPS
            if (VA < 0) then
              VA := 0.0;
            end if;
            FACO2 :=PACO2/cx1;   // cx1=PB-PH2O_BTPS
            VeCO2 :=VA*FACO2*kBTPS_to_STPD;     // l/min STPD
            outflowCO2 :=VeCO2/0.022414 + CpcCO2*Q;     //in mmol/min
            doneCO2 :=(abs(inflowCO2 - outflowCO2) < EpsCO2);
            if (not doneCO2) then
              if (outflowCO2 > inflowCO2) then
                PACO2max := PACO2;
              else
                PACO2min := PACO2;
              end if;
              PACO2 := (PACO2max + PACO2min) / 2;
            end if; //end if not doneCO2
          end while; // end while not DoneCO2

          FAO2 := PAO2 / cx1; // cx1=PB-PH2O_BTPS
          outflowO2 := FAO2 * VA * kBTPS_to_STPD / 0.022414 + CpcO2 * Q; //in mmol/min
          doneO2 := abs(outflowO2 - inflowO2) < EpsO2;
          if (doneO2) then
            done := true; //all is done
          else
            if (outflowO2 > inflowO2) then
              PAO2max := PAO2;
            else
              PAO2min := PAO2;
            end if;
           PAO2 := (PAO2max + PAO2min) / 2;
           doneO2 := false;
           // iteration of PAO2
           while (not doneO2) loop
             (CpcO2,CpcCO2,pHpc,sO2pc):=PO2PCO2of(
                PAO2,
                PACO2,
                BEox,
                Hb,
                cAlb,
                cPi,
                cDPG,
                FCOHb,
                FMetHb,
                FHbF,
                temp);
             VCO2 := (CvCO2 - CpcCO2) * Q; // in mmol min
             VO2 := (CpcO2 - CvO2) * Q; //in mmol/min
             VCO2_STPD := VCO2 * 0.022414;
             VO2_STPD := VO2 * 0.022414;
             VA := VAi + (VCO2_STPD - VO2_STPD) / kBTPS_to_STPD; //VA in l BTPS
             if (VA < 0) then
               VA :=0.0;
             end if;
             FAO2 := PAO2 / cx1; // cx1=PB-PH2O_BTPS
             VeO2 := FAO2 * VA * kBTPS_to_STPD; //l stpd/min
             outflowO2 := VeO2 / 0.022414 + CpcO2 * Q; //in mmol/min
             doneO2 := (abs(outflowO2 - inflowO2) < EpsO2);
             if (not doneO2) then
               if (outflowO2 > inflowO2) then
                 PAO2max := PAO2;
               else
                 PAO2min := PAO2;
               end if;
               PAO2 := (PAO2max + PAO2min) / 2;
             end if;
           end while; //end while not doneO2
         end if; //end else
         if (not done) then
           PAO2old := PAO2;
           PAO2min := PAO2 - dPO2;
           if (PAO2min < 0) then
             PAO2min := 0;
           end if;
           PACO2min := PACO2 - dPO2;
           if (PACO2min < 0) then
             PACO2min := 0;
           end if;
           PACO2max := PACO2 + dPCO2;
           PAO2max := PAO2 + dPO2;
         end if;//end if
       end while; //end while
      end if; //end else
      //iteration of PAO2 and PACO2 done
      HCO3pc := cHCO3of(pHpc, PACO2, temp);
      PpcO2 := PAO2;
      PpcCO2 := PACO2;

    end AlvEquil;

    model ctO2content

      Physiolibrary.Types.RealIO.pHInput pH
                                      annotation (Placement(transformation(extent={{-120,70},
                {-80,110}}),          iconTransformation(extent={{-120,32},{
                -100,52}})));
      Physiolibrary.Types.RealIO.PressureInput pCO2(start=5330)
                                       annotation (Placement(transformation(extent={{-120,20},
                {-80,60}}),           iconTransformation(extent={{-120,-10},{
                -100,10}})));
      Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)  annotation (Placement(transformation(extent={{-120,
                -20},{-80,20}}),      iconTransformation(extent={{-120,-50},{
                -100,-30}})));
      Physiolibrary.Types.RealIO.PressureInput pO2 annotation (Placement(
            transformation(extent={{-132,-54},{-92,-14}}),iconTransformation(extent={{-120,70},
                {-100,90}})));
      Physiolibrary.Types.RealIO.FractionInput FCOHb
                                       annotation (Placement(transformation(extent={{60,-100},
                {100,-60}}),          iconTransformation(extent={{-10,-10},{
                10,10}},
            rotation=180,
            origin={110,-80})));
      Physiolibrary.Types.RealIO.FractionInput FHbF
                                       annotation (Placement(transformation(extent={{60,-60},
                {100,-20}}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,-40})));
      Physiolibrary.Types.RealIO.FractionInput FMetHb
                                       annotation (Placement(transformation(extent={{60,-20},
                {100,20}}),           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,0})));
      Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                       annotation (Placement(transformation(extent={{60,20},
                {100,60}}),           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,40})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb
                                       annotation (Placement(transformation(extent={{60,60},
                {100,100}}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,80})));

      Physiolibrary.Types.RealIO.FractionOutput sO2
                                          annotation (Placement(
            transformation(extent={{-30,-112},{10,-72}}),
                                                        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={60,-110})));
      Physiolibrary.Types.RealIO.ConcentrationOutput totalO2 annotation (Placement(
            transformation(extent={{-80,-100},{-60,-80}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={20,-110})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdO2p
        "dissolved O2 concentration in plasma" annotation (Placement(transformation(
              extent={{-80,-100},{-60,-80}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-20,-110})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
        "effective concentration of hemoglobin" annotation (Placement(
            transformation(extent={{-80,-100},{-60,-80}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-60,-110})));

    algorithm
      (totalO2,sO2, cdO2p,ceHb) :=O2totalSI(
        ctHb,
        pO2,
        pH,
        pCO2,
        cDPG,
        FCOHb,
        FMetHb,
        FHbF,
        T);

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-60,66},{64,-34}},
              lineColor={28,108,200},
              textString="O2 total")}),         Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end ctO2content;

    model ctCO2content

      Physiolibrary.Types.RealIO.PressureInput pCO2(start=5330) "pCO2 in Pa"
                                       annotation (Placement(transformation(extent={{-120,20},
                {-80,60}}),           iconTransformation(extent={{-120,70},{
                -100,90}})));
      Physiolibrary.Types.RealIO.pHInput pH
                                      annotation (Placement(transformation(extent={{-120,70},
                {-80,110}}),          iconTransformation(extent={{-120,30},{
                -100,50}})));
      Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)
        "temperature (in Kelvins)"                                 annotation (Placement(transformation(extent={{-120,
                -20},{-80,20}}),      iconTransformation(extent={{-120,-10},{-100,10}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb
        "hemoglobin concentration (mmol/l)"
                                       annotation (Placement(transformation(extent={{60,60},
                {100,100}}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-40})));
      Physiolibrary.Types.RealIO.FractionInput sO2 "O2 hemoglobin saturation "
        annotation (Placement(transformation(extent={{-120,-98},{-80,-58}}),
            iconTransformation(extent={{-120,-90},{-100,-70}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2
        "total blood CO2 concentration (in mmol/l)" annotation (Placement(
            transformation(extent={{100,30},{120,50}}), iconTransformation(extent={{100,30},
                {120,50}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3
        "plasma HCO3 concentration (in mmol/l)" annotation (Placement(
            transformation(extent={{100,60},{120,80}}), iconTransformation(extent={{100,-10},
                {120,10}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2p
        "plasma CO2 dissolved concentration (in mmol/l)" annotation (Placement(
            transformation(extent={{100,60},{120,80}}), iconTransformation(extent={{100,-50},
                {120,-30}})));

    algorithm
      (ctCO2, cHCO3,cdCO2p) := CO2totalSI(
       pH,
       pCO2,
       T,
       ctHb,
       sO2);

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-66,46},{82,-26}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="CO2 total")}));
    end ctCO2content;

    model bloodBEox

      Physiolibrary.Types.RealIO.PressureInput pCO2
        "pCO2 at given temperature in Pa" annotation (Placement(transformation(
              extent={{-140,62},{-100,102}}),iconTransformation(extent={{-120,82},{-100,
                102}})));
      Physiolibrary.Types.RealIO.pHInput pH "pH at given temperature" annotation (
          Placement(transformation(extent={{-140,28},{-100,68}}),
            iconTransformation(extent={{-120,48},{-100,68}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb
        "hemoglobin concentration in mmol/l" annotation (Placement(transformation(
              extent={{-140,-6},{-100,34}}), iconTransformation(extent={{-120,14},{-100,
                34}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cAlb
        "albumin concentration in plasma (mmol/l)" annotation (Placement(
            transformation(extent={{-140,-42},{-100,-2}}),  iconTransformation(
              extent={{-120,-22},{-100,-2}})));
      Physiolibrary.Types.RealIO.TemperatureInput temp
        "temperature in Kelvinss"
        annotation (Placement(transformation(extent={{-142,-110},{-102,-70}}),
            iconTransformation(extent={{-120,-102},{-100,-82}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput BEox
        "Base Excess (in fully oxygenated blood) in mmol/l" annotation (Placement(
            transformation(extent={{100,-10},{120,10}}),
                                                       iconTransformation(extent={{100,-10},
                {120,10}})));

      Physiolibrary.Types.RealIO.ConcentrationInput cPi
        "Phosphate concentration in plasma (mmol/l)" annotation (Placement(
            transformation(extent={{-140,-78},{-100,-38}}), iconTransformation(
              extent={{-120,-50},{-100,-30}})));
      Physiolibrary.Types.RealIO.FractionInput sO2 "O2 hemoglobin saturation"
        annotation (Placement(transformation(extent={{-144,-146},{-104,-106}}),
            iconTransformation(extent={{-120,-78},{-100,-58}})));

    algorithm
      BEox := cBEoxOf(pH,pCO2/1000,ctHb,temp-273.15,cAlb,cPi,sO2);
        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-76,38},{86,-16}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="blood BEox")}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end bloodBEox;

    model BEINV

      Physiolibrary.Types.RealIO.PressureInput pCO2
        "pCO2 at given temperature in Pa" annotation (Placement(transformation(
              extent={{-69,25},{-53,41}}), iconTransformation(extent={{-120,30},
                {-100,50}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb
        "hemoglobin concentration in mmol/l" annotation (Placement(
            transformation(extent={{-92,-4},{-76,12}}),iconTransformation(
              extent={{-120,-10},{-100,10}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cAlb
        "albumin concentration in plasma (mmol/l)" annotation (Placement(
            transformation(extent={{-94,-18},{-76,0}}),   iconTransformation(
              extent={{-120,-36},{-100,-16}})));
      Physiolibrary.Types.RealIO.pHOutput pH "plasma pH at given temperature"
        annotation (Placement(transformation(extent={{100,-10},{120,10}}),
            iconTransformation(extent={{100,-10},{120,10}})));
      Physiolibrary.Types.RealIO.ConcentrationInput BEox "BEox in mmol/l"
        annotation (Placement(transformation(extent={{-60,51},{-42,69}}),
            iconTransformation(extent={{-120,70},{-100,90}})));
      bloodBEox vanSlykeEquation
        annotation (Placement(transformation(extent={{-36,-32},{44,40}})));
      Physiolibrary.Types.RealIO.TemperatureInput temp "temperature in Kelvins"
        annotation (Placement(transformation(extent={{-90,-68},{-74,-52}}),
            iconTransformation(extent={{-120,-108},{-100,-88}})));
      Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints1
        annotation (Placement(transformation(extent={{-24,42},{32,78}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cPi
        "albumin concentration in plasma (mmol/l)" annotation (Placement(
            transformation(extent={{-88,-28},{-70,-10}}), iconTransformation(
              extent={{-120,-60},{-100,-40}})));
      Physiolibrary.Types.RealIO.FractionInput sO2 "O2 hemoglobin saturation"
        annotation (Placement(transformation(extent={{-94,-38},{-78,-22}}),
            iconTransformation(extent={{-120,-84},{-100,-64}})));
    equation
      connect(temp, vanSlykeEquation.temp) annotation (Line(points={{-82,-60},{
              -68,-60},{-68,-29.12},{-40,-29.12}},
                                                 color={0,0,127}));
      connect(vanSlykeEquation.pCO2, pCO2) annotation (Line(points={{-40,37.12},
              {-56,37.12},{-56,33},{-61,33}},color={0,0,127}));
      connect(inverseBlockConstraints1.u1, BEox) annotation (Line(points={{
              -26.8,60},{-51,60},{-51,60}}, color={0,0,127}));
      connect(vanSlykeEquation.BEox, inverseBlockConstraints1.u2) annotation (
          Line(points={{48,4},{60,4},{60,48},{0,48},{0,60},{-18.4,60}}, color={
              0,0,127}));
      connect(ctHb, vanSlykeEquation.ctHb)
        annotation (Line(points={{-84,4},{-62,4},{-62,12.64},{-40,12.64}},
                                                   color={0,0,127}));
      connect(vanSlykeEquation.pH, inverseBlockConstraints1.y2) annotation (
          Line(points={{-40,24.88},{-92,24.88},{-92,84},{6,84},{6,60},{27.8,60}},
            color={0,0,127}));
      connect(vanSlykeEquation.cAlb, cAlb) annotation (Line(points={{-40,-0.32},
              {-60,-0.32},{-60,-9},{-85,-9}},   color={0,0,127}));
      connect(pH, inverseBlockConstraints1.y1)
        annotation (Line(points={{110,0},{70,0},{70,60},{33.4,60}},
                                                     color={0,0,127}));
      connect(vanSlykeEquation.cPi, cPi) annotation (Line(points={{-40,-10.4},{
              -54,-10.4},{-54,-19},{-79,-19}}, color={0,0,127}));
      connect(vanSlykeEquation.sO2, sO2) annotation (Line(points={{-40,-20.48},
              {-70,-20.48},{-70,-30},{-86,-30}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),      graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-84,22},{94,-12}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="BEINV")}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end BEINV;

    model PO2PCO2

      Physiolibrary.Types.RealIO.FractionOutput sO2
                                          annotation (Placement(
            transformation(extent={{-8,-8},{8,8}},
            rotation=0,
            origin={30,6}),                             iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,0})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(
                                            displayUnit="mmol/l")
        "outgoing concentration of HCO3"                                                           annotation (Placement(
            transformation(extent={{-7,-7},{7,7}},
            rotation=0,
            origin={101,50}),                           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,20})));
      Physiolibrary.Types.RealIO.TemperatureInput T  annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=0,
            origin={-98,-8}),         iconTransformation(extent={{-120,-110},{-100,-90}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{8,8},{
                -8,-8}},
            rotation=180,
            origin={-76,-44}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,38})));
      Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                       annotation (Placement(transformation(extent={{-6,6},{
                6,-6}},
            rotation=180,
            origin={-4,62}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-20})));
      Physiolibrary.Types.RealIO.FractionInput FMetHb
                                       annotation (Placement(transformation(extent={{-6,6},{
                6,-6}},
            rotation=180,
            origin={-4,50}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-40})));
      Physiolibrary.Types.RealIO.FractionInput FHbF
                                       annotation (Placement(transformation(extent={{-6,6},{
                6,-6}},
            rotation=180,
            origin={-4,38}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-80})));
      Physiolibrary.Types.RealIO.PressureInput pO2  annotation (Placement(
            transformation(extent={{-100,68},{-88,80}}),
                                                      iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,78})));
      Physiolibrary.Types.RealIO.PressureInput pCO2 annotation (Placement(
            transformation(extent={{4,67},{18,81}}),      iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,58})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation (
          Placement(transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={101,62}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,60})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation (Placement(
            transformation(
            extent={{7.5,-7},{-7.5,7}},
            rotation=180,
            origin={-28.5,0}),
                             iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,80})));
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
                                      annotation (Placement(transformation(extent={{-62,-28},
                {-46,-12}}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,98})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{6,6.5},
                {-6,-6.5}},
            rotation=180,
            origin={-61,-51.5}),      iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,18})));
      Physiolibrary.Types.RealIO.pHOutput pH( start = 7.4) annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={56,-44}),  iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,40})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={101,38}),iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-58})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation (
          Placement(transformation(
            extent={{-7,7},{7,-7}},
            rotation=0,
            origin={-45,0}),   iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-78})));
      Physiolibrary.Types.RealIO.FractionInput FHbCO annotation (Placement(
            transformation(
            extent={{-6,6},{6,-6}},
            rotation=180,
            origin={-4,26}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-60})));
      ctO2content bloodctO2content
        annotation (Placement(transformation(extent={{-82,20},{-22,80}})));
      ctCO2content bloodctCO2content
        annotation (Placement(transformation(extent={{26,20},{86,80}})));
      BEINV vanSlykeEquation
        annotation (Placement(transformation(extent={{-34,-72},{28,-12}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
        "effiective concentration of hemoglobin (mmol/l)" annotation (Placement(
            transformation(
            extent={{-6,6},{6,-6}},
            rotation=0,
            origin={-58,0}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-38})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctPi(displayUnit="mmol/l")
        "concentration of phosphate  (mmol/l)" annotation (Placement(transformation(
            extent={{6,6.5},{-6,-6.5}},
            rotation=180,
            origin={-59,-59.5}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-2})));
    equation
      connect(bloodctCO2content.pCO2, pCO2)
        annotation (Line(points={{23,74},{23,74},{11,74}}, color={0,0,127}));
      connect(bloodctO2content.pCO2, pCO2) annotation (Line(points={{-85,50},{
              -100,50},{-100,98},{18,98},{18,74},{11,74}},
                                                      color={0,0,127}));
      connect(bloodctO2content.pO2, pO2)
        annotation (Line(points={{-85,74},{-94,74}}, color={0,0,127}));
      connect(vanSlykeEquation.BEox, BEox)
        annotation (Line(points={{-37.1,-18},{-46,-18},{-46,-20},{-54,-20}},
                                                         color={0,0,127}));
      connect(vanSlykeEquation.pCO2, pCO2) annotation (Line(points={{-37.1,-30},
              {-100,-30},{-100,98},{18,98},{18,74},{11,74}}, color={0,0,127}));
      connect(vanSlykeEquation.ctHb, ctHb)
        annotation (Line(points={{-37.1,-42},{-56,-42},{-56,-44},{-76,-44}},
                                                         color={0,0,127}));
      connect(bloodctO2content.ctHb, ctHb) annotation (Line(points={{-19,74},{2,
              74},{2,-4},{62,-4},{62,-92},{-66,-92},{-66,-44},{-76,-44}}, color=
             {0,0,127}));
      connect(ctAlb, vanSlykeEquation.cAlb) annotation (Line(points={{-61,-51.5},
              {-37.5,-51.5},{-37.5,-49.8},{-37.1,-49.8}},
                                                      color={0,0,127}));
      connect(bloodctO2content.T, T) annotation (Line(points={{-85,38},{-89,38},
              {-89,-8},{-98,-8}}, color={0,0,127}));
      connect(T, vanSlykeEquation.temp) annotation (Line(points={{-98,-8},{-88,
              -8},{-88,-71.4},{-37.1,-71.4}},
                                          color={0,0,127}));
      connect(bloodctCO2content.T, vanSlykeEquation.temp) annotation (Line(
            points={{23,50},{6,50},{6,-8},{-88,-8},{-88,-71.4},{-37.1,-71.4}},
            color={0,0,127}));
      connect(bloodctCO2content.ctHb, ctHb) annotation (Line(points={{23,38},{2,
              38},{2,-4},{62,-4},{62,-92},{-66,-92},{-66,-44},{-76,-44}}, color=
             {0,0,127}));
      connect(bloodctO2content.sO2, bloodctCO2content.sO2) annotation (Line(
            points={{-34,17},{-34,6},{16,6},{16,26},{23,26}}, color={0,0,127}));
      connect(cDPG, bloodctO2content.cDPG)
        annotation (Line(points={{-4,62},{-19,62}}, color={0,0,127}));
      connect(FMetHb, bloodctO2content.FMetHb)
        annotation (Line(points={{-4,50},{-19,50}}, color={0,0,127}));
      connect(FHbF, bloodctO2content.FHbF)
        annotation (Line(points={{-4,38},{-19,38}}, color={0,0,127}));
      connect(FHbCO, bloodctO2content.FCOHb)
        annotation (Line(points={{-4,26},{-19,26}}, color={0,0,127}));
      connect(vanSlykeEquation.pH, bloodctCO2content.pH) annotation (Line(
            points={{31.1,-42},{44,-42},{44,16},{12,16},{12,62},{23,62}}, color=
             {0,0,127}));
      connect(bloodctO2content.pH, bloodctCO2content.pH) annotation (Line(
            points={{-85,62.6},{-98,62.6},{-98,92},{4,92},{4,62},{23,62}},
            color={0,0,127}));
      connect(pH, bloodctCO2content.pH) annotation (Line(points={{56,-44},{44,
              -44},{44,16},{12,16},{12,62},{23,62}}, color={0,0,127}));
      connect(sO2, bloodctCO2content.sO2) annotation (Line(points={{30,6},{16,6},
              {16,26},{23,26}}, color={0,0,127}));
      connect(bloodctO2content.cdO2p, cdCO2)
        annotation (Line(points={{-58,17},{-58,0},{-45,0}}, color={0,0,127}));
      connect(bloodctO2content.totalO2, ctO2) annotation (Line(points={{-46,17},
              {-46,0},{-28.5,0}}, color={0,0,127}));
      connect(bloodctCO2content.ctCO2, ctCO2)
        annotation (Line(points={{89,62},{101,62}}, color={0,0,127}));
      connect(bloodctCO2content.cHCO3, cHCO3)
        annotation (Line(points={{89,50},{101,50}}, color={0,0,127}));
      connect(bloodctCO2content.cdCO2p, cdO2)
        annotation (Line(points={{89,38},{101,38}}, color={0,0,127}));
      connect(bloodctO2content.ceHb, ceHb)
        annotation (Line(points={{-70,17},{-70,0},{-58,0}}, color={0,0,127}));
      connect(vanSlykeEquation.cPi, ctPi) annotation (Line(points={{-37.1,-57},
              {-45.55,-57},{-45.55,-59.5},{-59,-59.5}},
                                                color={0,0,127}));
      connect(vanSlykeEquation.sO2, bloodctCO2content.sO2) annotation (Line(points={{-37.1,
              -64.2},{-54,-64.2},{-54,-80},{76,-80},{76,-2},{16,-2},{16,26},{23,
              26}},    color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}),       graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{74,2},{92,-8}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="sO2"),
            Text(
              extent={{70,30},{94,10}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="HCO3"),
            Text(
              extent={{-98,-86},{-80,-96}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Text(
              extent={{72,44},{92,32}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pH"),
            Text(
              extent={{-96,100},{-78,90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="BEox"),
            Text(
              extent={{-96,42},{-78,32}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctHb"),
            Text(
              extent={{-10,6},{10,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2",
              origin={82,84},
              rotation=180),
            Text(
              extent={{-13,7},{13,-7}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2",
              origin={81,59},
              rotation=180),
            Text(
              extent={{-64,62},{58,-22}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="PO2CO2"),
            Text(
              extent={{-96,84},{-78,74}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pO2"),
            Text(
              extent={{-96,68},{-74,50}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO2"),
            Text(
              extent={{-92,-72},{-70,-82}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbF"),
            Text(
              extent={{-92,-28},{-64,-46}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FMetHb"),
            Text(
              extent={{-92,-12},{-72,-22}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cDPG"),
            Text(
              extent={{-94,24},{-74,12}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctAlb"),
            Text(
              extent={{-12,6},{12,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdO2",
              origin={78,-54},
              rotation=180),
            Text(
              extent={{-15.5,19.5},{15.5,-19.5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdCO2",
              origin={76.5,-77.5},
              rotation=180),
            Text(
              extent={{-92,-50},{-68,-66}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbCO"),
            Text(
              extent={{-12,5},{12,-5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={78,-35},
              rotation=180,
              textString="ceHb"),
            Text(
              extent={{-96,4},{-76,-8}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctPi")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                       extent={{-100,-100},{100,100}})));
    end PO2PCO2;

    model O2CO2

      Physiolibrary.Types.RealIO.FractionOutput sO2
                                          annotation (Placement(
            transformation(extent={{-8,-8},{8,8}},
            rotation=0,
            origin={88,-16}),                           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,0})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(
                                            displayUnit="mmol/l")
        "outgoing concentration of HCO3"                                                           annotation (Placement(
            transformation(extent={{-7,-7.5},{7,7.5}},
            rotation=0,
            origin={87,-6.5}),                          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,20})));
      Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)  annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=0,
            origin={-68,-65}),        iconTransformation(extent={{-120,-106},{-100,-86}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{8,8},{
                -8,-8}},
            rotation=180,
            origin={-78,4}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,40})));
      Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=0,
            origin={-65,-25}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-18})));
      Physiolibrary.Types.RealIO.FractionInput FMetHb
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=0,
            origin={-72,-34}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-36})));
      Physiolibrary.Types.RealIO.FractionInput FHbF
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=0,
            origin={-78,-56}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-76})));
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
                                      annotation (Placement(transformation(extent={{-70,29},
                {-54,45}}),           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,98})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{7,7},{
                -7,-7}},
            rotation=180,
            origin={-73,-7}),         iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,20})));
      Physiolibrary.Types.RealIO.pHOutput pH annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={88,3}),    iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,40})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={87,-44}),iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-58})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation (
          Placement(transformation(
            extent={{-7,-6.5},{7,6.5}},
            rotation=0,
            origin={87,-53.5}),iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-78})));
      Physiolibrary.Types.RealIO.FractionInput FHbCO annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={-75,-46}),
                             iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-56})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
        "effiective concentration of hemoglobin (mmol/l)" annotation (Placement(
            transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={88,-34}),iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-38})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctO2 annotation (Placement(
            transformation(extent={{-34,39},{-16,57}}), iconTransformation(extent={{-120,70},
                {-100,90}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctCO2 annotation (Placement(
            transformation(extent={{-32,68},{-16,84}}), iconTransformation(extent={{-120,50},
                {-100,70}})));
      Physiolibrary.Types.RealIO.PressureOutput pO2( start=13300) annotation (Placement(
            transformation(extent={{36,41},{50,55}}), iconTransformation(extent={{100,
                70},{120,90}})));
      Physiolibrary.Types.RealIO.PressureOutput pCO2 annotation (Placement(
            transformation(extent={{36,70},{48,82}}), iconTransformation(extent={{100,
                50},{120,70}})));
      PO2PCO2 pO2PCO2
        annotation (Placement(transformation(extent={{-36,-64},{62,32}})));
      Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints
        annotation (Placement(transformation(extent={{-8,64},{32,88}})));
      Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints1
        annotation (Placement(transformation(extent={{-8,36},{32,60}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctPi(displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)" annotation (
          Placement(transformation(
            extent={{7,7},{-7,-7}},
            rotation=180,
            origin={-85,-13}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,2})));
    equation
      connect(pO2PCO2.pH, pH)
        annotation (Line(points={{66.9,3.2},{88,3.2},{88,3}}, color={0,0,127}));
      connect(pO2PCO2.cHCO3, cHCO3) annotation (Line(points={{66.9,-6.4},{75.45,-6.4},
              {75.45,-6.5},{87,-6.5}}, color={0,0,127}));
      connect(pO2PCO2.sO2, sO2)
        annotation (Line(points={{66.9,-16},{88,-16}}, color={0,0,127}));
      connect(pO2PCO2.ceHb, ceHb) annotation (Line(points={{66.9,-34.24},{74.45,-34.24},
              {74.45,-34},{88,-34}}, color={0,0,127}));
      connect(pO2PCO2.cdO2, cdO2) annotation (Line(points={{66.9,-43.84},{75.45,-43.84},
              {75.45,-44},{87,-44}}, color={0,0,127}));
      connect(pO2PCO2.cdCO2, cdCO2) annotation (Line(points={{66.9,-53.44},{75.45,-53.44},
              {75.45,-53.5},{87,-53.5}}, color={0,0,127}));
      connect(BEox, pO2PCO2.BEox)
        annotation (Line(points={{-62,37},{-40.9,31.04}},color={0,0,127}));
      connect(pO2PCO2.ctO2, inverseBlockConstraints1.u2) annotation (Line(points={{66.9,
              22.4},{76,22.4},{76,34},{16,34},{16,48},{-4,48}}, color={0,0,127}));
      connect(inverseBlockConstraints1.u1, ctO2)
        annotation (Line(points={{-10,48},{-13.5,48},{-25,48}}, color={0,0,127}));
      connect(inverseBlockConstraints.u1, ctCO2)
        annotation (Line(points={{-10,76},{-18,76},{-24,76}}, color={0,0,127}));
      connect(pO2PCO2.ctCO2, inverseBlockConstraints.u2) annotation (Line(points={{66.9,
              12.8},{82,12.8},{82,62},{14,62},{14,76},{-4,76}}, color={0,0,127}));
      connect(inverseBlockConstraints.y1, pCO2)
        annotation (Line(points={{33,76},{42,76},{42,76}}, color={0,0,127}));
      connect(inverseBlockConstraints1.y1, pO2)
        annotation (Line(points={{33,48},{43,48},{43,48}}, color={0,0,127}));
      connect(pO2PCO2.pO2, inverseBlockConstraints1.y2) annotation (Line(points={{-40.9,
              21.44},{-70,21.44},{-70,56},{22,56},{22,48},{29,48}},
                                                                  color={0,0,127}));
      connect(pO2PCO2.pCO2, inverseBlockConstraints.y2) annotation (Line(points={{-40.9,
              11.84},{-60,11.84},{-78,11.84},{-78,82},{20,82},{20,76},{29,76}},
                                                                    color={0,0,127}));
      connect(ctHb, pO2PCO2.ctHb) annotation (Line(points={{-78,4},{-40.9,4},{-40.9,
              2.24}}, color={0,0,127}));
      connect(ctAlb, pO2PCO2.ctAlb) annotation (Line(points={{-73,-7},{-40.9,-7},{-40.9,
              -7.36}},       color={0,0,127}));
      connect(cDPG, pO2PCO2.cDPG) annotation (Line(points={{-65,-25},{-48.5,-25},{-48.5,
              -25.6},{-40.9,-25.6}}, color={0,0,127}));
      connect(FMetHb, pO2PCO2.FMetHb) annotation (Line(points={{-72,-34},{-40.9,-34},
              {-40.9,-35.2}}, color={0,0,127}));
      connect(FHbCO, pO2PCO2.FHbCO)
        annotation (Line(points={{-75,-46},{-48,-46},{-48,-44.8},{-40.9,-44.8}},
                                                         color={0,0,127}));
      connect(FHbF, pO2PCO2.FHbF) annotation (Line(points={{-78,-56},{-40.9,-56},{-40.9,
              -54.4}}, color={0,0,127}));
      connect(T, pO2PCO2.T) annotation (Line(points={{-68,-65},{-50,-65},{-50,-64},{
              -40.9,-64}},    color={0,0,127}));
      connect(pO2PCO2.ctPi, ctPi) annotation (Line(points={{-40.9,-16.96},{-60.45,-16.96},
              {-60.45,-13},{-85,-13}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}),       graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{74,2},{92,-8}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="sO2"),
            Text(
              extent={{70,30},{94,10}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="HCO3"),
            Text(
              extent={{-98,-92},{-80,-102}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Text(
              extent={{72,44},{92,32}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pH"),
            Text(
              extent={{-96,100},{-78,90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="BEox"),
            Text(
              extent={{-96,44},{-78,34}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctHb"),
            Text(
              extent={{-10,6},{10,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2",
              origin={-86,78},
              rotation=180),
            Text(
              extent={{-13,7},{13,-7}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2",
              origin={-83,55},
              rotation=180),
            Text(
              extent={{-64,62},{58,-22}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="O2CO2"),
            Text(
              extent={{74,88},{92,78}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pO2"),
            Text(
              extent={{68,70},{90,52}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO2"),
            Text(
              extent={{-92,-70},{-74,-78}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbF"),
            Text(
              extent={{-92,-26},{-64,-44}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FMetHb"),
            Text(
              extent={{-92,-12},{-72,-22}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cDPG"),
            Text(
              extent={{-96,24},{-76,12}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctAlb"),
            Text(
              extent={{-12,6},{12,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdO2",
              origin={78,-54},
              rotation=180),
            Text(
              extent={{-15.5,19.5},{15.5,-19.5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdCO2",
              origin={76.5,-77.5},
              rotation=180),
            Text(
              extent={{-92,-48},{-68,-64}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbCO"),
            Text(
              extent={{-12,5},{12,-5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={78,-35},
              rotation=180,
              textString="ceHb"),
            Text(
              extent={{-96,6},{-78,-4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctPi")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                       extent={{-100,-100},{100,100}})));
    end O2CO2;

    model O2CO2algr

      Physiolibrary.Types.RealIO.FractionOutput sO2
                                          annotation (Placement(
            transformation(extent={{-8,-8},{8,8}},
            rotation=0,
            origin={88,-16}),                           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,0})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(
                                            displayUnit="mmol/l")
        "outgoing concentration of HCO3"                                                           annotation (Placement(
            transformation(extent={{-7,-7.5},{7,7.5}},
            rotation=0,
            origin={87,-6.5}),                          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,20})));
      Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)  annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=0,
            origin={-68,-65}),        iconTransformation(extent={{-122,-108},{
                -102,-88}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{8,8},{
                -8,-8}},
            rotation=180,
            origin={-78,4}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-112,40})));
      Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=0,
            origin={-65,-25}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-112,-18})));
      Physiolibrary.Types.RealIO.FractionInput FMetHb
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=0,
            origin={-72,-34}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-112,-36})));
      Physiolibrary.Types.RealIO.FractionInput FHbF
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=0,
            origin={-78,-56}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-112,-78})));
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
                                      annotation (Placement(transformation(extent={{-70,29},
                {-54,45}}),           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-112,98})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{7,7},{
                -7,-7}},
            rotation=180,
            origin={-73,-7}),         iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-112,20})));
      Physiolibrary.Types.RealIO.pHOutput pH annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={88,3}),    iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,40})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={87,-44}),iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-58})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation (
          Placement(transformation(
            extent={{-7,-6.5},{7,6.5}},
            rotation=0,
            origin={87,-53.5}),iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-78})));
      Physiolibrary.Types.RealIO.FractionInput FCOHb annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={-75,-46}),
                             iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-112,-58})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
        "effiective concentration of hemoglobin (mmol/l)" annotation (Placement(
            transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={88,-34}),iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-38})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctO2 annotation (Placement(
            transformation(extent={{-34,39},{-16,57}}), iconTransformation(extent={{-122,70},
                {-102,90}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctCO2 annotation (Placement(
            transformation(extent={{-32,68},{-16,84}}), iconTransformation(extent={{-122,50},
                {-102,70}})));
      Physiolibrary.Types.RealIO.PressureOutput pO2( start=13300) annotation (Placement(
            transformation(extent={{36,41},{50,55}}), iconTransformation(extent={{100,
                70},{120,90}})));
      Physiolibrary.Types.RealIO.PressureOutput pCO2 annotation (Placement(
            transformation(extent={{36,70},{48,82}}), iconTransformation(extent={{100,
                50},{120,70}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctPi(displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)" annotation (
          Placement(transformation(
            extent={{7,7},{-7,-7}},
            rotation=180,
            origin={-85,-13}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-112,2})));
      Real pO2kPa;
      Real pCO2kPa;
      Real tempC;

    algorithm
      (pO2kPa,pCO2kPa,pH,sO2) := O2CO2of( ctO2,ctCO2,BEox,ctHb,ctAlb,ctPi,cDPG,FCOHb,FMetHb,FHbF,tempC);
      cHCO3:=cHCO3of(pH,pCO2kPa,tempC);
      cdCO2 := ctCO2Pof(pH, pCO2kPa, tempC);
      cdO2 := dissO2( pO2,tempC);
      ceHb :=ceHbof(ctHb,FCOHb,FMetHb);
    equation
      T-273.15=tempC;
      pO2kPa*1000=pO2;
      pCO2kPa*1000=pCO2;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{74,2},{92,-8}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="sO2"),
            Text(
              extent={{70,30},{94,10}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="HCO3"),
            Text(
              extent={{-94,-92},{-76,-102}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Text(
              extent={{72,44},{92,32}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pH"),
            Text(
              extent={{-98,102},{-80,92}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="BEox"),
            Text(
              extent={{-98,46},{-80,36}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctHb"),
            Text(
              extent={{-10,6},{10,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2",
              origin={-88,80},
              rotation=180),
            Text(
              extent={{-13,7},{13,-7}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2",
              origin={-85,57},
              rotation=180),
            Text(
              extent={{-64,62},{58,-22}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="O2CO2"),
            Text(
              extent={{74,88},{92,78}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pO2"),
            Text(
              extent={{68,70},{90,52}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO2"),
            Text(
              extent={{-88,-70},{-70,-78}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbF"),
            Text(
              extent={{-92,-24},{-64,-42}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FMetHb"),
            Text(
              extent={{-92,-10},{-72,-20}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cDPG"),
            Text(
              extent={{-98,30},{-78,18}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctAlb"),
            Text(
              extent={{-12,6},{12,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdO2",
              origin={78,-54},
              rotation=180),
            Text(
              extent={{-15.5,19.5},{15.5,-19.5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdCO2",
              origin={76.5,-77.5},
              rotation=180),
            Text(
              extent={{-90,-48},{-66,-64}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbCO"),
            Text(
              extent={{-12,5},{12,-5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={78,-35},
              rotation=180,
              textString="ceHb"),
            Text(
              extent={{-98,12},{-80,2}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctPi")}), Diagram(coordinateSystem(preserveAspectRatio=false,
                       extent={{-100,-100},{100,100}})));
    end O2CO2algr;

    model AlveolocapillaryUnit
    extends Icons.Alveolus;
      Parts.MolarInflowConnector CO2ven annotation (Placement(transformation(
              extent={{-106,-4},{-86,16}}), iconTransformation(extent={{-106,-4},
                {-86,16}})));
      Parts.MolarInflowConnector O2ven annotation (Placement(transformation(
              extent={{-102,-52},{-82,-32}}), iconTransformation(extent={{-102,
                -52},{-82,-32}})));
      Parts.MolarOutflowConnector CO2pc annotation (Placement(transformation(
              extent={{76,-10},{96,10}}), iconTransformation(extent={{76,-10},{
                96,10}})));
      Parts.MolarOutflowConnector O2pc annotation (Placement(transformation(
              extent={{78,-50},{98,-30}}), iconTransformation(extent={{78,-50},
                {98,-30}})));
      Parts.MolarInflowConnector O2alv annotation (Placement(transformation(
              extent={{10,80},{30,100}}), iconTransformation(extent={{10,80},{
                30,100}})));
      Parts.MolarOutflowConnector CO2alv annotation (Placement(transformation(
              extent={{-48,82},{-28,102}}), iconTransformation(extent={{-48,82},
                {-28,102}})));
    Physiolibrary.Types.BusConnector busConnector annotation (Placement(
          transformation(extent={{82,24},{102,44}}), iconTransformation(
            extent={{62,70},{102,110}})));
    equation

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics));
    end AlveolocapillaryUnit;

    package testOSA

      model testpHfr

        Real pH;
      equation
        pH = pHfr(5.3,-19,8*0.33,39,0.66);
      end testpHfr;

      model testcBaseOf

        Real cte;
      algorithm
       cte:=cBEoxOf(
          7.4,
          5.33,
          8.0,
          37,
          0.66,
          1.15,
          1);

      end testcBaseOf;

      model testctCO2Bof
        Real ctCO2;
        Real ctCO2SI;
        Real cHCO3;
        Real cdCO2p;
      algorithm
        ctCO2 := ctCO2Bof(7.037,5.330,37,8,0.946);

         (ctCO2SI, cHCO3,cdCO2p) := CO2totalSI(
         7.037,
         5330,
         273.15+37,
         8,
         0.946);

      end testctCO2Bof;

      model testctO2content

        ctO2content ctO2content1
          annotation (Placement(transformation(extent={{-16,-12},{42,50}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k(displayUnit="kPa")=
            13300)
          annotation (Placement(transformation(extent={{-48,38},{-40,46}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{74,46},{66,54}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)
          annotation (Placement(transformation(extent={{66,26},{58,34}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb1(k=0.005)
          annotation (Placement(transformation(extent={{78,14},{68,22}})));
        Physiolibrary.Types.Constants.FractionConst fCOHb(k=0.005)
          annotation (Placement(transformation(extent={{66,-12},{58,-4}})));
        Physiolibrary.Types.Constants.FractionConst fHbF(k=0.005)
          annotation (Placement(transformation(extent={{66,2},{58,10}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-38,2},{-30,10}})));
        Physiolibrary.Types.Constants.pHConst pH(k=7.0)
          annotation (Placement(transformation(extent={{-86,26},{-78,34}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5330)
          annotation (Placement(transformation(extent={{-38,16},{-30,24}})));
      equation
        connect(pO2.y, ctO2content1.pO2) annotation (Line(points={{-39,42},{-30,
                42},{-30,43.8},{-18.9,43.8}}, color={0,0,127}));
        connect(pH.y, ctO2content1.pH) annotation (Line(points={{-77,30},{-50,
                30},{-50,32.02},{-18.9,32.02}}, color={0,0,127}));
        connect(pCO2.y, ctO2content1.pCO2) annotation (Line(points={{-29,20},{
                -18.9,20},{-18.9,19}}, color={0,0,127}));
        connect(temperature.y, ctO2content1.T) annotation (Line(points={{-29,6},
                {-18.9,6},{-18.9,6.6}}, color={0,0,127}));
        connect(ctHb.y, ctO2content1.ctHb) annotation (Line(points={{65,50},{56,
                50},{56,43.8},{44.9,43.8}}, color={0,0,127}));
        connect(cDPG.y, ctO2content1.cDPG) annotation (Line(points={{57,30},{52,
                30},{52,31.4},{44.9,31.4}}, color={0,0,127}));
        connect(fMetHb1.y, ctO2content1.FMetHb) annotation (Line(points={{66.75,
                18},{58,18},{58,19},{44.9,19}}, color={0,0,127}));
        connect(fHbF.y, ctO2content1.FHbF) annotation (Line(points={{57,6},{
                44.9,6},{44.9,6.6}}, color={0,0,127}));
        connect(fCOHb.y, ctO2content1.FCOHb) annotation (Line(points={{57,-8},{
                50.5,-8},{50.5,-5.8},{44.9,-5.8}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}})));
      end testctO2content;

      model testctCO2content

        ctCO2content ctCO2content1
          annotation (Placement(transformation(extent={{-20,-6},{30,44}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{-66,2},{-56,10}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-48,12},{-40,20}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5330)
          annotation (Placement(transformation(extent={{-42,36},{-34,44}})));
        Physiolibrary.Types.Constants.pHConst pH(k=7.037)
          annotation (Placement(transformation(extent={{-58,22},{-50,30}})));
        Physiolibrary.Types.Constants.FractionConst sO2(k=0.946)
          annotation (Placement(transformation(extent={{-78,-20},{-70,-12}})));
      equation
        connect(pCO2.y, ctCO2content1.pCO2) annotation (Line(points={{-33,40},{
                -22.5,40},{-22.5,39}}, color={0,0,127}));
        connect(pH.y, ctCO2content1.pH) annotation (Line(points={{-49,26},{-36,
                26},{-36,29},{-22.5,29}}, color={0,0,127}));
        connect(temperature.y, ctCO2content1.T) annotation (Line(points={{-39,
                16},{-32,16},{-32,19},{-22.5,19}}, color={0,0,127}));
        connect(ctHb.y, ctCO2content1.ctHb) annotation (Line(points={{-54.75,6},
                {-38,6},{-38,9},{-22.5,9}}, color={0,0,127}));
        connect(sO2.y, ctCO2content1.sO2) annotation (Line(points={{-69,-16},{
                -46,-16},{-46,-1},{-22.5,-1}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}})));
      end testctCO2content;

      model TestbloodBEOX

        bloodBEox bloodBEox1
          annotation (Placement(transformation(extent={{-34,-18},{24,44}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5330)
          annotation (Placement(transformation(extent={{-86,36},{-78,44}})));
        Physiolibrary.Types.Constants.pHConst pH(k=7.4)
          annotation (Placement(transformation(extent={{-68,28},{-60,36}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{-90,18},{-82,26}})));
        Physiolibrary.Types.Constants.ConcentrationConst cAlb(k=0.66)
          annotation (Placement(transformation(extent={{-76,6},{-68,14}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-84,-24},{-76,-16}})));
        Physiolibrary.Types.Constants.ConcentrationConst cPi(k=1.15)
          annotation (Placement(transformation(extent={{-86,-6},{-78,2}})));
        Physiolibrary.Types.Constants.FractionConst sO2(k=0.5)
          annotation (Placement(transformation(extent={{-72,-14},{-64,-6}})));
      equation
        connect(pCO2.y, bloodBEox1.pCO2) annotation (Line(points={{-77,40},{-58,
                40},{-58,41.52},{-36.9,41.52}},
                                              color={0,0,127}));
        connect(pH.y, bloodBEox1.pH) annotation (Line(points={{-59,32},{-46,32},
                {-46,30.98},{-36.9,30.98}},
                                          color={0,0,127}));
        connect(ctHb.y, bloodBEox1.ctHb) annotation (Line(points={{-81,22},{-58,
                22},{-58,20.44},{-36.9,20.44}},
                                         color={0,0,127}));
        connect(cAlb.y, bloodBEox1.cAlb) annotation (Line(points={{-67,10},{
                -36.9,10},{-36.9,9.28}},
                                       color={0,0,127}));
        connect(temperature.y, bloodBEox1.temp) annotation (Line(points={{-75,-20},
                {-56,-20},{-56,-15.52},{-36.9,-15.52}},    color={0,0,127}));
        connect(cPi.y, bloodBEox1.cPi) annotation (Line(points={{-77,-2},{-56,
                -2},{-56,0.6},{-36.9,0.6}}, color={0,0,127}));
        connect(sO2.y, bloodBEox1.sO2) annotation (Line(points={{-63,-10},{-50,
                -10},{-50,-8.08},{-36.9,-8.08}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end TestbloodBEOX;

      model TestBEINV

        BEINV bEINV
          annotation (Placement(transformation(extent={{-24,-16},{26,36}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5330)
          annotation (Placement(transformation(extent={{-44,16},{-36,24}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{-86,8},{-78,16}})));
        Physiolibrary.Types.Constants.ConcentrationConst cAlb(k=0.66)
          annotation (Placement(transformation(extent={{-84,-2},{-76,6}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-60,-30},{-52,-22}})));
        Physiolibrary.Types.Constants.ConcentrationConst BEox(k=0)
          annotation (Placement(transformation(extent={{-52,28},{-44,36}})));
        Physiolibrary.Types.Constants.ConcentrationConst cPi(k=1.15)
          annotation (Placement(transformation(extent={{-68,-10},{-60,-2}})));
        Physiolibrary.Types.Constants.FractionConst sO2(k=0.5)
          annotation (Placement(transformation(extent={{-56,-16},{-48,-8}})));
      equation
        connect(BEox.y, bEINV.BEox) annotation (Line(points={{-43,32},{-36,32},
                {-36,30.8},{-26.5,30.8}}, color={0,0,127}));
        connect(pCO2.y, bEINV.pCO2) annotation (Line(points={{-35,20},{-26.5,20},
                {-26.5,20.4}}, color={0,0,127}));
        connect(ctHb.y, bEINV.ctHb)
          annotation (Line(points={{-77,12},{-38,12},{-38,10},{-26.5,10}},
                                                         color={0,0,127}));
        connect(cAlb.y, bEINV.cAlb) annotation (Line(points={{-75,2},{-26.5,2},
                {-26.5,3.24}}, color={0,0,127}));
        connect(temperature.y, bEINV.temp) annotation (Line(points={{-51,-26},{
                -34,-26},{-34,-15.48},{-26.5,-15.48}},
                                                     color={0,0,127}));
        connect(cPi.y, bEINV.cPi) annotation (Line(points={{-59,-6},{-44,-6},{-44,
                -3},{-26.5,-3}}, color={0,0,127}));
        connect(sO2.y, bEINV.sO2) annotation (Line(points={{-47,-12},{-38,-12},
                {-38,-9.24},{-26.5,-9.24}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end TestBEINV;

      model TestPO2PCO2

        PO2PCO2 pO2PCO2_1
          annotation (Placement(transformation(extent={{-14,-2},{56,66}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5330)
          annotation (Placement(transformation(extent={{-60,54},{-52,62}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{-48,48},{-40,56}})));
        Physiolibrary.Types.Constants.ConcentrationConst cAlb(k=0.66)
          annotation (Placement(transformation(extent={{-68,38},{-60,46}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-72,-4},{-64,4}})));
        Physiolibrary.Types.Constants.ConcentrationConst BEox(k=0)
          annotation (Placement(transformation(extent={{-82,70},{-74,78}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k(displayUnit="kPa")=
            13300)
          annotation (Placement(transformation(extent={{-74,60},{-66,68}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)
          annotation (Placement(transformation(extent={{-80,22},{-72,30}})));
        Physiolibrary.Types.Constants.FractionConst fCOHb(k=0.005)
          annotation (Placement(transformation(extent={{-38,10},{-30,18}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb1(k=0.005)
          annotation (Placement(transformation(extent={{-60,16},{-52,24}})));
        Physiolibrary.Types.Constants.FractionConst fHbF(k=0.005)
          annotation (Placement(transformation(extent={{-54,4},{-46,12}})));
        Physiolibrary.Types.Constants.ConcentrationConst cPi(k=1.15)
          annotation (Placement(transformation(extent={{-58,30},{-50,38}})));
      equation
        connect(pCO2.y, pO2PCO2_1.pCO2) annotation (Line(points={{-51,58},{
                -17.5,58},{-17.5,51.72}},
                                       color={0,0,127}));
        connect(BEox.y, pO2PCO2_1.BEox) annotation (Line(points={{-73,74},{-42,
                74},{-42,65.32},{-17.5,65.32}},
                                              color={0,0,127}));
        connect(pO2.y, pO2PCO2_1.pO2) annotation (Line(points={{-65,64},{-34,64},
                {-34,58.52},{-17.5,58.52}},
                                          color={0,0,127}));
        connect(pO2PCO2_1.ctHb, ctHb.y) annotation (Line(points={{-17.5,44.92},
                {-22,44.92},{-22,52},{-39,52}},
                                              color={0,0,127}));
        connect(cAlb.y, pO2PCO2_1.ctAlb) annotation (Line(points={{-59,42},{-32,
                42},{-32,38.12},{-17.5,38.12}},
                                              color={0,0,127}));
        connect(cDPG.y, pO2PCO2_1.cDPG) annotation (Line(points={{-71,26},{
                -17.5,26},{-17.5,25.2}}, color={0,0,127}));
        connect(temperature.y, pO2PCO2_1.T) annotation (Line(points={{-63,0},{
                -42,0},{-42,-2},{-17.5,-2}},   color={0,0,127}));
        connect(fHbF.y, pO2PCO2_1.FHbF) annotation (Line(points={{-45,8},{-32,8},
                {-32,4.8},{-17.5,4.8}}, color={0,0,127}));
        connect(fCOHb.y, pO2PCO2_1.FHbCO) annotation (Line(points={{-29,14},{
                -22,14},{-22,11.6},{-17.5,11.6}},
                                              color={0,0,127}));
        connect(fMetHb1.y, pO2PCO2_1.FMetHb) annotation (Line(points={{-51,20},
                {-34,20},{-34,18.4},{-17.5,18.4}}, color={0,0,127}));
        connect(cPi.y, pO2PCO2_1.ctPi) annotation (Line(points={{-49,34},{-34,
                34},{-34,31.32},{-17.5,31.32}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end TestPO2PCO2;

      model testO2CO2

        PO2PCO2 pO2PCO2_1
          annotation (Placement(transformation(extent={{-4,8},{66,76}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               7999.3432449)
          annotation (Placement(transformation(extent={{-36,56},{-28,64}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{-84,50},{-76,58}})));
        Physiolibrary.Types.Constants.ConcentrationConst cAlb(k=0.66)
          annotation (Placement(transformation(extent={{-72,42},{-64,50}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-62,6},{-54,14}})));
        Physiolibrary.Types.Constants.ConcentrationConst BEox(k=-19)
          annotation (Placement(transformation(extent={{-96,68},{-88,76}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k(displayUnit="mmHg")=
               10665.7909932)
          annotation (Placement(transformation(extent={{-54,62},{-46,70}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)
          annotation (Placement(transformation(extent={{-100,32},{-92,40}})));
        Physiolibrary.Types.Constants.FractionConst fCOHb(k=0.005)
          annotation (Placement(transformation(extent={{-32,22},{-24,30}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb1(k=0.005)
          annotation (Placement(transformation(extent={{-62,28},{-54,36}})));
        Physiolibrary.Types.Constants.FractionConst fHbF(k=0.005)
          annotation (Placement(transformation(extent={{-44,14},{-36,22}})));
        O2CO2 o2CO2_1
          annotation (Placement(transformation(extent={{12,-64},{78,0}})));
        Physiolibrary.Types.Constants.ConcentrationConst cPi(k=1.15)
          annotation (Placement(transformation(extent={{-54,38},{-46,46}})));
      equation
        connect(pCO2.y, pO2PCO2_1.pCO2) annotation (Line(points={{-27,60},{-7.5,
                60},{-7.5,61.72}},
                                color={0,0,127}));
        connect(BEox.y, pO2PCO2_1.BEox) annotation (Line(points={{-87,72},{-32,
                72},{-32,75.32},{-7.5,75.32}},
                                             color={0,0,127}));
        connect(pO2.y, pO2PCO2_1.pO2) annotation (Line(points={{-45,66},{-24,66},
                {-24,68.52},{-7.5,68.52}},
                                         color={0,0,127}));
        connect(pO2PCO2_1.ctHb, ctHb.y) annotation (Line(points={{-7.5,54.92},{
                -12,54.92},{-12,54},{-75,54}},color={0,0,127}));
        connect(cAlb.y, pO2PCO2_1.ctAlb) annotation (Line(points={{-63,46},{-22,
                46},{-22,48.12},{-7.5,48.12}},
                                             color={0,0,127}));
        connect(cDPG.y, pO2PCO2_1.cDPG) annotation (Line(points={{-91,36},{-7.5,
                36},{-7.5,35.2}}, color={0,0,127}));
        connect(temperature.y, pO2PCO2_1.T) annotation (Line(points={{-53,10},{
                -32,10},{-32,8},{-7.5,8}},       color={0,0,127}));
        connect(fHbF.y, pO2PCO2_1.FHbF) annotation (Line(points={{-35,18},{-22,
                18},{-22,14.8},{-7.5,14.8}}, color={0,0,127}));
        connect(fCOHb.y, pO2PCO2_1.FHbCO) annotation (Line(points={{-23,26},{
                -12,26},{-12,21.6},{-7.5,21.6}},
                                             color={0,0,127}));
        connect(fMetHb1.y, pO2PCO2_1.FMetHb) annotation (Line(points={{-53,32},
                {-24,32},{-24,28.4},{-7.5,28.4}}, color={0,0,127}));
        connect(o2CO2_1.BEox, pO2PCO2_1.BEox) annotation (Line(points={{8.7,
                -0.64},{-86,-0.64},{-86,72},{-32,72},{-32,75.32},{-7.5,75.32}},
              color={0,0,127}));
        connect(o2CO2_1.ctHb, ctHb.y) annotation (Line(points={{8.7,-19.2},{-74,
                -19.2},{-74,54},{-75,54}}, color={0,0,127}));
        connect(o2CO2_1.ctAlb, pO2PCO2_1.ctAlb) annotation (Line(points={{8.7,
                -25.6},{-66,-25.6},{-66,40},{-60,40},{-60,46},{-22,46},{-22,
                48.12},{-7.5,48.12}},
                                    color={0,0,127}));
        connect(o2CO2_1.cDPG, cDPG.y) annotation (Line(points={{8.7,-37.76},{
                -91,-37.76},{-91,36}},
                                  color={0,0,127}));
        connect(o2CO2_1.FMetHb, pO2PCO2_1.FMetHb) annotation (Line(points={{8.7,
                -43.52},{-48,-43.52},{-48,32},{-24,32},{-24,28.4},{-7.5,28.4}},
              color={0,0,127}));
        connect(o2CO2_1.FHbCO, fCOHb.y) annotation (Line(points={{8.7,-49.92},{
                -23,-49.92},{-23,26}},
                                color={0,0,127}));
        connect(o2CO2_1.FHbF, pO2PCO2_1.FHbF) annotation (Line(points={{8.7,
                -56.32},{-30,-56.32},{-30,18},{-22,18},{-22,14.8},{-7.5,14.8}},
              color={0,0,127}));
        connect(o2CO2_1.T, pO2PCO2_1.T) annotation (Line(points={{8.7,-62.72},{
                -40,-62.72},{-40,10},{-32,10},{-32,8},{-7.5,8}},      color={0,
                0,127}));
        connect(cPi.y, pO2PCO2_1.ctPi) annotation (Line(points={{-45,42},{-7.5,
                42},{-7.5,41.32}}, color={0,0,127}));
        connect(o2CO2_1.ctPi, pO2PCO2_1.ctPi) annotation (Line(points={{8.7,
                -31.36},{-78,-31.36},{-78,24},{-36,24},{-36,42},{-7.5,42},{-7.5,
                41.32}}, color={0,0,127}));
        connect(o2CO2_1.ctO2, pO2PCO2_1.ctO2) annotation (Line(points={{8.7,
                -6.4},{2,-6.4},{2,4},{80,4},{80,69.2},{69.5,69.2}}, color={0,0,
                127}));
        connect(o2CO2_1.ctCO2, pO2PCO2_1.ctCO2) annotation (Line(points={{8.7,
                -12.8},{-2,-12.8},{-2,6},{78,6},{78,62.4},{69.5,62.4}}, color={
                0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end testO2CO2;

      model testO2CO2_1

        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{-84,50},{-76,58}})));
        Physiolibrary.Types.Constants.ConcentrationConst cAlb(k=0.66)
          annotation (Placement(transformation(extent={{-72,42},{-64,50}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-62,6},{-54,14}})));
        Physiolibrary.Types.Constants.ConcentrationConst BEox(k=-19)
          annotation (Placement(transformation(extent={{-96,68},{-88,76}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)
          annotation (Placement(transformation(extent={{-100,32},{-92,40}})));
        Physiolibrary.Types.Constants.FractionConst fCOHb(k=0.005)
          annotation (Placement(transformation(extent={{-32,22},{-24,30}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb1(k=0.005)
          annotation (Placement(transformation(extent={{-62,28},{-54,36}})));
        Physiolibrary.Types.Constants.FractionConst fHbF(k=0.005)
          annotation (Placement(transformation(extent={{-44,14},{-36,22}})));
        O2CO2 o2CO2_1
          annotation (Placement(transformation(extent={{12,-64},{78,0}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctO2(k=7.6354)
          annotation (Placement(transformation(extent={{-16,-10},{-8,-2}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctCO2(k=10.3922)
          annotation (Placement(transformation(extent={{-28,-16},{-20,-8}})));
        Physiolibrary.Types.Constants.ConcentrationConst cPI(k=1.15)
          annotation (Placement(transformation(extent={{-82,-32},{-74,-24}})));
      equation
        connect(o2CO2_1.ctHb, ctHb.y) annotation (Line(points={{8.7,-19.2},{-74,
                -19.2},{-74,54},{-75,54}}, color={0,0,127}));
        connect(o2CO2_1.cDPG, cDPG.y) annotation (Line(points={{8.7,-37.76},{
                -91,-37.76},{-91,36}},
                                  color={0,0,127}));
        connect(o2CO2_1.FHbCO, fCOHb.y) annotation (Line(points={{8.7,-49.92},{
                -23,-49.92},{-23,26}},
                                color={0,0,127}));
        connect(ctO2.y, o2CO2_1.ctO2) annotation (Line(points={{-7,-6},{8.7,-6},
                {8.7,-6.4}}, color={0,0,127}));
        connect(ctCO2.y, o2CO2_1.ctCO2) annotation (Line(points={{-19,-12},{8.7,
                -12},{8.7,-12.8}},
                                 color={0,0,127}));
        connect(o2CO2_1.T, temperature.y) annotation (Line(points={{8.7,-62.72},
                {-53,-62.72},{-53,10}},color={0,0,127}));
        connect(o2CO2_1.FHbF, fHbF.y) annotation (Line(points={{8.7,-56.32},{
                -35,-56.32},{-35,18}},
                                  color={0,0,127}));
        connect(o2CO2_1.FMetHb, fMetHb1.y) annotation (Line(points={{8.7,-43.52},
                {-53,-43.52},{-53,32}},color={0,0,127}));
        connect(o2CO2_1.ctAlb, cAlb.y) annotation (Line(points={{8.7,-25.6},{
                -63,-25.6},{-63,46}}, color={0,0,127}));
        connect(o2CO2_1.BEox, BEox.y) annotation (Line(points={{8.7,-0.64},{-87,
                -0.64},{-87,72}},color={0,0,127}));
        connect(cPI.y, o2CO2_1.ctPi) annotation (Line(points={{-73,-28},{-34,
                -28},{-34,-31.36},{8.7,-31.36}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end testO2CO2_1;

      model testO2CO2algr

        PO2PCO2 pO2PCO2_1
          annotation (Placement(transformation(extent={{-4,8},{66,76}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               7999.3432449)
          annotation (Placement(transformation(extent={{-36,56},{-28,64}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{-84,50},{-76,58}})));
        Physiolibrary.Types.Constants.ConcentrationConst cAlb(k=0.66)
          annotation (Placement(transformation(extent={{-72,42},{-64,50}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-62,6},{-54,14}})));
        Physiolibrary.Types.Constants.ConcentrationConst BEox(k=-19)
          annotation (Placement(transformation(extent={{-96,68},{-88,76}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k(displayUnit="mmHg")=
               10665.7909932)
          annotation (Placement(transformation(extent={{-54,62},{-46,70}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)
          annotation (Placement(transformation(extent={{-100,32},{-92,40}})));
        Physiolibrary.Types.Constants.FractionConst fCOHb(k=0.005)
          annotation (Placement(transformation(extent={{-36,22},{-28,30}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb1(k=0.005)
          annotation (Placement(transformation(extent={{-60,28},{-52,36}})));
        Physiolibrary.Types.Constants.FractionConst fHbF(k=0.005)
          annotation (Placement(transformation(extent={{-44,14},{-36,22}})));
        Physiolibrary.Types.Constants.ConcentrationConst cPi(k=1.15)
          annotation (Placement(transformation(extent={{-54,38},{-46,46}})));
        O2CO2algr o2CO2algr
          annotation (Placement(transformation(extent={{-2,-70},{68,-8}})));
      equation
        connect(pCO2.y, pO2PCO2_1.pCO2) annotation (Line(points={{-27,60},{-7.5,
                60},{-7.5,61.72}},
                                color={0,0,127}));
        connect(BEox.y, pO2PCO2_1.BEox) annotation (Line(points={{-87,72},{-32,
                72},{-32,75.32},{-7.5,75.32}},
                                             color={0,0,127}));
        connect(pO2.y, pO2PCO2_1.pO2) annotation (Line(points={{-45,66},{-24,66},
                {-24,68.52},{-7.5,68.52}},
                                         color={0,0,127}));
        connect(pO2PCO2_1.ctHb, ctHb.y) annotation (Line(points={{-7.5,54.92},{
                -12,54.92},{-12,54},{-75,54}},color={0,0,127}));
        connect(cAlb.y, pO2PCO2_1.ctAlb) annotation (Line(points={{-63,46},{-22,
                46},{-22,48.12},{-7.5,48.12}},
                                             color={0,0,127}));
        connect(cDPG.y, pO2PCO2_1.cDPG) annotation (Line(points={{-91,36},{-7.5,
                36},{-7.5,35.2}}, color={0,0,127}));
        connect(temperature.y, pO2PCO2_1.T) annotation (Line(points={{-53,10},{
                -32,10},{-32,8},{-7.5,8}},       color={0,0,127}));
        connect(fHbF.y, pO2PCO2_1.FHbF) annotation (Line(points={{-35,18},{-22,
                18},{-22,14.8},{-7.5,14.8}}, color={0,0,127}));
        connect(fCOHb.y, pO2PCO2_1.FHbCO) annotation (Line(points={{-27,26},{
                -12,26},{-12,21.6},{-7.5,21.6}},
                                             color={0,0,127}));
        connect(fMetHb1.y, pO2PCO2_1.FMetHb) annotation (Line(points={{-51,32},
                {-24,32},{-24,28.4},{-7.5,28.4}}, color={0,0,127}));
        connect(cPi.y, pO2PCO2_1.ctPi) annotation (Line(points={{-45,42},{-7.5,
                42},{-7.5,41.32}}, color={0,0,127}));
        connect(o2CO2algr.BEox, pO2PCO2_1.BEox) annotation (Line(points={{-5.5,
                -8.62},{-86,-8.62},{-86,72},{-32,72},{-32,75.32},{-7.5,75.32}},
              color={0,0,127}));
        connect(o2CO2algr.ctO2, pO2PCO2_1.ctO2) annotation (Line(points={{-5.5,
                -14.2},{-18,-14.2},{-18,-2},{86,-2},{86,69.2},{69.5,69.2}},
              color={0,0,127}));
        connect(o2CO2algr.ctCO2, pO2PCO2_1.ctCO2) annotation (Line(points={{
                -5.5,-20.4},{-22,-20.4},{-22,4},{82,4},{82,62.4},{69.5,62.4}},
              color={0,0,127}));
        connect(o2CO2algr.ctHb, ctHb.y) annotation (Line(points={{-5.5,-26.6},{
                -75,-26.6},{-75,54}}, color={0,0,127}));
        connect(o2CO2algr.ctAlb, cAlb.y) annotation (Line(points={{-5.5,-32.8},
                {-63,-32.8},{-63,46}}, color={0,0,127}));
        connect(o2CO2algr.ctPi, pO2PCO2_1.ctPi) annotation (Line(points={{-5.5,
                -38.38},{-46,-38.38},{-46,34},{-40,34},{-40,42},{-7.5,42},{-7.5,
                41.32}}, color={0,0,127}));
        connect(o2CO2algr.cDPG, cDPG.y) annotation (Line(points={{-5.5,-44.58},
                {-91,-44.58},{-91,36}}, color={0,0,127}));
        connect(o2CO2algr.FMetHb, fMetHb1.y) annotation (Line(points={{-5.5,
                -50.16},{-51,-50.16},{-51,32}}, color={0,0,127}));
        connect(o2CO2algr.FCOHb, pO2PCO2_1.FHbCO) annotation (Line(points={{
                -5.5,-56.36},{-26,-56.36},{-26,26},{-12,26},{-12,21.6},{-7.5,
                21.6}}, color={0,0,127}));
        connect(o2CO2algr.FHbF, fHbF.y) annotation (Line(points={{-5.5,-62.56},
                {-35,-62.56},{-35,18}}, color={0,0,127}));
        connect(o2CO2algr.T, pO2PCO2_1.T) annotation (Line(points={{-5.5,-68.76},
                {-42,-68.76},{-42,10},{-32,10},{-32,8},{-7.5,8}}, color={0,0,
                127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end testO2CO2algr;

      model testBEINVof
        Real pH=7.2;
        Real newpH;
        Real BEox;
        Real newBEox;
        Real pCO2 = 8.33;
        Real cHb=8.5;
        Real cAlb = 0.66;
        Real cPi=1.15;
        Real sO2=0.5;
        Real temp = 37;
      algorithm
        BEox:= cBEoxOf(pH,pCO2,cHb,temp, cAlb, cPi, sO2);
        newpH :=BEINVof(BEox,pCO2,cHb,cAlb,cPi,sO2,temp);
        newBEox:= cBEoxOf(newpH,pCO2,cHb,temp, cAlb, cPi, sO2);
      end testBEINVof;

      model testPO2PCO2of
        Real BEox= -10;
        Real pCO2 = 8.33;
        Real pO2 = 13.3;
        Real cHb=8.5;
        Real cAlb = 0.66;
        Real cPi=1.15;
        Real temp = 37;
        Real FCOHb = 0.005;
        Real FMetHb =  0.005;
        Real FHbF = 0.005;
        Real cDPG =  5.3;
        Real ctO2;
        Real ctCO2;
        Real sO2;
        Real dissO2;
        Real ceHb;
        Real ctO2calc;
        Real ctCO2calc;
        Real pHcalc;
        Real sO2calc;
        Real BEoxcalc;
      algorithm

        (ctO2calc,ctCO2calc,pHcalc,sO2calc):= PO2PCO2of(pO2,pCO2,BEox,cHb,cAlb,cPi,cDPG,FCOHb,FMetHb,FHbF,temp);

        (ctO2,sO2,dissO2,ceHb):=O2total(cHb,pO2,pHcalc,pCO2,cDPG,FCOHb,FMetHb,FHbF,temp);
        ctCO2:= ctCO2Bof(pHcalc,pCO2,temp,cHb,sO2);
        BEoxcalc :=cBEoxOf(pHcalc,pCO2,cHb,temp,cAlb,cPi,sO2calc);
      end testPO2PCO2of;

      model testO2CO2of
        Real BEox= 0;
        Real pCO2 = 8.33;
        Real pO2 = 13.3;
        Real cHb=8.5;
        Real cAlb = 0.66;
        Real cPi=1.15;
        Real temp = 37;
        Real FCOHb = 0.005;
        Real FMetHb =  0.005;
        Real FHbF = 0.005;
        Real cDPG =  5.3;
        Real CO2;
        Real O2;
        Real sO2;
        Real pH;
        Real PO2calc;
        Real PCO2calc;
        Real pHcalc;
        Real sO2calc;
      algorithm
        (O2,CO2,pH,sO2) := PO2PCO2of(pO2,pCO2,BEox,cHb,cAlb,cPi,cDPG,FCOHb,FMetHb,FHbF,temp);
        (PO2calc,PCO2calc,pHcalc,sO2calc):=O2CO2of( O2,CO2,BEox,cHb,cAlb,cPi,cDPG,FCOHb, FMetHb,FHbF,temp);
      end testO2CO2of;

      model testAlvEquil
        Real VAi= 4;
        Real FiO2= 0.21;
        Real FiCO2 = 0.004;
        Real temp = 37;
        Real PB= 760;
        Real Q = 5;
        Real CvO2 = 6.18;
        Real CvCO2 = 26.3;
        Real BEox= 0;
        Real Hb = 8.40;
        Real cAlb = 0.66;
        Real cPi = 1.15;
        Real cDPG = 5.3;
        Real FCOHb = 0.005;
        Real FMetHb = 0.005;
        Real FHbF = 0.005;

        Real VA "expired alveolar ventilation in l/min";
        Real VO2 "rate of oxygen comsumption [mmol/min]";
        Real VCO2 "rate of carbon dioxide production [mmol/min]";
        Real CpcO2
          "O2 content in end pulmonary capillary blood [l STPD/l of blood]";
        Real CpcCO2
          "CO2 content in pulmonary capillary blood [l STPD/l of blood]";
        Real PAO2 "alveolar pO2 [kPa]";
        Real PACO2 "alveolar PCO2 [kPA]";
        Real PpcO2 "pO2 in end pulmonary capillary blood [kPa]";
        Real PpcCO2 "pCO2 in end pulmonary capillary blood  PCO2 [kPA]";
        Real sO2pc
          "oxyhemoglobin saturation in end pulmonary capillary blood [ratio form 0 to 1]";
        Real pHpc "pH in end pulmonary capillary blood ";
        Real HCO3pc;
        Real VCO2ml "rate of oxygen comsumption [ml STPD/min]";
        Real VO2ml "rate of CO2 production [ml STPD/min]";

      algorithm
         (VA,VO2,VCO2,CpcO2,CpcCO2,PAO2,PACO2,PpcO2,PpcCO2,sO2pc,pHpc,HCO3pc):=AlvEquil(VAi, FiO2, FiCO2, temp, PB, Q, CvO2, CvCO2, BEox, Hb, cAlb, cPi, cDPG, FCOHb, FMetHb, FHbF);
          VCO2ml:=VCO2*22.414;
          VO2ml :=VO2*22.414;
      end testAlvEquil;

      model TestPO2PCO2_test_curve

        PO2PCO2 pO2PCO2_1
          annotation (Placement(transformation(extent={{-14,-2},{56,66}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5330)
          annotation (Placement(transformation(extent={{-90,48},{-82,56}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{-60,40},{-52,48}})));
        Physiolibrary.Types.Constants.ConcentrationConst cAlb(k=0.66)
          annotation (Placement(transformation(extent={{-82,34},{-74,42}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-72,-4},{-64,4}})));
        Physiolibrary.Types.Constants.ConcentrationConst BEox(k=0)
          annotation (Placement(transformation(extent={{-82,70},{-74,78}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)
          annotation (Placement(transformation(extent={{-80,22},{-72,30}})));
        Physiolibrary.Types.Constants.FractionConst fCOHb(k=0.005)
          annotation (Placement(transformation(extent={{-38,10},{-30,18}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb1(k=0.005)
          annotation (Placement(transformation(extent={{-60,16},{-52,24}})));
        Physiolibrary.Types.Constants.FractionConst fHbF(k=0.005)
          annotation (Placement(transformation(extent={{-54,4},{-46,12}})));
        Physiolibrary.Types.Constants.ConcentrationConst cPi(k=1.15)
          annotation (Placement(transformation(extent={{-58,30},{-50,38}})));
        Modelica.Blocks.Sources.Ramp ramp(
          duration=1000,
          height=0.99,
          offset=0.01)
          annotation (Placement(transformation(extent={{-86,-62},{-50,-26}})));
        Physiolibrary.Types.Constants.PressureConst pO2_max(k(displayUnit=
                "mmHg") = 26664.5)
          annotation (Placement(transformation(extent={{-58,-90},{-50,-82}})));
        Modelica.Blocks.Math.Product product
          annotation (Placement(transformation(extent={{-18,-60},{2,-40}})));
      equation
        connect(product.y, pO2PCO2_1.pO2) annotation(
          Line(points = {{4, -50}, {80, -50}, {80, 80}, {-36, 80}, {-36, 60}, {-18, 60}, {-18, 58}}, color = {0, 0, 127}));
        connect(pCO2.y, pO2PCO2_1.pCO2) annotation (Line(points={{-81,52},{
                -17.5,52},{-17.5,51.72}},
                                       color={0,0,127}));
        connect(BEox.y, pO2PCO2_1.BEox) annotation (Line(points={{-73,74},{-42,
                74},{-42,65.32},{-17.5,65.32}},
                                              color={0,0,127}));
        connect(pO2PCO2_1.ctHb, ctHb.y) annotation (Line(points={{-17.5,44.92},
                {-22,44.92},{-22,44},{-51,44}},
                                              color={0,0,127}));
        connect(cAlb.y, pO2PCO2_1.ctAlb) annotation (Line(points={{-73,38},{-32,
                38},{-32,38.12},{-17.5,38.12}},
                                              color={0,0,127}));
        connect(cDPG.y, pO2PCO2_1.cDPG) annotation (Line(points={{-71,26},{
                -17.5,26},{-17.5,25.2}}, color={0,0,127}));
        connect(temperature.y, pO2PCO2_1.T) annotation (Line(points={{-63,0},{
                -42,0},{-42,-2},{-17.5,-2}},   color={0,0,127}));
        connect(fHbF.y, pO2PCO2_1.FHbF) annotation (Line(points={{-45,8},{-32,8},
                {-32,4.8},{-17.5,4.8}}, color={0,0,127}));
        connect(fCOHb.y, pO2PCO2_1.FHbCO) annotation (Line(points={{-29,14},{
                -22,14},{-22,11.6},{-17.5,11.6}},
                                              color={0,0,127}));
        connect(fMetHb1.y, pO2PCO2_1.FMetHb) annotation (Line(points={{-51,20},
                {-34,20},{-34,18.4},{-17.5,18.4}}, color={0,0,127}));
        connect(cPi.y, pO2PCO2_1.ctPi) annotation (Line(points={{-49,34},{-34,
                34},{-34,31.32},{-17.5,31.32}}, color={0,0,127}));
        connect(product.u1, ramp.y)
          annotation (Line(points={{-20,-44},{-48.2,-44}}, color={0,0,127}));
        connect(product.u2, pO2_max.y) annotation (Line(points={{-20,-56},{-38,
                -56},{-38,-86},{-49,-86}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}})),
          experiment(StartTime = 0, StopTime = 1000, Tolerance = 1e-6, Interval = 0.2),
  __OpenModelica_simulationFlags(lv = "LOG_STATS", outputFormat = "mat", s = "dassl"));
      end TestPO2PCO2_test_curve;
    end testOSA;

    model AlvEq
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
                                      annotation (Placement(transformation(extent={{-70,29},
                {-54,45}}),           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-102,96})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctO2 annotation (Placement(
            transformation(extent={{-34,39},{-16,57}}), iconTransformation(extent={{-112,68},
                {-92,88}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctCO2 annotation (Placement(
            transformation(extent={{-32,68},{-16,84}}), iconTransformation(extent={{-112,48},
                {-92,68}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{8,8},{
                -8,-8}},
            rotation=180,
            origin={-78,4}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-102,38})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{7,7},{
                -7,-7}},
            rotation=180,
            origin={-73,-7}),         iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-102,18})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctPi(displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)" annotation (
          Placement(transformation(
            extent={{7,7},{-7,-7}},
            rotation=180,
            origin={-85,-13}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-102,0})));
      Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=0,
            origin={-65,-25}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-102,-20})));
      Physiolibrary.Types.RealIO.FractionInput FMetHb
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=0,
            origin={-72,-34}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-102,-38})));
      Physiolibrary.Types.RealIO.FractionInput FCOHb annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={-75,-46}),
                             iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-102,-56})));
      Physiolibrary.Types.RealIO.FractionInput FHbF
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=0,
            origin={-78,-56}),        iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-102,-76})));
      Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)  annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=0,
            origin={-68,-65}),        iconTransformation(extent={{-112,-104},{
                -92,-84}})));
      Physiolibrary.Types.RealIO.PressureOutput PAO2 annotation (Placement(
            transformation(extent={{36,41},{50,55}}), iconTransformation(extent=
               {{100,76},{120,96}})));
      Physiolibrary.Types.RealIO.PressureOutput PACO2 annotation (Placement(
            transformation(extent={{36,70},{48,82}}), iconTransformation(extent=
               {{100,58},{120,78}})));
      Physiolibrary.Types.RealIO.pHOutput pHpc annotation (Placement(
            transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={88,3}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,52})));
      Physiolibrary.Types.RealIO.ConcentrationOutput HCO3pc(displayUnit=
            "mmol/l") "outgoing concentration of HCO3" annotation (Placement(
            transformation(
            extent={{-7,-7.5},{7,7.5}},
            rotation=0,
            origin={87,-6.5}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,34})));
      Physiolibrary.Types.RealIO.FractionOutput sO2pc annotation (Placement(
            transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={88,-16}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,18})));
      Physiolibrary.Types.RealIO.ConcentrationOutput CpcCO2 annotation (
          Placement(transformation(
            extent={{-7,-6.5},{7,6.5}},
            rotation=0,
            origin={87,-53.5}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-66})));
      Physiolibrary.Types.RealIO.ConcentrationOutput CpcO2 annotation (
          Placement(transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={87,-44}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-46})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput Q annotation (Placement(
            transformation(extent={{-28,-78},{12,-38}}), iconTransformation(
            extent={{-9,-9},{9,9}},
            rotation=90,
            origin={-35,-101})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput VAi annotation (Placement(
            transformation(extent={{-28,-78},{12,-38}}), iconTransformation(
            extent={{-9,-9},{9,9}},
            rotation=90,
            origin={-7,-99})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput VA annotation (Placement(
            transformation(extent={{100,-96},{120,-76}}), iconTransformation(
              extent={{100,-96},{120,-76}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VO2 annotation (Placement(
            transformation(extent={{100,-8},{120,12}}), iconTransformation(
              extent={{100,-8},{120,12}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{100,-20},{120,0}}), iconTransformation(
              extent={{100,-26},{120,-6}})));
    equation
      connect(PAO2, PAO2) annotation (Line(
          points={{43,48},{26,48},{26,6},{7,6},{7,48},{43,48}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-68,36},{64,-12}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="AlvEq"),
            Text(
              extent={{-88,100},{-70,90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="BEox"),
            Text(
              extent={{-10,6},{10,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2",
              origin={-78,78},
              rotation=180),
            Text(
              extent={{-13,7},{13,-7}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2",
              origin={-75,59},
              rotation=180),
            Text(
              extent={{-88,48},{-70,38}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctHb"),
            Text(
              extent={{-88,32},{-68,20}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctAlb"),
            Text(
              extent={{-88,14},{-70,4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctPi"),
            Text(
              extent={{-82,-8},{-62,-18}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cDPG"),
            Text(
              extent={{-82,-22},{-54,-40}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FMetHb"),
            Text(
              extent={{-80,-46},{-56,-62}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbCO"),
            Text(
              extent={{-78,-68},{-60,-76}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbF"),
            Text(
              extent={{-84,-90},{-66,-100}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Text(
              extent={{-12,6},{12,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={78,-42},
              rotation=180,
              textString="CpcO2"),
            Text(
              extent={{-15.5,19.5},{15.5,-19.5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={76.5,-63.5},
              rotation=180,
              textString="CpcCO2"),
            Text(
              extent={{66,24},{90,10}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="sO2pc"),
            Text(
              extent={{64,44},{90,20}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="HCO3pc"),
            Text(
              extent={{72,58},{92,46}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pHpc"),
            Text(
              extent={{72,80},{94,62}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="PACO2"),
            Text(
              extent={{74,94},{92,84}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="PAO2"),
            Text(
              extent={{-46,-76},{-26,-90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Q"),
            Text(
              extent={{-16,-74},{4,-88}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="VAi"),
            Text(
              extent={{70,-78},{90,-92}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="VA"),
            Text(
              extent={{68,6},{90,-4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="VO2"),
            Text(
              extent={{70,-22},{92,-32}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="VCO2")}));
    end AlvEq;
  end OSA;

  package Parts

    connector MolarFlowConnector "Molar Concentration and Solute flow"
      Physiolibrary.Types.Concentration conc
        "Molar solute concentration in mol/m3 (displayUnit: mmol/l)";
      flow Physiolibrary.Types.MolarFlowRate q
        "Molar solute flow in mol/sec (displayUnit=mmol/min)";
      annotation (Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),     Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}})));
    end MolarFlowConnector;

    connector MolarInflowConnector "Molar Concentration and Solute Inflow"
      extends MolarFlowConnector;
      annotation (Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),     Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid)}));
    end MolarInflowConnector;

    connector MolarOutflowConnector "Molar Concentration and Solute Outflow"
      extends MolarFlowConnector;
      annotation (Documentation(revisions="<html>
<p><i>2009-2010</i></p>
<p>Marek Matejak, Charles University, Prague, Czech Republic </p>
</html>"),     Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid), Rectangle(
              extent={{-60,60},{60,-60}},
              lineColor={28,108,200},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}));
    end MolarOutflowConnector;

    connector MassFlowConnector "Mass Concentration and Solute flow"
      Physiolibrary.Types.MassConcentration conc
        "Mass solute concentration in kg/m3 = g/l (displayUnit: mg/l)";
      flow Physiolibrary.Types.MassFlowRate q
        "Mass solute flow in kg/sec (displayUnit: mg/min)";
    end MassFlowConnector;

    connector MassInflowConnector "Mass Concentration and Solute Inflow"
      extends MassFlowConnector;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid)}));
    end MassInflowConnector;

    connector MassOutflowConnector "Mass Concentration and Solute Outflow"
      extends MassFlowConnector;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid), Rectangle(
              extent={{-60,60},{60,-60}},
              lineColor={28,108,200},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}));
    end MassOutflowConnector;

    partial model ConditionalVolume
      "Chemical processes can be modeled with or without(normalized to 1 liter) variable solution volume"

      constant Physiolibrary.Types.Volume NormalVolume=0.001 "1 liter"
        annotation (Evaluate=true, HideResult=true);

      parameter Boolean useNormalizedVolume = true
        "Normalized volume of solution is 1 liter"
      annotation(Evaluate=true, HideResult=true, choices(checkBox=true),Dialog(group="External inputs/outputs"));

      Physiolibrary.Types.Volume volume "Solution volume";
                                             //annotation(HideResult=useNormalizedVolume);

      Physiolibrary.Types.RealIO.VolumeInput solutionVolume=volume if not
        useNormalizedVolume "Volume of solution" annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-40,40})));
    equation
      if useNormalizedVolume then
        volume = NormalVolume;
      end if;

    end ConditionalVolume;

    class MassContent "Compartment for mass content storage"
      extends ConditionalVolume;
    //  Physiolibrary.Types.RealIO.MassConcentrationOutput massConcentration

      Modelica.Blocks.Interfaces.RealOutput massConcentration(unit = "g/l") annotation (Placement(transformation(
              extent={{-44,-88},{-24,-68}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-48,-96})));
      Physiolibrary.Types.RealIO.MassOutput mass annotation (Placement(
            transformation(extent={{58,-92},{78,-72}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={70,-96})));

      parameter Physiolibrary.Types.RealIO.MassConcentrationInput initConcentration;
      FFSA.Parts.MassInflowConnector massInflowConnector annotation (Placement(
            transformation(extent={{-10,-40},{10,-20}}), iconTransformation(extent={
                {-10,-40},{10,-20}})));

    initial equation
      mass=initConcentration*volume;

    equation
        massInflowConnector.q= der(mass);
        massConcentration=mass/volume;
        massInflowConnector.conc=massConcentration;

        annotation (Placement(transformation(extent={{-44,-96},{-24,-76}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-54,-96})),
                     Icon(coordinateSystem(
              preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
            graphics={
            Text(
              extent={{-34,14},{52,84}},
              lineColor={28,108,200},
              textString="Mol"),
            Polygon(
              points={{-84,20},{-84,56},{-86,62},{-90,70},{-94,74},{-98,78},{-94,82},
                  {-82,90},{86,90},{94,86},{98,82},{98,78},{96,74},{94,72},{94,66},{
                  94,20},{94,-78},{92,-84},{88,-86},{78,-86},{-74,-86},{-82,-86},{-84,
                  -82},{-84,-76},{-84,20}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              smooth=Smooth.Bezier),
            Polygon(
              points={{-84,20},{94,20},{94,20},{94,-78},{92,-84},{88,-86},{78,-86},{
                  -74,-86},{-82,-86},{-84,-82},{-84,-76},{-84,20},{-84,20}},
              lineColor={0,0,0},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid,
              smooth=Smooth.Bezier),
            Ellipse(
              extent={{-62,12},{-56,6}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-40,16},{-34,10}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-30,4},{-24,-2}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-22,14},{-16,8}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-64,-10},{-58,-16}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-48,-14},{-42,-20}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-52,-38},{-46,-44}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-74,-54},{-68,-60}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-74,-28},{-68,-34}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-78,10},{-72,4}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-14,-12},{-8,-18}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{68,8},{74,2}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{2,-52},{8,-58}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-24,-26},{-18,-32}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-34,-44},{-28,-50}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-34,-70},{-28,-76}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-2,12},{4,6}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{18,-2},{24,-8}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{0,0},{6,-6}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-30,-12},{-24,-18}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{64,-36},{70,-42}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{48,-36},{54,-42}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{44,-48},{50,-54}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{28,-20},{34,-26}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{18,-38},{24,-44}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{18,-64},{24,-70}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{66,-6},{72,-12}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{82,16},{88,10}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{52,6},{58,0}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{38,12},{44,6}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-76,-74},{-70,-80}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-18,-60},{-12,-66}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-56,-72},{-50,-78}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{18,12},{24,6}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{2,-76},{8,-82}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{80,-78},{86,-84}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{64,-68},{70,-74}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{74,-58},{80,-64}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{76,-36},{82,-42}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{54,-18},{60,-24}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{42,-72},{48,-78}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{80,-14},{86,-20}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{40,-6},{46,-12}},
              lineColor={0,0,0},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{30,124},{300,90}},
              lineColor={28,108,200},
              textString="%name",
              horizontalAlignment=TextAlignment.Left)}),
                                                Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end MassContent;

    class MolarContent "compartment for molar content storage"
      extends ConditionalVolume;

      MolarInflowConnector molarInflowConnector annotation (Placement(
            transformation(extent={{-10,-40},{10,-20}}), iconTransformation(extent={
                {-10,-40},{10,-20}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput concentration annotation (
          Placement(transformation(extent={{-58,-102},{-38,-82}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-60,-96})));
      Physiolibrary.Types.RealIO.AmountOfSubstanceOutput molarContent
        annotation (Placement(transformation(extent={{46,-92},{66,-72}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={60,-96})));
      parameter Physiolibrary.Types.RealIO.ConcentrationInput initMolarConcentration;
      parameter Real valence = 0;
      ChemicalEquivalentConcentration ekvivalentConcentration;
      ChemicalEquivalentConcentrationOutput eqconc = ekvivalentConcentration if  (valence<>0)
        annotation (Placement(transformation(extent={{10,-106},{30,-86}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-28,-96})));
    initial equation
      molarContent = initMolarConcentration*volume;
    equation
      molarInflowConnector.q = der( molarContent);
      concentration = molarContent/volume;
      molarInflowConnector.conc = concentration;
      ekvivalentConcentration = concentration * valence;
        annotation ( Icon(coordinateSystem(
              preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
            graphics={
            Text(
              extent={{-34,14},{52,84}},
              lineColor={28,108,200},
              textString="Mol"),
            Polygon(
              points={{-84,20},{-84,56},{-86,62},{-90,70},{-94,74},{-98,78},{-94,82},
                  {-82,90},{86,90},{94,86},{98,82},{98,78},{96,74},{94,72},{94,66},{
                  94,20},{94,-78},{92,-84},{88,-86},{78,-86},{-74,-86},{-82,-86},{-84,
                  -82},{-84,-76},{-84,20}},
              lineColor={0,0,0},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              smooth=Smooth.Bezier),
            Polygon(
              points={{-84,20},{94,20},{94,20},{94,-78},{92,-84},{88,-86},{78,-86},{
                  -74,-86},{-82,-86},{-84,-82},{-84,-76},{-84,20},{-84,20}},
              lineColor={0,0,0},
              fillColor={170,255,255},
              fillPattern=FillPattern.Solid,
              smooth=Smooth.Bezier),
            Ellipse(
              extent={{-62,12},{-56,6}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-40,16},{-34,10}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-30,4},{-24,-2}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-18,14},{-12,8}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-64,-10},{-58,-16}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-54,-26},{-48,-32}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-52,-46},{-46,-52}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-74,-54},{-68,-60}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-74,-28},{-68,-34}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-78,6},{-72,0}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-14,-12},{-8,-18}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{72,6},{78,0}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{2,-52},{8,-58}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-24,-26},{-18,-32}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-34,-44},{-28,-50}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-34,-70},{-28,-76}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-46,-4},{-40,-10}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{18,-2},{24,-8}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{0,0},{6,-6}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-30,-12},{-24,-18}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{66,-32},{72,-38}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{48,-36},{54,-42}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{44,-48},{50,-54}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{28,-20},{34,-26}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{18,-38},{24,-44}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{18,-64},{24,-70}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{62,-6},{68,-12}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{82,16},{88,10}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{52,6},{58,0}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{38,12},{44,6}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-76,-74},{-70,-80}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-18,-60},{-12,-66}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{-56,-72},{-50,-78}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{18,12},{24,6}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{2,-76},{8,-82}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{80,-78},{86,-84}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{64,-68},{70,-74}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{74,-58},{80,-64}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{76,-36},{82,-42}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{54,-18},{60,-24}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{42,-72},{48,-78}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{80,-14},{86,-20}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{40,-6},{46,-12}},
              lineColor={0,0,0},
              fillColor={0,0,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{4,116},{204,84}},
              lineColor={28,108,200},
              textString="%name",
              horizontalAlignment=TextAlignment.Left)}),
                                                Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end MolarContent;

    class ISF_O2
      extends MolarContent;
      Physiolibrary.Types.RealIO.PressureOutput pO2 annotation (Placement(
            transformation(extent={{94,-14},{114,6}}),    iconTransformation(extent={{94,-14},
                {114,6}})));

      Physiolibrary.Types.RealIO.TemperatureInput T annotation (Placement(
            transformation(extent={{-104,-26},{-64,14}}), iconTransformation(extent=
               {{-100,-22},{-64,14}})));

      Physiolibrary.Types.Concentration cdO2;
      Real aO2;
       parameter Physiolibrary.Types.Temperature T0 = 273.15+37
        "normal temperature";
    equation
      concentration =cdO2;
      aO2 = exp(log(0.0105)+(-0.0115*(T-T0))+0.5*0.00042*(T-T0)^2)/1000; //solubility
      cdO2 = aO2*pO2;

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}})));
    end ISF_O2;

    class ISF_CO2
      extends MolarContent;

      Physiolibrary.Types.RealIO.TemperatureInput T annotation (Placement(
            transformation(extent={{-104,-14},{-64,26}}), iconTransformation(extent={{-100,
                -10},{-64,26}})));

      Physiolibrary.Types.Concentration cdCO2( displayUnit="mmol/l");
      Real aCO2( final displayUnit="mmol/(l.kPa)");
      Real pK;
      Real pH;
      Real NormalSID; //SID in pH=7.4 - at pCO2=40 torr - SID is independent of pCO2
      Real pCO240torr=40*101325/760;

      Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3 annotation (Placement(
            transformation(extent={{94,-48},{114,-28}}), iconTransformation(extent={
                {94,-48},{114,-28}})));
      Physiolibrary.Types.RealIO.ConcentrationInput dSID annotation (Placement(
            transformation(extent={{-100,-62},{-60,-22}}), iconTransformation(
              extent={{-100,-62},{-60,-22}})));
      Physiolibrary.Types.RealIO.PressureOutput pCO2 annotation (Placement(
            transformation(extent={{94,-72},{114,-52}}), iconTransformation(extent={
                {94,-72},{114,-52}})));

    equation
      //Henderson-Hasselbalch equation:
      pK = 6.1 + (-0.0026)*(T-310.15);
      aCO2 = 0.00023 * 10^(-0.0092*(T-310.15)); //solubility depends on temperature
      cdCO2 = aCO2*pCO2;
     // pH = if ( cdCO2 > 1e-8) then  pK + log10(max(1e-15,cHCO3/cdCO2)) else pK;
      cdCO2 * 10^(pH-pK) = cHCO3;
      concentration = cdCO2+cHCO3;
      NormalSID=aCO2*pCO240torr*10^(7.4-pK); //normaSID=concetration of HCO3 at pH=7.4, pCO2 = 40 torr
      cHCO3 = NormalSID+dSID
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}})));
    end ISF_CO2;

    connector ChemicalEquivalentConcentrationOutput = output
        ChemicalEquivalentConcentration
      "output ChemicalEquivalentConcentration as connector"
      annotation (defaultComponentName="volumeDensityOfCharge",
      Icon(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={1,1}), graphics={Polygon(
              points={{-100,100},{100,0},{-100,-100},{-100,100}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid)}),
      Diagram(coordinateSystem(
            preserveAspectRatio=true,
            extent={{-100,-100},{100,100}},
            grid={1,1}), graphics={Polygon(
              points={{-100,50},{0,0},{-100,-50},{-100,50}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid), Text(
              extent={{30,110},{30,60}},
              lineColor={0,0,127},
              textString="%name")}),
        Documentation(info="<html>
  <p>
  Connector with one output signal of type VolumeDensityOfCharge.
  </p>
  </html>"));
    connector ChemicalEquivalentConcentrationInput = input
        ChemicalEquivalentConcentration
      "input ChemicalEquivalentConcentration as connector"
      annotation (defaultComponentName="volumeDensityOfCharge",
      Icon(graphics={Polygon(
              points={{-100,100},{100,0},{-100,-100},{-100,100}},
              lineColor={0,0,127},
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid)},
           coordinateSystem(extent={{-100,-100},{100,100}}, preserveAspectRatio=true, initialScale=0.2)),
      Diagram(coordinateSystem(
            preserveAspectRatio=true, initialScale=0.2,
            extent={{-100,-100},{100,100}},
            grid={1,1}), graphics={Polygon(
              points={{0,50},{100,0},{0,-50},{0,50}},
              lineColor={0,0,127},
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid), Text(
              extent={{-10,85},{-10,60}},
              lineColor={0,0,127},
              textString="%name")}),
        Documentation(info="<html>
    <p>
    Connector with one input signal of type VolumeDensityOfCharge.
    </p>
    </html>"));
    type ChemicalEquivalentConcentration =
            Real (quantity="ChemicalEquivalentConcentration", displayUnit="(mEq/l)", nominal = 10e-3);
    model AlveolarVentilation_BTPS
      extends Physiolibrary.Icons.Lungs;
    //  parameter Real EnvironmentPressure(final displayUnit="mmHg");
    //  parameter Real EnvironmentTemperature(final displayUnit="degC");

      Physiolibrary.Types.RealIO.FrequencyInput RespRate
                                             annotation (Placement(transformation(
              extent={{26,68},{40,82}}),    iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={80,20})));
      Physiolibrary.Types.RealIO.VolumeInput TidalVolume
                                                annotation (Placement(
            transformation(
            extent={{-18,-18},{10,10}},
            origin={-50,-32}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={80,100})));
      Physiolibrary.Types.RealIO.VolumeInput DeadSpace
                                              annotation (Placement(transformation(
              extent={{-68,-76},{-40,-48}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={80,60})));
      Physiolibrary.Types.RealIO.TemperatureInput core_T
                                             annotation (Placement(
            transformation(
            extent={{-20,-20},{8,8}},
            origin={-48,-80}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={80,-20})));
      GasEquation tidalVolume(V2(start=400))
        annotation (Placement(transformation(extent={{-12,-54},{8,-34}})));
      GasEquation deadVolume(V2(start=150))
        annotation (Placement(transformation(extent={{-12,-80},{8,-60}})));
      Modelica.Blocks.Math.Product alveolarVentilation annotation (Placement(
          transformation(
          extent={{-10,-10},{10,10}},
          rotation=270,
          origin={54,52})));
      VaporPressure vaporPressure annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={14,90})));
      Modelica.Blocks.Math.Division vaporPart annotation (Placement(
            transformation(
            extent={{-6,-6},{6,6}},
            rotation=270,
            origin={-20,34})));
      Modelica.Blocks.Math.Feedback added_pH2O annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=270,
            origin={-15,61})));
      VaporPressure vaporPressure1 annotation (
          Placement(transformation(extent={{-10,-10},{10,10}}, origin={-56,64})));
      Modelica.Blocks.Math.Product air_pH2O
        annotation (Placement(transformation(extent={{-36,68},{-26,78}})));
      Physiolibrary.Types.RealIO.TemperatureInput AmbientTemperature
                                             annotation (Placement(
            transformation(
            extent={{-20,-20},{8,8}},
            origin={-78,70}),  iconTransformation(
            extent={{-20,-20},{20,20}},
            origin={-80,100})));
      Physiolibrary.Types.RealIO.PressureInput EnvironmentPressure
                                             annotation (Placement(
            transformation(
            extent={{-20,-20},{8,8}},
            origin={-78,-4}),  iconTransformation(
            extent={{-20,-20},{20,20}},
            origin={-80,40})));
      Physiolibrary.Types.RealIO.FractionInput EnvironmentRelativeHumidity
                                             annotation (Placement(
            transformation(
            extent={{-20,-20},{8,8}},
            origin={-58,90}),  iconTransformation(
            extent={{-20,-20},{20,20}},
            origin={-80,-20})));
      Modelica.Blocks.Math.Feedback alveolarVolume
      annotation (Placement(transformation(extent={{58,-46},{78,-26}})));
      Modelica.Blocks.Math.Feedback airPressureWitoutVapor
        annotation (Placement(transformation(extent={{-64,0},{-44,-20}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput AlveolarVentilation
      annotation (Placement(transformation(extent={{70,22},{84,36}}),
          iconTransformation(
          extent={{-20,-20},{20,20}},
          origin={100,-60})));
      Modelica.Blocks.Math.Feedback dilution
        annotation (Placement(transformation(extent={{-30,20},{-10,0}})));
      Physiolibrary.Types.Constants.FractionConst             Constant(k=1)
      annotation (Placement(transformation(extent={{-48,6},{-40,14}})));
      Physiolibrary.Types.RealIO.FractionOutput BronchiDilution
                                             annotation (Placement(transformation(
              extent={{6,4},{18,16}}),      iconTransformation(
            extent={{-20,-20},{20,20}},
            origin={100,-100})));
    equation

      connect(TidalVolume,tidalVolume. V1) annotation (Line(
          points={{-54,-36},{-10.6,-36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(DeadSpace, deadVolume.V1)   annotation (Line(
          points={{-54,-62},{-10.6,-62}},
          color={0,0,127},
          smooth=Smooth.None));
    connect(RespRate, alveolarVentilation.u2) annotation (Line(
        points={{33,75},{48,75},{48,64}},
        color={0,0,127},
        smooth=Smooth.None));
      connect(core_T, vaporPressure.T)   annotation (Line(
          points={{-54,-86},{94,-86},{94,90},{22.6,90}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(air_pH2O.y, added_pH2O.u2) annotation (Line(
          points={{-25.5,73},{-25.5,61},{-20.6,61}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(added_pH2O.y, vaporPart.u1) annotation (Line(
          points={{-15,54.7},{-14,54.7},{-14,54},{-16,54},{-16,44},{-16.4,44},
            {-16.4,41.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(AmbientTemperature, vaporPressure1.T) annotation (Line(
          points={{-84,64},{-64.6,64}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(EnvironmentRelativeHumidity, air_pH2O.u1) annotation (Line(
          points={{-64,84},{-40,84},{-40,76},{-37,76}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(core_T, tidalVolume.T1) annotation (Line(
          points={{-54,-86},{-32,-86},{-32,-48},{-10.6,-48}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(core_T, deadVolume.T1) annotation (Line(
          points={{-54,-86},{-32,-86},{-32,-74},{-10.6,-74}},
          color={0,0,127},
          smooth=Smooth.None));
    connect(alveolarVolume.y, alveolarVentilation.u1) annotation (Line(
        points={{77,-36},{90,-36},{90,80},{60,80},{60,64}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(tidalVolume.V2, alveolarVolume.u1) annotation (Line(
        points={{6.6,-36},{60,-36}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(alveolarVolume.u2, deadVolume.V2) annotation (Line(
        points={{68,-44},{68,-62},{6.6,-62}},
        color={0,0,127},
        smooth=Smooth.None));
      connect(EnvironmentPressure, airPressureWitoutVapor.u1) annotation (Line(
          points={{-84,-10},{-62,-10}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(airPressureWitoutVapor.y, tidalVolume.P1) annotation (Line(
          points={{-45,-10},{-28,-10},{-28,-42},{-10.6,-42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(airPressureWitoutVapor.y, deadVolume.P1) annotation (Line(
          points={{-45,-10},{-28,-10},{-28,-68},{-10.6,-68}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(Constant.y, dilution.u1) annotation (Line(
          points={{-39,10},{-28,10}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(vaporPart.y, dilution.u2) annotation (Line(
          points={{-20,27.4},{-20,18}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(dilution.y, BronchiDilution) annotation (Line(
          points={{-11,10},{12,10}},
          color={0,0,127},
          smooth=Smooth.None));
    connect(vaporPressure1.VaporPressure_, air_pH2O.u2) annotation (Line(
        points={{-44.6,64},{-40,64},{-40,70},{-37,70}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(vaporPressure.VaporPressure_, added_pH2O.u1) annotation (Line(
        points={{2.6,90},{-15,90},{-15,66.6}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(alveolarVentilation.y, AlveolarVentilation) annotation (Line(
        points={{54,41},{54,29},{77,29}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(added_pH2O.y, airPressureWitoutVapor.u2) annotation (Line(
        points={{-15,54.7},{-54,54.7},{-54,-2}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(EnvironmentPressure, vaporPart.u2) annotation (Line(
        points={{-84,-10},{-70,-10},{-70,41.2},{-23.6,41.2}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(EnvironmentPressure, tidalVolume.P2) annotation (Line(
        points={{-84,-10},{-70,-10},{-70,-22},{30,-22},{30,-42},{6.6,-42}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(EnvironmentPressure, deadVolume.P2) annotation (Line(
        points={{-84,-10},{-70,-10},{-70,-22},{30,-22},{30,-68},{6.6,-68}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(AmbientTemperature, tidalVolume.T2) annotation (Line(
        points={{-84,64},{-94,64},{-94,-98},{38,-98},{38,-48},{6.6,-48}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(AmbientTemperature, deadVolume.T2) annotation (Line(
        points={{-84,64},{-94,64},{-94,-98},{38,-98},{38,-74},{6.6,-74}},
        color={0,0,127},
        smooth=Smooth.None));
     annotation (
        Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},{
                100,100}}), graphics={Text(
              extent={{-100,-100},{76,-70}},
              textString="%name",
              lineColor={0,0,255})}));
    end AlveolarVentilation_BTPS;

    model GasEquation

      Physiolibrary.Types.RealIO.VolumeInput
                                         V1(
                                       displayUnit="ml") annotation (Placement(transformation(extent={
                {-118,42},{-78,82}}), iconTransformation(extent={{-100,66},{-72,94}})));
      Physiolibrary.Types.RealIO.PressureInput
                                         P1(
                                       displayUnit="mmHg") annotation (Placement(transformation(extent={
                {-118,42},{-78,82}}), iconTransformation(extent={{-100,6},{-72,34}})));
      Physiolibrary.Types.RealIO.TemperatureInput
                                         T1(
                                       displayUnit="degC") annotation (Placement(transformation(extent={
                {-118,42},{-78,82}}), iconTransformation(extent={{-100,-54},{-72,
                -26}})));
      Physiolibrary.Types.RealIO.PressureInput
                                         P2(
                                      displayUnit="mmHg") annotation (Placement(transformation(extent={
                {-118,42},{-78,82}}), iconTransformation(
            extent={{-14,-14},{14,14}},
            rotation=180,
            origin={86,20})));
      Physiolibrary.Types.RealIO.TemperatureInput
                                         T2(
                                       displayUnit="degC") annotation (Placement(transformation(extent={
                {-118,42},{-78,82}}), iconTransformation(
            extent={{-14,-14},{14,14}},
            rotation=180,
            origin={86,-40})));
      Physiolibrary.Types.RealIO.VolumeOutput
                                          V2(
                                        displayUnit="ml") annotation (Placement(transformation(extent=
                {{56,54},{96,94}}), iconTransformation(extent={{72,66},{100,94}})));
    equation
      (P1*V1)/(T1)=(P2*V2)/(T2);
      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,0},
              fillColor={170,213,255},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{0,100},{0,-100}},
              lineColor={0,0,0},
              fillColor={170,213,255},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-98,136},{100,100}},
              lineColor={0,0,0},
              fillColor={170,213,255},
              fillPattern=FillPattern.Solid,
              textString="%name")}));
    end GasEquation;

    model VaporPressure

      Physiolibrary.Types.RealIO.TemperatureInput
                                         T(
                                      displayUnit="degC")   annotation (Placement(transformation(extent={
                {-118,42},{-78,82}}), iconTransformation(extent={{-100,-14},{-72,14}})));
      Physiolibrary.Types.RealIO.PressureOutput
                                          VaporPressure_(
                                                  displayUnit="mmHg")
                                                        annotation (Placement(transformation(extent=
                {{56,54},{96,94}}), iconTransformation(extent={{100,-14},{128,14}})));
    equation
     VaporPressure_ =  if T<273.15 then 0 else if T>373.15 then 101325 else
                        (101325/760)*exp(18.6686-(4030.183/(T-273.15+235)));
      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={Rectangle(
              extent={{-100,40},{100,-40}},
              lineColor={0,0,0},
              fillColor={170,213,255},
              fillPattern=FillPattern.Solid)}));
    end VaporPressure;

    model bloodO2CO2

      Physiolibrary.Types.RealIO.FractionOutput sO2
                                          annotation (Placement(
            transformation(extent={{-8,-8},{8,8}},
            rotation=270,
            origin={-4,-50}),                           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-60})));
       Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(
                                            displayUnit="mmol/l")
        "outgoing concentration of HCO3"                                                           annotation (Placement(
            transformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-26,-60}),                          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-84})));
      Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)  annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=90,
            origin={5,19}),           iconTransformation(extent={{-118,76},{-98,
                96}})));
      Physiolibrary.Types.RealIO.pHInput pH annotation (Placement(transformation(
              extent={{-122,60},{-96,86}}), iconTransformation(extent={{-120,18},
                {-100,38}})));
      Physiolibrary.Types.RealIO.pHInput pHery annotation (Placement(
            transformation(extent={{-118,32},{-96,54}}), iconTransformation(
              extent={{-120,-28},{-100,-8}})));
       Physiolibrary.Types.RealIO.FractionInput Hct(start=0.4)
        "outgoing hematocrit (erytrocytes volume/blood volume)"
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=180,
            origin={-4,42}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-64})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{110,72},
                {98,84}}),            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-90})));
      Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=180,
            origin={91,49}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,30})));
      Physiolibrary.Types.RealIO.FractionInput FMetHb
                                       annotation (Placement(transformation(extent={{-6,-6},
                {6,6}},
            rotation=180,
            origin={92,36}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,10})));
      Physiolibrary.Types.RealIO.FractionInput FHbF
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=180,
            origin={91,25}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,-10})));
      Physiolibrary.Types.RealIO.PressureInput pCO
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=180,
            origin={92,12}),          iconTransformation(extent={{-10,-10},{
                10,10}},
            rotation=180,
            origin={110,-30})));
      TotalCO2 tCO2
        annotation (Placement(transformation(extent={{-80,0},{-20,60}})));
      TotalO2 tO2
        annotation (Placement(transformation(extent={{20,0},{80,60}})));
      Physiolibrary.Types.RealIO.PressureInput pO2 annotation (Placement(
            transformation(extent={{-8,-6},{16,18}}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=90,
            origin={26,-102})));
      Physiolibrary.Types.RealIO.PressureInput pCO2 annotation (Placement(
            transformation(extent={{-118,20},{-94,44}}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=90,
            origin={54,-100})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-64,-28}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=270,
            origin={-18,-102})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={36,-26}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=270,
            origin={-46,-102})));
    equation
      connect(cHCO3, cHCO3) annotation (Line(
          points={{-26,-60},{-26,-60}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tCO2.pH, pH) annotation (Line(
          points={{-77,54},{-86,54},{-86,73},{-109,73}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pHery, tCO2.pH_ery) annotation (Line(
          points={{-107,43},{-92.5,43},{-92.5,42},{-77,42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tCO2.T, T) annotation (Line(
          points={{-23,54},{5,54},{5,19}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Hct, tCO2.Hct) annotation (Line(
          points={{-4,42},{-23,42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(sO2, tCO2.sO2) annotation (Line(
          points={{-4,-50},{-4,30},{-23,30}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tCO2.cHCO3, cHCO3) annotation (Line(
          points={{-26,-6},{-26,-60}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(cDPG, tO2.cDPG) annotation (Line(
          points={{91,49},{84.5,49},{84.5,48},{77,48}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(FMetHb, tO2.FMetHb) annotation (Line(
          points={{92,36},{77,36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(FHbF, tO2.FHbF) annotation (Line(
          points={{91,25},{83.5,25},{83.5,24},{77,24}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pCO, tO2.pCO) annotation (Line(
          points={{92,12},{77,12}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tO2.pH, pH) annotation (Line(
          points={{23,60},{0,60},{0,73},{-109,73}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tO2.T, T) annotation (Line(
          points={{23,36},{5,36},{5,19}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tO2.ctHb, ctHb) annotation (Line(
          points={{77,60},{88,60},{88,78},{104,78}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tO2.sO2, tCO2.sO2) annotation (Line(
          points={{50,-6},{50,-34},{-4,-34},{-4,30},{-23,30}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tCO2.pCO2inp, pCO2) annotation (Line(
          points={{-77.3,28.5},{-88.65,28.5},{-88.65,32},{-106,32}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tO2.pO2inp, pO2) annotation (Line(
          points={{22.7,28.5},{18,28.5},{18,6},{4,6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tO2.totalO2, ctO2) annotation (Line(
          points={{38.3,-5.7},{38.3,-11.5},{36,-11.5},{36,-26}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tCO2.totalCO2, ctCO2) annotation (Line(
          points={{-62,-6},{-62,-12.5},{-64,-12.5},{-64,-28}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctCO2, ctCO2) annotation (Line(
          points={{-64,-28},{-64,-28}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tO2.pCO2, pCO2) annotation (Line(
          points={{23,48},{6,48},{6,58},{-20,58},{-20,62},{-90,62},{-90,32},{-106,
              32}},
          color={0,0,127},
          smooth=Smooth.None));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{74,-56},{92,-66}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="sO2"),
            Text(
              extent={{76,-76},{98,-92}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cHCO3"),
            Text(
              extent={{-98,92},{-80,82}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Text(
              extent={{-98,34},{-80,24}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pH"),
            Text(
              extent={{-96,-14},{-78,-24}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pHery"),
            Text(
              extent={{-96,-58},{-78,-68}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Hct"),
            Text(
              extent={{-96,-82},{-78,-92}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctHb"),
            Text(
              extent={{-56,-82},{-38,-92}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2"),
            Text(
              extent={{-24,-82},{-6,-92}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2"),
            Text(
              extent={{-72,114},{72,16}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="%name"),
            Text(
              extent={{18,-80},{36,-90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pO2"),
            Text(
              extent={{44,-80},{62,-90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO2"),
            Text(
              extent={{74,-26},{92,-36}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO"),
            Text(
              extent={{74,-6},{92,-16}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbF"),
            Text(
              extent={{72,16},{94,4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FMetHb"),
            Text(
              extent={{72,36},{92,26}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cDPG")}), Diagram(coordinateSystem(preserveAspectRatio=
                false, extent={{-100,-100},{100,100}}), graphics));
    end bloodO2CO2;

    model TotalCO2
      extends BloodCO2Base;

      Physiolibrary.Types.RealIO.PressureInput pCO2inp annotation (Placement(
            transformation(extent={{-102,-22},{-62,18}}), iconTransformation(extent={{-98,-14},
                {-80,4}})));

      Physiolibrary.Types.RealIO.ConcentrationOutput totalCO2 annotation (Placement(
            transformation(extent={{-80,-100},{-60,-80}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-38,-120})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2p
        "dissolved CO2 concentration" annotation (Placement(transformation(extent={{
                -80,-100},{-60,-80}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-78,-120})));
    equation
      cdCO2p = cdCO2;
      pCO2inp=pCO2;
      totalCO2=tCO2;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}})),     Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics));
    end TotalCO2;

    model TotalO2
      extends BloodO2Base;

      Physiolibrary.Types.RealIO.PressureInput pO2inp annotation (Placement(
            transformation(extent={{-132,-54},{-92,-14}}),iconTransformation(extent=
               {{-100,-14},{-82,4}})));

      Physiolibrary.Types.RealIO.ConcentrationOutput totalO2 annotation (Placement(
            transformation(extent={{-80,-100},{-60,-80}}), iconTransformation(
            extent={{-19,-19},{19,19}},
            rotation=270,
            origin={-39,-119})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdO2p
        "dissolved O2 concentration in plasma" annotation (Placement(transformation(
              extent={{-80,-100},{-60,-80}}), iconTransformation(
            extent={{-19,-19},{19,19}},
            rotation=270,
            origin={-79,-119})));
    equation
      cdO2p = cdO2;
      pO2inp=pO2;
      totalO2=tO2;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}})),     Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end TotalO2;

    model bloodPO2PCO2

      Physiolibrary.Types.RealIO.FractionOutput sO2
                                          annotation (Placement(
            transformation(extent={{-8,-8},{8,8}},
            rotation=270,
            origin={-4,-28}),                           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-60})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(
                                            displayUnit="mmol/l")
        "outgoing concentration of HCO3"                                                           annotation (Placement(
            transformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-26,-38}),                          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-84})));
      Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)  annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=90,
            origin={5,41}),           iconTransformation(extent={{-118,68},{-98,
                88}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{110,94},
                {98,106}}),           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-60})));
      Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=180,
            origin={91,71}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,40})));
      Physiolibrary.Types.RealIO.FractionInput FMetHb
                                       annotation (Placement(transformation(extent={{-6,-6},
                {6,6}},
            rotation=180,
            origin={92,58}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,20})));
      Physiolibrary.Types.RealIO.FractionInput FHbF
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=180,
            origin={91,47}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,0})));
      Physiolibrary.Types.RealIO.PressureInput pCO
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=180,
            origin={92,34}),          iconTransformation(extent={{-10,-10},{
                10,10}},
            rotation=180,
            origin={110,-20})));
      TotalCO2 totalCO2(pCO2(start=5332.8954966))
        annotation (Placement(transformation(extent={{-80,22},{-20,82}})));
      TotalO2 totalO2(
        cO2Hb(start=5),
        a(start=0.5),
        FCOHb(start=0),
        sO2CO(start=0.0075),
        T(start=583.3),
        pCO2(start=710994.35944141),
        pO2(start=1777485.8986035))
        annotation (Placement(transformation(extent={{20,22},{80,82}})));
      Physiolibrary.Types.RealIO.PressureInput pO2 annotation (Placement(
            transformation(extent={{-8,16},{16,40}}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=90,
            origin={36,-100})));
      Physiolibrary.Types.RealIO.PressureInput pCO2 annotation (Placement(
            transformation(extent={{-124,42},{-100,66}}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=90,
            origin={62,-100})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2 annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-62,-6}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=270,
            origin={-16,-108})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctO2 annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={38,-4}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=270,
            origin={-38,-108})));
      BloodPhMeassure bloodPhMeassure
        annotation (Placement(transformation(extent={{26,-84},{80,-30}})));
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
                                      annotation (Placement(transformation(extent={{-12,-68},
                {12,-44}}),           iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=90,
            origin={15,-101})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{102,-60},
                {90,-48}}),           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,80})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctPO4(displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)" annotation (
          Placement(transformation(extent={{102,-84},{90,-72}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,60})));
      Physiolibrary.Types.RealIO.MassConcentrationInput ctGlb(
                                           displayUnit="g/l")
        "concentration of total plasma globulins"                                    annotation (Placement(transformation(extent={{-6,-6},
                {6,6}},
            rotation=180,
            origin={96,-64}),         iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={110,-40})));
      Physiolibrary.Types.RealIO.pHOutput pH annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=180,
            origin={-108,76}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-110,24})));
      ctHb_to_Htc ctHb_to_Htc1
        annotation (Placement(transformation(extent={{40,84},{14,100}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={26,-2}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=270,
            origin={-92,-108})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-74,-10}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=270,
            origin={-66,-108})));
    equation
      connect(cHCO3, cHCO3) annotation (Line(
          points={{-26,-38},{-26,-38}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalCO2.T, T) annotation (Line(
          points={{-23,76},{5,76},{5,41}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(sO2, totalCO2.sO2) annotation (Line(
          points={{-4,-28},{-4,52},{-23,52}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalCO2.cHCO3, cHCO3) annotation (Line(
          points={{-26,16},{-26,-38}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(cDPG, totalO2.cDPG) annotation (Line(
          points={{91,71},{84.5,71},{84.5,70},{77,70}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(FMetHb, totalO2.FMetHb) annotation (Line(
          points={{92,58},{77,58}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(FHbF, totalO2.FHbF) annotation (Line(
          points={{91,47},{83.5,47},{83.5,46},{77,46}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pCO, totalO2.pCO) annotation (Line(
          points={{92,34},{77,34}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalO2.T, T) annotation (Line(
          points={{23,58},{5,58},{5,41}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalO2.ctHb, ctHb) annotation (Line(
          points={{77,82},{88,82},{88,100},{104,100}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalO2.sO2, totalCO2.sO2) annotation (Line(
          points={{50,16},{50,-12},{-4,-12},{-4,52},{-23,52}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalCO2.pCO2inp, pCO2) annotation (Line(
          points={{-76.7,50.5},{-84,50.5},{-84,50},{-90,50},{-90,54},{-112,54}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalO2.pO2inp, pO2) annotation (Line(
          points={{22.7,50.5},{18,50.5},{18,28},{4,28}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalO2.totalO2, ctO2) annotation (Line(
          points={{38.3,16.3},{38.3,10.5},{38,10.5},{38,-4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalCO2.totalCO2, ctCO2) annotation (Line(
          points={{-61.4,16},{-61.4,6},{-62,6},{-62,-6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctCO2, ctCO2) annotation (Line(
          points={{-62,-6},{-62,-6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalO2.pCO2, pCO2) annotation (Line(
          points={{23,70},{16,70},{16,78},{-14,78},{-14,84},{-90,84},{-90,54},{-112,
              54}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPhMeassure.sO2, totalCO2.sO2) annotation (Line(
          points={{69.2,-27.3},{69.2,-12},{-4,-12},{-4,52},{-23,52}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPhMeassure.cHCO3, cHCO3) annotation (Line(
          points={{77.3,-35.4},{92,-35.4},{92,-16},{-26,-16},{-26,-38}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctHb, bloodPhMeassure.ctHb) annotation (Line(
          points={{104,100},{96,100},{96,-46.2},{77.3,-46.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPhMeassure.pH, totalCO2.pH) annotation (Line(
          points={{47.6,-89.4},{47.6,-100},{-96,-100},{-96,76},{-77,76}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPhMeassure.pH_ery, totalCO2.pH_ery) annotation (Line(
          points={{58.4,-89.4},{58.4,-98},{-84,-98},{-84,64},{-77,64}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(totalO2.pH, totalCO2.pH) annotation (Line(
          points={{23,82},{-10,82},{-10,92},{-96,92},{-96,76},{-77,76}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPhMeassure.ctPO4, ctPO4) annotation (Line(
          points={{77.3,-78.6},{84.65,-78.6},{84.65,-78},{96,-78}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPhMeassure.ctGlb, ctGlb) annotation (Line(
          points={{77.3,-67.8},{83.65,-67.8},{83.65,-64},{96,-64}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPhMeassure.ctAlb, ctAlb) annotation (Line(
          points={{77.3,-57},{83.65,-57},{83.65,-54},{96,-54}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pH, totalCO2.pH) annotation (Line(
          points={{-108,76},{-77,76}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctHb_to_Htc1.ctHb, ctHb) annotation (Line(
          points={{43.64,92},{88,92},{88,100},{104,100}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctHb_to_Htc1.Htc, totalCO2.Hct) annotation (Line(
          points={{10.36,92},{-6,92},{-6,64},{-23,64}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(BEox, bloodPhMeassure.BEox) annotation (Line(points={{0,-56},{16,
              -56},{16,-20},{28.7,-20},{28.7,-27.3}}, color={0,0,127}));
      connect(totalO2.cdO2p, cdO2) annotation (Line(points={{26.3,16.3},{26.3,
              11.15},{26,11.15},{26,-2}}, color={0,0,127}));
      connect(totalCO2.cdCO2p, cdCO2) annotation (Line(points={{-73.4,16},{-74,
              16},{-74,-10},{-74,-10}},
                                    color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{74,-56},{92,-66}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="sO2"),
            Text(
              extent={{76,-76},{98,-92}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cHCO3"),
            Text(
              extent={{-98,84},{-80,74}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Text(
              extent={{-96,34},{-78,24}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pH"),
            Text(
              extent={{2,-80},{20,-90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="BEox"),
            Text(
              extent={{-96,-52},{-78,-62}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctHb"),
            Text(
              extent={{-10,6},{10,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2",
              origin={-40,-88},
              rotation=90),
            Text(
              extent={{-13,7},{13,-7}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2",
              origin={-15,-85},
              rotation=90),
            Text(
              extent={{-74,114},{70,16}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="%name"),
            Text(
              extent={{24,-80},{42,-90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pO2"),
            Text(
              extent={{50,-78},{70,-92}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO2"),
            Text(
              extent={{76,-34},{94,-44}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctGlb"),
            Text(
              extent={{76,-16},{94,-24}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO"),
            Text(
              extent={{76,4},{94,-4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbF"),
            Text(
              extent={{74,26},{94,16}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FMetHb"),
            Text(
              extent={{76,42},{94,34}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cDPG"),
            Text(
              extent={{78,62},{96,54}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctPO4"),
            Text(
              extent={{78,82},{96,74}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctAlb"),
            Text(
              extent={{-12,6},{12,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdO2",
              origin={-90,-84},
              rotation=90),
            Text(
              extent={{-15.5,19.5},{15.5,-19.5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdCO2",
              origin={-63.5,-83.5},
              rotation=90)}),       Diagram(coordinateSystem(preserveAspectRatio=false,
                       extent={{-100,-100},{100,100}})));
    end bloodPO2PCO2;

    model bloodCO2O2BEox

      Physiolibrary.Types.RealIO.FractionOutput sO2
                                          annotation (Placement(
            transformation(extent={{-8,-8},{8,8}},
            rotation=0,
            origin={92,-4}),                            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-58})));
       Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(
                                            displayUnit="mmol/l")
        "outgoing concentration of HCO3"                                                           annotation (Placement(
            transformation(extent={{-10,-10},{10,10}},
            rotation=0,
            origin={94,-18}),                           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={110,-84})));
      Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)  annotation (Placement(transformation(extent={{-10,-10},
                {10,10}},
            rotation=0,
            origin={-96,88}),         iconTransformation(extent={{-118,76},{-98,
                96}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{11,-11},
                {-11,11}},
            rotation=180,
            origin={-95,-1}),         iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=0,
            origin={-110,-54})));
      Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=180,
            origin={95,69}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={112,42})));
      Physiolibrary.Types.RealIO.FractionInput FMetHb
                                       annotation (Placement(transformation(extent={{-6,-6},
                {6,6}},
            rotation=180,
            origin={94,56}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={112,22})));
      Physiolibrary.Types.RealIO.FractionInput FHbF
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=180,
            origin={93,43}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={112,2})));
      Physiolibrary.Types.RealIO.PressureInput pCO
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=180,
            origin={94,28}),          iconTransformation(extent={{-10,-10},{
                10,10}},
            rotation=180,
            origin={112,-18})));
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
                                      annotation (Placement(transformation(extent={{-12,-12},
                {12,12}},
            rotation=90,
            origin={-2,-94}),         iconTransformation(
            extent={{-9,-9},{9,9}},
            rotation=90,
            origin={-3,-103})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{98,82},
                {86,94}}),            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={112,82})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctPO4(displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)" annotation (
          Placement(transformation(extent={{96,72},{84,84}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={112,62})));
      Physiolibrary.Types.RealIO.MassConcentrationInput ctGlb(
                                           displayUnit="g/l")
        "concentration of total plasma globulins"                                    annotation (Placement(transformation(extent={{-6,-6},
                {6,6}},
            rotation=180,
            origin={94,12}),          iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={112,-38})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctO2 annotation (Placement(
            transformation(
            extent={{-13,-13},{13,13}},
            rotation=90,
            origin={-88,-93}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-80,-102})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctCO2 annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=90,
            origin={-28,-90}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={-42,-102})));
      Physiolibrary.Types.RealIO.pHOutput pH annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=180,
            origin={-96,52}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-110,28})));
      Physiolibrary.Types.RealIO.PressureOutput pO2 annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={16,-94}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=270,
            origin={27,-101})));
      Physiolibrary.Types.RealIO.PressureOutput pCO2 annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={34,-96}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=270,
            origin={55,-101})));
      bloodPO2PCO2 bloodPO2PCO2_
        annotation (Placement(transformation(extent={{-64,-30},{64,102}})));
      Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints
        annotation (Placement(transformation(extent={{-74,-72},{-34,-48}})));
      Modelica.Blocks.Math.InverseBlockConstraints inverseBlockConstraints1
        annotation (Placement(transformation(extent={{10,-72},{50,-48}})));
       Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2(
                                            displayUnit="mmol/l")
        "outgoing concentration of HCO3"                                                           annotation (Placement(
            transformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-88,-44}),                          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-110,-24})));
       Physiolibrary.Types.RealIO.ConcentrationOutput cdO2(displayUnit="mmol/l")
        "outgoing concentration of HCO3" annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-88,-30}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={-110,0})));
    equation
      connect(bloodPO2PCO2_.pH, pH) annotation (Line(
          points={{-70.4,51.84},{-85.25,51.84},{-85.25,52},{-96,52}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(BEox, bloodPO2PCO2_.BEox) annotation (Line(
          points={{-2,-94},{-2,-38},{10,-38},{10,-30.66},{9.6,-30.66}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(T, bloodPO2PCO2_.T) annotation (Line(
          points={{-96,88},{-84,88},{-84,87.48},{-69.12,87.48}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPO2PCO2_.cHCO3, cHCO3) annotation (Line(
          points={{70.4,-19.44},{77.25,-19.44},{77.25,-18},{94,-18}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPO2PCO2_.ctAlb, ctAlb) annotation (Line(
          points={{70.4,88.8},{79.25,88.8},{79.25,88},{92,88}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctPO4, bloodPO2PCO2_.ctPO4) annotation (Line(
          points={{90,78},{80,78},{80,75.6},{70.4,75.6}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPO2PCO2_.cDPG, cDPG) annotation (Line(
          points={{70.4,62.4},{82.25,62.4},{82.25,69},{95,69}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPO2PCO2_.FMetHb, FMetHb) annotation (Line(
          points={{70.4,49.2},{79.25,49.2},{79.25,56},{94,56}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPO2PCO2_.FHbF, FHbF) annotation (Line(
          points={{70.4,36},{82,36},{82,43},{93,43}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPO2PCO2_.pCO, pCO) annotation (Line(
          points={{70.4,22.8},{81.25,22.8},{81.25,28},{94,28}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPO2PCO2_.ctGlb, ctGlb) annotation (Line(
          points={{70.4,9.6},{81.25,9.6},{81.25,12},{94,12}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPO2PCO2_.ctHb, ctHb) annotation (Line(
          points={{-70.4,-3.6},{-82.25,-3.6},{-82.25,-1},{-95,-1}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodPO2PCO2_.sO2, sO2) annotation (Line(
          points={{70.4,-3.6},{79.2,-3.6},{79.2,-4},{92,-4}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(inverseBlockConstraints.y1, pO2) annotation (Line(
          points={{-33,-60},{-14,-60},{-14,-78},{16,-78},{16,-94}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pCO2, inverseBlockConstraints1.y1) annotation (Line(
          points={{34,-96},{34,-78},{58,-78},{58,-60},{51,-60}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(inverseBlockConstraints1.y2, bloodPO2PCO2_.pCO2) annotation (Line(
          points={{47,-60},{39.68,-60},{39.68,-30}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctCO2, inverseBlockConstraints1.u1) annotation (Line(
          points={{-28,-90},{-28,-64},{-8,-64},{-8,-60},{8,-60}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctO2, inverseBlockConstraints.u1) annotation (Line(
          points={{-88,-93},{-88,-60},{-76,-60}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(inverseBlockConstraints.u2, bloodPO2PCO2_.ctO2) annotation (Line(
          points={{-70,-60},{-24.32,-60},{-24.32,-35.28}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(inverseBlockConstraints1.u2, bloodPO2PCO2_.ctCO2) annotation (Line(
          points={{14,-60},{20,-60},{20,-50},{-10.24,-50},{-10.24,-35.28}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(inverseBlockConstraints.y2, bloodPO2PCO2_.pO2) annotation (Line(
            points={{-37,-60},{-50,-60},{-50,-54},{2,-54},{2,-42},{23.04,-42},{
              23.04,-30}}, color={0,0,127}));
      connect(bloodPO2PCO2_.cdO2, cdO2) annotation (Line(points={{-58.88,-35.28},
              {-58.88,-42},{-70,-42},{-70,-30},{-88,-30}}, color={0,0,127}));
      connect(bloodPO2PCO2_.cdCO2, cdCO2) annotation (Line(points={{-42.24,
              -35.28},{-42.24,-44},{-88,-44}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{102,-102}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{74,-56},{92,-66}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="sO2"),
            Text(
              extent={{76,-76},{98,-92}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cHCO3"),
            Text(
              extent={{-98,92},{-80,82}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Text(
              extent={{-98,34},{-80,24}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pH"),
            Text(
              extent={{-18,-74},{4,-88}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="BEox"),
            Text(
              extent={{-96,-46},{-78,-56}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctHb"),
            Text(
              extent={{-92,-76},{-68,-88}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2"),
            Text(
              extent={{-58,-72},{-30,-90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2"),
            Text(
              extent={{-86,114},{58,16}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="%name"),
            Text(
              extent={{18,-80},{36,-90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pO2"),
            Text(
              extent={{44,-80},{62,-90}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO2"),
            Text(
              extent={{82,88},{100,78}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctAlb"),
            Text(
              extent={{82,66},{100,56}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctPO4"),
            Text(
              extent={{82,48},{100,38}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cDPG"),
            Text(
              extent={{78,28},{98,16}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FMetHb"),
            Text(
              extent={{82,6},{98,-2}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FHbF"),
            Text(
              extent={{80,-14},{96,-22}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO"),
            Text(
              extent={{80,-34},{96,-42}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctGlb"),
            Text(
              extent={{-96,6},{-76,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdO2"),
            Text(
              extent={{-96,-14},{-70,-30}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdCO2")}),Diagram(coordinateSystem(preserveAspectRatio=false,
                       extent={{-100,-100},{100,100}})));
    end bloodCO2O2BEox;

    partial model HendersonHasselbach
      import Modelica.Math;

      Real pK;
      Real aCO2(final displayUnit="mmol/(l.kPa)");
       Physiolibrary.Types.Concentration cdCO2(displayUnit="mmol/l");
    // start=3,
    //  Physiolibrary.Types.Pressure pCO2(start=6000,            displayUnit="kPa");
    //  start=6,
     // constant Real MiniliterPerLiter(final displayUnit="ml/l")=1000;

       Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(
                                            displayUnit="mmol/l")
        "outgoing concentration of HCO3"                                                           annotation (Placement(
            transformation(extent={{20,-70},{60,-30}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={80,-120})));
       Physiolibrary.Types.RealIO.TemperatureInput T(      displayUnit="degC")
        "outgoing temperature"                                                            annotation (Placement(transformation(extent={{70,-26},
                {110,14}}),           iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,80})));        /*start=37,*/

       Physiolibrary.Types.RealIO.pHInput pH "outgoing plasma pH"
                                                            annotation (Placement(transformation(extent={{-120,50},
                {-80,90}}),           iconTransformation(extent={{-100,70},{-80,90}})));
     Physiolibrary.Types.RealIO.PressureOutput pCO2(start=6000,       displayUnit="mmHg")
        "alveolar partial pressure of pCO2"
                                        annotation (Placement(transformation(
              extent={{-58,-70},{-18,-30}}),
                                           iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={40,-120})));               /*start=40,*/
    equation
      //Henderson-Hasselbalch equation:
      pK = 6.1 + (-0.0026)*(T-310.15);
      aCO2 = 0.00023 * 10^(-0.0092*(T-310.15)); //solubility depends on temperature
      cdCO2 = aCO2*pCO2;
     // pH = if ( cdCO2 > 1e-8) then  pK + log10(max(1e-15,cHCO3/cdCO2)) else pK;
      cdCO2 * 10^(pH-pK) = cHCO3;

        annotation ( Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),     Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}})));
    end HendersonHasselbach;

    partial model BloodCO2Base
      extends HendersonHasselbach;

      import Modelica.Math;

      Physiolibrary.Types.Concentration tCO2_P(start=24, displayUnit="mmol/l");
      //start=24,

      Real pK_ery;
      Physiolibrary.Types.GasSolubility aCO2_ery( displayUnit="mmol/l/mmHg");
      Physiolibrary.Types.Concentration tCO2_ery( displayUnit="mmol/l");

       Physiolibrary.Types.Concentration tCO2( displayUnit="mmol/l");

    //  constant Real MiniliterPerLiter(final displayUnit="ml/l")=1000;

       Physiolibrary.Types.RealIO.pHInput pH_ery
        "outgoing intracellular erytrocytes pH"
                                      annotation (Placement(transformation(extent={{-120,10},
                {-80,50}}),           iconTransformation(extent={{-100,30},{-80,50}})));
       Physiolibrary.Types.RealIO.FractionInput Hct
        "outgoing hematocrit (erytrocytes volume/blood volume)"
                                       annotation (Placement(transformation(extent={{60,60},
                {100,100}}),          iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,40})));
       Physiolibrary.Types.RealIO.FractionInput sO2
        "outgoing oxygen saturation"   annotation (Placement(transformation(extent={{60,20},
                {100,60}}),           iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,0})));

    equation
      //total plasma CO2 from SimpleCO2Solution
      tCO2_P = cHCO3 + cdCO2;

      //erythrocytes:
      pK_ery = 6.125 - log10(1+10^(pH_ery-7.84-0.06*sO2));
      tCO2_ery=aCO2_ery*pCO2*(1+10^(pH_ery-pK_ery));
      aCO2_ery=0.000195; //solubility 0.23 (mmol/l)/kPa at 25degC

      //plasma+erythrocyte
      tCO2 = tCO2_ery*Hct + tCO2_P*(1-Hct);

      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid), Text(
              extent={{-74,-26},{74,-58}},
              lineColor={0,0,255},
              textString="%name")}),        Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
    end BloodCO2Base;

  partial model BloodO2Base
  //start values is for tissues veins blood

    parameter Boolean isSaturated = false;

    Physiolibrary.Types.Concentration tO2(start=0.75*8.14);
    Real aO2;
  //  Real pO2(start=5.33,           unit="kPa");
    // start=13,
    Physiolibrary.Types.Fraction sO2CO(start=0.95);
    Physiolibrary.Types.Pressure pO2CO;
    Physiolibrary.Types.Concentration cO2Hb(start=6);
    //
    Physiolibrary.Types.Fraction sCO;

    Physiolibrary.Types.Concentration ceHb;
    Real a(start=0.5);
    Real k;
    Real x;
    Real y;
    Real h;

  /*  Real ex;
  Real ey;
  Real ey0;
  Real tnh;
*/
    Physiolibrary.Types.Fraction FCOHb(start=0);

  //  Real pCO;
  //  Real pCO2;
    //(start=5);

    Physiolibrary.Types.RealIO.FractionOutput sO2
                                        annotation (Placement(
          transformation(extent={{-30,-112},{10,-72}}),
                                                      iconTransformation(
          extent={{-20,-20},{20,20}},
          rotation=270,
          origin={0,-120})));
    Physiolibrary.Types.RealIO.pHInput pH
                                    annotation (Placement(transformation(extent={{-120,70},
              {-80,110}}),          iconTransformation(extent={{-100,90},{
              -80,110}})));
    Physiolibrary.Types.RealIO.ConcentrationInput ctHb
                                     annotation (Placement(transformation(extent={{60,60},
              {100,100}}),          iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={90,100})));

    Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)  annotation (Placement(transformation(extent={{-120,
              -20},{-80,20}}),      iconTransformation(extent={{-100,10},{
              -80,30}})));
    Physiolibrary.Types.RealIO.PressureInput pCO
                                     annotation (Placement(transformation(extent={{60,-100},
              {100,-60}}),          iconTransformation(extent={{-10,-10},{
              10,10}},
          rotation=180,
          origin={90,-60})));
    Physiolibrary.Types.RealIO.PressureInput pCO2(start=5330)
                                     annotation (Placement(transformation(extent={{-120,20},
              {-80,60}}),           iconTransformation(extent={{-100,50},{-80,70}})));
    Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                     annotation (Placement(transformation(extent={{60,20},
              {100,60}}),           iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={90,60})));
    Physiolibrary.Types.RealIO.FractionInput FMetHb
                                     annotation (Placement(transformation(extent={{60,-20},
              {100,20}}),           iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={90,20})));

    Physiolibrary.Types.RealIO.FractionInput FHbF
                                     annotation (Placement(transformation(extent={{60,-60},
              {100,-20}}),          iconTransformation(
          extent={{-10,-10},{10,10}},
          rotation=180,
          origin={90,-20})));

  //  Real mlTOmmol_O2(unit="mMol/ml") = 8.18/0.182
  //    "conversion constant for oxygen mass from ml to mMol";

   // Real mlTOmmol_O2(unit="mMol/ml") = 1/(740*2*16/1000)
   //   "conversion constant for oxygen mass from ml to mMol";
                                                     //8.18 / 0.182
                                                     //molar mass = 2*16 g/mol; density = 740 ml/g

   // constant Real MiniliterPerLiter(final unit="ml/l")=1000;

    Physiolibrary.Types.RealIO.PressureOutput pO2(start=5330)
                                        annotation (Placement(
          transformation(extent={{2,-112},{42,-72}}), iconTransformation(
          extent={{-20,-20},{20,20}},
          rotation=270,
          origin={40,-120})));

    Physiolibrary.Types.Concentration cdO2;
  /*
  Real aa;
  Real xx;
  Real yy;
  Real ssO2CO(start=0.96);
*/

   parameter Physiolibrary.Types.Temperature T0 = 273.15+37
        "normal temperature";
   parameter Physiolibrary.Types.pH pH0 = 7.4 "normal arterial pH";
   parameter Physiolibrary.Types.Pressure pCO20 = 5330
        "normal arterial CO2 partial pressure";
   parameter Physiolibrary.Types.Concentration cDPG0 = 5 "normal DPG,used by a";
   parameter Real dadcDPG0 = 0.3 "used by a";
   parameter Real dadcDPGxHbF = -0.1 "or perhabs -0.125";
   parameter Real dadpH = -0.88 "used by a";
   parameter Real dadlnpCO2 = 0.048 "used by a";
   parameter Real dadxMetHb = -0.7 "used by a";
   parameter Real dadxHbF = -0.25 "used by a";

   //constant Real PaTOmmHg = 1/133;

  equation
  //   PO2 = PaTOmmHg*1000 * pO2;

  //  pCOmmHg = PaTOmmHg*1000 * pCO;
  //  pCO2mmHg = PaTOmmHg*1000 * pCO2;

  //oxygen:
    ceHb = ctHb * (1-FCOHb-FMetHb); //effective haemoglobin

    assert(tO2 <= ceHb*(1.06), "Model does not support this high level of oxygen in blood. Maximum of oxygen concentration should be connected with efective hemoglobin concentration!");
      //pO2,pCO,pCO2 .. Pa
    //TODO: check units of solubility
    aO2 = exp(log(0.0105)+(-0.0115*(T-T0))+0.5*0.00042*(T-T0)^2)/1000; //solubility
    cdO2 = aO2*pO2;
  /*  if (isSaturated) then
    cdO2 = homotopy( tO2 - sO2*ceHb, tO2 - 0.9999*ceHb);
  else
    sO2 = homotopy( (tO2-cdO2)/ceHb,  tO2/ceHb);  // ctO2 = aO2*pO2 + ceHb*sO2;  initially sufficient to have all the oxygen bound to hemoglobin, and then add only a small amount of dissolved oxygen..
  end if; */
   //TODO: why not sO2 = homotopy( (tO2-cdO2)/ceHb,  tO2/ceHb);
    tO2 = aO2*pO2 + ceHb*sO2;
  //  cO2Hb = tO2 - cdO2;
    sO2 = cO2Hb/ceHb;
    //TODO: check this: a=-0.88*(pH-7.4)+0.048*log(pCO2/5.33)-0.7*FMetHb+(0.3-0.25*FHbF)*cDPG/(5-1);
    //TANH
    a=dadpH*(pH-pH0)+dadlnpCO2*log(max(1e-15+1e-22*pCO2,pCO2/pCO20)) +dadxMetHb*FMetHb+(dadcDPG0 + dadcDPGxHbF*FHbF)*(cDPG/cDPG0 - 1); //log(pCO2/5330)

    //orginal:
    x=log(pO2CO/7000) - a - 0.055*(T-T0); //instead of:  x=log(pO2CO/7) - a - 0.055*(T-37);
    y-1.8747=x+h*tanh(k*x);
    k=0.5342857;
    h=3.5 + a;
    y=log(sO2CO/(1-sO2CO));

    //simplification:
  /*  ey/ey0=ex*exp((3.5 + a)*tnh);  //TANH:  y-log(0.867/(1-0.867))=x+(3.5 + a)*tanh(0.5342857*x);
  ey0=0.867/(1-0.867);  //y0=log(0.867/(1-0.867)); //1.8747
  tnh = (ex^(2*k) - 1) / (ex^(2*k) + 1);  // = tanh(k*x)
  ex=max(1e-15*(1+1e-6*pO2CO),(pO2CO/7.000) / exp(a + 0.055*(T-37)));  // = exp(x); x=log(max(1e-15*(1+1e-6*pO2CO),pO2CO/7000)) - a - 0.055*(T_degC-37);
  k=0.5342857;
  ey=sO2CO/(1-sO2CO); // = exp(y);  y=log(max(1e-15*(1+1e-6*sO2CO/(1-sO2CO)),sO2CO/(1-sO2CO)));
  */
      /************ O2 ********************/

    /************ CO ********************/
    //Haldane:
   /* if (pCOmmHg<1e-10) then
    sCO = 0;
    pO2CO = pO2;
    sO2CO = sO2;
    FCOHb = 0;/*
  else*/
   /*   pCO = sCO*pO2CO/ 218*sO2CO;
    pO2CO = pO2 + 218*pCO;
    sO2CO = (cO2Hb + ctHb*FCOHb)/(ctHb*(1-FMetHb));
    sCO = ctHb*FCOHb/(ctHb*(1-FMetHb));*/

      {pCO,FCOHb,pO2CO,sO2CO}=homotopy({sCO*pO2CO/ 218*sO2CO,sCO*(1-FMetHb),pO2 + 218*pCO,(cO2Hb + ctHb*FCOHb)/(ctHb*(1-FMetHb))},
      {0,0,pO2,sO2});
  //  end if;

  /*  ceHb = ctHb * (1-FCOHb-FMetHb); //effective haemoglobin
  aO2 = exp(log(0.0105)+(-0.0115*(T-37))+0.5*0.00042*(T-37)^2); //solubility
  tO2 = aO2*pO2 + ceHb*sO2;
  //Haldane:
  sCO*pO2CO = 218*pCO*sO2CO;
  pO2CO = pO2 + 218*pCO;
  //saturation definitions: "result: sO2CO = (sO2*(ceHb/ctHb)+FCOHb)/(1-FMetHb);"
  sO2 = cO2Hb/ceHb;
  sO2CO = (cO2Hb + ctHb*FCOHb)/(ctHb*(1-FMetHb));
  sCO = ctHb*FCOHb/(ctHb*(1-FMetHb));
  //TANH
//  a=-0.88*(pH-7.4)+0.048*log(pCO2/5.33)-0.7*FMetHb+(0.3-0.25*FHbF)*cDPG/(5-1); //Bohr coefficient: -der(log10(pO2),pH)=0.88/ln(10)=0.38, -der(ln(pO2),pH)=0.88
//  x=log(pO2CO/7); //namiesto:  x=log(pO2CO/7) - a - 0.055*(T-37);
  y-y0=x+h*tanh(k*x);
  y0=log(0.867/(1-0.867)); //1.8747

  k=0.5342857;
  h=3.5 + a;
//  y=log(sO2CO/(1-sO2CO));

//corrected:
  a=-0.88*(pH-7.4)+0.048*log(max(1e-15+1e-24*pCO2,pCO2/5.33))-0.7*FMetHb+(0.3-0.1*FHbF)*(cDPG/5 - 1);
  x=log(max(1e-15+1e-24*pO2CO,pO2CO/7)) - a - 0.055*(T-37);
  y=log(max(1e-15+1e-24*sO2CO/(1-sO2CO),sO2CO/(1-sO2CO)));

*/

  //oxygen: working well:
    //TANH
  //  a=-0.88*(pH-7.4)+0.048*log(max(1e-15+1e-19*pCO2,pCO2/5.33))-0.7*FMetHb+(0.3-0.25*FHbF)*cDPG/(5-1); //Bohr coefficient: -der(log10(pO2),pH)=0.88/ln(10)=0.38, -der(ln(pO2),pH)=0.88
  //  x=log(pO2CO/7);
  //  x=log(max(1e-15+1e-19*pO2CO,pO2CO/7)) - a - 0.055*(T-37); //namiesto:  x=log(pO2CO/7) - a - 0.055*(T-37);
  //  y=log(max(1e-15+1e-19*sO2CO/(1-sO2CO),sO2CO/(1-sO2CO)));

    annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
              -100},{100,100}}), graphics={Rectangle(
            extent={{-100,100},{100,-100}},
            lineColor={0,0,255},
            fillColor={215,215,215},
            fillPattern=FillPattern.Solid), Text(
            extent={{-74,-32},{74,-64}},
            lineColor={0,0,255},
            textString="%name")}));
  end BloodO2Base;

    partial model BloodPhBase
      import Modelica.Math;

      Physiolibrary.Types.Concentration betaX "buffer value of blood";
                                             //(unit = "mEq/l")
      Physiolibrary.Types.Concentration betaP "buffer value of plasma";
                                             //(unit = "mEq/l")

      Physiolibrary.Types.Concentration _cTH
        "total concentration of tiratable hydrogen ions";
                                           //( displayUnit="mEq/l")
      Physiolibrary.Types.Concentration _BE "base excess";
                                          //( displayUnit="mEq/l")

      Physiolibrary.Types.Concentration _BEox
        "base excess in fully oxygenated blood";
                                            //( displayUnit="mEq/l")
      Physiolibrary.Types.Concentration _cTHox
        "total concentration of tiratable hydrogen ions in fully oxygenated blood";
                                             //( displayUnit="mEq/l")

       Physiolibrary.Types.RealIO.pHOutput pH( start=7.4) "plasma pH"    annotation (Placement(transformation(
              extent={{30,-98},{70,-58}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-20,-120})));
      Physiolibrary.Types.RealIO.pHOutput pH_ery "intracellular erytrocytes pH"   annotation (Placement(
            transformation(extent={{-14,-98},{26,-58}}),iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={20,-120})));

      Physiolibrary.Types.RealIO.ConcentrationInput cHCO3(
                                           displayUnit="mmol/l")
        "concentration of plasma HCO3 ions (default=24.5mmol/l)"
                                       annotation (Placement(transformation(extent={{50,18},
                {90,58}}),            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,80})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{50,58},
                {90,98}}),            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,40})));
      parameter Physiolibrary.Types.Concentration  cHb(displayUnit="mmol/l")=43
        "an empirical parameter accounting for erythrocyte plasma distributions = concentration of Hb inside erythrocytes divided by (1-0.57)";

      Physiolibrary.Types.RealIO.FractionInput sO2 "oxygen saturation"
                                       annotation (Placement(transformation(extent={{-100,60},
                {-60,100}}),          iconTransformation(extent={{-10,-10},{10,10}},
            rotation=270,
            origin={60,110})));

      Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                           displayUnit="mmol/l")
        "concentration of total plasma albumins(dofault=0.65mmol/l)"                 annotation (Placement(transformation(extent={{52,-26},
                {92,14}}),            iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,0})));

      Physiolibrary.Types.RealIO.MassConcentrationInput ctGlb(
                                           displayUnit="g/l")
        "concentration of total plasma globulins"                                    annotation (Placement(transformation(extent={{52,-60},
                {92,-20}}),           iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,-40})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctPO4(
                                           displayUnit="mmol/l")
        "concentration of total inorganic phosphate in plasma"                       annotation (Placement(transformation(extent={{54,-92},
                {94,-52}}),           iconTransformation(extent={{-10,-10},{10,10}},
            rotation=180,
            origin={90,-80})));

    equation
      //Van Slyke equation:  - T=37
      _cTH = -(1-ctHb/cHb)*((cHCO3-24.5)+betaX*(pH-7.4));
    //  _cTH = -(1-(1-0.57)*(0.44))*((cHCO3-24.5)+betaX*(pH-7.4));

      betaX = 2.3*ctHb + betaP;
      betaP =  8*ctAlb + 0.075*ctGlb + 0.309*ctPO4;

    //  _betaX = 0.11 * plasmaProteinConc(displayUnit="g/l"); //mmol/l

    //Haldane effect:
      _cTH = homotopy(_cTHox - 0.3 * (1-sO2),_cTHox);

    //base excess
      _BEox = - _cTHox;
      _BE = - _cTH;

      //erythrocytes:
      pH_ery = homotopy(7.19 + 0.77*(pH-7.4) + 0.035*(1-sO2),7.19 + 0.77*(pH-7.4));

      annotation (
        preferredView = text,
        Documentation(info="<html>
<pre>Blood pH calculation by
<i><b>Van Slyke equation</b></i>,
<i><b>Haldame</b></i> effect
and plasma-<i><b>erythrocytes</b></i> acidity distribution.</pre>
</html>",
     revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>dec 2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),
        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                100,100}}), graphics={
            Text(
              extent={{-72,-56},{76,-92}},
              lineColor={0,0,255},
              textString="%name"),
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-96,-62},{98,-94}},
              lineColor={0,0,255},
              textString="%name")}),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}})));
    end BloodPhBase;

    model BloodPhMeassure
      extends BloodPhBase;
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
                                      annotation (Placement(transformation(extent={{
                -102,90},{-62,130}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-90,110})));
    equation
      _BEox = BEox;

    //  cTHox.conc*1000 = _cTHox;

      annotation (          Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2013</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),     Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}})));
    end BloodPhMeassure;

    model FlowMeasureCO2
      extends BloodCO2Base;

      import Modelica.Math;
    /*
  Real tCO2_P(start=24,              final displayUnit="mmol/l");

  Real pK_ery;
  Real aCO2_ery(final displayUnit="mmol/l/mmHg");
  Real tCO2_ery(final displayUnit="mmol/l");

  Real tCO2(final displayUnit="mmol/l");

  constant Real MiniliterPerLiter(final displayUnit="ml/l")=1000;
*/
    Physiolibrary.Chemical.Interfaces.ChemicalPort_a q_in
        "CO2 inflow to ventilated alveols in mmol/ml"
                                                    annotation (Placement(
          transformation(extent={{-120,-100},{-80,-60}}), iconTransformation(
            extent={{-120,-100},{-80,-60}})));
    /*  Library.Interfaces.RealInput_ pH_ery "outgoing intracellular erytrocytes pH"
                                  annotation (Placement(transformation(extent={{-120,10},
            {-80,50}}),           iconTransformation(extent={{-100,30},{-80,50}})));
  Library.Interfaces.RealInput_ Hct
    "outgoing hematocrit (erytrocytes volume/blood volume)"
                                   annotation (Placement(transformation(extent={{60,60},
            {100,100}}),          iconTransformation(
        extent={{-10,-10},{10,10}},
        rotation=180,
        origin={90,40})));
  Library.Interfaces.RealInput_ sO2 "outgoing oxygen saturation"
                                   annotation (Placement(transformation(extent={{60,20},
            {100,60}}),           iconTransformation(
        extent={{-10,-10},{10,10}},
        rotation=180,
        origin={90,0})));
*/
    Physiolibrary.Chemical.Interfaces.ChemicalPort_b q_out
        "CO2 outflow from ventilated alveols in mmol/ml"
                                                       annotation (Placement(
          transformation(extent={{80,-100},{120,-60}}), iconTransformation(
            extent={{80,-100},{120,-60}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput BloodFlow(
                                              displayUnit="ml/min")
        "blood flow through ventilated alveols"
                                       annotation (Placement(transformation(extent={{-120,
                -80},{-80,-40}}),     iconTransformation(extent={{-100,-10},{-80,10}})));
    equation

      q_in.q + q_out.q = 0;
      q_in.conc = (q_in.q/BloodFlow);
      tCO2 = q_in.conc; //=(-q_out.q/BloodFlow);  //mmol/l

    /*
  //total plasma CO2 from SimpleCO2Solution
  tCO2_P = cHCO3 + cdCO2;

  //erythrocytes:
  pK_ery = 6.125 - log10(1+10^(pH_ery-7.84-0.06*sO2));
  tCO2_ery=aCO2_ery*pCO2*(1+10^(pH_ery-pK_ery));
  aCO2_ery=0.195; //solubility

  //plasma+erythrocyte
  tCO2 = tCO2_ery*Hct + tCO2_P*(1-Hct);
*/
      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-74,-26},{74,-58}},
              lineColor={0,0,255},
              textString="%name"),
            Polygon(
              points={{-72,10},{80,0},{-72,-10},{-72,10}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              origin={-2,-80},
              rotation=360)}));
    end FlowMeasureCO2;

    partial model BloodCO2TransportBase
      extends BloodCO2Base;

    Physiolibrary.Chemical.Interfaces.ChemicalPort_a q_in
        "CO2 inflow to ventilated alveols in mmol/ml"
                                                    annotation (Placement(
          transformation(extent={{-120,-100},{-80,-60}}), iconTransformation(
            extent={{-120,-100},{-80,-60}})));
    Physiolibrary.Chemical.Interfaces.ChemicalPort_b q_out
        "CO2 outflow from ventilated alveols in mmol/ml"
                                                       annotation (Placement(
          transformation(extent={{80,-100},{120,-60}}), iconTransformation(
            extent={{80,-100},{120,-60}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput BloodFlow(
                                              final displayUnit="ml/min")
        "blood flow through ventilated alveols"
                                       annotation (Placement(transformation(extent={{-120,
                -80},{-80,-40}}),     iconTransformation(extent={{-100,-10},{-80,10}})));
    equation
      q_in.conc = q_in.q/ BloodFlow; //mmol/l

      tCO2 = (-q_out.q/BloodFlow); //mmol/l

      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-74,-26},{74,-58}},
              lineColor={0,0,255},
              textString="%name"),
            Polygon(
              points={{-72,10},{80,0},{-72,-10},{-72,10}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid,
              origin={-2,-80},
              rotation=360)}),        Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"));
    end BloodCO2TransportBase;

    model BloodCO2

     extends BloodCO2TransportBase;
    // extends Physiolibrary.Icons.LungShunt;

    Physiolibrary.Chemical.Interfaces.ChemicalPort_a alveolar_outflow
        "CO2 outflow from blood to alveol space in mmol/min"
        annotation (Placement(transformation(extent={{-20,80},{20,120}}),
            iconTransformation(extent={{-20,80},{20,120}})));
    equation
      q_in.q + q_out.q + alveolar_outflow.q = 0;
      alveolar_outflow.conc = cdCO2;

    end BloodCO2;

    model NormalSID
     // extends BloodPhBase;

     Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                               final displayUnit="mmol/l")
        "concentration of total plasma albumins(dofault=0.65mmol/l)"                annotation (Placement(transformation(extent={{-120,72},
                {-80,112}}),         iconTransformation(extent={{-10,-10},{10,10}},
           rotation=180,
           origin={90,80})));

     Physiolibrary.Types.RealIO.MassConcentrationInput ctGlb(
                                               final displayUnit="g/l")
        "concentration of total plasma globulins"                                   annotation (Placement(transformation(extent={{-120,42},
                {-80,82}}),          iconTransformation(extent={{-10,-10},{10,10}},
           rotation=180,
           origin={90,50})));
     Physiolibrary.Types.RealIO.ConcentrationInput ctPO4_P(
                                                 final displayUnit="mmol/l")
        "concentration of total inorganic phosphate in plasma"                      annotation (Placement(transformation(extent={{-120,12},
                {-80,52}}),          iconTransformation(extent={{-10,-10},{10,10}},
           rotation=180,
           origin={90,20})));

      Physiolibrary.Types.RealIO.VolumeDensityOfChargeOutput
                                          NSID
                                        annotation (Placement(transformation(extent={{80,0},{
                120,40}}),           iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={-120,-60})));
     Physiolibrary.Types.RealIO.FractionInput Hct "hematocrit"
                                      annotation (Placement(transformation(extent={{-120,
              -14},{-80,26}}),       iconTransformation(extent={{-10,-10},{10,10}},
           rotation=180,
           origin={90,-70})));
      Bicarbonate bicarbonate
        annotation (Placement(transformation(extent={{-38,10},{-18,30}})));
      Albumin albumin
        annotation (Placement(transformation(extent={{-38,78},{-18,98}})));
      Modelica.Blocks.Math.Sum NSIDP(nin=4, y(unit="C/m3", displayUnit=
            "mEq/l"))
        annotation (Placement(transformation(extent={{26,72},{46,92}})));
      Globulins globulins
        annotation (Placement(transformation(extent={{-38,56},{-18,76}})));
      Phosphates phosphates
        annotation (Placement(transformation(extent={{-38,34},{-18,54}})));
      Haemoglobin haemoglobin
        annotation (Placement(transformation(extent={{-38,-68},{-18,-48}})));
      OtherRBCBuffers phosphates1
        annotation (Placement(transformation(extent={{-38,-96},{-18,-76}})));
      Modelica.Blocks.Math.Sum NSIDE(nin=3, y(unit="C/m3", displayUnit=
            "mEq/l"))
        annotation (Placement(transformation(extent={{12,-78},{32,-58}})));
      Modelica.Blocks.Math.Feedback Pct      annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            origin={26,56})));
      Modelica.Blocks.Math.Product product1(y(unit="C/m3", displayUnit=
            "mEq/l"))                       annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={50,-2})));
      Modelica.Blocks.Math.Product product2(y(unit="C/m3", displayUnit=
            "mEq/l"))                       annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={50,38})));
      Modelica.Blocks.Math.Add add(k1=-1, k2=-1)
        annotation (Placement(transformation(extent={{70,10},{90,30}})));
    Physiolibrary.Types.Constants.FractionConst             const(k=1)
      annotation (Placement(transformation(extent={{-2,50},{10,62}})));
    Physiolibrary.Types.Constants.pHConst                   n_pH_P(k=7.4)
      annotation (Placement(transformation(extent={{-82,44},{-70,56}})));
    Physiolibrary.Types.Constants.PressureConst             n_pCO2(k=
          5332.8954966)
      annotation (Placement(transformation(extent={{-82,14},{-70,26}})));
     Physiolibrary.Types.RealIO.TemperatureInput T "temperature"
                                      annotation (Placement(transformation(extent={{-120,
                -40},{-80,0}}),      iconTransformation(extent={{-10,-10},{10,10}},
           rotation=180,
           origin={90,-40})));
      Bicarbonate bicarbonate1
        annotation (Placement(transformation(extent={{-38,-40},{-18,-20}})));
    Physiolibrary.Types.Constants.pHConst                   n_pH_E(k=7.19)
        "should be calculated, but how?"
      annotation (Placement(transformation(extent={{-86,-42},{-74,-30}})));
     Physiolibrary.Types.RealIO.ConcentrationInput tHb_E
        "haemoglobin concentration in erythrocyte"
                                      annotation (Placement(transformation(extent={{-120,
                -68},{-80,-28}}),    iconTransformation(extent={{-10,-10},{10,10}},
           rotation=180,
           origin={90,-10})));
    Physiolibrary.Types.Constants.FractionConst n_sO2(k=1)
      annotation (Placement(transformation(extent={{-86,-66},{-74,-54}})));
    equation
      connect(ctAlb, albumin.tAlb) annotation (Line(
          points={{-100,92},{-70,92},{-70,88},{-38,88}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bicarbonate.y, NSIDP.u[1])          annotation (Line(
          points={{-18,12},{-8,12},{-8,80.5},{24,80.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(albumin.y, NSIDP.u[2])          annotation (Line(
          points={{-18,80},{-6,80},{-6,81.5},{24,81.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(globulins.y, NSIDP.u[3])          annotation (Line(
          points={{-18,58},{-8,58},{-8,82.5},{24,82.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(phosphates.y, NSIDP.u[4])          annotation (Line(
          points={{-18,36},{-8,36},{-8,83.5},{24,83.5}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Hct, Pct.u2)      annotation (Line(
          points={{-100,6},{26,6},{26,48}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(add.y, NSID)
                          annotation (Line(
          points={{91,20},{100,20}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(product1.y, add.u2) annotation (Line(
          points={{50,9},{50,14},{68,14}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(product2.y, add.u1) annotation (Line(
          points={{50,27},{50,26},{68,26}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Pct.y, product2.u2)      annotation (Line(
          points={{35,56},{44,56},{44,50}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(Hct, product1.u1) annotation (Line(
          points={{-100,6},{26,6},{26,-20},{44,-20},{44,-14}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(NSIDE.y, product1.u2)                annotation (Line(
          points={{33,-68},{56,-68},{56,-14}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(NSIDP.y, product2.u1)          annotation (Line(
          points={{47,82},{56,82},{56,50}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(const.y, Pct.u1)      annotation (Line(
          points={{11.5,56},{18,56}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pH_P.y, albumin.pH)    annotation (Line(
          points={{-68.5,50},{-62,50},{-62,94},{-38,94}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pH_P.y, globulins.pH)    annotation (Line(
          points={{-68.5,50},{-62,50},{-62,72},{-38,72}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pH_P.y, phosphates.pH)    annotation (Line(
          points={{-68.5,50},{-38,50}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pH_P.y, bicarbonate.pH)    annotation (Line(
          points={{-68.5,50},{-62,50},{-62,26},{-38,26}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(T, bicarbonate.T) annotation (Line(
          points={{-100,-20},{-56,-20},{-56,16},{-38,16}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bicarbonate1.y, NSIDE.u[1])                annotation (Line(
          points={{-18,-38},{-4,-38},{-4,-69.3333},{10,-69.3333}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(haemoglobin.y, NSIDE.u[2])                annotation (Line(
          points={{-18,-66},{-4,-66},{-4,-68},{10,-68}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(phosphates1.y, NSIDE.u[3])                annotation (Line(
          points={{-18,-94},{-4,-94},{-4,-66.6667},{10,-66.6667}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pCO2.y, bicarbonate.pCO2)      annotation (Line(
          points={{-68.5,20},{-38,20}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pCO2.y, bicarbonate1.pCO2)      annotation (Line(
          points={{-68.5,20},{-64,20},{-64,-30},{-38,-30}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pH_E.y, bicarbonate1.pH)        annotation (Line(
          points={{-72.5,-36},{-60,-36},{-60,-24},{-38,-24}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pH_E.y, haemoglobin.pH)        annotation (Line(
          points={{-72.5,-36},{-60,-36},{-60,-52},{-38,-52}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pH_E.y, phosphates1.pH)        annotation (Line(
          points={{-72.5,-36},{-60,-36},{-60,-80},{-38,-80}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(T, bicarbonate1.T) annotation (Line(
          points={{-100,-20},{-56,-20},{-56,-34},{-38,-34}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctPO4_P, phosphates.tPO4) annotation (Line(
          points={{-100,32},{-74,32},{-74,34},{-48,34},{-48,44},{-38,44}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tHb_E, haemoglobin.tHb_E) annotation (Line(
          points={{-100,-48},{-70,-48},{-70,-56},{-38,-56}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(n_pCO2.y, haemoglobin.pCO2)      annotation (Line(
          points={{-68.5,20},{-64,20},{-64,-64},{-38,-64}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(T, haemoglobin.T) annotation (Line(
          points={{-100,-20},{-56,-20},{-56,-68},{-38,-68}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctGlb, globulins.ctGlb) annotation (Line(
          points={{-100,62},{-69,62},{-69,64},{-38,64}},
          color={0,0,127},
          smooth=Smooth.None));

    //  NBB = (1-Hct)( [HCO3]P(40mmHg,7.4) + tAlbP*-zAlbP(7.4) + tGlbP*-zGlb(7.4) + tPO4P*-zPO4(7.4) + tORGP*-zORG(7.4) + .. ) + Hct ( [HCO3]E(40mmHg,NpHE) + tHb*-zHb(sO2,sCO2,NpHE) + tPO4E*-zPO4(NpHE) ..)
    //  NBB = 0;//_cTHox;

    connect(n_sO2.y, haemoglobin.sO2) annotation (Line(
        points={{-72.5,-60},{-38,-60}},
        color={0,0,127},
        smooth=Smooth.None));
      annotation (        Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2013</p></td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),     Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}})));
    end NormalSID;

    model MeassureBloodO2
      extends BloodO2Base;
                          //_withoutCO_;
    Physiolibrary.Chemical.Interfaces.ChemicalPort_a q_in annotation (
        Placement(transformation(extent={{-28,-116},{12,-76}}),
          iconTransformation(extent={{-20,-100},{20,-60}})));
    equation
       q_in.q = 0;  //flows: mmol/min
       tO2 = q_in.conc; //mmol/l
    end MeassureBloodO2;

    model BloodO2_Siggaard

    extends BloodO2Base;
                        //_withoutCO_;

    //Physiolibrary.Chemical.Interfaces.ChemicalPort_a q_in;
    //Physiolibrary.Chemical.Interfaces.ChemicalPort_b q_out;
    //Physiolibrary.Chemical.Interfaces.ChemicalPort_b alveolar;
    //Modelica.Blocks.Interfaces.RealInput

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a q_in
        annotation (Placement(transformation(extent={{-100,-100},{-80,-80}}),
            iconTransformation(extent={{-100,-100},{-80,-80}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b q_out
        annotation (Placement(transformation(extent={{80,-100},{100,-80}}),
            iconTransformation(extent={{80,-100},{100,-80}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b alveolar
        annotation (Placement(transformation(extent={{-14,72},{6,92}}),
            iconTransformation(extent={{-14,72},{6,92}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput BloodFlow
        annotation (Placement(transformation(extent={{-120,-54},{-80,-14}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ceHb_(
                                           displayUnit="mmol/l")
        "effective haemoglobin"           annotation (Placement(
            transformation(extent={{38,-102},{78,-62}}),iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-40,-120})));
    equation
    q_in.q + q_out.q + alveolar.q = 0;  //flows: mmol/min

    alveolar.conc = cdO2;

    q_in.conc = q_in.q/ BloodFlow; //mmol/l

    //tO2 = MiniliterPerLiter * (-q_out.q/ BloodFlow); //mmol/l
    tO2 =  (-q_out.q/ BloodFlow); //mmol/l

    ceHb_ = ceHb;

    annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
              -100,-100},{100,100}}), graphics));
    end BloodO2_Siggaard;

    model MeassureBloodCO2
      extends BloodCO2Base;

    Physiolibrary.Chemical.Interfaces.ChemicalPort_a q_in annotation (
        Placement(transformation(extent={{80,-20},{120,20}}),
          iconTransformation(extent={{-20,-100},{20,-60}})));
    equation
      q_in.q=0;
      tCO2 = q_in.conc;// * MiniliterPerLiter;  //mmol/l

      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={215,215,215},
              fillPattern=FillPattern.Solid), Text(
              extent={{-74,-26},{74,-58}},
              lineColor={0,0,255},
              textString="%name")}));
    end MeassureBloodCO2;

    model ctHb_to_Htc
      "\"Conversion blood hemoglobin concentration (ctHb in mmol/l) to hematocrit (Htc, expressed as a fraction)"

      Physiolibrary.Types.RealIO.FractionOutput Htc
        "Hematocrit (expressed as a fraction)" annotation (Placement(
            transformation(extent={{92,-12},{112,8}}), iconTransformation(extent=
                {{100,-28},{156,28}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb
        "Total concentration of hemoglobin in blood (mmol/l)" annotation (
          Placement(transformation(extent={{-124,-8},{-84,32}}),
            iconTransformation(extent={{-156,-28},{-100,28}})));
    equation
        // by:
        // http://noblood.org/forum/threads/5533-Hemoglobin-relationship-to-Hematocrit
        // Htc = 0.0485 x ctHb (mmol/L) + 0.0083;
        // ctHb = (Htc-0.0083)/0.0485 = 20.61856 *Ht - 0.171134;
        // in Physimodel is hemoglobin concetration calculated higher in given hematocrit:
        // ctHb = Htc*8.4/norm Htc = ctHb 8.4/0.44 = Htc * 19.09091;
        // in hematocrit  0.44 in Physiomodel Hb concentration is 8.4 mmol/l while
        // in other caculation is only 7.36

        // See - different results of different equations:
        // Hb=15g/dL: Hct (%) = (0.0485 *ctHb (mmol/L) + 0.0083) * 100 result is Hct of 45.98
        // Hb=15g/dL: Hct (%) = 2.8 * ctHb (g/dL) + 0.8 result is Hct of 42.80
        // Hb=15g/dL: Hct (%) = ctHb (g/dL) / 0.34 result is Hct of 44.12
        // Hb=15g/dL: Hct (%) = 2.941 * ctHb (g/dL) result is Hct of 44.12
        // * Conversion factor: g/dL * 0.62058 = mmol/L

        // Notice that all of the results for the same Hgb level are not identical.
        // The conclusion to all of this is, that while it is generally assumed that
        // the conversion from hemoglobin to hematocrit is pretty straightforward,
        // since most methods measuring ctHb are considered to be fairly accurate,
        // when looking at Hct levels, the healthcare professional needs to remember
        // that different analyzers use different conversion factors, which may
        // compromise the reliability of the hematocrit result.

        // In this calculation we use Siggaard-Andersen calculation from OSA programm
        // see http:http://www.siggaard-andersen.dk/Unit_Calcul.pas
        // in FUNCTION ctCO2Bof(pH, pCO2, T, ctHb, sO2: Double): Double;
        // ctHBE=21;
        // phiEB=ctHb/ctHBE; (phiEB=Htc);
        // Htc = ctHb/21;
        // This calculation is based on the assumption that concentration in hemoglobin
        // in erythrocytes ctHBE = 21 mmol/l if erythrocytes = 33.9 g/dl of erythrocytes
        // Htc = ctHb/(33.9*0.62058)=ctHb/21.037662

        Htc=ctHb/21;

      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics),   Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,48},{100,-46}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{20,24},{92,-22}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Hct"),
            Text(
              extent={{-92,32},{-20,-32}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctHb")}));
    end ctHb_to_Htc;

    model VenousO2CO2
      import NewBloodyMary = NewBloodyMary_testing;

      Physiolibrary.Types.RealIO.MolarFlowRateInput VO2
        "oxygen comsumption in mmol/sec" annotation (Placement(transformation(
              extent={{-96,-24},{-80,-8}}), iconTransformation(extent={{-112,74},
                {-98,88}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2
        "CO2 production (mmol/sec)" annotation (Placement(transformation(extent={
                {64,-20},{78,-6}}), iconTransformation(extent={{100,84},{114,98}})));
      Physiolibrary.Types.RealIO.FractionInput RQ "respiration quotient"
        annotation (Placement(transformation(extent={{-98,-34},{-82,-18}}),
            iconTransformation(extent={{-112,58},{-98,72}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput Q
        "Blood flow rate in m3/sec" annotation (Placement(transformation(extent={{-100,
                -44},{-84,-28}}),     iconTransformation(extent={{-112,42},{-98,
                56}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctO2a
        "total concentration of O2 in arterial blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-8.5,-9},{8.5,9}},
            rotation=0,
            origin={-92.5,-53}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={-105,17})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctCO2a
        "total concentration of CO2 in arterial blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-7.5,-7},{7.5,7}},
            rotation=0,
            origin={-92.5,-83}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={-105,-1})));
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
        "BE in (virtully) fully oxygenated blood"
                                      annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=0,
            origin={-18,10}),         iconTransformation(
            extent={{-6,-6},{6,6}},
            rotation=0,
            origin={-104,-20})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctHb(
                                              displayUnit="mmol/l")
        "Concentration of total haemoglobin in whole blood (mmol/l)"
                                       annotation (Placement(transformation(extent={{11,-11},
                {-11,11}},
            rotation=180,
            origin={-95,29}),         iconTransformation(
            extent={{-6,-6},{6,6}},
            rotation=0,
            origin={-104,-36})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctAlb(
                                              displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)"
                                       annotation (Placement(transformation(extent={{82,88},
                {70,100}}),           iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=90,
            origin={-79,-99})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctPO4(displayUnit="mmol/l")
        "concentration of total haemoglobin in whole blood (8.4)" annotation (
          Placement(transformation(extent={{96,80},{84,92}}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=90,
            origin={-54,-100})));
      Physiolibrary.Types.RealIO.ConcentrationInput cDPG
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=180,
            origin={77,77}),          iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=90,
            origin={-28,-100})));
      Physiolibrary.Types.RealIO.FractionInput FMetHb
                                       annotation (Placement(transformation(extent={{-6,-6},
                {6,6}},
            rotation=180,
            origin={92,70}),          iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=90,
            origin={-6,-100})));
      Physiolibrary.Types.RealIO.FractionInput FHbF
                                       annotation (Placement(transformation(extent={{-7,-7},
                {7,7}},
            rotation=180,
            origin={77,63}),          iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=90,
            origin={20,-100})));
      Physiolibrary.Types.RealIO.PressureInput pCO
                                       annotation (Placement(transformation(extent={{-8,-8},
                {8,8}},
            rotation=180,
            origin={90,54}),          iconTransformation(extent={{-8,-8},{8,8}},
            rotation=90,
            origin={44,-98})));
      Physiolibrary.Types.RealIO.MassConcentrationInput ctGlb(
                                           displayUnit="g/l")
        "concentration of total plasma globulins"                                    annotation (Placement(transformation(extent={{-6,-6},
                {6,6}},
            rotation=180,
            origin={76,48}),          iconTransformation(extent={{-8,-8},{8,8}},
            rotation=90,
            origin={72,-100})));
      Physiolibrary.Types.RealIO.FractionOutput sO2v
        "Oxygen hemohlobin saturation in venous blood (fraction)" annotation (
          Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={94,36}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={108,-48})));
       Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3v(displayUnit="mmol/l")
        "venous  concentration of HCO3 in mmol/l" annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={93,23}),  iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={108,-68})));
      Physiolibrary.Types.RealIO.PressureOutput pCO2v
        "pCO2 in venous blood (Pa)"
        annotation (Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=0,
            origin={40,12}),  iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={107,-5})));
      Physiolibrary.Types.RealIO.PressureOutput pO2v "pO2 in venous blood (Pa)"
        annotation (Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=0,
            origin={18,10}),  iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={107,11})));
      Physiolibrary.Types.RealIO.pHOutput pHv "pH in venous blood" annotation (
          Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=180,
            origin={-92,72}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={108,-28})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctO2v
        "total concentration of O2 in venous blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=0,
            origin={88,-26}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={107,77})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2v
        "total concentration of CO2 in venous blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={89,-39}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={107,63})));
      Physiolibrary.Types.RealIO.TemperatureInput T(start=310.15)
        "temperature (in K)"                                       annotation (Placement(transformation(extent={{-9,-9},
                {9,9}},
            rotation=0,
            origin={-95,91}),         iconTransformation(extent={{-110,-64},{-96,
                -50}})));
      VenousFick venousFick
        annotation (Placement(transformation(extent={{-72,-96},{50,0}})));
      NewBloodyMary.Parts.bloodCO2O2BEox bloodCO2O2BEox
        annotation (Placement(transformation(extent={{-68,24},{52,100}})));
       Physiolibrary.Types.RealIO.ConcentrationOutput cdO2v(displayUnit=
            "mmol/l") "venous O2 dissolved concentration" annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=180,
            origin={-93,61}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={108,48})));
       Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2v(displayUnit=
            "mmol/l") "venous O2 dissolved concentration" annotation (Placement(
            transformation(
            extent={{-7,-7},{7,7}},
            rotation=180,
            origin={-91,49}), iconTransformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={108,32})));
    equation
      connect(venousFick.Q, Q) annotation (Line(
          points={{-73.83,-36},{-92,-36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(venousFick.RQ, RQ) annotation (Line(
          points={{-73.83,-25.44},{-79.915,-25.44},{-79.915,-26},{-90,-26}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(venousFick.VO2, VO2) annotation (Line(
          points={{-73.83,-15.84},{-79.915,-15.84},{-79.915,-16},{-88,-16}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(venousFick.ctCO2v, bloodCO2O2BEox.ctCO2) annotation (Line(
          points={{54.27,-31.2},{96,-31.2},{96,4},{-33.2,4},{-33.2,23.24}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(BEox, bloodCO2O2BEox.BEox) annotation (Line(
          points={{-18,10},{-9.8,10},{-9.8,22.86}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodCO2O2BEox.pO2, pO2v) annotation (Line(
          points={{8.2,23.62},{8.2,10},{18,10}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodCO2O2BEox.pCO2, pCO2v) annotation (Line(
          points={{25,23.62},{25,12},{40,12}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(venousFick.VCO2, VCO2) annotation (Line(
          points={{54.27,-12.96},{60.135,-12.96},{60.135,-13},{71,-13}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodCO2O2BEox.sO2, sO2v) annotation (Line(
          points={{58,39.96},{76,39.96},{76,36},{94,36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodCO2O2BEox.cHCO3, cHCO3v) annotation (Line(
          points={{58,30.08},{76,30.08},{76,23},{93,23}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctGlb, bloodCO2O2BEox.ctGlb) annotation (Line(
          points={{76,48},{68,48},{68,47.56},{59.2,47.56}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(pCO, bloodCO2O2BEox.pCO) annotation (Line(
          points={{90,54},{74,54},{74,55.16},{59.2,55.16}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(FHbF, bloodCO2O2BEox.FHbF) annotation (Line(
          points={{77,63},{69.5,63},{69.5,62.76},{59.2,62.76}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(FMetHb, bloodCO2O2BEox.FMetHb) annotation (Line(
          points={{92,70},{76,70},{76,70.36},{59.2,70.36}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(cDPG, bloodCO2O2BEox.cDPG) annotation (Line(
          points={{77,77},{65.5,77},{65.5,77.96},{59.2,77.96}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctPO4, bloodCO2O2BEox.ctPO4) annotation (Line(
          points={{90,86},{74,86},{74,85.56},{59.2,85.56}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctAlb, bloodCO2O2BEox.ctAlb) annotation (Line(
          points={{76,94},{68,94},{68,93.16},{59.2,93.16}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(venousFick.ctO2v, bloodCO2O2BEox.ctO2) annotation (Line(
          points={{54.27,-22.56},{78,-22.56},{78,0},{-56,0},{-56,23.24}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctO2v, venousFick.ctO2v) annotation (Line(
          points={{88,-26},{78,-26},{78,-22.56},{54.27,-22.56}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(venousFick.ctCO2v, ctCO2v) annotation (Line(
          points={{54.27,-31.2},{76,-31.2},{76,-39},{89,-39}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodCO2O2BEox.ctHb, ctHb) annotation (Line(
          points={{-74,41.48},{-81,41.48},{-81,29},{-95,29}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodCO2O2BEox.pH, pHv) annotation (Line(
          points={{-74,72.64},{-82,72.64},{-82,72},{-92,72}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(bloodCO2O2BEox.T, T) annotation (Line(
          points={{-72.8,94.68},{-82,94.68},{-82,91},{-95,91}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(ctCO2a, venousFick.ctCO2a) annotation (Line(points={{-92.5,-83},{
              -80.25,-83},{-80.25,-57.12},{-72.61,-57.12}}, color={0,0,127}));
      connect(venousFick.ctO2a, ctO2a) annotation (Line(points={{-72.61,-46.56},{
              -78.305,-46.56},{-78.305,-53},{-92.5,-53}}, color={0,0,127}));
      connect(bloodCO2O2BEox.cdCO2, cdCO2v) annotation (Line(points={{-74,52.88},
              {-80,52.88},{-80,49},{-91,49}}, color={0,0,127}));
      connect(bloodCO2O2BEox.cdO2, cdO2v) annotation (Line(points={{-74,62},{
              -80,62},{-80,61},{-93,61}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}})),                Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-94,84},{-74,76}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="VO2"),
            Text(
              extent={{74,96},{94,88}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="VCO2"),
            Text(
              extent={{-94,68},{-74,60}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="RQ"),
            Text(
              extent={{-96,52},{-76,44}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Q"),
            Text(
              extent={{-96,20},{-76,12}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2a"),
            Text(
              extent={{-94,2},{-74,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2a"),
            Text(
              extent={{-92,-16},{-72,-24}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="BEox"),
            Text(
              extent={{-92,-34},{-72,-42}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctHb"),
            Text(
              extent={{-8,4},{8,-4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctGlb",
              origin={70,-84},
              rotation=180),
            Text(
              extent={{-8,4},{8,-4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO",
              origin={42,-84},
              rotation=180),
            Text(
              extent={{-8,4},{8,-4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={22,-84},
              rotation=180,
              textString="FHbF"),
            Text(
              extent={{-10,6},{10,-6}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={-4,-84},
              rotation=180,
              textString="FMetHb"),
            Text(
              extent={{-9,5},{9,-5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cDPG",
              origin={-29,-83},
              rotation=180),
            Text(
              extent={{-9,5},{9,-5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={-53,-85},
              rotation=180,
              textString="ctPO4"),
            Text(
              extent={{-9,5},{9,-5}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={-79,-85},
              rotation=180,
              textString="ctAlb"),
            Text(
              extent={{-8,4},{8,-4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              origin={82,14},
              rotation=180,
              textString="pO2v"),
            Text(
              extent={{70,2},{90,-8}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pCO2v"),
            Text(
              extent={{74,-60},{96,-76}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cHCO3v"),
            Text(
              extent={{76,-42},{92,-50}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="sO2v"),
            Text(
              extent={{78,-20},{94,-28}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="pHv"),
            Text(
              extent={{74,70},{96,56}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2v"),
            Text(
              extent={{76,82},{94,72}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2v"),
            Text(
              extent={{-96,-54},{-78,-64}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="T"),
            Text(
              extent={{-68,92},{58,68}},
              lineColor={28,108,200},
              textString="%name"),
            Text(
              extent={{78,52},{96,42}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdO2v"),
            Text(
              extent={{74,40},{96,26}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="cdCO2v")}));
    end VenousO2CO2;

    model VenousFick

      Physiolibrary.Types.RealIO.MolarFlowRateInput VO2
        "oxygen comsumption in mmol/sec" annotation (Placement(transformation(
              extent={{-130,62},{-90,102}}),iconTransformation(extent={{-110,60},
                {-96,74}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{-136,70},{-116,90}}), iconTransformation(extent=
               {{100,66},{114,80}})));
      Physiolibrary.Types.RealIO.FractionInput RQ "respiration quotient"
        annotation (Placement(transformation(extent={{-136,30},{-96,70}}),
            iconTransformation(extent={{-110,40},{-96,54}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput Q
        "Blood flow rate in m3/sec" annotation (Placement(transformation(extent={{-132,-6},
                {-92,34}}),           iconTransformation(extent={{-110,18},{-96,
                32}})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctO2a
        "total concentration of O2 in arterial blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-13,-13},{13,13}},
            rotation=90,
            origin={-88,-93}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={-101,3})));
      Physiolibrary.Types.RealIO.ConcentrationInput ctCO2a
        "total concentration of CO2 in arterial blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-13,-13},{13,13}},
            rotation=90,
            origin={-42,-89}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={-101,-19})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctO2v
        "total concentration of O2 in venous blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={36,-4}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={107,53})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2v
        "total concentration of CO2 in venous blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-64,-6}), iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={107,35})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput DO2
        "delivery of O2 (mol/sec)" annotation (Placement(transformation(extent={{
                70,-28},{90,-8}}), iconTransformation(extent={{100,10},{112,22}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput DCO2
        "delivery of CO2 (mol/sec)" annotation (Placement(transformation(extent={{72,-6},
                {92,14}}),          iconTransformation(extent={{100,-6},{112,6}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput RO2
        "removal of O2 (mol/sec)" annotation (Placement(transformation(extent={{76,-52},
                {96,-32}}),        iconTransformation(extent={{100,-22},{112,-10}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput RCO2
        "removal of CO2 (mol/sec)" annotation (Placement(transformation(extent={{64,14},
                {84,34}}),         iconTransformation(extent={{100,-38},{112,-26}})));
      Physiolibrary.Types.RealIO.FractionOutput FextrO2 "O2 extraction ratio"
        annotation (Placement(transformation(extent={{36,-70},{56,-50}}),
            iconTransformation(extent={{100,-58},{112,-46}})));
      Physiolibrary.Types.RealIO.FractionOutput FaddCO2 "CO2 addition ratio"
        annotation (Placement(transformation(extent={{54,-84},{74,-64}}),
            iconTransformation(extent={{100,-78},{112,-66}})));

    equation
      //Reapiration quatient
      RQ=VCO2/VO2;
      //Fick equations
      VO2=Q*(ctO2a-ctO2v);
      VCO2=Q*(ctCO2v-ctCO2a);
      //Delivery of O2 and CO2
      DO2=Q*ctO2a;
      DCO2=Q*ctCO2a;
      //Removal of O2 and CO2
      RO2=Q*ctO2v;
      RCO2=Q*ctCO2v;
      //O2 extraction ratio
      FextrO2=(ctO2a-ctO2v)/ctO2a;
      //CO2 addition ratio
      FaddCO2=(ctCO2v-ctCO2a)/ctCO2v;

      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),      graphics), Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics={
            Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-92,70},{-72,62}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="VO2"),
            Text(
              extent={{74,76},{94,68}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="VCO2"),
            Text(
              extent={{-92,50},{-72,42}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="RQ"),
            Text(
              extent={{-94,28},{-74,20}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Q"),
            Text(
              extent={{-90,6},{-70,-2}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2a"),
            Text(
              extent={{-90,-16},{-70,-24}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2a"),
            Text(
              extent={{72,40},{90,30}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctCO2v"),
            Text(
              extent={{74,58},{90,48}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="ctO2v"),
            Text(
              extent={{74,20},{92,12}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="DO2"),
            Text(
              extent={{74,4},{92,-4}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="DCO2"),
            Text(
              extent={{74,-12},{92,-20}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="RO2"),
            Text(
              extent={{74,-28},{92,-36}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="RCO2"),
            Text(
              extent={{72,-48},{94,-56}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FextrO2"),
            Text(
              extent={{70,-66},{94,-78}},
              lineColor={0,0,255},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="FaddCO2"),
            Text(
              extent={{-44,86},{34,48}},
              lineColor={0,0,255},
              textString="%name")}));
    end VenousFick;

    model Albumin
        extends BufferInterface;
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         tAlb(displayUnit="mmol/l")
        annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));

      Physiolibrary.Types.MassConcentration tAlb_mass;
      parameter Physiolibrary.Types.MolarMass Alb_MolarMass(displayUnit="g/mol") = 66.463;
    equation
      tAlb_mass=tAlb*Alb_MolarMass;  //kg/m3 = g/l
      y = - tAlb_mass * ( 0.123 * pH - 0.631) * Modelica.Constants.F;

    //where [ Albx- ] is in mEq / L and [ Albumin ] is in g / dL. Therefore, at pH 7.40, the charge contributed by 4.40 g / dL of albumin is approximately -12.3 mEq / L.

      annotation (Documentation(info="<html>
<p>http://www.figge-fencl.org/titrationcurve.html</p>
<p>:</p>
<p><br/>A least-squares linear regression fit to the Figge-Fencl quantitative physicochemical model (version 3.0) over the pH range of 6.90 to 7.90 yields the following equation for the charge displayed by albumin:</p>
<p><br/> [ Albx- ] = -10 x [ Albumin ] x ( 0.123 x pH - 0.631 );</p>
<p><br/> where [ Albx- ] is in mEq / L and [ Albumin ] is in g / dL. Therefore, at pH 7.40, the charge contributed by 4.40 g / dL of albumin is approximately -12.3 mEq / L.</p>
</html>"),
       Icon(graphics={Text(
              extent={{-79,-27},{79,27}},
              lineColor={0,0,255},
              origin={73,19},
              rotation=90,
              textString="Alb")}));
    end Albumin;

    model Globulins
        extends BufferInterface;
      Physiolibrary.Types.RealIO.MassConcentrationInput
                                         ctGlb
        annotation (Placement(transformation(extent={{-120,-40},{-80,0}})));
    equation
    //  y=-ctGlb*(0.075/0.81)*(pH-3.6);  //sklon -0.075/0.81 so siggaarda, pri 7.4 chcem -10 aby to pokrilo nastavene SID u Colemana
        y=-ctGlb*((0.075/0.77)*(pH-7.4) + 2.5/28)* Modelica.Constants.F; //chcem naboj -2.5 mEq/l pre normalnu koncentraciu 28 mg/l a pH=7.4
    //  y=-ctGlb*((0.075/0.77)*(pH-7.4) + 15.6/28)* Modelica.Constants.F; //chcem naboj -15.6 mEq/l pre normalnu koncentraciu 28 mg/l a pH=7.4
      annotation (Icon(graphics={Text(
              extent={{-79,-27},{79,27}},
              lineColor={0,0,255},
              origin={73,19},
              rotation=90,
              textString="Glb")}));
    end Globulins;

    model Phosphates
      extends BufferInterface;
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         tPO4
        annotation (Placement(transformation(extent={{-120,-20},{-80,20}})));

        parameter Real pKa1=2.1;
      parameter Real pKa2=6.8;
      parameter Real pKa3=12.7;

    equation
       y = - tPO4*(10^(pKa2-pH)+2+3*10^(pH-pKa3))/(10^(pKa1+pKa2-2*pH)+10^(pKa2-pH)+1+10^(pH-pKa3))* Modelica.Constants.F;

      annotation ( Documentation(info="<html>
<p><b><font style=\"font-size: 12pt; \"><a name=\"internal-source-marker_0.47659245471196454\">C</a>harge for phosphates:</b></p>
<p><br/>pKa1=2.1, pKa2=6.8, pKa3=12.7 &nbsp;&nbsp;(wiki: &nbsp;2.12, 7.21, 12.67 at 25&deg;C)</p>
<p><br/>tPO4 = [H3PO4] + [H2PO4] + [HPO4] + [PO4]</p>
<p><br/>charge(tPO4,pH) = [H2PO4] + 2[HPO4] + 3[PO4]</p>
<p><br/>[H2PO4] / [H3PO4] = 10^(pH-pKa1) </p>
<p><br/>[HPO4] / [H2PO4] = 10^(pH-pKa2) </p>
<p><br/>[PO4] / [HPO4] = 10^(pH-pKa3) </p>
</html>"),
        Icon(graphics={Text(
              extent={{-79,-27},{79,27}},
              lineColor={0,0,255},
              origin={73,19},
              rotation=90,
              textString="PO4")}));
    end Phosphates;

    model Bicarbonate
      extends BufferInterface;
      Physiolibrary.Types.RealIO.PressureInput
                                         pCO2(displayUnit="mmHg") annotation (Placement(transformation(extent=
               {{-120,-20},{-80,20}}), iconTransformation(extent={{-120,-20},{-80,20}})));
      Physiolibrary.Types.RealIO.TemperatureInput
                                         T(displayUnit="degC") annotation (Placement(transformation(extent={{-120,
                -20},{-80,20}}), iconTransformation(extent={{-120,-60},{-80,-20}})));

        Real pK;
      Real aCO2;
      Physiolibrary.Types.Concentration cdCO2;

      Physiolibrary.Types.VolumeDensityOfCharge y2;
    equation

      //Henderson-Hasselbalch equation:
      pK = 6.1 + (-0.0026)*(T-310.15);
      aCO2 = 0.00023 * 10^(-0.0092*(T-310.15)); //solubility depends on temperature
      cdCO2 = aCO2*pCO2;
      y = -cdCO2*10^(pH-pK)* Modelica.Constants.F;  //bicarbonate

      y2 = -cdCO2*10^(pH-6.35)* Modelica.Constants.F;  //bicarbonate

      annotation (Icon(graphics={Text(
              extent={{-79,-27},{79,27}},
              lineColor={0,0,255},
              origin={75,19},
              rotation=90,
              textString="HCO3")}));
    end Bicarbonate;

    model Haemoglobin
      extends BufferInterface;
     Physiolibrary.Types.RealIO.ConcentrationInput
                                         tHb_E
        "total concentration of haemoglobin in erythrocytes"
        annotation (Placement(transformation(extent={{-120,0},{-80,40}})));
      Physiolibrary.Types.RealIO.FractionInput
                                         sO2 "saturation of haemoglobin by O2"
        annotation (Placement(transformation(extent={{-120,-40},{-80,0}})));
      Physiolibrary.Types.RealIO.PressureInput
                                         pCO2 "partial pressure of CO2"
        annotation (Placement(transformation(extent={{-120,-80},{-80,-40}})));
      parameter Real betaOxyHb = 3.1
        "buffer value for oxygenated Hb without CO2";
      parameter Real betaDeoxyHb = 3.3 "buffer value for Hb without O2 and CO2";
      parameter Real pIo=7.13 "isoelectric pH for oxygenated Hb without CO2";
      parameter Real pIr=7.32 "isoelectric pH for Hb without O2 and CO2";

      parameter Real pKzO=8.08
        "pKa for NH3+ end of oxygenated haemoglobin chain";
      parameter Real pKzR=7.14
        "pKa for NH3+ end of deoxygenated haemoglobin chain";
      parameter Real pKcO=4.62
        "10^(pH-pKcO) is the dissociation constatnt for O2HbNH2 + CO2 <-> O2HbNHCOO- + H+ ";
      parameter Real pKcR=4.62
        "10^(pH-pKcR) is the dissociation constatnt for HbNH2 + CO2 <-> HbNHCOO- + H+ ";

      parameter Real KcR=10^(-pKcR);
      parameter Real KzR=10^(-pKzR);
      parameter Real KcO=10^(-pKcO);
      parameter Real KzO=10^(-pKzO);

      Real carbaminohaemoglobin;
      Real sCO2;
      Real zOxyHb;
      Real zDeoxyHb;
      Real zOxyCarbaminoHb;
      Real zDeoxyCarbaminoHb;
      Real H=10^(-pH);
      Real aCO2;
      Real cdCO2;
      Physiolibrary.Types.RealIO.TemperatureInput
                                         T
        annotation (Placement(transformation(extent={{-120,-120},{-80,-80}})));
    equation
    aCO2 = 0.23 * 10^(-0.0092*(T-37)); //solubility depends on temperature
    cdCO2 = aCO2*pCO2*0.001; //from mmol to mol

    carbaminohaemoglobin = tHb_E*cdCO2*( ( H*H*((1-sO2)/(KzO*KcO)+sO2/(KzR*KcR)) + H*((1-sO2)/KcO + sO2/KcR) + cdCO2) / ((H*H/(KzR*KcR) + H/KcR + cdCO2)*(H*H/(KzO*KcO) + H/KcO + cdCO2))); //, where cdCO2=free disolved CO2 concentration in erythrocytes in mol/l
    sCO2 = carbaminohaemoglobin/ tHb_E;

    y = -tHb_E*(sO2*(1-sCO2)*zOxyHb + (1-sO2)*(1-sCO2)*zDeoxyHb + sO2*sCO2*zOxyCarbaminoHb + (1-sO2)*sCO2*zDeoxyCarbaminoHb)* Modelica.Constants.F;

    zOxyHb = betaOxyHb * (pH-pIo);
    zDeoxyHb = betaDeoxyHb * (pH-pIr);
    zOxyCarbaminoHb = zOxyHb + (1+2*10^(pKzO-pH))/(1+10^(pKzO-pH)); //= zOxyHb + -[O2HbNH2]/([O2HbNH2]+[O2HbNH3+]) + -2[O2HbNH3+]/([O2HbNH2]+[O2HbNH3+]), where pKZO=8.08
    zDeoxyCarbaminoHb = zDeoxyHb + (1+2*10^(pKzR-pH))/(1+10^(pKzR-pH)); //betaOxyHb(pH) * (pH-pIO) + -[HbNH2]/([HbNH2]+[HbNH3+]) + -2[HbNH3+]/([HbNH2]+[HbNH3+]), where pKZR=7.14
      annotation (Icon(graphics={Text(
              extent={{-79,-27},{79,27}},
              lineColor={0,0,255},
              origin={73,19},
              rotation=90,
              textString="Hb")}));
    end Haemoglobin;

    model OtherRBCBuffers
      extends BufferInterface;

      parameter Physiolibrary.Types.Concentration NCharge=9 "charge at pH=7.4";

    equation
       y = - NCharge * Modelica.Constants.F;

      annotation ( Documentation(info="<html>
<p><b><font style=\"font-size: 12pt; \"><a name=\"internal-source-marker_0.47659245471196454\">C</a>harge for phosphates:</b></p>
<p><br/>pKa1=2.1, pKa2=6.8, pKa3=12.7 &nbsp;&nbsp;(wiki: &nbsp;2.12, 7.21, 12.67 at 25&deg;C)</p>
<p><br/>tPO4 = [H3PO4] + [H2PO4] + [HPO4] + [PO4]</p>
<p><br/>charge(tPO4,pH) = [H2PO4] + 2[HPO4] + 3[PO4]</p>
<p><br/>[H2PO4] / [H3PO4] = 10^(pH-pKa1) </p>
<p><br/>[HPO4] / [H2PO4] = 10^(pH-pKa2) </p>
<p><br/>[PO4] / [HPO4] = 10^(pH-pKa3) </p>
</html>"),
        Icon(graphics={Text(
              extent={{-79,-27},{79,27}},
              lineColor={0,0,255},
              origin={73,19},
              rotation=90,
              textString="Others")}));
    end OtherRBCBuffers;

    partial model BufferInterface

      Physiolibrary.Types.RealIO.pHInput pH
        annotation (Placement(transformation(extent={{-120,40},{-80,80}})));
      Physiolibrary.Types.RealIO.VolumeDensityOfChargeOutput
                                          y(displayUnit="mEq/l")
        "charge of buffer"                                                      annotation (Placement(
            transformation(extent={{80,-100},{120,-60}}), iconTransformation(extent=
               {{80,-100},{120,-60}})));
      annotation ( Icon(graphics={Rectangle(extent={{-100,
                  100},{100,-100}}, lineColor={0,0,255})}));
    end BufferInterface;

    model TestToolVenousBlood

      VenousO2CO2 VenousBlood
        annotation (Placement(transformation(extent={{-36,-68},{38,10}})));
      bloodPO2PCO2 ArterialBlood
        annotation (Placement(transformation(extent={{-60,34},{2,94}})));
      Physiolibrary.Types.Constants.MassConcentrationConst ctGlb(k(displayUnit=
              "kg/m3") = 2.93)
        annotation (Placement(transformation(extent={{44,26},{34,34}})));
      Physiolibrary.Types.Constants.PressureConst pCO(k=2.6664477483)
        annotation (Placement(transformation(extent={{64,34},{54,44}})));
    Physiolibrary.Types.Constants.FractionConst FHbF(k=0.005)
      annotation (Placement(transformation(extent={{72,46},{60,54}})));
    Physiolibrary.Types.Constants.FractionConst FMetHb(k=0.005)
      annotation (Placement(transformation(extent={{50,60},{38,68}})));
    Physiolibrary.Types.Constants.ConcentrationConst DPG(k=5.4)
      annotation (Placement(transformation(extent={{76,66},{66,74}})));
      Physiolibrary.Types.RealIO.PressureInput PaO2 annotation (Placement(
            transformation(
            extent={{-5,-5},{5,5}},
            rotation=90,
            origin={-21,19}), iconTransformation(extent={{-120,80},{-100,100}})));
      Physiolibrary.Types.RealIO.PressureInput PaCO2 annotation (Placement(
            transformation(
            extent={{-5,-5},{5,5}},
            rotation=90,
            origin={-9,19}), iconTransformation(extent={{-120,60},{-100,80}})));
      Physiolibrary.Types.RealIO.ConcentrationInput BEox annotation (Placement(
            transformation(extent={{-92,18},{-76,34}}), iconTransformation(extent={{
                -120,40},{-100,60}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cHb annotation (Placement(
            transformation(extent={{-92,36},{-72,56}}), iconTransformation(extent={{
                -120,-60},{-100,-40}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cAlb annotation (Placement(
            transformation(extent={{-64,-102},{-48,-86}}), iconTransformation(
              extent={{-120,-80},{-100,-60}})));
      Physiolibrary.Types.RealIO.ConcentrationInput cPi annotation (Placement(
            transformation(extent={{-38,-96},{-22,-80}}), iconTransformation(extent=
               {{-120,-100},{-100,-80}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput QCO annotation (Placement(
            transformation(extent={{-88,-20},{-72,-4}}), iconTransformation(extent={
                {-120,20},{-100,40}})));
      Physiolibrary.Types.RealIO.MolarFlowRateInput VO2 annotation (Placement(
            transformation(extent={{-92,-6},{-76,10}}), iconTransformation(extent={{
                -120,0},{-100,20}})));
      Physiolibrary.Types.RealIO.FractionInput RQ annotation (Placement(
            transformation(extent={{-102,-12},{-84,6}}), iconTransformation(extent={
                {-120,-20},{-100,0}})));
      Physiolibrary.Types.RealIO.TemperatureInput bloodTemp annotation (Placement(
            transformation(extent={{-124,78},{-102,100}}), iconTransformation(
              extent={{-120,-40},{-100,-20}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput VCO2 annotation (Placement(
            transformation(extent={{100,8},{120,28}}),  iconTransformation(extent={{100,8},
                {120,28}})));
      Physiolibrary.Types.RealIO.pHOutput pH annotation (Placement(transformation(
              extent={{100,-68},{120,-48}}),
                                           iconTransformation(extent={{100,-68},
                {120,-48}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdO2
        "concentration of dissolved O2 in plasma" annotation (Placement(
            transformation(
            extent={{-6,-6},{6,6}},
            rotation=270,
            origin={-58,18}), iconTransformation(extent={{100,-20},{120,0}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2
        "concentration of dissolved CO2 in plasma" annotation (Placement(
            transformation(
            extent={{-5,-5},{5,5}},
            rotation=270,
            origin={-49,19}), iconTransformation(extent={{100,-44},{120,-24}})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctO2v
        "total concentration of O2 in venous blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=0,
            origin={56,2}),   iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={107,85})));
      Physiolibrary.Types.RealIO.ConcentrationOutput ctCO2v
        "total concentration of CO2 in venous blood (in mmol/l)" annotation (
          Placement(transformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={61,-5}),  iconTransformation(
            extent={{-7,-7},{7,7}},
            rotation=0,
            origin={107,71})));
    equation
      //O2.conc = VenousBlood.ctO2v;
     // CO2.conc = VenousBlood.ctCO2v;

      //O2.q = VenousBlood.ctO2v*QCO;
      //CO2.q = VenousBlood.ctCO2v*QCO;

      connect(DPG.y, ArterialBlood.cDPG) annotation (Line(points={{64.75,70},{
              30,70},{30,76},{5.1,76}}, color={0,0,127}));
      connect(DPG.y, VenousBlood.cDPG) annotation (Line(points={{64.75,70},{64,
              70},{64,72},{64,76},{84,76},{84,-90},{-9.36,-90},{-9.36,-68}},
            color={0,0,127}));
      connect(FMetHb.y, ArterialBlood.FMetHb) annotation (Line(points={{36.5,64},
              {22,64},{22,70},{5.1,70}}, color={0,0,127}));
      connect(FMetHb.y, VenousBlood.FMetHb) annotation (Line(points={{36.5,64},
              {36.5,56},{82,56},{82,48},{82,-102},{-1.22,-102},{-1.22,-68}},
                                                                         color=
              {0,0,127}));
      connect(FHbF.y, ArterialBlood.FHbF) annotation (Line(points={{58.5,50},{
              32,50},{32,60},{10,60},{10,64},{5.1,64}}, color={0,0,127}));
      connect(FHbF.y, VenousBlood.FHbF) annotation (Line(points={{58.5,50},{54,
              50},{54,54},{80,54},{80,-94},{8.4,-94},{8.4,-68}}, color={0,0,127}));
      connect(pCO.y, ArterialBlood.pCO) annotation (Line(points={{52.75,39},{
              26.375,39},{26.375,58},{5.1,58}}, color={0,0,127}));
      connect(pCO.y, VenousBlood.pCO) annotation (Line(points={{52.75,39},{
              52.75,32},{78,32},{78,-84},{17.28,-84},{17.28,-67.22}}, color={0,
              0,127}));
      connect(ctGlb.y, ArterialBlood.ctGlb) annotation (Line(points={{32.75,30},
              {20,30},{20,52},{5.1,52}}, color={0,0,127}));
      connect(ctGlb.y, VenousBlood.ctGlb) annotation (Line(points={{32.75,30},{
              32,30},{32,24},{32,22},{76,22},{76,-82},{27.64,-82},{27.64,-68}},
            color={0,0,127}));
      connect(ArterialBlood.ctO2, VenousBlood.ctO2a) annotation (Line(points={{-40.78,
              31.6},{-40.78,-22.37},{-37.85,-22.37}},        color={0,0,127}));
      connect(ArterialBlood.ctCO2, VenousBlood.ctCO2a) annotation (Line(points={{-33.96,
              31.6},{-33.96,10},{-56,10},{-56,-29.39},{-37.85,-29.39}},
            color={0,0,127}));
      connect(VenousBlood.T, bloodTemp) annotation (Line(points={{-37.11,-51.23},{-98.555,
              -51.23},{-98.555,89},{-113,89}}, color={0,0,127}));
      connect(ArterialBlood.T, bloodTemp) annotation (Line(points={{-62.48,87.4},{-98,
              87.4},{-98,89},{-113,89}}, color={0,0,127}));
      connect(ArterialBlood.ctHb, cHb)
        annotation (Line(points={{-63.1,46},{-82,46}}, color={0,0,127}));
      connect(VenousBlood.ctHb, cHb) annotation (Line(points={{-37.48,-43.04},{-68,-43.04},
              {-68,46},{-82,46}}, color={0,0,127}));
      connect(RQ, VenousBlood.RQ) annotation (Line(points={{-93,-3},{-38.5,-3},{-38.5,
              -3.65},{-37.85,-3.65}}, color={0,0,127}));
      connect(VenousBlood.VO2, VO2) annotation (Line(points={{-37.85,2.59},{-57.925,
              2.59},{-57.925,2},{-84,2}}, color={0,0,127}));
      connect(BEox, ArterialBlood.BEox) annotation (Line(points={{-84,26},{
              -24.35,26},{-24.35,33.7}},
                            color={0,0,127}));
      connect(VenousBlood.BEox, ArterialBlood.BEox) annotation (Line(points={{-37.48,
              -36.8},{-64,-36.8},{-64,26},{-24.35,26},{-24.35,33.7}},
                                                                    color={0,0,127}));
      connect(VenousBlood.Q, QCO) annotation (Line(points={{-37.85,-9.89},{-52.925,-9.89},
              {-52.925,-12},{-80,-12}}, color={0,0,127}));
      connect(ArterialBlood.pCO2, PaCO2) annotation (Line(points={{-9.78,34},{
              -9.78,30},{-9,30},{-9,19}},
                                    color={0,0,127}));
      connect(PaO2, ArterialBlood.pO2) annotation (Line(points={{-21,19},{-21,
              25.5},{-17.84,25.5},{-17.84,34}},
                                            color={0,0,127}));
      connect(cPi, VenousBlood.ctPO4) annotation (Line(points={{-30,-88},{-24,-88},{
              -18.98,-88},{-18.98,-68}}, color={0,0,127}));
      connect(cPi, ArterialBlood.ctPO4) annotation (Line(points={{-30,-88},{-26,-88},
              {-14,-88},{-14,-92},{86,-92},{86,82},{5.1,82}}, color={0,0,127}));
      connect(cAlb, VenousBlood.ctAlb) annotation (Line(points={{-56,-94},{-36,-94},
              {-36,-74},{-28.23,-74},{-28.23,-67.61}}, color={0,0,127}));
      connect(ArterialBlood.ctAlb, VenousBlood.ctAlb) annotation (Line(points={{5.1,
              88},{5.1,90},{88,90},{88,-98},{-36,-98},{-36,-74},{-28.23,-74},{-28.23,
              -67.61}}, color={0,0,127}));
      connect(VenousBlood.pHv, pH) annotation (Line(points={{40.96,-39.92},{
              49.48,-39.92},{49.48,-58},{110,-58}},
                                    color={0,0,127}));
      connect(VenousBlood.VCO2, VCO2) annotation (Line(points={{40.59,6.49},{
              47.295,6.49},{47.295,18},{110,18}},
                                           color={0,0,127}));
      connect(ArterialBlood.cdCO2, cdCO2) annotation (Line(points={{-49.46,31.6},
              {-49.46,27.8},{-49,27.8},{-49,19}}, color={0,0,127}));
      connect(ArterialBlood.cdO2, cdO2) annotation (Line(points={{-57.52,31.6},
              {-57.52,26.8},{-58,26.8},{-58,18}}, color={0,0,127}));
      connect(VenousBlood.ctO2v, ctO2v) annotation (Line(points={{40.59,1.03},{46.295,
              1.03},{46.295,2},{56,2}}, color={0,0,127}));
      connect(VenousBlood.ctCO2v, ctCO2v) annotation (Line(points={{40.59,-4.43},{49.295,
              -4.43},{49.295,-5},{61,-5}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}})), Icon(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}}), graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={128,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-68,78},{84,34}},
              lineColor={28,108,200},
              textString="Venous Blood 
Test Tool")}));
    end TestToolVenousBlood;

    model AlveolarVentilation
      extends Physiolibrary.Icons.Lungs;
    //  parameter Real EnvironmentPressure(final displayUnit="mmHg");
    //  parameter Real EnvironmentTemperature(final displayUnit="degC");
    Physiolibrary.Chemical.Interfaces.ChemicalPort_b expired annotation (
        extent=[-10,-110; 10,-90], Placement(transformation(extent={{68,18},{
              88,38}}), iconTransformation(extent={{90,70},{110,90}})));

    Physiolibrary.Chemical.Interfaces.ChemicalPort_a inspired annotation (
        Placement(transformation(extent={{-82,18},{-62,38}}),
          iconTransformation(extent={{-110,70},{-90,90}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput AlveolarVentilation_Env
      annotation (Placement(transformation(extent={{-14,44},{0,58}}),
          iconTransformation(
          extent={{-20,-20},{20,20}},
          rotation=180,
          origin={80,20})));
    Physiolibrary.Chemical.Components.Stream solventFlowPump(q_out(conc(start=
             0.13686)), useSolutionFlowInput=true)
      annotation (Placement(transformation(extent={{-2,18},{18,38}})));
    Physiolibrary.Chemical.Components.Dilution dilution(useDilutionInput=true)
                                                        annotation (Placement(
          transformation(
          extent={{-8,8},{12,-12}},
          origin={-26,30})));
    Physiolibrary.Chemical.Components.Stream solventFlowPump1(
        useSolutionFlowInput=true)
      annotation (Placement(transformation(extent={{44,18},{64,38}})));
    Physiolibrary.Chemical.Interfaces.ChemicalPort_b   alveolar annotation (
        extent=[-10,-110; 10,-90], Placement(transformation(extent={{20,-14},
              {40,6}}), iconTransformation(extent={{-8,-110},{12,-90}})));
      Physiolibrary.Types.RealIO.FractionInput BronchiDilution
                                             annotation (Placement(
            transformation(
            extent={{-10.0004,-10.0004},{4.00021,4.00021}},
            origin={-70.0002,9.9998}),
                               iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=180,
            origin={80,-40})));
    equation

      connect(solventFlowPump1.q_out, expired) annotation (Line(
          points={{64,28},{78,28}},
          color={200,0,0},
          smooth=Smooth.None,
          thickness=1));
      connect(solventFlowPump.q_out, solventFlowPump1.q_in) annotation (Line(
          points={{18,28},{44,28}},
          color={200,0,0},
          smooth=Smooth.None,
          thickness=1));

    connect(AlveolarVentilation_Env, solventFlowPump.solutionFlow)
      annotation (Line(
        points={{-7,51},{8,51},{8,35}},
        color={0,0,127},
        smooth=Smooth.None));
    connect(AlveolarVentilation_Env, solventFlowPump1.solutionFlow)
      annotation (Line(
        points={{-7,51},{54,51},{54,35}},
        color={0,0,127},
        smooth=Smooth.None));
      connect(BronchiDilution, dilution.dilution) annotation (Line(
          points={{-73.0003,6.9997},{-46,6.9997},{-46,20},{-34,20}},
          color={0,0,127},
          smooth=Smooth.None));
    connect(dilution.q_out, solventFlowPump.q_in) annotation (Line(
        points={{-14,28},{-2,28}},
        color={200,0,0},
        thickness=1,
        smooth=Smooth.None));
    connect(inspired, dilution.q_in) annotation (Line(
        points={{-72,28},{-34,28}},
        color={200,0,0},
        thickness=1,
        smooth=Smooth.None));
    connect(solventFlowPump.q_out, alveolar) annotation (Line(
        points={{18,28},{36,28},{36,-4},{30,-4}},
        color={107,45,134},
        thickness=1,
        smooth=Smooth.None));
     annotation (
        Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},{
                100,100}}), graphics={Polygon(
              points={{-38,93},{40,80},{-38,66},{-38,93}},
              lineColor={0,0,127},
              fillColor={255,255,255},
              fillPattern=FillPattern.Solid), Text(
              extent={{-92,-90},{84,-60}},
              textString="%name",
              lineColor={0,0,255})}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end AlveolarVentilation;

    model fractToPressure

      Physiolibrary.Types.RealIO.FractionInput fraction annotation (Placement(
            transformation(extent={{-140,-20},{-100,20}}), iconTransformation(
              extent={{-140,-20},{-100,20}})));
      Physiolibrary.Types.RealIO.PressureInput pressure annotation (Placement(
            transformation(extent={{-56,42},{-16,82}}), iconTransformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={0,60})));
      Physiolibrary.Types.RealIO.PressureOutput partialPressure annotation (
          Placement(transformation(extent={{46,-72},{66,-52}}), iconTransformation(
              extent={{100,-20},{142,22}})));
    equation
       partialPressure = pressure * fraction;

        annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={Rectangle(
              extent={{-100,40},{100,-40}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-100,30},{98,-28}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="%name")}));
    end fractToPressure;

    model GasPartialPressure

      Physiolibrary.Types.RealIO.PressureInput pressure annotation (Placement(
            transformation(extent={{-140,42},{-100,82}}),   iconTransformation(
              extent={{-140,42},{-100,82}})));
      Physiolibrary.Types.RealIO.PressureOutput partialPressure annotation (
          Placement(transformation(extent={{94,-2},{114,18}}), iconTransformation(
              extent={{100,-15},{130,15}})));
      Physiolibrary.Types.RealIO.FractionInput gasFractionConcentration annotation (
         Placement(transformation(extent={{-140,-70},{-100,-30}}),
                                                                 iconTransformation(
              extent={{-140,-70},{-100,-30}})));
    equation
      partialPressure = pressure * gasFractionConcentration;
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),
                             graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-102,42},{102,-30}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="%name")}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end GasPartialPressure;

    model VentilationO2CO2
        extends Physiolibrary.Icons.Lungs;

      Physiolibrary.Types.RealIO.VolumeInput tidalVolume annotation (Placement(
            transformation(extent={{38,80},{22,96}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-50,90})));
      Physiolibrary.Types.RealIO.VolumeInput deadSpace annotation (Placement(
            transformation(extent={{48,72},{32,87}}), iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-10,90})));
      Physiolibrary.Types.RealIO.FrequencyInput respiratoryRate annotation (
          Placement(transformation(extent={{58,62},{42,78}}),
            iconTransformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={30,90})));
      Physiolibrary.Types.RealIO.PressureInput barometricPressure annotation (
          Placement(transformation(extent={{-100,66},{-84,82}}),
            iconTransformation(extent={{-100,80},{-80,100}})));
      Physiolibrary.Types.RealIO.TemperatureInput ambientTemperature
        annotation (Placement(transformation(extent={{-84,80},{-68,96}}),
            iconTransformation(extent={{-100,-18},{-80,2}})));
      Physiolibrary.Types.RealIO.TemperatureInput bodyTemperature annotation (
          Placement(transformation(extent={{90,52},{74,68}}),
            iconTransformation(extent={{-100,-44},{-80,-24}})));
      Physiolibrary.Types.RealIO.FractionInput airHumidity annotation (
          Placement(transformation(extent={{-44,52},{-28,68}}),
            iconTransformation(extent={{-100,58},{-80,78}})));
      Physiolibrary.Types.RealIO.FractionInput FiO2 annotation (Placement(
            transformation(extent={{-104,48},{-86,66}}), iconTransformation(
              extent={{-100,36},{-80,56}})));
      Physiolibrary.Types.RealIO.FractionInput FiCO2 annotation (Placement(
            transformation(extent={{-56,23},{-36,43}}), iconTransformation(
              extent={{-100,10},{-80,30}})));
      Parts.AlveolarVentilation_BTPS alveolarVentilation_BTPS
        annotation (Placement(transformation(extent={{-24,42},{18,88}})));
      Physiolibrary.Chemical.Components.GasSolubility O2gasSolubility(
        useHeatPort=true,
        kH_T0(displayUnit="(mmol/l)/kPa at 37degC") = 0.02707666941329,
        C=1700,
        solubilityRateCoef(displayUnit="ml/min") = 0.01,
        T0=310.15,
        solventFraction=1)
        annotation (Placement(transformation(extent={{-70,-60},{-50,-40}})));
      Physiolibrary.Chemical.Components.GasSolubility gasSolubility1(
        useHeatPort=true,
        kH_T0(displayUnit="(mmol/l)/(mmol/l)") = 0.604,
        C=2400,
        solubilityRateCoef(displayUnit="ml/min") = 0.1,
        solventFraction=1)
        annotation (Placement(transformation(extent={{50,-60},{70,-40}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a O2 annotation (Placement(
            transformation(extent={{-70,-94},{-50,-74}}), iconTransformation(
              extent={{-70,-94},{-50,-74}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a CO2 annotation (
          Placement(transformation(extent={{50,-94},{70,-74}}),
            iconTransformation(extent={{20,-100},{40,-80}})));
      Physiolibrary.Chemical.Sources.UnlimitedGasStorage airO2(useHeatPort=true,
          usePartialPressureInput=true)
        annotation (Placement(transformation(extent={{-92,16},{-78,30}})));
      Parts.AlveolarVentilation O2alveolarVentilation
        annotation (Placement(transformation(extent={{-76,-22},{-42,12}})));
      Parts.AlveolarVentilation CO2alveolarVentilation
        annotation (Placement(transformation(extent={{42,-22},{76,12}})));
      Physiolibrary.Thermal.Sources.UnlimitedHeat alveolusHeat(
          useTemperatureInput=true)
        annotation (Placement(transformation(extent={{-4,-56},{8,-44}})));
      Parts.GasPartialPressure PiO2 annotation (Placement(
            transformation(
            extent={{-7,-6},{7,6}},
            rotation=0,
            origin={-69,60})));
      Parts.GasPartialPressure PiCO2
        annotation (Placement(transformation(extent={{-30,30},{-16,42}})));
      Physiolibrary.Chemical.Sources.UnlimitedGasStorage airCO2(useHeatPort=
            true, usePartialPressureInput=true)
        annotation (Placement(transformation(extent={{18,18},{32,32}})));
      Physiolibrary.Thermal.Sources.UnlimitedHeat environment(
          useTemperatureInput=true) annotation (Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=90,
            origin={-86,6})));
      Physiolibrary.Thermal.Sources.UnlimitedHeat environment1(
          useTemperatureInput=true) annotation (Placement(transformation(
            extent={{-6,-6},{6,6}},
            rotation=90,
            origin={24,8})));
    equation
      connect(alveolarVentilation_BTPS.TidalVolume, tidalVolume)
        annotation (Line(points={{13.8,88},{30,88}},         color={0,0,127}));
      connect(respiratoryRate, alveolarVentilation_BTPS.RespRate) annotation (
          Line(points={{50,70},{13.8,70},{13.8,69.6}}, color={0,0,127}));
      connect(bodyTemperature, alveolarVentilation_BTPS.core_T) annotation (
          Line(points={{82,60},{13.8,60},{13.8,60.4}}, color={0,0,127}));
      connect(alveolarVentilation_BTPS.DeadSpace, deadSpace) annotation (Line(
            points={{13.8,78.8},{17.9,78.8},{17.9,79.5},{40,79.5}}, color={0,0,
              127}));
      connect(ambientTemperature, alveolarVentilation_BTPS.AmbientTemperature)
        annotation (Line(points={{-76,88},{-76,88},{-19.8,88}}, color={0,0,127}));
      connect(barometricPressure, alveolarVentilation_BTPS.EnvironmentPressure)
        annotation (Line(points={{-92,74},{-19.8,74},{-19.8,74.2}}, color={0,0,
              127}));
      connect(alveolarVentilation_BTPS.EnvironmentRelativeHumidity, airHumidity)
        annotation (Line(points={{-19.8,60.4},{-23.9,60.4},{-23.9,60},{-36,60}},
            color={0,0,127}));
      connect(O2gasSolubility.q_in, O2) annotation (Line(
          points={{-60,-58},{-60,-58},{-60,-84}},
          color={107,45,134},
          thickness=1));
      connect(gasSolubility1.q_in, CO2) annotation (Line(
          points={{60,-58},{60,-58},{60,-84}},
          color={107,45,134},
          thickness=1));
      connect(alveolusHeat.temperature, bodyTemperature) annotation (Line(
            points={{-4,-50},{-10,-50},{-10,32},{50,32},{50,60},{82,60}}, color=
             {0,0,127}));
      connect(alveolusHeat.port, gasSolubility1.heatPort) annotation (Line(
          points={{8,-50},{34,-50},{60,-50}},
          color={191,0,0},
          thickness=1));
      connect(O2alveolarVentilation.inspired, airO2.q_out) annotation (Line(
          points={{-76,8.6},{-78,8.6},{-78,23}},
          color={107,45,134},
          thickness=1));
      connect(O2alveolarVentilation.expired, airO2.q_out) annotation (Line(
          points={{-42,8.6},{-42,23},{-78,23}},
          color={107,45,134},
          thickness=1));
      connect(O2gasSolubility.q_out, O2alveolarVentilation.alveolar)
        annotation (Line(
          points={{-60,-40},{-60,-40},{-60,-22},{-58.66,-22}},
          color={107,45,134},
          thickness=1));
      connect(airCO2.q_out, CO2alveolarVentilation.expired) annotation (Line(
          points={{32,25},{76,25},{76,8.6}},
          color={107,45,134},
          thickness=1));
      connect(CO2alveolarVentilation.inspired, airCO2.q_out) annotation (Line(
          points={{42,8.6},{32,8.6},{32,25}},
          color={107,45,134},
          thickness=1));
      connect(gasSolubility1.q_out, CO2alveolarVentilation.alveolar)
        annotation (Line(
          points={{60,-40},{60,-40},{60,-22},{59.34,-22}},
          color={107,45,134},
          thickness=1));
      connect(FiO2, PiO2.gasFractionConcentration) annotation (Line(points={{
              -95,57},{-86.5,57},{-77.4,57}}, color={0,0,127}));
      connect(PiCO2.gasFractionConcentration, FiCO2) annotation (Line(points={{
              -31.4,33},{-34.7,33},{-34.7,33},{-46,33}}, color={0,0,127}));
      connect(PiCO2.pressure, alveolarVentilation_BTPS.EnvironmentPressure)
        annotation (Line(points={{-31.4,39.72},{-44,39.72},{-44,74},{-19.8,74},
              {-19.8,74.2}}, color={0,0,127}));
      connect(alveolusHeat.port, O2gasSolubility.heatPort) annotation (Line(
          points={{8,-50},{8,-62},{-28,-62},{-28,-50},{-60,-50}},
          color={191,0,0},
          thickness=1));
      connect(PiCO2.partialPressure, airCO2.partialPressure) annotation (Line(
            points={{-14.95,36},{-2,36},{14,36},{14,25},{18,25}}, color={0,0,
              127}));
      connect(airO2.partialPressure, PiO2.partialPressure) annotation (Line(
            points={{-92,23},{-94,23},{-94,24},{-94,44},{-94,50},{-58,50},{-58,
              60},{-60.95,60}}, color={0,0,127}));
      connect(PiO2.pressure, alveolarVentilation_BTPS.EnvironmentPressure)
        annotation (Line(points={{-77.4,63.72},{-82,63.72},{-82,74},{-19.8,74},
              {-19.8,74.2}}, color={0,0,127}));
      connect(CO2alveolarVentilation.AlveolarVentilation_Env,
        alveolarVentilation_BTPS.AlveolarVentilation) annotation (Line(points={
              {72.6,-1.6},{90,-1.6},{90,51.2},{18,51.2}}, color={0,0,127}));
      connect(alveolarVentilation_BTPS.BronchiDilution, CO2alveolarVentilation.BronchiDilution)
        annotation (Line(points={{18,42},{48,42},{82,42},{82,-11.8},{72.6,-11.8}},
            color={0,0,127}));
      connect(O2alveolarVentilation.BronchiDilution, CO2alveolarVentilation.BronchiDilution)
        annotation (Line(points={{-45.4,-11.8},{32,-11.8},{32,-30},{82,-30},{82,
              -11.8},{72.6,-11.8}}, color={0,0,127}));
      connect(O2alveolarVentilation.AlveolarVentilation_Env,
        alveolarVentilation_BTPS.AlveolarVentilation) annotation (Line(points={{-45.4,
              -1.6},{38,-1.6},{38,-26},{90,-26},{90,51.2},{18,51.2}},
            color={0,0,127}));
      connect(environment.port, airO2.heatPort) annotation (Line(
          points={{-86,12},{-86,12},{-86,23},{-85,23}},
          color={191,0,0},
          thickness=1));
      connect(environment1.port, airCO2.heatPort) annotation (Line(
          points={{24,14},{24,25},{25,25}},
          color={191,0,0},
          thickness=1));
      connect(environment1.temperature, ambientTemperature) annotation (Line(
            points={{24,2},{24,0},{-30,0},{-30,28},{-56,28},{-56,88},{-76,88}},
            color={0,0,127}));
      connect(environment.temperature, ambientTemperature) annotation (Line(
            points={{-86,0},{-86,-4},{-98,-4},{-98,40},{-56,40},{-56,88},{-76,
              88}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}})), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end VentilationO2CO2;

    model BloodParameters
      Physiolibrary.Types.BusConnector bloodParameters annotation (Placement(
            transformation(extent={{-66,2},{-26,42}}),iconTransformation(extent={{-26,-74},
                {28,-20}})));
    Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5.4)
        "2,3 DPG concentration"
        annotation (Placement(transformation(extent={{52,8},{42,16}})));
    Physiolibrary.Types.Constants.FractionConst FMetHb(k=0.005)
        "fraction of methemoglobin"
      annotation (Placement(transformation(extent={{52,-10},{40,-2}})));
    Physiolibrary.Types.Constants.FractionConst FHbF(k=0.005)
        "fraction of fetal hemoglobin"
      annotation (Placement(transformation(extent={{52,-22},{40,-14}})));
      Physiolibrary.Types.Constants.PressureConst PCO(k=2.6664477483)
        "psrtial pressure of CO"
        annotation (Placement(transformation(extent={{52,-38},{42,-28}})));
      Physiolibrary.Types.Constants.MassConcentrationConst ctGlb(k(displayUnit=
              "kg/m3") = 2.93) "globuline concentration"
        annotation (Placement(transformation(extent={{54,36},{44,44}})));
      Physiolibrary.Types.Constants.ConcentrationConst ctAlb(k=11.8)
        annotation (Placement(transformation(extent={{54,52},{44,60}})));
      Physiolibrary.Types.Constants.ConcentrationConst cPi(k=1.16)
        "phospahate concentration"
        annotation (Placement(transformation(extent={{54,22},{42,30}})));
      Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8.4)
        "hemoglibin concentration"
        annotation (Placement(transformation(extent={{5,-4},{-5,4}},
            rotation=0,
            origin={49,70})));
      Physiolibrary.Types.Constants.TemperatureConst temp(k=310.15)
        "blood temperature"
        annotation (Placement(transformation(extent={{-5,4},{5,-4}},
            rotation=180,
            origin={49,86})));
    equation
      connect(temp.y, bloodParameters.temp) annotation (Line(points={{42.75,86},
              {2,86},{2,22},{-46,22}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(ctHb.y, bloodParameters.ctHb) annotation (Line(points={{42.75,70},
              {22,70},{2,70},{2,22},{-46,22}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(ctAlb.y, bloodParameters.ctAlb) annotation (Line(points={{42.75,
              56},{22,56},{2,56},{2,22},{-46,22}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(ctGlb.y, bloodParameters.ctGlb) annotation (Line(points={{42.75,
              40},{22,40},{2,40},{2,22},{-46,22}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(cPi.y, bloodParameters.cPi) annotation (Line(points={{40.5,26},{
              22,26},{2,26},{2,22},{-46,22}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(cDPG.y, bloodParameters.cDPG) annotation (Line(points={{40.75,12},
              {40.75,12},{2,12},{2,22},{-46,22}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(FHbF.y, bloodParameters.FHbF) annotation (Line(points={{38.5,-18},
              {22,-18},{2,-18},{2,22},{-46,22}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(FMetHb.y, bloodParameters.FMetHb) annotation (Line(points={{38.5,
              -6},{20,-6},{2,-6},{2,22},{-46,22}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(PCO.y, bloodParameters.PCO) annotation (Line(points={{40.75,-33},
              {2,-33},{2,22},{-46,22}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}})),      Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics={Rectangle(
              extent={{-98,100},{100,-98}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-106,76},{96,36}},
              lineColor={28,108,200},
              textString="Blood 
parameters")}));
    end BloodParameters;

    model BloodO2CO2Equilibrium

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BloodO2in annotation (
          Placement(transformation(extent={{-92,8},{-72,28}}),
            iconTransformation(extent={{-92,8},{-72,28}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BloodCO2in annotation (
          Placement(transformation(extent={{-92,-38},{-72,-18}}),
            iconTransformation(extent={{-92,-38},{-72,-18}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b BloodO2out annotation (
          Placement(transformation(extent={{74,6},{94,26}}), iconTransformation(
              extent={{74,6},{94,26}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b BloodCO2out annotation (
          Placement(transformation(extent={{74,-34},{94,-14}}),
            iconTransformation(extent={{74,-34},{94,-14}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a O2equil annotation (
          Placement(transformation(extent={{-38,70},{-18,90}}),
            iconTransformation(extent={{-38,70},{-18,90}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_b CO2equil annotation (
          Placement(transformation(extent={{10,68},{30,88}}),
            iconTransformation(extent={{10,68},{30,88}})));
      bloodCO2O2BEox Blood
        annotation (Placement(transformation(extent={{-56,-60},{20,16}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput bloodFlowRate annotation (
          Placement(transformation(extent={{-94,44},{-68,70}}),
            iconTransformation(extent={{-124,58},{-102,80}})));
      Physiolibrary.Types.BusConnector bloodParameters annotation (Placement(
            transformation(extent={{26,14},{66,54}}), iconTransformation(extent={{-100,
                66},{-60,106}})));
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
                                      annotation (Placement(transformation(extent={{-9,-9},
                {9,9}},
            rotation=0,
            origin={-35,-75}),        iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=0,
            origin={-113,43})));
    initial equation
    //  Blood.bloodPO2PCO2_.pO2=13332;
    //  Blood.bloodPO2PCO2_.pCO2=5332;

    equation

      BloodO2in.q + O2equil.q + BloodO2out.q = 0;
      BloodCO2in.q + O2equil.q + BloodO2out.q = 0;
      O2equil.conc = Blood.cdO2;
      CO2equil.conc = Blood.cdCO2;
      BloodO2in.conc = BloodO2in.q/bloodFlowRate;
      BloodCO2in.conc = BloodCO2in.q/bloodFlowRate;
      //BloodO2out.conc = Blood.ctO2;
      //BloodCO2out.conc = Blood.ctCO2;
      Blood.ctO2 = (-BloodO2out.q/bloodFlowRate);
      Blood.ctCO2 = (-BloodCO2out.q/bloodFlowRate);

      connect(Blood.ctAlb, bloodParameters.ctAlb) annotation (Line(points={{24.56,9.16},
              {46,9.16},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.ctPO4, bloodParameters.cPi) annotation (Line(points={{24.56,1.56},
              {46,1.56},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.cDPG, bloodParameters.cDPG) annotation (Line(points={{24.56,-6.04},
              {46,-6.04},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.FHbF, bloodParameters.FHbF) annotation (Line(points={{24.56,-21.24},
              {46,-21.24},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.pCO, bloodParameters.PCO) annotation (Line(points={{24.56,-28.84},
              {46,-28.84},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.ctGlb, bloodParameters.ctGlb) annotation (Line(points={{24.56,-36.44},
              {46,-36.44},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.ctHb, bloodParameters.ctHb) annotation (Line(points={{-59.8,-42.52},
              {-68,-42.52},{-68,-82},{46,-82},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.T, bloodParameters.temp) annotation (Line(points={{-59.04,10.68},
              {-66,10.68},{-66,24},{46,24},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.FMetHb, bloodParameters.FMetHb) annotation (Line(points={{24.56,
              -13.64},{46,-13.64},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(BEox, Blood.BEox) annotation (Line(points={{-35,-75},{-19.14,-75},{-19.14,
              -61.14}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}),      graphics={
            Rectangle(
              extent={{-102,100},{98,-100}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-70,26},{-48,8}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="O2"),
            Text(
              extent={{-38,66},{-16,48}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="O2"),
            Text(
              extent={{50,26},{72,8}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="O2"),
            Text(
              extent={{-68,-16},{-36,-44}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="CO2"),
            Text(
              extent={{36,-10},{68,-38}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="CO2"),
            Text(
              extent={{10,68},{42,40}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="CO2"),
            Text(
              extent={{-100,-50},{100,-94}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="%name")}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end BloodO2CO2Equilibrium;

    model Alveolus
      extends Icons.Alveolus;
    end Alveolus;

    model PulmonaryShunts
      extends Icons.Shunts;
      Physiolibrary.Types.RealIO.FractionInput FractionShunts annotation (
          Placement(transformation(extent={{-100,-20},{-60,20}}),
            iconTransformation(extent={{-102,18},{-78,42}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput CardiacOutput annotation (
          Placement(transformation(extent={{-100,40},{-60,80}}),
            iconTransformation(extent={{-98,-66},{-72,-40}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput PulmonaryPerfusion
        annotation (Placement(transformation(extent={{52,50},{72,70}}),
            iconTransformation(extent={{8,-32},{28,-12}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateOutput ShuntFlow annotation (
          Placement(transformation(extent={{42,10},{62,30}}),
            iconTransformation(extent={{8,-54},{28,-34}})));
      Modelica.Blocks.Math.Feedback feedback
        annotation (Placement(transformation(extent={{10,50},{30,70}})));
      Modelica.Blocks.Math.Product product
        annotation (Placement(transformation(extent={{-30,10},{-10,30}})));
    equation
      connect(product.u2, FractionShunts) annotation (Line(points={{-32,14},{
              -46,14},{-46,0},{-80,0}}, color={0,0,127}));
      connect(product.u1, CardiacOutput) annotation (Line(points={{-32,26},{-48,
              26},{-48,60},{-80,60}}, color={0,0,127}));
      connect(product.y, ShuntFlow)
        annotation (Line(points={{-9,20},{52,20},{52,20}}, color={0,0,127}));
      connect(feedback.y, PulmonaryPerfusion)
        annotation (Line(points={{29,60},{62,60},{62,60}}, color={0,0,127}));
      connect(product.y, feedback.u2) annotation (Line(points={{-9,20},{8,20},{
              20,20},{20,52}}, color={0,0,127}));
      connect(feedback.u1, CardiacOutput)
        annotation (Line(points={{12,60},{-80,60},{-80,60}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}})), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end PulmonaryShunts;

    model BloodO2CO2measured

      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BloodO2in annotation (
          Placement(transformation(extent={{-94,8},{-74,28}}),
            iconTransformation(extent={{-94,8},{-74,28}})));
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a BloodCO2in annotation (
          Placement(transformation(extent={{-92,-38},{-72,-18}}),
            iconTransformation(extent={{-92,-38},{-72,-18}})));
      bloodCO2O2BEox Blood
        annotation (Placement(transformation(extent={{-56,-60},{20,16}})));
      Physiolibrary.Types.RealIO.VolumeFlowRateInput bloodFlowRate annotation (
          Placement(transformation(extent={{-94,44},{-68,70}}),
            iconTransformation(extent={{-124,58},{-102,80}})));
      Physiolibrary.Types.BusConnector bloodParameters annotation (Placement(
            transformation(extent={{26,14},{66,54}}), iconTransformation(extent={{-100,
                66},{-60,106}})));
      Physiolibrary.Types.RealIO.ConcentrationInput
                                         BEox
                                      annotation (Placement(transformation(extent={{-9,-9},
                {9,9}},
            rotation=0,
            origin={-35,-75}),        iconTransformation(
            extent={{-11,-11},{11,11}},
            rotation=0,
            origin={-113,43})));
    initial equation
    //  Blood.bloodPO2PCO2_.pO2=13332;
    //  Blood.bloodPO2PCO2_.pCO2=5332;

    equation

      BloodO2in.q = 0;
      BloodCO2in.q = 0;

      Blood.ctO2 = (BloodO2in.q/bloodFlowRate);
      Blood.ctCO2 = (BloodCO2in.q/bloodFlowRate);

      connect(Blood.ctAlb, bloodParameters.ctAlb) annotation (Line(points={{24.56,9.16},
              {46,9.16},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.ctPO4, bloodParameters.cPi) annotation (Line(points={{24.56,1.56},
              {46,1.56},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.cDPG, bloodParameters.cDPG) annotation (Line(points={{24.56,-6.04},
              {46,-6.04},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.FHbF, bloodParameters.FHbF) annotation (Line(points={{24.56,-21.24},
              {46,-21.24},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.pCO, bloodParameters.PCO) annotation (Line(points={{24.56,-28.84},
              {46,-28.84},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.ctGlb, bloodParameters.ctGlb) annotation (Line(points={{24.56,-36.44},
              {46,-36.44},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.ctHb, bloodParameters.ctHb) annotation (Line(points={{-59.8,-42.52},
              {-68,-42.52},{-68,-82},{46,-82},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.T, bloodParameters.temp) annotation (Line(points={{-59.04,10.68},
              {-66,10.68},{-66,24},{46,24},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(Blood.FMetHb, bloodParameters.FMetHb) annotation (Line(points={{24.56,
              -13.64},{46,-13.64},{46,34}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(BEox, Blood.BEox) annotation (Line(points={{-35,-75},{-19.14,-75},{-19.14,
              -61.14}}, color={0,0,127}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}),            graphics={
            Rectangle(
              extent={{-102,100},{98,-100}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-70,26},{-48,8}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="O2"),
            Text(
              extent={{-68,-16},{-36,-44}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="CO2"),
            Text(
              extent={{-100,-50},{100,-94}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="%name")}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end BloodO2CO2measured;

    model BloodyMary_version01
      Physiolibrary.Types.Constants.PressureConst barometricPressure(k=
            99991.79056125)
        annotation (Placement(transformation(extent={{-54,92},{-42,96}})));
      Physiolibrary.Types.Constants.FractionConst airHumidity(k=0.58)
        annotation (Placement(transformation(extent={{-32,88},{-20,92}})));
      Physiolibrary.Types.Constants.FractionConst FiO2(k=0.21)
        annotation (Placement(transformation(extent={{-68,82},{-56,86}})));
      Physiolibrary.Types.Constants.FractionConst FiCO2(k=0.00038)
        annotation (Placement(transformation(extent={{-30,80},{-20,84}})));
      Physiolibrary.Types.Constants.TemperatureConst atmosphericTemperature(k=
            298.15)
        annotation (Placement(transformation(extent={{-48,74},{-38,78}})));
      Physiolibrary.Types.Constants.TemperatureConst bodyTemperature(k=310.15)
        annotation (Placement(transformation(extent={{-48,66},{-38,70}})));
      Physiolibrary.Types.Constants.VolumeConst inspiredTidalVolume(k=0.0005)
        annotation (Placement(transformation(extent={{-80,94},{-72,98}})));
      Physiolibrary.Types.Constants.VolumeConst deadVolume(k=0.00015)
        annotation (Placement(transformation(extent={{-4,-2},{4,2}},
            rotation=180,
            origin={36,97})));
      Physiolibrary.Types.Constants.FrequencyConst breathingFrequency(k=
            0.29333333333333)
        annotation (Placement(transformation(extent={{-4,-2},{4,2}},
            rotation=180,
            origin={36,84})));
      VentilationO2CO2 ventilation
        annotation (Placement(transformation(extent={{-10,66},{32,94}})));
      BloodO2CO2Equilibrium       AlvCapillary(
        BloodO2in(q(start=10)),
        BloodO2out(conc(start=7.9475)),
        BloodCO2out(conc(start=21.6349)),
        Blood(bloodPO2PCO2_(totalO2(
              sO2CO(start=0.977),
              a(start=-0.1),
              cO2Hb(start=8.16),
              tO2(start=8.161),
              pCO2(start=5700),
              pO2(start=13870)), totalCO2(tCO2_P(start=24.9), pCO2(start=5160)))),
        BloodCO2in(q(start=115.472)))
        annotation (Placement(transformation(extent={{-12,20},{28,60}})));
      BloodO2CO2measured       VeinsBlood(Blood(bloodPO2PCO2_(totalO2(
      pO2(                            start=6140),
      cO2Hb(                            start=6.52),
      a(                            start=0.076),
      pCO2(                            start=6400)), totalCO2(
      tCO2_P(                             start=27.4),
      pCO2(                             start=6240)))))
        annotation (Placement(transformation(extent={{-50,20},{-90,60}})));
      BloodO2CO2measured       ArtBlood(Blood(bloodPO2PCO2_(totalO2(
        pO2(                            start=13459),
        cO2Hb(                            start=7.82305),
        pCO2(                            start=4428.03),
        a(                            start=-0.1)), totalCO2(
        tCO2_P(                             start=26),
        pCO2(                             start=5330)))))
        annotation (Placement(transformation(extent={{62,20},{102,60}})));
      BloodO2CO2Equilibrium       TissueCapillary
        annotation (Placement(transformation(extent={{22,-26},{-20,-68}})));
    Physiolibrary.Chemical.Components.Stream O2pulmShortCircuit(
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-4,14},{12,-2}})));
    Physiolibrary.Chemical.Components.Stream CO2pulmShortCircuit(
          useSolutionFlowInput=true)
        annotation (Placement(transformation(extent={{-4,-6},{12,-22}})));
    Physiolibrary.Chemical.Sources.UnlimitedSolutePump CO2met(
          useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{-8,7},{8,-7}},
            rotation=180,
            origin={10,-91})));
    Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut O2met(
          useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{-8,-8},{8,8}},
            rotation=0,
            origin={24,-78})));
      Physiolibrary.Chemical.Components.Substance veinsCO2(
        stateName="CO2Veins.Mass[mMol]",
        useNormalizedVolume=false,
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        solute_start=0.0869)
        annotation (Placement(transformation(extent={{-44,-38},{-24,-18}})));
      Physiolibrary.Chemical.Components.Substance veinsO2(
        stateName="O2Veins.Mass[mMol]",
        useNormalizedVolume=false,
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        solute_start=0.0247781)
        annotation (Placement(transformation(extent={{-46,-78},{-26,-58}})));
      Physiolibrary.Chemical.Components.Substance artysCO2(
        stateName="CO2Artys.Mass[mMol]",
        useNormalizedVolume=false,
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        solute_start=0.0343)
        annotation (Placement(transformation(extent={{84,-22},{64,-2}})));
      Physiolibrary.Chemical.Components.Substance artysO2(
        stateName="O2Artys.Mass[mMol]",
        useNormalizedVolume=false,
        Simulation=Physiolibrary.Types.SimulationType.NoInit,
        solute_start=0.0130979)
        annotation (Placement(transformation(extent={{68,-82},{88,-62}})));
      BloodParameters       bloodParameters
        annotation (Placement(transformation(extent={{-98,66},{-74,82}})));
      Physiolibrary.Types.Constants.MolarFlowRateConst VCO2(k=0.000145717)
        annotation (Placement(transformation(extent={{40,-88},{30,-82}})));
      Physiolibrary.Types.Constants.MolarFlowRateConst VO2(k=0.00018309)
        annotation (Placement(transformation(extent={{42,-74},{32,-68}})));
      Physiolibrary.Types.Constants.VolumeConst ArtBloodVolume(k=0.001621)
        annotation (Placement(transformation(extent={{46,-58},{54,-52}})));
      Physiolibrary.Types.Constants.VolumeConst VenBloodVolume(k=0.00360844)
        annotation (Placement(transformation(extent={{-82,-60},{-74,-54}})));
      PulmonaryShunts       pulmonaryShunts
        annotation (Placement(transformation(extent={{-72,-15},{-50,12}})));
      Physiolibrary.Types.Constants.FractionConst ShuntSraction(k=0.02)
        annotation (Placement(transformation(extent={{-85,4},{-77,10}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst CardiacOutput(k=
            8.3333333333333e-05)
        annotation (Placement(transformation(extent={{-85,-8},{-77,-2}})));
      Physiolibrary.Types.Constants.ConcentrationConst BEox(k=0) annotation (
          Placement(transformation(
            extent={{4,-3},{-4,3}},
            rotation=180,
            origin={-34,17})));
    equation
      connect(FiO2.y,ventilation. FiO2) annotation (Line(points={{-54.5,84},{
              -44,84},{-44,86.44},{-7.9,86.44}},
                                              color={0,0,127}));
      connect(inspiredTidalVolume.y,ventilation. tidalVolume) annotation (Line(
            points={{-71,96},{0.5,96},{0.5,92.6}},     color={0,0,127}));
      connect(deadVolume.y,ventilation. deadSpace) annotation (Line(points={{31,97},
              {8.9,97},{8.9,92.6}},           color={0,0,127}));
      connect(breathingFrequency.y, ventilation.respiratoryRate) annotation (
          Line(points={{31,84},{17.3,84},{17.3,92.6}}, color={0,0,127}));
      connect(airHumidity.y, ventilation.airHumidity) annotation (Line(points={
              {-18.5,90},{-7.9,90},{-7.9,89.52}}, color={0,0,127}));
      connect(bodyTemperature.y, ventilation.bodyTemperature) annotation (Line(
            points={{-36.75,68},{-24,68},{-24,75.24},{-7.9,75.24}}, color={0,0,
              127}));
      connect(atmosphericTemperature.y, ventilation.atmosphericTemperature)
        annotation (Line(points={{-36.75,76},{-18,76},{-18,78.88},{-7.9,78.88}},
            color={0,0,127}));
      connect(barometricPressure.y, ventilation.barometricPressure) annotation (
         Line(points={{-40.5,94},{-22,94},{-22,92.6},{-7.9,92.6}}, color={0,0,
              127}));
      connect(AlvCapillary.O2equil, ventilation.O2) annotation (Line(
          points={{2.4,56},{2.4,63.1},{-1.6,63.1},{-1.6,68.24}},
          color={107,45,134},
          thickness=1));
      connect(AlvCapillary.CO2equil, ventilation.CO2) annotation (Line(
          points={{12,55.6},{12,62.91},{17.3,62.91},{17.3,67.4}},
          color={107,45,134},
          thickness=1));
      connect(FiCO2.y, ventilation.FiCO2) annotation (Line(points={{-18.75,82},
              {-14,82},{-14,82.8},{-7.9,82.8}}, color={0,0,127}));
      connect(TissueCapillary.BloodO2out, veinsO2.q_out) annotation (Line(
          points={{-16.64,-50.36},{-36,-50.36},{-36,-68}},
          color={107,45,134},
          thickness=1));
      connect(TissueCapillary.BloodCO2out, veinsCO2.q_out) annotation (Line(
          points={{-16.64,-41.96},{-34,-41.96},{-34,-28}},
          color={107,45,134},
          thickness=1));
      connect(TissueCapillary.BloodCO2out, VeinsBlood.BloodCO2in) annotation (
          Line(
          points={{-16.64,-41.96},{-94,-41.96},{-94,38},{-53.6,38},{-53.6,34.4}},
          color={107,45,134},
          thickness=1));

      connect(TissueCapillary.BloodO2out, VeinsBlood.BloodO2in) annotation (
          Line(
          points={{-16.64,-50.36},{-96,-50.36},{-96,48},{-53.2,48},{-53.2,43.6}},
          color={107,45,134},
          thickness=1));

      connect(VeinsBlood.BloodO2in, AlvCapillary.BloodO2in) annotation (Line(
          points={{-53.2,43.6},{-30.6,43.6},{-8.4,43.6}},
          color={107,45,134},
          thickness=1));
      connect(VeinsBlood.BloodCO2in, AlvCapillary.BloodCO2in) annotation (Line(
          points={{-53.6,34.4},{-30.8,34.4},{-8.4,34.4}},
          color={107,45,134},
          thickness=1));
      connect(O2pulmShortCircuit.q_in, VeinsBlood.BloodO2in) annotation (Line(
          points={{-4,6},{-18,6},{-44,6},{-44,43.6},{-53.2,43.6}},
          color={107,45,134},
          thickness=1));
      connect(CO2pulmShortCircuit.q_in, AlvCapillary.BloodCO2in) annotation (
          Line(
          points={{-4,-14},{-48,-14},{-48,34},{-30.8,34.4},{-8.4,34.4}},
          color={107,45,134},
          thickness=1));
      connect(AlvCapillary.BloodO2out, ArtBlood.BloodO2in) annotation (Line(
          points={{24.8,43.2},{44.4,43.2},{44.4,43.6},{65.2,43.6}},
          color={107,45,134},
          thickness=1));
      connect(AlvCapillary.BloodCO2out, ArtBlood.BloodCO2in) annotation (Line(
          points={{24.8,35.2},{44.4,35.2},{44.4,34.4},{65.6,34.4}},
          color={107,45,134},
          thickness=1));
      connect(CO2pulmShortCircuit.q_out, ArtBlood.BloodCO2in) annotation (Line(
          points={{12,-14},{12,-16},{54,-16},{54,26},{65.6,26},{65.6,34.4}},
          color={107,45,134},
          thickness=1));
      connect(O2pulmShortCircuit.q_out, ArtBlood.BloodO2in) annotation (Line(
          points={{12,6},{50,6},{50,38},{65.2,38},{65.2,43.6}},
          color={107,45,134},
          thickness=1));
      connect(ArtBlood.BloodCO2in, TissueCapillary.BloodCO2in) annotation (Line(
          points={{65.6,34.4},{96,34.4},{96,-41.12},{18.22,-41.12}},
          color={107,45,134},
          thickness=1));
      connect(TissueCapillary.BloodO2in, ArtBlood.BloodO2in) annotation (Line(
          points={{18.22,-50.78},{98,-50.78},{98,43.6},{65.2,43.6}},
          color={107,45,134},
          thickness=1));
      connect(artysCO2.q_out, TissueCapillary.BloodCO2in) annotation (Line(
          points={{74,-12},{76,-12},{76,-41.12},{18.22,-41.12}},
          color={107,45,134},
          thickness=1));
      connect(artysO2.q_out, ArtBlood.BloodO2in) annotation (Line(
          points={{78,-72},{78,-58},{98,-58},{98,43.6},{65.2,43.6}},
          color={107,45,134},
          thickness=1));
      connect(bloodParameters.bloodParameters, VeinsBlood.bloodParameters)
        annotation (Line(
          points={{-85.88,70.24},{-85.88,62},{-54,62},{-54,57.2}},
          color={0,0,255},
          thickness=0.5));
      connect(bloodParameters.bloodParameters, TissueCapillary.bloodParameters)
        annotation (Line(
          points={{-85.88,70.24},{-85.88,70},{-88,70},{-88,-98},{46,-98},{46,
              -76},{46,-66},{17.8,-66},{17.8,-65.06}},
          color={0,0,255},
          thickness=0.5));
      connect(bloodParameters.bloodParameters, AlvCapillary.bloodParameters)
        annotation (Line(
          points={{-85.88,70.24},{-85.88,62},{-8,62},{-8,57.2}},
          color={0,0,255},
          thickness=0.5));
      connect(bloodParameters.bloodParameters, ArtBlood.bloodParameters)
        annotation (Line(
          points={{-85.88,70.24},{-85.88,62},{66,62},{66,57.2}},
          color={0,0,255},
          thickness=0.5));
      connect(TissueCapillary.O2equil, O2met.q_in) annotation (Line(
          points={{6.88,-63.8},{6.88,-78},{16,-78}},
          color={107,45,134},
          thickness=1));
      connect(CO2met.q_out, TissueCapillary.CO2equil) annotation (Line(
          points={{2,-91},{-4,-91},{-4,-63.38},{-3.2,-63.38}},
          color={107,45,134},
          thickness=1));
      connect(O2met.soluteFlow, VO2.y) annotation (Line(points={{27.2,-74.8},{
              28,-74.8},{28,-71},{30.75,-71}}, color={0,0,127}));
      connect(VCO2.y, CO2met.soluteFlow) annotation (Line(points={{28.75,-85},{
              6.8,-85},{6.8,-88.2}}, color={0,0,127}));
      connect(VenBloodVolume.y, veinsO2.solutionVolume) annotation (Line(points=
             {{-73,-57},{-40,-57},{-40,-64}}, color={0,0,127}));
      connect(VenBloodVolume.y, veinsCO2.solutionVolume) annotation (Line(
            points={{-73,-57},{-52,-57},{-52,-16},{-38,-16},{-38,-24}}, color={
              0,0,127}));
      connect(ArtBloodVolume.y, artysO2.solutionVolume) annotation (Line(points=
             {{55,-55},{74,-55},{74,-68}}, color={0,0,127}));
      connect(artysCO2.solutionVolume, artysO2.solutionVolume) annotation (Line(
            points={{78,-8},{78,0},{88,0},{88,-54},{74,-54},{74,-68}}, color={0,
              0,127}));
      connect(ShuntSraction.y, pulmonaryShunts.FractionShunts) annotation (Line(
            points={{-76,7},{-73.5,7},{-73.5,2.55},{-70.9,2.55}}, color={0,0,
              127}));
      connect(pulmonaryShunts.PulmonaryPerfusion, AlvCapillary.bloodFlowRate)
        annotation (Line(points={{-59.02,-4.47},{-20,-4.47},{-20,53.8},{-14.6,
              53.8}}, color={0,0,127}));
      connect(CardiacOutput.y, pulmonaryShunts.CardiacOutput) annotation (Line(
            points={{-76,-5},{-73.5,-5},{-73.5,-8.655},{-70.35,-8.655}}, color=
              {0,0,127}));
      connect(pulmonaryShunts.ShuntFlow, O2pulmShortCircuit.solutionFlow)
        annotation (Line(points={{-59.02,-7.44},{-14,-7.44},{-14,-4},{4,-4},{4,
              0.4}}, color={0,0,127}));
      connect(pulmonaryShunts.ShuntFlow, CO2pulmShortCircuit.solutionFlow)
        annotation (Line(points={{-59.02,-7.44},{-14,-7.44},{-14,-24},{4,-24},{
              4,-19.6}}, color={0,0,127}));
      connect(TissueCapillary.bloodFlowRate, pulmonaryShunts.CardiacOutput)
        annotation (Line(points={{24.73,-61.49},{54,-61.49},{54,-100},{-84,-100},
              {-84,-16},{-74,-16},{-74,-8},{-73.5,-8.655},{-70.35,-8.655}},
            color={0,0,127}));
      connect(VeinsBlood.bloodFlowRate, pulmonaryShunts.CardiacOutput)
        annotation (Line(points={{-47.4,53.8},{-38,53.8},{-38,64},{-100,64},{
              -100,-16},{-74,-16},{-74,-8},{-73.5,-8.655},{-70.35,-8.655}},
            color={0,0,127}));
      connect(ArtBlood.bloodFlowRate, pulmonaryShunts.CardiacOutput)
        annotation (Line(points={{59.4,53.8},{54,53.8},{54,64},{-100,64},{-100,
              -16},{-74,-16},{-74,-8},{-73.5,-8.655},{-70.35,-8.655}}, color={0,
              0,127}));
      connect(BEox.y, AlvCapillary.BEox) annotation (Line(points={{-29,17},{-20,
              17},{-20,48.6},{-14.6,48.6}}, color={0,0,127}));
      connect(VeinsBlood.BEox, AlvCapillary.BEox)
        annotation (Line(points={{-47.4,48.6},{-14.6,48.6}}, color={0,0,127}));
      connect(ArtBlood.BEox, BEox.y) annotation (Line(points={{59.4,48.6},{38,
              48.6},{38,17},{-29,17}}, color={0,0,127}));
      connect(TissueCapillary.BEox, BEox.y) annotation (Line(points={{24.73,
              -56.03},{38,-56.03},{38,17},{-29,17}}, color={0,0,127}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}})), Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-98,68},{88,2}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Bloody Mary")}));
    end BloodyMary_version01;

    model TissuesO2
     extends Physiolibrary.Icons.Tissues;
    Physiolibrary.Chemical.Interfaces.ChemicalPort_a arty annotation (
        Placement(transformation(extent={{80,-20},{120,20}}),
          iconTransformation(extent={{100,-20},{140,20}})));
    Physiolibrary.Chemical.Interfaces.ChemicalPort_b vein annotation (Placement(
            transformation(extent={{-120,-20},{-80,20}}), iconTransformation(extent=
               {{-140,-20},{-100,20}})));

     Physiolibrary.Types.MolarFlowRate O2ToTissues(displayUnit="mmol/min");
    // Real O2ToTissues2(displayUnit="mmol/min");
    // Real O2ToTissues3(displayUnit="ml/min");

      BloodO2_Siggaard O2Tissue
        annotation (Placement(transformation(extent={{2,1},{-18,-19}})));
    Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
                                                  Metabolism_O2Use(
          useSoluteFlowInput=true) annotation (Placement(transformation(
          extent={{-10,10},{10,-10}},
          rotation=270,
          origin={-8,-82})));
      Physiolibrary.Types.RealIO.FractionOutput sO2
                                               annotation (Placement(
            transformation(extent={{8,16},{14,22}}),     iconTransformation(
              extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,-110})));
      Physiolibrary.Types.RealIO.PressureOutput pO2       annotation (Placement(
            transformation(extent={{10,10},{18,18}}),    iconTransformation(
              extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-20,-110})));
    Physiolibrary.Types.BusConnector busConnector
      annotation (Placement(transformation(extent={{-102,54},{-62,94}})));
    equation
    O2ToTissues = vein.q + arty.q;

      connect(O2Tissue.sO2,sO2)           annotation (Line(
          points={{-8,3},{-8,19},{11,19}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(O2Tissue.pO2,pO2)  annotation (Line(
          points={{-12,3},{-12,14},{14,14}},
          color={0,0,127},
          smooth=Smooth.None));
    connect(O2Tissue.alveolar,Metabolism_O2Use. q_in) annotation (Line(
        points={{-7.6,-17.2},{-7.6,-42.1},{-8,-42.1},{-8,-72}},
        color={107,45,134},
        thickness=1,
        smooth=Smooth.None));
      connect(O2Tissue.BloodFlow, busConnector.CardiacOutput) annotation (Line(
            points={{2,-5.6},{32,-5.6},{32,74},{-82,74}},     color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.VO2, Metabolism_O2Use.soluteFlow) annotation (Line(
          points={{-82,74},{-64,74},{-46,74},{-46,-86},{-12,-86}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(O2Tissue.q_in, arty) annotation (Line(
          points={{1,0},{52.5,0},{100,0}},
          color={107,45,134},
          thickness=1));
      connect(O2Tissue.q_out, vein) annotation (Line(
          points={{-17,0},{-58.5,0},{-100,0}},
          color={107,45,134},
          thickness=1));
      connect(O2Tissue.sO2, busConnector.tissueVein_sO2) annotation (Line(
            points={{-8,3},{-8,3},{-8,74},{-82,74}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.pCO, O2Tissue.pCO) annotation (Line(
          points={{-82,74},{-64,74},{-46,74},{-46,-3},{-17,-3}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.FHbF, O2Tissue.FHbF) annotation (Line(
          points={{-82,74},{-46,74},{-46,-7},{-17,-7}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.FMetHb, O2Tissue.FMetHb) annotation (Line(
          points={{-82,74},{-64,74},{-46,74},{-46,-11},{-17,-11}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.cDPG, O2Tissue.cDPG) annotation (Line(
          points={{-82,74},{-64,74},{-46,74},{-46,-15},{-17,-15}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctHb, O2Tissue.ctHb) annotation (Line(
          points={{-82,74},{-46,74},{-46,-19},{-17,-19}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(O2Tissue.T, busConnector.core_T) annotation (Line(points={{1,-11},
              {32,-11},{32,74},{-82,74}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Tissue.pCO2, busConnector.tissueVein_pCO2) annotation (Line(
            points={{1,-15},{32,-15},{32,74},{-82,74}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Tissue.pH, busConnector.tissueVein_pH) annotation (Line(points=
              {{1,-19},{32,-19},{32,74},{-82,74}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}}),
                       graphics={Rectangle(extent={{-120,100},{120,-100}},
                lineColor={0,0,0})}), Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}})));
    end TissuesO2;

    model TissuesCO2

     extends Physiolibrary.Icons.Tissues;
    Physiolibrary.Chemical.Interfaces.ChemicalPort_a q_in annotation (
        Placement(transformation(extent={{60,-20},{100,20}}),
          iconTransformation(extent={{100,-20},{140,20}})));
    Physiolibrary.Chemical.Interfaces.ChemicalPort_b q_out annotation (
        Placement(transformation(extent={{-94,-20},{-54,20}}),
          iconTransformation(extent={{-94,-20},{-54,20}})));
    Physiolibrary.Types.BusConnector busConnector
      annotation (Placement(transformation(extent={{-108,72},{-68,112}})));

      Physiolibrary.Types.MolarFlowRate CO2FromTissues(displayUnit="mmol/min");
    Physiolibrary.Chemical.Sources.UnlimitedSolutePump InflowBase(
        useSoluteFlowInput=true)
      annotation (Placement(transformation(extent={{-84,42},{-64,62}})));
    Physiolibrary.Chemical.Components.Stream tissueFlow(
        useSolutionFlowInput=true) annotation (Placement(transformation(
          extent={{-10,10},{10,-10}},
          rotation=180,
          origin={22,0})));
      FlowMeasureCO2 tissueVeinsCO2
        annotation (Placement(transformation(extent={{-24,-2},{-44,18}})));
      Modelica.Blocks.Math.Gain DonnansCoeficient(k=1.04)
        annotation (Placement(transformation(extent={{-4,-4},{4,4}},
            rotation=270,
            origin={-42,-38})));
      Physiolibrary.Types.RealIO.PressureOutput pCO2(
                                          start=45)
                                               annotation (Placement(
            transformation(extent={{42,-22},{50,-14}}),  iconTransformation(
              extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,-110})));
      Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3_interstitial
                                               annotation (Placement(
            transformation(extent={{-22,-76},{-14,-68}}),iconTransformation(
              extent={{-10,-10},{10,10}},
            rotation=270,
            origin={20,-110})));
      Interstitium interstitium(volume(displayUnit="l") = 0.012,
          initialHCO3Conc=26.8)
        annotation (Placement(transformation(extent={{114,-52},{134,-32}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure
        annotation (Placement(transformation(extent={{30,-52},{50,-32}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
          useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=90,
            origin={102,-70})));
      Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
        annotation (Placement(transformation(extent={{42,-76},{62,-56}})));
      Modelica.Blocks.Math.Gain gain(k=2e-5)
        annotation (Placement(transformation(extent={{68,-76},{88,-56}})));
      Physiolibrary.Types.Constants.ConcentrationConst bloodHCO3Concentration(k=
           25)
        annotation (Placement(transformation(extent={{10,-60},{18,-52}})));
    equation
      CO2FromTissues = -( q_out.q + q_in.q);

      connect(tissueVeinsCO2.pCO2,pCO2)  annotation (Line(
          points={{-38,-4},{-38,-18},{46,-18}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(InflowBase.q_out,tissueVeinsCO2. q_in) annotation (Line(
          points={{-64,52},{-10,52},{-10,0},{-24,0}},
          color={200,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(tissueFlow.q_out,tissueVeinsCO2. q_in) annotation (Line(
          points={{12,0},{-24,0}},
          color={200,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(DonnansCoeficient.y,cHCO3_interstitial)  annotation (Line(
          points={{-42,-42.4},{-42,-72},{-18,-72}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tissueVeinsCO2.cHCO3,DonnansCoeficient. u) annotation (Line(
          points={{-42,-4},{-42,-33.2}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(tissueFlow.q_in, q_in) annotation (Line(
          points={{32,0},{80,0},{80,0}},
          color={107,45,134},
          thickness=1));
      connect(tissueVeinsCO2.q_out, q_out) annotation (Line(
          points={{-44,0},{-74,0},{-74,0}},
          color={107,45,134},
          thickness=1));
      connect(tissueVeinsCO2.BloodFlow, busConnector.CardiacOutput) annotation (
          Line(points={{-25,8},{-10,8},{6,8},{6,92},{-88,92}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(tissueFlow.solutionFlow, busConnector.CardiacOutput) annotation (Line(
            points={{22,7},{22,7},{22,10},{22,10},{6,10},{6,92},{-88,92}}, color={0,
              0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(InflowBase.soluteFlow, busConnector.VCO2) annotation (Line(points=
             {{-70,56},{-70,76},{-70,92},{-88,92}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(tissueVeinsCO2.T, busConnector.core_T) annotation (Line(points={{
              -43,16},{-50,16},{-58,16},{-58,92},{-88,92}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(tissueVeinsCO2.pCO2, busConnector.tissueVein_pCO2) annotation (
          Line(points={{-38,-4},{-38,-4},{-38,-18},{6,-18},{6,92},{-88,92}},
            color={0,0,127}));
      connect(tissueVeinsCO2.cHCO3, busConnector.tissueVein_cHCO3) annotation (
          Line(points={{-42,-4},{-42,-4},{-42,-28},{6,-28},{6,92},{-88,92}},
            color={0,0,127}));
      connect(tissueVeinsCO2.sO2, busConnector.tissueVein_sO2) annotation (Line(
            points={{-43,8},{-58,8},{-58,92},{-88,92}}, color={0,0,127}));
      connect(tissueVeinsCO2.pH, busConnector.tissueVein_pH) annotation (Line(
            points={{-25,16},{-10,16},{6,16},{6,92},{-88,92}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(tissueVeinsCO2.pH_ery, busConnector.tissueVein_pH_ery)
        annotation (Line(points={{-25,12},{6,12},{6,92},{-88,92}}, color={0,0,
              127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(tissueVeinsCO2.Hct, busConnector.BloodVol_Hct) annotation (Line(
            points={{-43,12},{-58,12},{-58,92},{-88,92}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(interstitium.HCO3, concentrationMeasure.q_in) annotation (Line(
          points={{115,-42},{115,-42},{40,-42}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure.concentration, add.u1)
        annotation (Line(points={{40,-50},{40,-60}}, color={0,0,127}));
      connect(add.y, gain.u) annotation (Line(points={{63,-66},{63,-66},{66,-66}},
            color={0,0,127}));
      connect(gain.y, unlimitedSolutePump.soluteFlow) annotation (Line(points={
              {89,-66},{89,-66},{98,-66}}, color={0,0,127}));
      connect(interstitium.HCO3, unlimitedSolutePump.q_out) annotation (Line(
          points={{115,-42},{102,-42},{102,-60}},
          color={107,45,134},
          thickness=1));
      connect(pCO2, interstitium.pCO2) annotation (Line(points={{46,-18},{82,
              -18},{82,-34},{116,-34}}, color={0,0,127}));
      connect(cHCO3_interstitial, add.u2) annotation (Line(points={{-18,-72},{
              12,-72},{40,-72}}, color={0,0,127}));
      connect(interstitium.BE, busConnector.interstitiumBEoxFlow) annotation (
          Line(points={{124,-33},{124,-33},{124,-18},{124,92},{-88,92}}, color=
              {0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      annotation (Icon(graphics={Rectangle(extent={{-120,100},{120,-100}},
                lineColor={0,0,0})}), Diagram(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end TissuesCO2;

    model O2Physiomodel

      Physiolibrary.Chemical.Components.Substance                veins(
                                             stateName="O2Veins.Mass[mMol]",
        useNormalizedVolume=false,
      solute_start=0.0247781)
        annotation (Placement(transformation(extent={{-92,-46},{-72,-26}})));
    AlveolarVentilation             alveolarVentilation(solventFlowPump(q_out(
            conc(start=104/760)), useSolutionFlowInput=true)) annotation (
        Placement(transformation(
          extent={{-10,-10},{10,10}},
          origin={-12,58})));
      Modelica.Blocks.Math.Feedback pulmShortCircuitFlow
        annotation (Placement(transformation(extent={{22,-56},{2,-36}})));
      MeassureBloodO2 artysO2(
      pO2(start=13459),
      cO2Hb(start=7.82305),
      pCO2(start=4428.03),
        a(start=-0.1))
        annotation (Placement(transformation(extent={{60,-12},{80,8}})));
      MeassureBloodO2 veinsO2(
      pO2(start=6140),
      cO2Hb(start=6.52),
      a(start=0.076),
      pCO2(start=6400))
        annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
      BloodO2_Siggaard O2Lung(
      pCO2(start=5700),
      pO2(start=13870),
        sO2CO(start=0.977),
        q_in(q(start=10)),
        a(start=-0.1),
        cO2Hb(start=8.16),
        tO2(start=8.161))
        annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
      Physiolibrary.Chemical.Components.GasSolubility
                                        gasSolubility(useHeatPort=true,
      C=1700,
      kH_T0(displayUnit="(mmol/l)/kPa at 37degC") = 0.02707666941329,
      solubilityRateCoef(displayUnit="m3/s") = 0.01,
      T0=310.15)
        annotation (Placement(transformation(extent={{-22,20},{-2,40}})));
    Physiolibrary.Thermal.Sources.UnlimitedHeat alveolus(useTemperatureInput=
            true, T=310.15)
      annotation (Placement(transformation(extent={{8,26},{0,34}})));
    Physiolibrary.Chemical.Sources.UnlimitedGasStorage air(PartialPressure(
          displayUnit="mmHg") = 21331.5819864, useHeatPort=true,
        usePartialPressureInput=true)
      annotation (Placement(transformation(extent={{-48,72},{-28,92}})));
    Physiolibrary.Thermal.Sources.UnlimitedHeat environment(useTemperatureInput=
           true, T=298.15)
      annotation (Placement(transformation(extent={{-74,54},{-54,74}})));
    Physiolibrary.Types.BusConnector busConnector annotation (Placement(
          transformation(extent={{82,24},{102,44}}), iconTransformation(
            extent={{60,60},{100,100}})));
      Physiolibrary.Chemical.Components.Substance                artys(
                                   stateName="O2Artys.Mass[mMol]",
        useNormalizedVolume=false,
      solute_start=0.0130979)
        annotation (Placement(transformation(extent={{56,-88},{76,-68}})));
    TissuesO2 tissuesO2
      annotation (Placement(transformation(extent={{-18,-90},{2,-70}})));
      GasPartialPressure PO2
        annotation (Placement(transformation(extent={{-66,77},{-54,87}})));
    Physiolibrary.Chemical.Components.Stream pulmShortCircuit(
        useSolutionFlowInput=true)
      annotation (Placement(transformation(extent={{-18,-22},{2,-42}})));
    equation
      connect(pulmShortCircuitFlow.u1,busConnector. CardiacOutput)
        annotation (Line(
          points={{20,-46},{30,-46},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.AlveolarVentilated_BloodFlow,pulmShortCircuitFlow. u2)
        annotation (Line(
          points={{92,34},{-54,34},{-54,-6},{-34,-6},{-34,-54},{12,-54}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CO2Artys_pCO2,artysO2. pCO2)              annotation (
          Line(
          points={{92,34},{30,34},{30,4},{61,4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(artysO2.ctHb,busConnector. ctHb)              annotation (Line(
          points={{79,8},{98,8},{98,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(artysO2.cDPG,busConnector. cDPG)              annotation (Line(
          points={{79,4},{98,4},{98,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(artysO2.FMetHb,busConnector. FMetHb)              annotation (Line(
          points={{79,0},{98,0},{98,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(artysO2.FHbF,busConnector. FHbF)              annotation (Line(
          points={{79,-4},{98,-4},{98,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(artysO2.pCO,busConnector. pCO)              annotation (Line(
          points={{79,-8},{98,-8},{98,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.Artys_pH,artysO2. pH)  annotation (Line(
          points={{92,34},{30,34},{30,8},{61,8}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.core_T,artysO2. T)       annotation (Line(
          points={{92,34},{30,34},{30,0},{61,0}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(artys.q_out,artysO2. q_in) annotation (Line(
          points={{66,-78},{66,-10},{70,-10}},
          color={200,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(veinsO2.ctHb,busConnector. ctHb)              annotation (Line(
          points={{-71,10},{-54,10},{-54,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(veinsO2.cDPG,busConnector. cDPG)              annotation (Line(
          points={{-71,6},{-54,6},{-54,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(veinsO2.FMetHb,busConnector. FMetHb)              annotation (Line(
          points={{-71,2},{-54,2},{-54,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(veinsO2.FHbF,busConnector. FHbF)              annotation (Line(
          points={{-71,-2},{-54,-2},{-54,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(veinsO2.pCO,busConnector. pCO)              annotation (Line(
          points={{-71,-6},{-54,-6},{-54,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.CO2Veins_pCO2,veinsO2. pCO2)              annotation (
          Line(
          points={{92,34},{-96,34},{-96,6},{-89,6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Veins_pH,veinsO2. pH)  annotation (Line(
          points={{92,34},{-96,34},{-96,10},{-89,10}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.core_T,veinsO2. T)       annotation (Line(
          points={{92,34},{-96,34},{-96,2},{-89,2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(veins.q_out,veinsO2. q_in)  annotation (Line(
          points={{-82,-36},{-82,-8},{-80,-8}},
          color={200,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(busConnector.O2Veins_sO2,veinsO2. sO2)  annotation (Line(
          points={{92,34},{-96,34},{-96,-18},{-80,-18},{-80,-12}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-3,-3},{-3,-3}}));
      connect(artysO2.sO2,busConnector. O2Artys_sO2) annotation (Line(
          points={{70,-14},{70,-20},{98,-20},{98,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{3,-3},{3,-3}}));
      connect(artysO2.pO2,busConnector. O2Artys_PO2) annotation (Line(
          points={{74,-14},{98,-14},{98,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.CO2Lung_pCO2,O2Lung. pCO2)               annotation (
          Line(
          points={{92,34},{-54,34},{-54,6},{-19,6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(O2Lung.ctHb,busConnector. ctHb)               annotation (Line(
          points={{-1,10},{30,10},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Lung.cDPG,busConnector. cDPG)               annotation (Line(
          points={{-1,6},{30,6},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Lung.FMetHb,busConnector. FMetHb)               annotation (Line(
          points={{-1,2},{30,2},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Lung.FHbF,busConnector. FHbF)               annotation (Line(
          points={{-1,-2},{30,-2},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Lung.pCO,busConnector. pCO)               annotation (Line(
          points={{-1,-6},{30,-6},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.AlveolarVentilated_BloodFlow,O2Lung. BloodFlow)
        annotation (Line(
          points={{92,34},{-54,34},{-54,-3.4},{-20,-3.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(O2Lung.sO2,busConnector. O2Lung_sO2) annotation (Line(
          points={{-10,-12},{-10,-18},{30,-18},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-3},{6,-3}}));
      connect(busConnector.core_T,O2Lung. T) annotation (Line(
          points={{92,34},{-54,34},{-54,2},{-19,2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(veins.q_out,O2Lung. q_in) annotation (Line(
          points={{-82,-36},{-82,-9},{-19,-9}},
          color={200,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(O2Lung.q_out,artys. q_out) annotation (Line(
          points={{-1,-9},{66,-9},{66,-78}},
          color={200,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(busConnector.Lung_pH,O2Lung. pH) annotation (Line(
          points={{92,34},{-54,34},{-54,10},{-19,10}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(alveolarVentilation.AlveolarVentilation_Env,busConnector. AlveolarVentilation_Env)
        annotation (Line(
          points={{-4,60},{30,60},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(alveolarVentilation.BronchiDilution,busConnector. BronchiDilution)
        annotation (Line(
          points={{-4,54},{30,54},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(alveolarVentilation.alveolar,gasSolubility. q_out) annotation (Line(
          points={{-11.8,48},{-12,48},{-12,40}},
          color={107,45,134},
          thickness=1,
          smooth=Smooth.None));
      connect(O2Lung.alveolar,gasSolubility. q_in) annotation (Line(
          points={{-10.4,8.2},{-12,8.2},{-12,22}},
          color={107,45,134},
          thickness=1,
          smooth=Smooth.None));
    connect(artys.solutionVolume,busConnector. ArtysVol) annotation (Line(
        points={{62,-74},{62,-66},{30,-66},{30,34},{92,34}},
        color={0,0,127},
        smooth=Smooth.None), Text(
        string="%second",
        index=1,
        extent={{6,3},{6,3}}));
    connect(veins.solutionVolume,busConnector. VeinsVol) annotation (Line(
        points={{-86,-32},{-86,-26},{-96,-26},{-96,34},{92,34}},
        color={0,0,127},
        smooth=Smooth.None), Text(
        string="%second",
        index=1,
        extent={{6,3},{6,3}}));
    connect(alveolus.port,gasSolubility. heatPort) annotation (Line(
        points={{0,30},{-12,30}},
        color={191,0,0},
        thickness=1,
        smooth=Smooth.None));
    connect(air.q_out,alveolarVentilation. inspired) annotation (Line(
        points={{-28,82},{-22,82},{-22,66}},
        color={107,45,134},
        thickness=1,
        smooth=Smooth.None));
    connect(air.q_out,alveolarVentilation. expired) annotation (Line(
        points={{-28,82},{10,82},{10,66},{-2,66}},
        color={107,45,134},
        thickness=1,
        smooth=Smooth.None));
    connect(environment.port,air. heatPort) annotation (Line(
        points={{-54,64},{-38,64},{-38,82}},
        color={191,0,0},
        thickness=1,
        smooth=Smooth.None));
    connect(tissuesO2.busConnector,busConnector)  annotation (Line(
        points={{-16.2,-72.6},{-16.2,-62},{100,-62},{100,34},{92,34}},
        color={255,204,51},
        thickness=0.5,
        smooth=Smooth.None), Text(
        string="%second",
        index=1,
        extent={{6,3},{6,3}}));
      connect(busConnector.FiO2, PO2.gasFractionConcentration) annotation (Line(
          points={{92,34},{92,34},{92,98},{-98,98},{-98,79.5},{-67.2,79.5}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.BarometerPressure, PO2.pressure) annotation (Line(
          points={{92,34},{92,34},{92,98},{-98,98},{-98,85.1},{-67.2,85.1}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(PO2.partialPressure, air.partialPressure)
        annotation (Line(points={{-53.1,82},{-48,82}}, color={0,0,127}));
      connect(busConnector.AmbientTemperature, environment.temperature)
        annotation (Line(
          points={{92,34},{92,34},{92,98},{-98,98},{-98,64},{-74,64}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.core_T, alveolus.temperature) annotation (Line(
          points={{92,34},{90,34},{90,36},{90,34},{30,34},{30,30},{8,30}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(tissuesO2.arty, artys.q_out) annotation (Line(
          points={{4,-80},{36,-80},{36,-78},{66,-78}},
          color={107,45,134},
          thickness=1));
      connect(tissuesO2.vein, veins.q_out) annotation (Line(
          points={{-20,-80},{-50,-80},{-50,-78},{-82,-78},{-82,-36}},
          color={107,45,134},
          thickness=1));
      connect(pulmShortCircuitFlow.y, pulmShortCircuit.solutionFlow)
        annotation (Line(points={{3,-46},{-8,-46},{-8,-39}}, color={0,0,127}));
      connect(veinsO2.q_in, pulmShortCircuit.q_in) annotation (Line(
          points={{-80,-8},{-50,-8},{-50,-32},{-18,-32}},
          color={107,45,134},
          thickness=1));
      connect(pulmShortCircuit.q_out, artysO2.q_in) annotation (Line(
          points={{2,-32},{36,-32},{36,-10},{70,-10}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}),
                       graphics={
                      Bitmap(extent={{-100,102},{100,-98}},  fileName=
                  "modelica://Physiolibrary/Resources/Icons/O2.png"), Text(
              extent={{-130,-100},{146,-148}},
              lineColor={28,108,200},
              textString="%name")}),                                    Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}})));
    end O2Physiomodel;

    model CO2Physiomodel
     extends Physiolibrary.Icons.CarbonDioxide;
      Physiolibrary.Chemical.Components.Substance                veins(
                                                               stateName=
            "CO2Veins.Mass[mMol]",
      useNormalizedVolume=false,
      solute_start=0.0869)
        annotation (Placement(transformation(extent={{-96,-14},{-76,6}})));
      Physiolibrary.Chemical.Components.Substance                artys(
                                                               stateName=
            "CO2Artys.Mass[mMol]",
      useNormalizedVolume=false,
      solute_start=0.0343)
        annotation (Placement(transformation(extent={{92,-12},{72,8}})));
      TissuesCO2 CO2Tissues
        annotation (Placement(transformation(extent={{-48,-40},{-28,-20}})));

    Physiolibrary.Types.BusConnector busConnector annotation (Placement(
          transformation(extent={{-114,-62},{-74,-22}}), iconTransformation(
            extent={{60,40},{100,80}})));
      Physiolibrary.Chemical.Sources.UnlimitedGasStorage air(useHeatPort=true,
          usePartialPressureInput=true)
        annotation (Placement(transformation(extent={{-60,84},{-48,96}})));
    AlveolarVentilation alveolarVentilation
        annotation (Placement(transformation(extent={{-10,-10},{10,10}}, origin={0,78})));
                                                  /*(
    solventFlowPump(q_out(conc(start=0.05))))*/
    Physiolibrary.Chemical.Components.Stream pulmShortCircuit(
        useSolutionFlowInput=true)
      annotation (Placement(transformation(extent={{-22,14},{-2,-6}})));
      Modelica.Blocks.Math.Feedback pulmShortCircuitFlow
        annotation (Placement(transformation(extent={{10,-10},{-10,10}},
            rotation=270,
            origin={-12,-10})));
    //1000 * 1.977/40.01
      MeassureBloodCO2 veinsCO2(tCO2_P(start=27.4), pCO2(
            start=6240))
        annotation (Placement(transformation(extent={{-96,22},{-76,42}})));
      MeassureBloodCO2 artysCO2(tCO2_P(start=26), pCO2(start=5330))
        annotation (Placement(transformation(extent={{72,22},{92,42}})));

      BloodCO2 CO2Lung(
        q_in(q(start=115.472)),
        tCO2_P(start=24.9),
      pCO2(start=5160))
        annotation (Placement(transformation(extent={{-10,22},{10,42}})));

    Physiolibrary.Chemical.Components.GasSolubility gasSolubility(
      useHeatPort=true,
        C=2400,
      kH_T0(displayUnit="(mmol/l)/(mmol/l)") = 0.604,
      solubilityRateCoef(displayUnit="m3/s") = 0.1,
      T0=310.15)
      annotation (Placement(transformation(extent={{-10,44},{10,64}})));
    Physiolibrary.Thermal.Sources.UnlimitedHeat environment(useTemperatureInput=
           true, T=298.15)
      annotation (Placement(transformation(extent={{-80,60},{-70,68}})));
    Physiolibrary.Thermal.Sources.UnlimitedHeat alveolus(useTemperatureInput=
            true, T=310.15)
      annotation (Placement(transformation(extent={{64,58},{84,78}})));
      Modelica.Blocks.Math.Product product
        annotation (Placement(transformation(extent={{-78,84},{-66,96}})));
    equation
      connect(CO2Tissues.q_out, veins.q_out)   annotation (Line(
          points={{-45.4,-30},{-70,-30},{-70,-4},{-86,-4}},
          color={102,44,145},
          thickness=1));
      connect(air.q_out, alveolarVentilation.expired) annotation (Line(
          points={{-48,90},{14,90},{14,86},{10,86}},
          color={102,44,145},
          thickness=1));
    connect(pulmShortCircuit.solutionFlow, pulmShortCircuitFlow.y)
      annotation (Line(
        points={{-12,-3},{-12,-1}},
        color={0,0,127},
        smooth=Smooth.None));
      connect(pulmShortCircuitFlow.u1, busConnector.CardiacOutput)
        annotation (Line(
          points={{-12,-18},{10,-18},{10,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.AlveolarVentilated_BloodFlow, pulmShortCircuitFlow.u2)
        annotation (Line(
          points={{-94,-42},{-54,-42},{-54,-10},{-20,-10}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(veins.q_out, pulmShortCircuit.q_in)    annotation (Line(
          points={{-86,-4},{-86,24},{-46,24},{-46,4},{-22,4}},
          color={102,44,145},
          thickness=1));
      connect(pulmShortCircuit.q_out, artys.q_out)    annotation (Line(
          points={{-2,4},{24,4},{24,24},{82,24},{82,-2}},
          color={102,44,145},
          thickness=1));
      connect(busConnector.Veins_pH, veinsCO2.pH)             annotation (
          Line(
          points={{-94,-42},{-100,-42},{-100,40},{-95,40}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Veins_pH_ery, veinsCO2.pH_ery)
        annotation (Line(
          points={{-94,-42},{-100,-42},{-100,36},{-95,36}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(veinsCO2.sO2, busConnector.O2Veins_sO2)             annotation (
          Line(
          points={{-77,32},{-54,32},{-54,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(veinsCO2.Hct, busConnector.BloodVol_Hct)             annotation (Line(
          points={{-77,36},{-54,36},{-54,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(veinsCO2.T, busConnector.core_T)
                                              annotation (Line(
          points={{-77,40},{-54,40},{-54,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(veinsCO2.cHCO3, busConnector.CO2Veins_cHCO3)
                                                          annotation (Line(
          points={{-78,20},{-78,14},{-100,14},{-100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{3,-3},{3,-3}}));
      connect(veins.q_out, veinsCO2.q_in)   annotation (Line(
          points={{-86,-4},{-86,24}},
          color={200,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(busConnector.Artys_pH, artysCO2.pH)             annotation (
          Line(
          points={{-94,-42},{50,-42},{50,40},{73,40}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Artys_pH_ery, artysCO2.pH_ery)
        annotation (Line(
          points={{-94,-42},{50,-42},{50,36},{73,36}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(artysCO2.sO2, busConnector.O2Artys_sO2)             annotation (
          Line(
          points={{91,32},{100,32},{100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(artysCO2.Hct, busConnector.BloodVol_Hct)             annotation (Line(
          points={{91,36},{100,36},{100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(artysCO2.T, busConnector.core_T)       annotation (Line(
          points={{91,40},{100,40},{100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(artysCO2.q_in, artys.q_out)    annotation (Line(
          points={{82,24},{82,-2}},
          color={200,0,0},
          thickness=1,
          smooth=Smooth.None));
      connect(artysCO2.cHCO3, busConnector.CO2Artys_cHCO3) annotation (Line(
          points={{90,20},{90,14},{100,14},{100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{3,-3},{3,-3}}));
      connect(veinsCO2.pCO2, busConnector.CO2Veins_pCO2)     annotation (Line(
          points={{-82,20},{-82,16},{-100,16},{-100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(artysCO2.pCO2, busConnector.CO2Artys_pCO2) annotation (
          Line(
          points={{86,20},{86,12},{100,12},{100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(busConnector, CO2Tissues.busConnector) annotation (Line(
          points={{-94,-42},{-54,-42},{-54,-20.8},{-46.8,-20.8}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None));
      connect(CO2Lung.sO2, busConnector.O2Lung_sO2)              annotation (
          Line(
          points={{9,32},{50,32},{50,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.AlveolarVentilated_BloodFlow,CO2Lung. BloodFlow)
        annotation (Line(
          points={{-94,-42},{-54,-42},{-54,32},{-9,32}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(CO2Lung.q_out, artys.q_out)                 annotation (Line(
          points={{10,24},{82,24},{82,-2}},
          color={102,44,145},
          thickness=1));
      connect(CO2Lung.Hct, busConnector.BloodVol_Hct)              annotation (Line(
          points={{9,36},{50,36},{50,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(CO2Lung.T, busConnector.core_T) annotation (Line(
          points={{9,40},{50,40},{50,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(CO2Lung.pCO2, busConnector.CO2Lung_pCO2) annotation (Line(
          points={{4,20},{4,10},{10,10},{10,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-5},{6,-5}}));
      connect(CO2Lung.cHCO3, busConnector.CO2Lung_cHCO3) annotation (Line(
          points={{8,20},{8,12},{10,12},{10,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(veins.q_out, CO2Lung.q_in)    annotation (Line(
          points={{-86,-4},{-86,24},{-10,24}},
          color={102,44,145},
          thickness=1));
      connect(busConnector.lungs_pH_plasma, CO2Lung.pH) annotation (Line(
          points={{-94,-42},{-54,-42},{-54,40},{-9,40}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.lungs_pH_ery, CO2Lung.pH_ery) annotation (Line(
          points={{-94,-42},{-54,-42},{-54,36},{-9,36}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(alveolarVentilation.AlveolarVentilation_Env, busConnector.AlveolarVentilation_Env)
        annotation (Line(
          points={{8,80},{100,80},{100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(artys.q_out, CO2Tissues.q_in) annotation (Line(
          points={{82,-2},{52,-2},{52,-30},{-26,-30}},
          color={102,44,145},
          thickness=1));
      connect(alveolarVentilation.BronchiDilution, busConnector.BronchiDilution)
        annotation (Line(
          points={{8,74},{100,74},{100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
    connect(alveolarVentilation.alveolar, gasSolubility.q_out) annotation (
        Line(
        points={{0.2,68},{0,68},{0,64}},
        color={107,45,134},
        thickness=1,
        smooth=Smooth.None));
    connect(CO2Lung.alveolar_outflow, gasSolubility.q_in) annotation (Line(
        points={{0,42},{0,46}},
        color={107,45,134},
        thickness=1,
        smooth=Smooth.None));
    connect(busConnector.VeinsVol, veins.solutionVolume) annotation (Line(
        points={{-94,-42},{-100,-42},{-100,0},{-90,0}},
        color={0,0,255},
        thickness=0.5,
        smooth=Smooth.None), Text(
        string="%first",
        index=-1,
        extent={{-6,3},{-6,3}}));
    connect(artys.solutionVolume, busConnector.ArtysVol) annotation (Line(
        points={{86,2},{100,2},{100,-42},{-94,-42}},
        color={0,0,127},
        smooth=Smooth.None), Text(
        string="%second",
        index=1,
        extent={{6,3},{6,3}}));
    connect(environment.port, air.heatPort) annotation (Line(
        points={{-70,64},{-54,64},{-54,90}},
        color={191,0,0},
        thickness=1,
        smooth=Smooth.None));
    connect(alveolus.port, gasSolubility.heatPort) annotation (Line(
        points={{84,68},{94,68},{94,54},{0,54}},
        color={191,0,0},
        thickness=1,
        smooth=Smooth.None));
      connect(busConnector.AmbientTemperature, environment.temperature)
        annotation (Line(
          points={{-94,-42},{-84,-42},{-84,-40},{-100,-40},{-100,64},{-80,64}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));

      connect(busConnector.core_T, alveolus.temperature) annotation (Line(
          points={{-94,-42},{4,-42},{102,-42},{102,88},{52,88},{52,68},{64,68}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));

      connect(air.partialPressure, product.y) annotation (Line(points={{-60,90},
              {-62,90},{-65.4,90}}, color={0,0,127}));
      connect(busConnector.FiCO2, product.u2) annotation (Line(
          points={{-94,-42},{-100,-42},{-100,86.4},{-79.2,86.4}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.BarometerPressure, product.u1) annotation (Line(
          points={{-94,-42},{-100,-42},{-100,93.6},{-79.2,93.6}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(alveolarVentilation.inspired, air.q_out) annotation (Line(
          points={{-10,86},{-30,86},{-30,90},{-48,90}},
          color={107,45,134},
          thickness=1));
      annotation ( Icon(coordinateSystem(
              preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
            graphics={Text(
              extent={{-100,-98},{130,-144}},
              lineColor={28,108,200},
              textString="%name")}),
        Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
<tr>
<td></td>
<td><p>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</p></td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}})));
    end CO2Physiomodel;

    model AcidBase
      extends Physiolibrary.Icons.AcidBase;
    BloodPhMeassure artysPH(_BEox(start=-0.177))
        annotation (Placement(transformation(extent={{86,28},{58,56}})));
    BloodPhMeassure veinsPH(_cTHox(start=0), pH(
            start=7.37))
        annotation (Placement(transformation(extent={{-56,28},{-84,56}})));

    Physiolibrary.Types.BusConnector busConnector annotation (Placement(
          transformation(extent={{-44,72},{-4,112}}), iconTransformation(
            extent={{-20,-18},{20,22}})));

    //initial equation
    //  ArtysPh.pH=7.4;

    BloodPhMeassure lungsPH
        annotation (Placement(transformation(extent={{28,28},{0,56}})));
    BloodPhMeassure tissueVeinPH(pH(start=7.4), cHb=43)
        annotation (Placement(transformation(extent={{28,-52},{0,-24}})));
    equation
      connect(busConnector.O2Artys_sO2,artysPH. sO2)        annotation (Line(
          points={{-24,92},{-24,74},{44,74},{44,60},{64,60},{64,57.4},{63.6,
            57.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,6},{-6,6}}));
      connect(busConnector.O2Veins_sO2, veinsPH.sO2)         annotation (Line(
          points={{-24,92},{-24,74},{-100,74},{-100,60},{-78,60},{-78,57.4},{
            -78.4,57.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,6},{-6,6}}));
      connect(busConnector.ctAlb,artysPH. ctAlb)    annotation (Line(
          points={{-24,92},{-24,74},{44,74},{44,42},{59.4,42}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CO2Artys_cHCO3,artysPH. cHCO3)    annotation (Line(
          points={{-24,92},{-24,74},{44,74},{44,53.2},{59.4,53.2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctAlb, veinsPH.ctAlb)    annotation (Line(
          points={{-24,92},{-24,74},{-100,74},{-100,42},{-82.6,42}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CO2Veins_cHCO3, veinsPH.cHCO3)    annotation (Line(
          points={{-24,92},{-24,74},{-100,74},{-100,53.2},{-82.6,53.2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(artysPH.pH, busConnector.Artys_pH)    annotation (Line(
          points={{74.8,25.2},{74.8,16},{98,16},{98,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-8},{6,-8}}));
      connect(artysPH.pH_ery, busConnector.Artys_pH_ery)    annotation (Line(
          points={{69.2,25.2},{69.2,10},{98,10},{98,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-13},{6,-13}}));
      connect(veinsPH.pH, busConnector.Veins_pH)    annotation (Line(
          points={{-67.2,25.2},{-67.2,16},{-24,16},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-8},{6,-8}}));
      connect(veinsPH.pH_ery, busConnector.Veins_pH_ery)    annotation (Line(
          points={{-72.8,25.2},{-72.8,10},{-24,10},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-13},{6,-13}}));
      connect(busConnector.ctGlb,artysPH. ctGlb) annotation (Line(
          points={{-24,92},{-24,74},{44,74},{44,36.4},{59.4,36.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctPO4,artysPH. ctPO4) annotation (Line(
          points={{-24,92},{-24,74},{44,74},{44,30.8},{59.4,30.8}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctGlb, veinsPH.ctGlb) annotation (Line(
          points={{-24,92},{-24,74},{-100,74},{-100,36.4},{-82.6,36.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctPO4, veinsPH.ctPO4) annotation (Line(
          points={{-24,92},{-24,74},{-100,74},{-100,30.8},{-82.6,30.8}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(artysPH.pH, busConnector.BloodPh_ArtysPh) annotation (Line(
          points={{74.8,25.2},{74.8,16},{98,16},{98,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(busConnector.ctAlb,lungsPH. ctAlb)    annotation (Line(
          points={{-24,92},{-14,92},{-14,42},{1.4,42}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(lungsPH.pH, busConnector.Lung_pH)     annotation (Line(
          points={{16.8,25.2},{16.8,14},{34,14},{34,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-8},{6,-8}}));
      connect(lungsPH.pH_ery, busConnector.Lung_pH_ery)     annotation (Line(
          points={{11.2,25.2},{11.2,8},{34,8},{34,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-13},{6,-13}}));
      connect(busConnector.ctGlb,lungsPH. ctGlb) annotation (Line(
          points={{-24,92},{-14,92},{-14,36.4},{1.4,36.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctPO4,lungsPH. ctPO4) annotation (Line(
          points={{-24,92},{-14,92},{-14,30.8},{1.4,30.8}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.O2Lung_sO2,lungsPH. sO2)              annotation (Line(
          points={{-24,92},{-14,92},{-14,57.4},{5.6,57.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.CO2Lung_cHCO3,lungsPH. cHCO3)              annotation (
          Line(
          points={{-24,92},{-14,92},{-14,53.2},{1.4,53.2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(lungsPH.pH, busConnector.lungs_pH_plasma) annotation (Line(
          points={{16.8,25.2},{16.8,14},{34,14},{34,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(lungsPH.pH_ery, busConnector.lungs_pH_ery) annotation (Line(
          points={{11.2,25.2},{11.2,8},{34,8},{34,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(busConnector.ctHb, veinsPH.ctHb) annotation (Line(
          points={{-24,92},{-24,74},{-100,74},{-100,47.6},{-82.6,47.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctHb, lungsPH.ctHb) annotation (Line(
          points={{-24,92},{-14,92},{-14,47.6},{1.4,47.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctHb, artysPH.ctHb) annotation (Line(
          points={{-24,92},{-24,74},{44,74},{44,47.6},{59.4,47.6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));

      connect(busConnector.BEox, veinsPH.BEox) annotation (Line(
          points={{-24,92},{-57.4,92},{-57.4,57.4}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.BEox, lungsPH.BEox) annotation (Line(
          points={{-24,92},{26.6,92},{26.6,57.4}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.BEox, artysPH.BEox) annotation (Line(
          points={{-24,92},{84.6,92},{84.6,57.4}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctHb, tissueVeinPH.ctHb) annotation (Line(
          points={{-24,92},{-24,92},{-24,-32.4},{1.4,-32.4}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.tissueVein_cHCO3, tissueVeinPH.cHCO3) annotation (
          Line(
          points={{-24,92},{-24,92},{-24,-26.8},{1.4,-26.8}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctAlb, tissueVeinPH.ctAlb) annotation (Line(
          points={{-24,92},{-24,92},{-24,-38},{1.4,-38}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctGlb, tissueVeinPH.ctGlb) annotation (Line(
          points={{-24,92},{-24,92},{-24,-43.6},{1.4,-43.6}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.ctPO4, tissueVeinPH.ctPO4) annotation (Line(
          points={{-24,92},{-24,92},{-24,-48},{-24,-49.2},{1.4,-49.2}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.tissueVein_sO2, tissueVeinPH.sO2) annotation (Line(
          points={{-24,92},{-24,92},{-24,-14},{-24,-16},{5.6,-16},{5.6,-22.6}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));

      connect(busConnector.BEox, tissueVeinPH.BEox) annotation (Line(
          points={{-24,92},{-24,92},{-24,-8},{26.6,-8},{26.6,-22.6}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(tissueVeinPH.pH, busConnector.tissueVein_pH) annotation (Line(
            points={{16.8,-54.8},{16.8,-60},{34,-60},{34,92},{-24,92}}, color={
              0,0,127}));
      connect(tissueVeinPH.pH_ery, busConnector.tissueVein_pH_ery) annotation (
          Line(points={{11.2,-54.8},{11.2,-64},{34,-64},{34,92},{-24,92}},
            color={0,0,127}));
      annotation ( Icon(coordinateSystem(
              preserveAspectRatio=true, extent={{-100,-100},{100,100}}),
            graphics={                 Text(
              extent={{-118,-84},{124,-118}},
              lineColor={0,0,255},
              textString="%name")}),
        Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
<tr>
<td></td>
<td>Noriaki Ikeda: A model of overall regulation of body fluids (1979), Kitasato University</td>
</tr>
<tr>
<td></td>
<td><p>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</p></td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}})));
    end AcidBase;

    model Ventilation
      extends Physiolibrary.Icons.Ventilation;
    Physiolibrary.Types.BusConnector busConnector annotation (Placement(
          transformation(extent={{66,-30},{86,-10}}), iconTransformation(
            extent={{80,40},{120,80}})));
    AlveolarVentilation_BTPS alveolarVentilation
        annotation (Placement(transformation(extent={{-15,-15},{15,15}}, origin={-37,
                -43})));
    equation
      connect(alveolarVentilation.core_T,busConnector. core_T)
        annotation (Line(
          points={{-25,-46},{18,-46},{18,-20},{76,-20}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.BarometerPressure,alveolarVentilation. EnvironmentPressure)
        annotation (Line(
          points={{76,-20},{-72,-20},{-72,-37},{-49,-37}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.AmbientTemperature,alveolarVentilation. AmbientTemperature)
        annotation (Line(
          points={{76,-20},{-72,-20},{-72,-28},{-49,-28}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.EnvironmentRelativeHumidity,alveolarVentilation. EnvironmentRelativeHumidity)
        annotation (Line(
          points={{76,-20},{-72,-20},{-72,-46},{-49,-46}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(alveolarVentilation.BronchiDilution, busConnector.BronchiDilution)
        annotation (Line(
          points={{-22,-58},{76,-58},{76,-20}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
    connect(alveolarVentilation.AlveolarVentilation, busConnector.AlveolarVentilation_Env)
      annotation (Line(
        points={{-22,-52},{76,-52},{76,-20}},
        color={0,0,127},
        smooth=Smooth.None), Text(
        string="%second",
        index=1,
        extent={{6,3},{6,3}}));
      connect(alveolarVentilation.RespRate, busConnector.RespRate) annotation (Line(
            points={{-25,-40},{-4,-40},{18,-40},{18,-20},{76,-20}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(alveolarVentilation.DeadSpace, busConnector.DeadSpace) annotation (
          Line(points={{-25,-34},{-4,-34},{18,-34},{18,-20},{76,-20}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(alveolarVentilation.TidalVolume, busConnector.TidalVolume)
        annotation (Line(points={{-25,-28},{-4,-28},{18,-28},{18,-20},{76,-20}},
            color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                -100},{100,100}}), graphics={Text(
              extent={{-120,-108},{130,-126}},
              lineColor={0,0,255},
              textString="%name")}), Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}})));
    end Ventilation;

    model BloodyMary_Physiomodel
      AcidBase acidBaseBalance
        annotation (Placement(transformation(extent={{34,-40},{82,8}})));
      CO2Physiomodel CO2balance
        annotation (Placement(transformation(extent={{-24,-36},{16,4}})));
      O2Physiomodel O2Balance
        annotation (Placement(transformation(extent={{-92,-36},{-40,2}})));
      Ventilation ventilation
        annotation (Placement(transformation(extent={{-60,52},{-32,80}})));
      Physiolibrary.Types.BusConnector busConnector
        annotation (Placement(transformation(extent={{50,38},{90,78}})));
      BodyBEox bodyBEox
        annotation (Placement(transformation(extent={{80,80},{100,100}})));
      kidney kidney1
        annotation (Placement(transformation(extent={{80,20},{100,40}})));
    equation
      connect(O2Balance.busConnector, busConnector) annotation (Line(
          points={{-45.2,-1.8},{-45.2,34},{70,34},{70,58}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(CO2balance.busConnector, busConnector) annotation (Line(
          points={{12,-4},{12,-4},{12,24},{12,30},{70,30},{70,58}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(acidBaseBalance.busConnector, busConnector) annotation (Line(
          points={{58,-15.52},{58,20},{70,20},{70,58}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(ventilation.busConnector, busConnector) annotation (Line(
          points={{-32,74.4},{-6,74.4},{-6,74},{34,74},{34,48},{34,46},{70,46},
              {70,58}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector, bodyBEox.busConnector) annotation (Line(
          points={{70,58},{76,58},{76,98},{82,98}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector, kidney1.busConnector) annotation (Line(
          points={{70,58},{76,58},{76,38.2},{82,38.2}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}})),      Icon(coordinateSystem(
              preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
            graphics={Rectangle(
              extent={{-100,100},{100,-100}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid), Text(
              extent={{-92,80},{88,-18}},
              lineColor={28,108,200},
              fillColor={255,255,0},
              fillPattern=FillPattern.Solid,
              textString="Bloody Mary
(Physiomodel)")}));
    end BloodyMary_Physiomodel;

    model TestInputs

      Physiolibrary.Types.BusConnector busConnector
        annotation (Placement(transformation(extent={{54,-20},{94,20}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst
        constAlveolarVentilated_BloodFlow(k=9.0294166666667e-05)
        annotation (Placement(transformation(extent={{-88,94},{-80,98}})));
      Physiolibrary.Types.Constants.TemperatureConst constAmbientTemperature(k=
            295.37222)
        annotation (Placement(transformation(extent={{-88,86},{-80,90}})));
      Physiolibrary.Types.Constants.VolumeConst constArtysVol(k=0.00162155)
        annotation (Placement(transformation(extent={{-88,76},{-80,80}})));
      Modelica.Blocks.Sources.Constant                  constBEox(k=-5)
                annotation (Placement(transformation(extent={{-90,58},{-82,62}})));
      Physiolibrary.Types.Constants.PressureConst constBarometerPressure(k(
            displayUnit="mmHg") = 101325.0144354)
        annotation (Placement(transformation(extent={{-88,46},{-80,50}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst constCardiacOutput(k=
            9.0294166666667e-05)
        annotation (Placement(transformation(extent={{-86,38},{-78,42}})));
      Physiolibrary.Types.Constants.VolumeConst constDeadSpace(k=0.000171674)
        annotation (Placement(transformation(extent={{-88,14},{-80,18}})));

      Physiolibrary.Types.Constants.FractionConst constEnvironmentRelativeHumidity(
          k=0.5) "Just a tip"
                             annotation (Placement(transformation(extent={{-88,4},
                {-80,8}})));
      Physiolibrary.Types.Constants.FractionConst constFHbF(k=0.005)
        annotation (Placement(transformation(extent={{-86,-6},{-78,-2}})));
      Physiolibrary.Types.Constants.FractionConst constFMetHb(k=0.005)
        annotation (Placement(transformation(extent={{-86,-16},{-78,-12}})));
      Physiolibrary.Types.Constants.FractionConst constFiO2(k=0.21)
        "Not in physiomodel"
        annotation (Placement(transformation(extent={{-86,-28},{-78,-24}})));
      Physiolibrary.Types.Constants.FrequencyConst constRespRate(k=
            0.20166666666667)
        annotation (Placement(transformation(extent={{-88,-56},{-80,-52}})));
      Physiolibrary.Types.Constants.VolumeConst constTidalVolume(k=0.0005)
        "Not Known"
        annotation (Placement(transformation(extent={{-86,-78},{-78,-74}})));
      Physiolibrary.Types.Constants.VolumeConst constVeinsVol(k=0.00361)
        annotation (Placement(transformation(extent={{-58,82},{-50,86}})));
      Physiolibrary.Types.Constants.ConcentrationConst constcDPG(k(displayUnit="mol/m3")=
             5.4)
        annotation (Placement(transformation(extent={{-36,22},{-28,26}})));
      Physiolibrary.Types.Constants.TemperatureConst constcore_T(k(displayUnit=
              "degC") = 310.22)
        annotation (Placement(transformation(extent={{-34,10},{-26,14}})));
      Physiolibrary.Types.Constants.ConcentrationConst constctAlb(k(displayUnit=
             "mmol/l") = 0.629267)
        annotation (Placement(transformation(extent={{-34,0},{-26,4}})));
      Physiolibrary.Types.Constants.MassConcentrationConst
                                                       constctGlb(k=27.9924)
        annotation (Placement(transformation(extent={{-34,-10},{-26,-6}})));
      Physiolibrary.Types.Constants.ConcentrationConst constctHb(k(displayUnit="mol/m3")=
             9.79719)
        annotation (Placement(transformation(extent={{-34,-22},{-26,-18}})));
      Physiolibrary.Types.Constants.ConcentrationConst constctPO4(k=0.162792)
        annotation (Placement(transformation(extent={{-34,-32},{-26,-28}})));
      Physiolibrary.Types.Constants.PressureConst constpCO(k(displayUnit="Pa") = 0)
        annotation (Placement(transformation(extent={{-34,-44},{-26,-40}})));
      Physiolibrary.Types.Constants.pHConst constpH(k=7.39) "OF WHAT?"
        annotation (Placement(transformation(extent={{-34,-60},{-26,-56}})));
      Physiolibrary.Types.Constants.MolarFlowRateConst VCO2(k=0.000145717)
        "metabolic CO2 production rate"
        annotation (Placement(transformation(extent={{-40,70},{-30,74}})));
      Physiolibrary.Types.Constants.MolarFlowRateConst VO2(k=0.00018309)
        "metabolic O2 consumption rate"
        annotation (Placement(transformation(extent={{-40,62},{-30,66}})));
      Physiolibrary.Types.Constants.FractionConst bloofVol_Hct(k=0.464)
        "hematocrit"
        annotation (Placement(transformation(extent={{-82,26},{-74,30}})));
      Physiolibrary.Types.Constants.FractionConst constFiCO2(k=0)
        "Not in physiomodel"
        annotation (Placement(transformation(extent={{-86,-42},{-78,-38}})));
      Modelica.Blocks.Sources.Ramp stepFiCO2(height=0.05, startTime=4800,
        duration=0)
        annotation (Placement(transformation(extent={{-72,-40},{-64,-32}})));
    equation
      connect(constAlveolarVentilated_BloodFlow.y, busConnector.AlveolarVentilated_BloodFlow)
        annotation (Line(points={{-79,96},{4,96},{4,0},{74,0}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constAmbientTemperature.y, busConnector.AmbientTemperature)
        annotation (Line(points={{-79,88},{4,88},{4,0},{74,0}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constArtysVol.y, busConnector.ArtysVol) annotation (Line(points={{-79,
              78},{4,78},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constBarometerPressure.y, busConnector.BarometerPressure) annotation (
         Line(points={{-79,48},{4,48},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constCardiacOutput.y, busConnector.CardiacOutput) annotation (Line(
            points={{-77,40},{4,40},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constDeadSpace.y, busConnector.DeadSpace) annotation (Line(points={{-79,16},
              {4,16},{4,0},{74,0}},     color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constEnvironmentRelativeHumidity.y, busConnector.EnvironmentRelativeHumidity)
        annotation (Line(points={{-79,6},{4,6},{4,0},{74,0}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constFHbF.y, busConnector.FHbF) annotation (Line(points={{-77,-4},{4,-4},
              {4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constFMetHb.y, busConnector.FMetHb) annotation (Line(points={{-77,-14},
              {4,-14},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constFiO2.y, busConnector.FiO2) annotation (Line(points={{-77,-26},{4,
              -26},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constRespRate.y, busConnector.RespRate) annotation (Line(points={{-79,-54},
              {4,-54},{4,0},{74,0}},      color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constTidalVolume.y, busConnector.TidalVolume) annotation (Line(points={{-77,-76},
              {4,-76},{4,0},{74,0}},           color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constVeinsVol.y, busConnector.VeinsVol) annotation (Line(points={{-49,84},
              {4,84},{4,0},{74,0}},     color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constcDPG.y, busConnector.cDPG) annotation (Line(points={{-27,24},{4,24},
              {4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constcore_T.y, busConnector.core_T) annotation (Line(points={{-25,12},
              {4,12},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constctAlb.y, busConnector.ctAlb) annotation (Line(points={{-25,2},{4,
              2},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constctGlb.y, busConnector.ctGlb) annotation (Line(points={{-25,-8},{4,
              -8},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constctHb.y, busConnector.ctHb) annotation (Line(points={{-25,-20},{4,
              -20},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constctPO4.y, busConnector.ctPO4) annotation (Line(points={{-25,-30},{
              4,-30},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constpCO.y, busConnector.pCO) annotation (Line(points={{-25,-42},{4,-42},
              {4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(constpH.y, busConnector.pH) annotation (Line(points={{-25,-58},{4,-58},
              {4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));

      connect(VO2.y, busConnector.VO2) annotation (Line(points={{-28.75,64},{
              -12,64},{4,64},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(VCO2.y, busConnector.VCO2) annotation (Line(points={{-28.75,72},{
              -12,72},{4,72},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(bloofVol_Hct.y, busConnector.BloodVol_Hct) annotation (Line(
            points={{-73,28},{-34,28},{-34,30},{4,30},{4,0},{74,0}}, color={0,0,
              127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(stepFiCO2.y, busConnector.FiCO2) annotation (Line(points={{-63.6,
              -36},{-30,-36},{4,-36},{4,0},{74,0}}, color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Text(
              extent={{24,90},{96,22}},
              lineColor={28,108,200},
              textString="AlveolarBlood flow > cardiac output???")}));
    end TestInputs;

    model O2PhysiomodelDbg

    AlveolarVentilation             alveolarVentilation(solventFlowPump(q_out(
            conc(start=104/760)), useSolutionFlowInput=true)) annotation (
        Placement(transformation(
          extent={{-10,-10},{10,10}},
          origin={-12,58})));
      BloodO2_Siggaard O2Lung(
      pCO2(start=5700),
      pO2(start=13870),
        sO2CO(start=0.977),
        q_in(q(start=10)),
        a(start=-0.1),
        cO2Hb(start=8.16),
        tO2(start=8.161))
        annotation (Placement(transformation(extent={{-20,-10},{0,10}})));
      Physiolibrary.Chemical.Components.GasSolubility
                                        gasSolubility(useHeatPort=true,
      C=1700,
      kH_T0(displayUnit="(mmol/l)/kPa at 37degC") = 0.02707666941329,
      solubilityRateCoef(displayUnit="m3/s") = 0.01,
      T0=310.15)
        annotation (Placement(transformation(extent={{-22,20},{-2,40}})));
    Physiolibrary.Thermal.Sources.UnlimitedHeat alveolus(useTemperatureInput=
            true, T=310.15)
      annotation (Placement(transformation(extent={{8,26},{0,34}})));
    Physiolibrary.Chemical.Sources.UnlimitedGasStorage air(PartialPressure(
          displayUnit="mmHg") = 21331.5819864, useHeatPort=true,
        usePartialPressureInput=true)
      annotation (Placement(transformation(extent={{-48,72},{-28,92}})));
    Physiolibrary.Thermal.Sources.UnlimitedHeat environment(useTemperatureInput=
           true, T=298.15)
      annotation (Placement(transformation(extent={{-74,54},{-54,74}})));
    Physiolibrary.Types.BusConnector busConnector annotation (Placement(
          transformation(extent={{82,24},{102,44}}), iconTransformation(
            extent={{60,60},{100,100}})));
      GasPartialPressure PO2
        annotation (Placement(transformation(extent={{-66,77},{-54,87}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutionStorage
        unlimitedSolutionStorage(Conc=13)
        annotation (Placement(transformation(extent={{-98,-18},{-78,2}})));
      Physiolibrary.Chemical.Components.Substance
        unlimitedSolutionStorage1(solute_start=0.024)
        annotation (Placement(transformation(extent={{70,-22},{50,-2}})));
    equation
      connect(busConnector.CO2Lung_pCO2,O2Lung. pCO2)               annotation (
          Line(
          points={{92,34},{-54,34},{-54,6},{-19,6}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(O2Lung.ctHb,busConnector. ctHb)               annotation (Line(
          points={{-1,10},{30,10},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Lung.cDPG,busConnector. cDPG)               annotation (Line(
          points={{-1,6},{30,6},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Lung.FMetHb,busConnector. FMetHb)               annotation (Line(
          points={{-1,2},{30,2},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Lung.FHbF,busConnector. FHbF)               annotation (Line(
          points={{-1,-2},{30,-2},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(O2Lung.pCO,busConnector. pCO)               annotation (Line(
          points={{-1,-6},{30,-6},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(busConnector.AlveolarVentilated_BloodFlow,O2Lung. BloodFlow)
        annotation (Line(
          points={{92,34},{-54,34},{-54,-3.4},{-20,-3.4}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(O2Lung.sO2,busConnector. O2Lung_sO2) annotation (Line(
          points={{-10,-12},{-10,-18},{30,-18},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-3},{6,-3}}));
      connect(busConnector.core_T,O2Lung. T) annotation (Line(
          points={{92,34},{-54,34},{-54,2},{-19,2}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.Lung_pH,O2Lung. pH) annotation (Line(
          points={{92,34},{-54,34},{-54,10},{-19,10}},
          color={0,0,255},
          thickness=0.5,
          smooth=Smooth.None), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(alveolarVentilation.AlveolarVentilation_Env,busConnector. AlveolarVentilation_Env)
        annotation (Line(
          points={{-4,60},{30,60},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(alveolarVentilation.BronchiDilution,busConnector. BronchiDilution)
        annotation (Line(
          points={{-4,54},{30,54},{30,34},{92,34}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(alveolarVentilation.alveolar,gasSolubility. q_out) annotation (Line(
          points={{-11.8,48},{-12,48},{-12,40}},
          color={107,45,134},
          thickness=1,
          smooth=Smooth.None));
      connect(O2Lung.alveolar,gasSolubility. q_in) annotation (Line(
          points={{-10.4,8.2},{-12,8.2},{-12,22}},
          color={107,45,134},
          thickness=1,
          smooth=Smooth.None));
    connect(alveolus.port,gasSolubility. heatPort) annotation (Line(
        points={{0,30},{-12,30}},
        color={191,0,0},
        thickness=1,
        smooth=Smooth.None));
    connect(air.q_out,alveolarVentilation. inspired) annotation (Line(
        points={{-28,82},{-22,82},{-22,66}},
        color={107,45,134},
        thickness=1,
        smooth=Smooth.None));
    connect(air.q_out,alveolarVentilation. expired) annotation (Line(
        points={{-28,82},{10,82},{10,66},{-2,66}},
        color={107,45,134},
        thickness=1,
        smooth=Smooth.None));
    connect(environment.port,air. heatPort) annotation (Line(
        points={{-54,64},{-38,64},{-38,82}},
        color={191,0,0},
        thickness=1,
        smooth=Smooth.None));
      connect(busConnector.FiO2, PO2.gasFractionConcentration) annotation (Line(
          points={{92,34},{92,34},{92,98},{-98,98},{-98,79.5},{-67.2,79.5}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.BarometerPressure, PO2.pressure) annotation (Line(
          points={{92,34},{92,34},{92,98},{-98,98},{-98,85.1},{-67.2,85.1}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(PO2.partialPressure, air.partialPressure)
        annotation (Line(points={{-53.1,82},{-48,82}}, color={0,0,127}));
      connect(busConnector.AmbientTemperature, environment.temperature)
        annotation (Line(
          points={{92,34},{92,34},{92,98},{-98,98},{-98,64},{-74,64}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(busConnector.core_T, alveolus.temperature) annotation (Line(
          points={{92,34},{90,34},{90,36},{90,34},{30,34},{30,30},{8,30}},
          color={0,0,255},
          thickness=0.5), Text(
          string="%first",
          index=-1,
          extent={{-6,3},{-6,3}}));
      connect(O2Lung.q_in, unlimitedSolutionStorage.q_out) annotation (Line(
          points={{-19,-9},{-50,-9},{-50,-8},{-78,-8}},
          color={107,45,134},
          thickness=1));
      connect(O2Lung.q_out, unlimitedSolutionStorage1.q_out) annotation (Line(
          points={{-1,-9},{24.5,-9},{24.5,-12},{60,-12}},
          color={107,45,134},
          thickness=1));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -40},{100,100}}),
                       graphics={
                      Bitmap(extent={{-100,102},{100,-98}},  fileName=
                  "modelica://Physiolibrary/Resources/Icons/O2.png"), Text(
              extent={{-130,-100},{146,-148}},
              lineColor={28,108,200},
              textString="%name")}),                                    Diagram(
            coordinateSystem(preserveAspectRatio=false, extent={{-100,-40},{100,
                100}})));
    end O2PhysiomodelDbg;

    model VentilationInputs
      extends Physiolibrary.Icons.Ventilation;
    Physiolibrary.Types.BusConnector busConnector annotation (Placement(
          transformation(extent={{66,-30},{86,-10}}), iconTransformation(
            extent={{80,40},{120,80}})));
      Physiolibrary.Types.Constants.FractionConst constBronchiDilution(k=0.96)
        "Not in physiomodel"
        annotation (Placement(transformation(extent={{-78,-18},{-70,-14}})));
      Physiolibrary.Types.Constants.VolumeFlowRateConst constAlveolarVentilation_Env(k=6e-05)
        annotation (Placement(transformation(extent={{-80,36},{-72,40}})));
    equation
      connect(constBronchiDilution.y, busConnector.BronchiDilution)
        annotation (Line(
          points={{-69,-16},{76,-16},{76,-20}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
    connect(constAlveolarVentilation_Env.y, busConnector.AlveolarVentilation_Env)
      annotation (Line(
        points={{-71,38},{76,38},{76,-20}},
        color={0,0,127},
        smooth=Smooth.None), Text(
        string="%second",
        index=1,
        extent={{6,3},{6,3}}));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false,extent={{-100,-100},
                {100,100}}),       graphics={Text(
              extent={{-120,-108},{130,-126}},
              lineColor={0,0,255},
              textString="%name"), Line(
              points={{-88,-88},{60,40}},
              color={28,108,200},
              arrow={Arrow.None,Arrow.Filled},
              thickness=0.5)}),      Diagram(coordinateSystem(preserveAspectRatio=false,
              extent={{-100,-100},{100,100}})));
    end VentilationInputs;

    model AcidBaseInputs
      extends Physiolibrary.Icons.AcidBase;

    Physiolibrary.Types.BusConnector busConnector annotation (Placement(
          transformation(extent={{-44,72},{-4,112}}), iconTransformation(
            extent={{-20,-18},{20,22}})));

      Physiolibrary.Types.Constants.pHConst constlung_erypH(k=7.22) "OF WHAT?"
        annotation (Placement(transformation(extent={{-12,46},{-4,50}})));
      Physiolibrary.Types.Constants.pHConst constLung_pH(k=7.44)
        annotation (Placement(transformation(extent={{-10,78},{-2,82}})));
      Physiolibrary.Types.Constants.pHConst constveins_erypH(k=7.19)
        annotation (Placement(transformation(extent={{-88,60},{-80,64}})));
      Physiolibrary.Types.Constants.pHConst constveins_pH(k=7.39)
        annotation (Placement(transformation(extent={{-88,80},{-80,84}})));
      Physiolibrary.Types.Constants.pHConst constartys_erypH(k=7.22)
        annotation (Placement(transformation(extent={{48,56},{56,60}})));
      Physiolibrary.Types.Constants.pHConst constartys_pH2(k=7.43)
        annotation (Placement(transformation(extent={{48,76},{56,80}})));
    equation
      connect(constartys_pH2.y, busConnector.Artys_pH)    annotation (Line(
          points={{57,78},{100,78},{100,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-8},{6,-8}}));
      connect(constartys_erypH.y, busConnector.Artys_pH_ery)    annotation (Line(
          points={{57,58},{57,56},{100,56},{100,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-13},{6,-13}}));
      connect(constveins_pH.y, busConnector.Veins_pH)    annotation (Line(
          points={{-79,82},{-24,82},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-8},{6,-8}}));
      connect(constveins_erypH.y, busConnector.Veins_pH_ery)    annotation (Line(
          points={{-79,62},{-24,62},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-13},{6,-13}}));

      connect(constLung_pH.y, busConnector.Lung_pH)     annotation (Line(
          points={{-1,80},{-1,78},{32,78},{32,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-8},{6,-8}}));
      connect(constlung_erypH.y, busConnector.Lung_pH_ery)     annotation (Line(
          points={{-3,48},{-3,46},{36,46},{36,92},{-24,92}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-13},{6,-13}}));

      annotation ( Icon(coordinateSystem(
              preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
            graphics={                 Text(
              extent={{-118,-84},{124,-118}},
              lineColor={0,0,255},
              textString="%name"),
            Line(
              points={{-98,-100},{-24,-24}},
              color={28,108,200},
              thickness=0.5,
              arrow={Arrow.None,Arrow.Filled}),
            Line(
              points={{-98,98},{-34,34}},
              color={28,108,200},
              thickness=0.5,
              arrow={Arrow.None,Arrow.Filled})}),
        Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
<tr>
<td></td>
<td>Noriaki Ikeda: A model of overall regulation of body fluids (1979), Kitasato University</td>
</tr>
<tr>
<td></td>
<td><p>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</p></td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
                100}})));
    end AcidBaseInputs;

    model CO2PhysiomodelInputs
     extends Physiolibrary.Icons.CarbonDioxide;

    Physiolibrary.Types.BusConnector busConnector annotation (Placement(
          transformation(extent={{-114,-62},{-74,-22}}), iconTransformation(
            extent={{60,40},{100,80}})));
                                                  /*(
    solventFlowPump(q_out(conc(start=0.05))))*/
    //1000 * 1.977/40.01

      Physiolibrary.Types.Constants.PressureConst constVeinspCO2(k(displayUnit="Pa")=
             6329)
        annotation (Placement(transformation(extent={{-56,-68},{-48,-64}})));
      Physiolibrary.Types.Constants.ConcentrationConst constVeinsHCO3(k = 28.5)
        annotation (Placement(transformation(extent={{-56,-80},{-48,-76}})));
      Physiolibrary.Types.Constants.PressureConst constLungspCO2(k(displayUnit="Pa")=
             5400)
        annotation (Placement(transformation(extent={{-10,-68},{-2,-64}})));
      Physiolibrary.Types.Constants.ConcentrationConst constLungsHCO(k = 27.13)
        annotation (Placement(transformation(extent={{-10,-80},{-2,-76}})));
      Physiolibrary.Types.Constants.PressureConst constArtyspCO2(k(displayUnit="Pa")=
             5418)
        annotation (Placement(transformation(extent={{70,-68},{78,-64}})));
      Physiolibrary.Types.Constants.ConcentrationConst constArtysHCO3(k(displayUnit=
             "Pa") = 27.16)
        annotation (Placement(transformation(extent={{70,-80},{78,-76}})));
    equation
      connect(constVeinsHCO3.y, busConnector.CO2Veins_cHCO3)
                                                          annotation (Line(
          points={{-47,-78},{-47,14},{-100,14},{-100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{3,-3},{3,-3}}));
      connect(constArtysHCO3.y, busConnector.CO2Artys_cHCO3) annotation (Line(
          points={{79,-78},{79,14},{100,14},{100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{3,-3},{3,-3}}));
      connect(constVeinspCO2.y, busConnector.CO2Veins_pCO2)     annotation (Line(
          points={{-47,-66},{-47,16},{-100,16},{-100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(constArtyspCO2.y, busConnector.CO2Artys_pCO2) annotation (
          Line(
          points={{79,-66},{79,12},{100,12},{100,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(constLungspCO2.y, busConnector.CO2Lung_pCO2) annotation (Line(
          points={{-1,-66},{-1,10},{10,10},{10,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None), Text(
          string="%second",
          index=1,
          extent={{6,-5},{6,-5}}));
      connect(constLungsHCO.y, busConnector.CO2Lung_cHCO3) annotation (Line(
          points={{-1,-78},{-1,12},{10,12},{10,-42},{-94,-42}},
          color={0,0,127},
          smooth=Smooth.None));

      annotation ( Icon(coordinateSystem(
              preserveAspectRatio=false,extent={{-100,-100},{100,100}}),
            graphics={Text(
              extent={{-100,-98},{130,-144}},
              lineColor={28,108,200},
              textString="%name"), Line(
              points={{-100,-98},{44,34}},
              color={28,108,200},
              thickness=1,
              arrow={Arrow.None,Arrow.Filled})}),
        Documentation(revisions="<html>

<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"><tr>
<td><p>Author:</p></td>
<td><p>Marek Matejak</p></td>
</tr>
<tr>
<td><p>License:</p></td>
<td><p><a href=\"http://www.physiomodel.org/license.html\">Physiomodel License 1.0</a> </p></td>
</tr>

<tr>
<td><p>Date of:</p></td>
<td><p>2009</p></td>
</tr>
<tr>
<td><p>References:</p></td>
<td>Siggaard Andersen: OSA (2005), University of Copenhagen</td>
</tr>
<tr>
<td></td>
<td><p>Tom Coleman: QHP 2008 beta 3, University of Mississippi Medical Center</p></td>
</tr>
</table>
<br/><p>Copyright &copy; 2014 Marek Matejak, Charles University in Prague.</p><br/>

</html>"),
        Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},
                {100,100}})));
    end CO2PhysiomodelInputs;

    model Interstitium
      constant Real T = 310.15;
      Physiolibrary.Chemical.Interfaces.ChemicalPort_a HCO3
        annotation (Placement(transformation(extent={{-100,-10},{-80,10}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput   BE
        annotation (Placement(transformation(extent={{-10,80},{10,100}})));
      Physiolibrary.Types.RealIO.PressureInput pCO2
        annotation (Placement(transformation(extent={{-100,60},{-60,100}})));
      Real pK = 6.1 + (-0.0026)*(T-310.15);
      Real aCO2(final displayUnit="mmol/(l.kPa)") = 0.00023 * 10^(-0.0092*(T-310.15)); //solubility depends on temperature
       Physiolibrary.Types.Concentration cdCO2(displayUnit="mmol/l") = aCO2*pCO2;
      Real pH;

       parameter Physiolibrary.Types.Volume volume;
       parameter Physiolibrary.Types.Concentration initialHCO3Conc;
       Real cHCO3( start = initialHCO3Conc, fixed = true) = HCO3.conc;
       Real tHCO3;
    equation
      BE = -HCO3.q;
      der(tHCO3) = HCO3.q;
      tHCO3/volume = HCO3.conc;

      cdCO2 * 10^(pH-pK) = cHCO3;

    end Interstitium;

    package tests

      model test_ISF_CO2

        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-64,30},{-56,38}})));
        Physiolibrary.Types.Constants.VolumeConst volume(k=0.012)
          annotation (Placement(transformation(extent={{-70,50},{-62,58}})));
        Parts.ISF_CO2 ISF_CO2(useNormalizedVolume=false, initMolarConcentration=
              25.2)
          annotation (Placement(transformation(extent={{24,26},{44,46}})));
        Physiolibrary.Types.Constants.ConcentrationConst dSID(k=0)
          annotation (Placement(transformation(extent={{-32,18},{-24,26}})));
      equation
        connect(temperature.y, ISF_CO2.T) annotation (Line(points={{-55,34},{-14,
                34},{-14,36.8},{25.8,36.8}}, color={0,0,127}));
        connect(volume.y, ISF_CO2.solutionVolume) annotation (Line(points={{-61,
                54},{-16,54},{-16,56},{30,56},{30,40}}, color={0,0,127}));
        connect(dSID.y, ISF_CO2.dSID) annotation (Line(points={{-23,22},{0,22},{0,
                31.8},{26,31.8}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end test_ISF_CO2;

      model test_alveoalrVentilation

        Parts.AlveolarVentilation_BTPS alveolarVentilation_STPD
          annotation (Placement(transformation(extent={{-56,-26},{26,56}})));
        Physiolibrary.Types.Constants.TemperatureConst teplotaOkoli(k=298.15)
          annotation (Placement(transformation(extent={{-94,52},{-78,62}})));
        Physiolibrary.Types.Constants.PressureConst okolniTlak(k=99991.79056125)
          annotation (Placement(transformation(extent={{-98,22},{-80,36}})));
        Physiolibrary.Types.Constants.FractionConst fraction(k=0.78)
          "vlhkostVzduchu"
          annotation (Placement(transformation(extent={{-96,-2},{-80,10}})));
        Physiolibrary.Types.Constants.VolumeConst TidelVolumeBTPS(k=0.0005)
          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={64,64})));
        Physiolibrary.Types.Constants.VolumeConst DeadVolumeBTPS(k=0.00025)
          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={58,42})));
        Physiolibrary.Types.Constants.FrequencyConst frequency(k=0.2) annotation (
           Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={60,18})));
        Physiolibrary.Types.Constants.TemperatureConst teplotaJadra(k=310.15)
          annotation (Placement(transformation(
              extent={{-8,-5},{8,5}},
              rotation=180,
              origin={60,5})));
      equation
        connect(teplotaOkoli.y, alveolarVentilation_STPD.AmbientTemperature)
          annotation (Line(points={{-76,57},{-66,57},{-66,56},{-47.8,56}}, color=
                {0,0,127}));
        connect(okolniTlak.y, alveolarVentilation_STPD.EnvironmentPressure)
          annotation (Line(points={{-77.75,29},{-62.875,29},{-62.875,31.4},{-47.8,
                31.4}}, color={0,0,127}));
        connect(fraction.y, alveolarVentilation_STPD.EnvironmentRelativeHumidity)
          annotation (Line(points={{-78,4},{-66,4},{-66,6.8},{-47.8,6.8}}, color=
                {0,0,127}));
        connect(TidelVolumeBTPS.y, alveolarVentilation_STPD.TidalVolume)
          annotation (Line(points={{59,64},{42,64},{42,56},{17.8,56}}, color={0,0,
                127}));
        connect(DeadVolumeBTPS.y, alveolarVentilation_STPD.DeadSpace) annotation (
           Line(points={{53,42},{36,42},{36,39.6},{17.8,39.6}}, color={0,0,127}));
        connect(frequency.y, alveolarVentilation_STPD.RespRate) annotation (Line(
              points={{55,18},{40,18},{40,23.2},{17.8,23.2}}, color={0,0,127}));
        connect(teplotaJadra.y, alveolarVentilation_STPD.core_T) annotation (Line(
              points={{50,5},{38,5},{38,6.8},{17.8,6.8}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                  -100,-100},{100,100}})));
      end test_alveoalrVentilation;

      model testBloodPO2PCO2

      Physiolibrary.Types.Constants.ConcentrationConst DPG(k=5.4)
        annotation (Placement(transformation(extent={{60,42},{50,50}})));
      Physiolibrary.Types.Constants.FractionConst FMetHb(k=0.005)
        annotation (Placement(transformation(extent={{42,36},{30,44}})));
      Physiolibrary.Types.Constants.FractionConst FHbF(k=0.005)
        annotation (Placement(transformation(extent={{60,28},{48,36}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctPO4(k=1.16)
          annotation (Placement(transformation(extent={{48,50},{36,58}})));
        Physiolibrary.Types.Constants.MassConcentrationConst ctGlb(k(displayUnit=
                "kg/l") = 2.93)
          annotation (Placement(transformation(extent={{36,10},{26,18}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctAlb(k=11.8)
          annotation (Placement(transformation(extent={{36,60},{26,68}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8.4)
          annotation (Placement(transformation(extent={{5,-4},{-5,4}},
              rotation=180,
              origin={-87,-10})));
        Physiolibrary.Types.Constants.TemperatureConst temp(k=310.15)
          annotation (Placement(transformation(extent={{-90,58},{-80,66}})));
        Physiolibrary.Types.Constants.PressureConst pCO(k=2.6664477483)
          annotation (Placement(transformation(extent={{56,16},{46,26}})));
        Parts.bloodPO2PCO2 bloodPO2PCO2_
          annotation (Placement(transformation(extent={{-64,-12},{12,68}})));
        Physiolibrary.Types.Constants.VolumeDensityOfChargeConst
          volumeDensityOfCharge(k=0)
          annotation (Placement(transformation(extent={{-62,-38},{-48,-28}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k=5332.8954966)
          annotation (Placement(transformation(extent={{-34,-80},{-24,-70}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k=13332.2387415)
          annotation (Placement(transformation(extent={{-58,-58},{-48,-48}})));
      equation
        connect(ctAlb.y, bloodPO2PCO2_.ctAlb) annotation (Line(
            points={{24.75,64},{20,64},{20,60},{15.8,60}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ctPO4.y, bloodPO2PCO2_.ctPO4) annotation (Line(
            points={{34.5,54},{22,54},{22,52},{15.8,52}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(DPG.y, bloodPO2PCO2_.cDPG) annotation (Line(
            points={{48.75,46},{22,46},{22,44},{15.8,44}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pCO.y, bloodPO2PCO2_.pCO) annotation (Line(
            points={{44.75,21},{44.75,21.5},{15.8,21.5},{15.8,20}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(bloodPO2PCO2_.FMetHb, FMetHb.y) annotation (Line(
            points={{15.8,36},{22.9,36},{22.9,40},{28.5,40}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(bloodPO2PCO2_.FHbF, FHbF.y) annotation (Line(
            points={{15.8,28},{31.9,28},{31.9,32},{46.5,32}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(bloodPO2PCO2_.ctGlb, ctGlb.y) annotation (Line(
            points={{15.8,12},{24.75,12},{24.75,14}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ctHb.y, bloodPO2PCO2_.ctHb) annotation (Line(
            points={{-80.75,-10},{-74,-10},{-74,4},{-67.8,4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(temp.y, bloodPO2PCO2_.T) annotation (Line(
            points={{-78.75,62},{-72,62},{-72,59.2},{-67.04,59.2}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(volumeDensityOfCharge.y, bloodPO2PCO2_.BEox) annotation (Line(
            points={{-46.25,-33},{-20.3,-33},{-20.3,-12.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pCO2.y, bloodPO2PCO2_.pCO2) annotation (Line(
            points={{-22.75,-75},{-2.44,-75},{-2.44,-12}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pO2.y, bloodPO2PCO2_.pO2) annotation (Line(points={{-46.75,-53},{
                -12.32,-53},{-12.32,-12}},   color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end testBloodPO2PCO2;

      model testBloodO2CO2BEox

      Physiolibrary.Types.Constants.ConcentrationConst DPG(k=5.4)
        annotation (Placement(transformation(extent={{86,56},{76,64}})));
      Physiolibrary.Types.Constants.FractionConst FMetHb(k=0.005)
        annotation (Placement(transformation(extent={{88,44},{76,52}})));
      Physiolibrary.Types.Constants.FractionConst FHbF(k=0.005)
        annotation (Placement(transformation(extent={{88,30},{76,38}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctPO4(k=1.16)
          annotation (Placement(transformation(extent={{88,68},{76,76}})));
        Physiolibrary.Types.Constants.MassConcentrationConst ctGlb(k(displayUnit=
                "kg/l") = 2.93)
          annotation (Placement(transformation(extent={{86,6},{76,14}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctAlb(k=11.8)
          annotation (Placement(transformation(extent={{86,82},{76,90}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8.4)
          annotation (Placement(transformation(extent={{5,-4},{-5,4}},
              rotation=180,
              origin={-99,-2})));
        Physiolibrary.Types.Constants.TemperatureConst temp(k=310.15)
          annotation (Placement(transformation(extent={{-100,84},{-90,92}})));
        Physiolibrary.Types.Constants.PressureConst pCO(k=2.6664477483)
          "\"norma value 0.02 mmHg for non smokers, hemoglobin FCO is 0,27% (at 0.063 mmHg hemoglobin FCO is 0,5% - as ist by Siggaard normal value)"
          annotation (Placement(transformation(extent={{90,18},{76,26}})));
        Physiolibrary.Types.Constants.VolumeDensityOfChargeConst BEox(k=0)
          annotation (Placement(transformation(extent={{-88,-94},{-78,-86}})));
        Parts.bloodCO2O2BEox bloodCO2O2BEox_
          annotation (Placement(transformation(extent={{-72,-30},{52,96}})));
        Physiolibrary.Types.Constants.ConcentrationConst tO2(k=7.95)
          annotation (Placement(transformation(extent={{-90,-60},{-78,-50}})));
        Physiolibrary.Types.Constants.ConcentrationConst tCO2(k=21.64)
          annotation (Placement(transformation(extent={{-90,-76},{-78,-66}})));
      equation
        connect(temp.y,bloodCO2O2BEox_. T) annotation (Line(
            points={{-88.75,88},{-82,88},{-82,87.18},{-76.96,87.18}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FHbF.y,bloodCO2O2BEox_. FHbF) annotation (Line(
            points={{74.5,34},{74.25,34},{74.25,34.26},{59.44,34.26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ctGlb.y,bloodCO2O2BEox_. ctGlb) annotation (Line(
            points={{74.75,10},{68,10},{68,9.06},{59.44,9.06}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(pCO.y,bloodCO2O2BEox_. pCO) annotation (Line(
            points={{74.25,22},{66,22},{66,21.66},{59.44,21.66}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(FMetHb.y,bloodCO2O2BEox_. FMetHb) annotation (Line(
            points={{74.5,48},{66,48},{66,46.86},{59.44,46.86}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(DPG.y,bloodCO2O2BEox_. cDPG) annotation (Line(
            points={{74.75,60},{68,60},{68,59.46},{59.44,59.46}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ctPO4.y,bloodCO2O2BEox_. ctPO4) annotation (Line(
            points={{74.5,72},{66,72},{66,72.06},{59.44,72.06}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ctAlb.y,bloodCO2O2BEox_. ctAlb) annotation (Line(
            points={{74.75,86},{68,86},{68,84.66},{59.44,84.66}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(BEox.y,bloodCO2O2BEox_. BEox) annotation (Line(
            points={{-76.75,-90},{-11.86,-90},{-11.86,-31.89}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(ctHb.y,bloodCO2O2BEox_. ctHb) annotation (Line(
            points={{-92.75,-2},{-86,-2},{-86,-1.02},{-78.2,-1.02}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tO2.y, bloodCO2O2BEox_.ctO2) annotation (Line(
            points={{-76.5,-55},{-59.6,-55},{-59.6,-31.26}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(tCO2.y, bloodCO2O2BEox_.ctCO2) annotation (Line(
            points={{-76.5,-71},{-36.04,-71},{-36.04,-31.26}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),      graphics));
      end testBloodO2CO2BEox;

      model VenousBlood

        Parts.VenousO2CO2 VenousBlood
          annotation (Placement(transformation(extent={{-36,-68},{38,10}})));
        Parts.bloodPO2PCO2 ArterialBlood
          annotation (Placement(transformation(extent={{-60,34},{2,94}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k=13332.2387415)
          annotation (Placement(transformation(extent={{-28,14},{-18,24}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k=5332.8954966)
          annotation (Placement(transformation(extent={{4,18},{14,28}})));
        Physiolibrary.Types.Constants.VolumeDensityOfChargeConst
          volumeDensityOfCharge(k=0)
          annotation (Placement(transformation(extent={{-90,14},{-76,24}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8.4)
          annotation (Placement(transformation(extent={{5,-4},{-5,4}},
              rotation=180,
              origin={-81,46})));
        Physiolibrary.Types.Constants.TemperatureConst temp(k=310.15)
          annotation (Placement(transformation(extent={{-94,84},{-84,92}})));
        Physiolibrary.Types.Constants.MassConcentrationConst ctGlb(k(displayUnit=
                "kg/l") = 2.93)
          annotation (Placement(transformation(extent={{44,34},{34,42}})));
        Physiolibrary.Types.Constants.PressureConst pCO(k=2.6664477483)
          annotation (Placement(transformation(extent={{64,40},{54,50}})));
      Physiolibrary.Types.Constants.FractionConst FHbF(k=0.005)
        annotation (Placement(transformation(extent={{68,52},{56,60}})));
      Physiolibrary.Types.Constants.FractionConst FMetHb(k=0.005)
        annotation (Placement(transformation(extent={{50,60},{38,68}})));
      Physiolibrary.Types.Constants.ConcentrationConst DPG(k=5.4)
        annotation (Placement(transformation(extent={{76,66},{66,74}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctPO4(k=1.16)
          annotation (Placement(transformation(extent={{64,76},{52,84}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctAlb(k=11.8)
          annotation (Placement(transformation(extent={{44,84},{34,92}})));
        Physiolibrary.Types.Constants.MolarFlowRateConst molarFlowRate(k=
              0.00023333333333333)
          annotation (Placement(transformation(extent={{-90,-2},{-82,6}})));
        Physiolibrary.Types.Constants.FractionConst fraction(k(displayUnit="1")=
               0.8)
          annotation (Placement(transformation(extent={{-86,-16},{-78,-8}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst volumeFlowRate(k=
              8.3333333333333e-05)
          annotation (Placement(transformation(extent={{-84,-32},{-76,-24}})));
      equation
        connect(temp.y, ArterialBlood.T) annotation (Line(points={{-82.75,88},{-62.48,
                88},{-62.48,87.4}}, color={0,0,127}));
        connect(ctHb.y, ArterialBlood.ctHb)
          annotation (Line(points={{-74.75,46},{-63.1,46}}, color={0,0,127}));
        connect(volumeDensityOfCharge.y, ArterialBlood.BEox) annotation (Line(
              points={{-74.25,19},{-24.35,19},{-24.35,33.7}},
                                                            color={0,0,127}));
        connect(pO2.y, ArterialBlood.pO2) annotation (Line(points={{-16.75,19},{
                -6,19},{-6,26},{-17.84,26},{-17.84,34}},color={0,0,127}));
        connect(pCO2.y, ArterialBlood.pCO2) annotation (Line(points={{15.25,23},{
                26,23},{26,30},{-9.78,30},{-9.78,34}},   color={0,0,127}));
        connect(ctAlb.y, ArterialBlood.ctAlb)
          annotation (Line(points={{32.75,88},{5.1,88}}, color={0,0,127}));
        connect(ctAlb.y, VenousBlood.ctAlb) annotation (Line(points={{32.75,88},{
                32,88},{32,94},{32,96},{90,96},{90,-94},{-28.23,-94},{-28.23,-67.61}},
              color={0,0,127}));
        connect(ctPO4.y, ArterialBlood.ctPO4) annotation (Line(points={{50.5,80},
                {24,80},{24,82},{5.1,82}}, color={0,0,127}));
        connect(ctPO4.y, VenousBlood.ctPO4) annotation (Line(points={{50.5,80},{
                48,80},{48,94},{86,94},{86,-92},{-18.98,-92},{-18.98,-68}}, color=
               {0,0,127}));
        connect(DPG.y, ArterialBlood.cDPG) annotation (Line(points={{64.75,70},{
                30,70},{30,76},{5.1,76}}, color={0,0,127}));
        connect(DPG.y, VenousBlood.cDPG) annotation (Line(points={{64.75,70},{64,
                70},{64,72},{64,76},{84,76},{84,-90},{-9.36,-90},{-9.36,-68}},
              color={0,0,127}));
        connect(FMetHb.y, ArterialBlood.FMetHb) annotation (Line(points={{36.5,64},
                {22,64},{22,70},{5.1,70}}, color={0,0,127}));
        connect(FMetHb.y, VenousBlood.FMetHb) annotation (Line(points={{36.5,64},
                {54,64},{82,64},{82,62},{82,-88},{-1.22,-88},{-1.22,-68}}, color=
                {0,0,127}));
        connect(FHbF.y, ArterialBlood.FHbF) annotation (Line(points={{54.5,56},{
                32,56},{32,60},{10,60},{10,64},{5.1,64}}, color={0,0,127}));
        connect(FHbF.y, VenousBlood.FHbF) annotation (Line(points={{54.5,56},{54,
                56},{54,62},{80,62},{80,-86},{8.4,-86},{8.4,-68}}, color={0,0,127}));
        connect(pCO.y, ArterialBlood.pCO) annotation (Line(points={{52.75,45},{
                26.375,45},{26.375,58},{5.1,58}}, color={0,0,127}));
        connect(pCO.y, VenousBlood.pCO) annotation (Line(points={{52.75,45},{
                52.75,32},{78,32},{78,-84},{17.28,-84},{17.28,-67.22}}, color={0,
                0,127}));
        connect(ctGlb.y, ArterialBlood.ctGlb) annotation (Line(points={{32.75,38},
                {20,38},{20,52},{5.1,52}}, color={0,0,127}));
        connect(ctGlb.y, VenousBlood.ctGlb) annotation (Line(points={{32.75,38},{
                32,38},{32,24},{32,22},{76,22},{76,-82},{27.64,-82},{27.64,-68}},
              color={0,0,127}));
        connect(ArterialBlood.ctO2, VenousBlood.ctO2a) annotation (Line(points={{-40.78,
                31.6},{-40.78,-22.37},{-37.85,-22.37}},        color={0,0,127}));
        connect(ArterialBlood.ctCO2, VenousBlood.ctCO2a) annotation (Line(points={{-33.96,
                31.6},{-33.96,10},{-56,10},{-56,-29.39},{-37.85,-29.39}},
              color={0,0,127}));
        connect(volumeDensityOfCharge.y, VenousBlood.BEox) annotation (Line(
              points={{-74.25,19},{-62,19},{-62,-36.8},{-37.48,-36.8}}, color={0,
                0,127}));
        connect(ctHb.y, VenousBlood.ctHb) annotation (Line(points={{-74.75,46},{-64,
                46},{-64,-43.04},{-37.48,-43.04}}, color={0,0,127}));
        connect(temp.y, VenousBlood.T) annotation (Line(points={{-82.75,88},{-76,
                88},{-76,50},{-94,50},{-94,-46},{-94,-51.23},{-37.11,-51.23}},
              color={0,0,127}));
        connect(molarFlowRate.y, VenousBlood.VO2) annotation (Line(points={{-81,2},
                {-60,2},{-60,2.59},{-37.85,2.59}}, color={0,0,127}));
        connect(fraction.y, VenousBlood.RQ) annotation (Line(points={{-77,-12},{-68,
                -12},{-68,-3.65},{-37.85,-3.65}}, color={0,0,127}));
        connect(volumeFlowRate.y, VenousBlood.Q) annotation (Line(points={{-75,-28},
                {-58,-28},{-58,-9.89},{-37.85,-9.89}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end VenousBlood;

      model testVentilation

        Parts.VentilationO2CO2 ventilation
          annotation (Placement(transformation(extent={{-38,-2},{44,72}})));
        Physiolibrary.Types.Constants.PressureConst barometricPressure(k=
              99991.79056125)
          annotation (Placement(transformation(extent={{-86,72},{-78,80}})));
        Physiolibrary.Types.Constants.FractionConst airHumidity(k=0.58)
          annotation (Placement(transformation(extent={{-88,56},{-80,64}})));
        Physiolibrary.Types.Constants.FractionConst FiO2(k=0.21)
          annotation (Placement(transformation(extent={{-90,44},{-82,52}})));
        Physiolibrary.Types.Constants.FractionConst FiCO2(k=0.00038)
          annotation (Placement(transformation(extent={{-72,38},{-64,46}})));
        Physiolibrary.Types.Constants.TemperatureConst atmosphericTemperature(k=
              298.15)
          annotation (Placement(transformation(extent={{-62,28},{-54,36}})));
        Physiolibrary.Types.Constants.TemperatureConst bodyTemperature(k=310.15)
          annotation (Placement(transformation(extent={{-76,14},{-68,22}})));
        Physiolibrary.Types.Constants.VolumeConst inspiredTidalVolume(k=0.0005)
          annotation (Placement(transformation(extent={{-42,78},{-34,86}})));
        Physiolibrary.Types.Constants.VolumeConst deadVolume(k=0.00015)
          annotation (Placement(transformation(extent={{-24,86},{-16,94}})));
        Physiolibrary.Types.Constants.FrequencyConst breathingFrequency(k=
              0.29333333333333)
          annotation (Placement(transformation(extent={{0,88},{8,96}})));
      equation
        connect(barometricPressure.y, ventilation.barometricPressure) annotation (
           Line(points={{-77,76},{-56,76},{-56,68.3},{-33.9,68.3}}, color={0,0,
                127}));
        connect(airHumidity.y, ventilation.airHumidity) annotation (Line(points={
                {-79,60},{-33.9,60},{-33.9,60.16}}, color={0,0,127}));
        connect(FiO2.y, ventilation.FiO2) annotation (Line(points={{-81,48},{-60,
                48},{-60,52.02},{-33.9,52.02}}, color={0,0,127}));
        connect(FiCO2.y, ventilation.FiCO2) annotation (Line(points={{-63,42},{
                -33.9,42},{-33.9,42.4}}, color={0,0,127}));
        connect(atmosphericTemperature.y, ventilation.atmosphericTemperature)
          annotation (Line(points={{-53,32},{-33.9,32},{-33.9,32.04}}, color={0,0,
                127}));
        connect(bodyTemperature.y, ventilation.bodyTemperature) annotation (Line(
              points={{-67,18},{-52,18},{-52,22.42},{-33.9,22.42}}, color={0,0,
                127}));
        connect(inspiredTidalVolume.y, ventilation.tidalVolume) annotation (Line(
              points={{-33,82},{-17.5,82},{-17.5,68.3}}, color={0,0,127}));
        connect(deadVolume.y, ventilation.deadSpace) annotation (Line(points={{
                -15,90},{-1.1,90},{-1.1,68.3}}, color={0,0,127}));
        connect(breathingFrequency.y, ventilation.respiratoryRate) annotation (
            Line(points={{9,92},{15.3,92},{15.3,68.3}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                  -100,-100},{100,100}})));
      end testVentilation;

      model testVenousBloodTestTool

        Parts.TestToolVenousBlood VenousBlood
          annotation (Placement(transformation(extent={{-44,-94},{8,-46}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k=13332.2387415)
          annotation (Placement(transformation(extent={{-88,-34},{-80,-26}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k=5332.8954966)
          annotation (Placement(transformation(extent={{-80,-42},{-72,-34}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8.4)
          annotation (Placement(transformation(extent={{4,-4},{-4,4}},
              rotation=180,
              origin={-98,-80})));
        Physiolibrary.Types.Constants.TemperatureConst temp(k=310.15)
          annotation (Placement(transformation(extent={{-106,-28},{-98,-22}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctPi(k=1.16) annotation (
           Placement(transformation(
              extent={{-5,-3},{5,3}},
              rotation=0,
              origin={-79,-95})));
        Physiolibrary.Types.Constants.ConcentrationConst ctAlb(k=11.8)
          annotation (Placement(transformation(extent={{-5,-3},{5,3}},
              rotation=0,
              origin={-101,-90})));
        Physiolibrary.Types.Constants.MolarFlowRateConst VO2(k=
              0.00023333333333333)
          annotation (Placement(transformation(extent={{-88,-68},{-80,-60}})));
        Physiolibrary.Types.Constants.FractionConst RQ(k(displayUnit="1") = 0.8)
          annotation (Placement(transformation(extent={{-78,-74},{-70,-66}})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst QCO(k=
              8.3333333333333e-05)
          annotation (Placement(transformation(extent={{-78,-60},{-70,-52}})));
        Physiolibrary.Types.Constants.ConcentrationConst BEox(k=0) annotation (
            Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={-84,-50})));
      equation

        connect(pO2.y, VenousBlood.PaO2) annotation (Line(points={{-79,-30},{-52,
                -30},{-52,-48.4},{-46.6,-48.4}},
                                            color={0,0,127}));
        connect(pCO2.y, VenousBlood.PaCO2) annotation (Line(points={{-71,-38},{
                -54,-38},{-54,-53.2},{-46.6,-53.2}},
                                            color={0,0,127}));
        connect(VenousBlood.QCO, QCO.y) annotation (Line(points={{-46.6,-62.8},{
                -63.3,-62.8},{-63.3,-56},{-69,-56}},
                                               color={0,0,127}));
        connect(RQ.y, VenousBlood.RQ) annotation (Line(points={{-69,-70},{-52,-70},{-52,
                -72.4},{-46.6,-72.4}}, color={0,0,127}));
        connect(temp.y, VenousBlood.bloodTemp) annotation (Line(points={{-97,-25},{-89.5,
                -25},{-89.5,-77.2},{-46.6,-77.2}}, color={0,0,127}));
        connect(VenousBlood.VO2, VO2.y) annotation (Line(points={{-46.6,-67.6},{-66,-67.6},
                {-66,-64},{-79,-64}}, color={0,0,127}));
        connect(ctHb.y, VenousBlood.cHb) annotation (Line(points={{-93,-80},{-62,-80},
                {-62,-82},{-46.6,-82}}, color={0,0,127}));
        connect(ctAlb.y, VenousBlood.cAlb) annotation (Line(points={{-94.75,-90},
                {-89.375,-90},{-89.375,-86.8},{-46.6,-86.8}},            color={0,0,127}));
        connect(ctPi.y, VenousBlood.cPi) annotation (Line(points={{-72.75,-95},{-56,-95},
                {-56,-91.6},{-46.6,-91.6}}, color={0,0,127}));
        connect(BEox.y, VenousBlood.BEox) annotation (Line(points={{-79,-50},{-72,
                -50},{-56,-50},{-56,-56},{-56,-58},{-46.6,-58}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end testVenousBloodTestTool;

      model oldtestBloodyMary

        Physiolibrary.Types.Constants.VolumeFlowRateConst QCO(k=8.3333333333333e-05)
          annotation (Placement(transformation(extent={{-184,-126},{-174,-116}})));
        Parts.VentilationO2CO2 ventilation
          annotation (Placement(transformation(extent={{-28,8},{54,82}})));
        Physiolibrary.Types.Constants.PressureConst barometricPressure(k=
              99991.79056125)
          annotation (Placement(transformation(extent={{-76,82},{-68,90}})));
        Physiolibrary.Types.Constants.FractionConst airHumidity(k=0.58)
          annotation (Placement(transformation(extent={{-78,66},{-70,74}})));
        Physiolibrary.Types.Constants.FractionConst FiO2(k=0.21)
          annotation (Placement(transformation(extent={{-80,54},{-72,62}})));
        Physiolibrary.Types.Constants.FractionConst FiCO2(k=0.00038)
          annotation (Placement(transformation(extent={{-62,48},{-54,56}})));
        Physiolibrary.Types.Constants.TemperatureConst atmosphericTemperature(k=
              298.15)
          annotation (Placement(transformation(extent={{-52,38},{-44,46}})));
        Physiolibrary.Types.Constants.TemperatureConst bodyTemperature(k=310.15)
          annotation (Placement(transformation(extent={{-66,24},{-58,32}})));
        Physiolibrary.Types.Constants.VolumeConst inspiredTidalVolume(k=0.0005)
          annotation (Placement(transformation(extent={{-32,88},{-24,96}})));
        Physiolibrary.Types.Constants.VolumeConst deadVolume(k=0.00015)
          annotation (Placement(transformation(extent={{-14,96},{-6,104}})));
        Physiolibrary.Types.Constants.FrequencyConst breathingFrequency(k=
              0.29333333333333)
          annotation (Placement(transformation(extent={{10,98},{18,106}})));
        Parts.BloodO2CO2Equilibrium AlvCapillary(
          BloodO2in(q(start=10)),
          BloodO2out(conc(start=7.9475)),
          BloodCO2out(conc(start=21.6349)),
          Blood(bloodPO2PCO2_(totalO2(
                sO2CO(start=0.977),
                a(start=-0.1),
                cO2Hb(start=8.16),
                tO2(start=8.161),
                pCO2(start=5700),
                pO2(start=13870)), totalCO2(tCO2_P(start=24.9), pCO2(start=5160)))),
          BloodCO2in(q(start=115.472)))
          annotation (Placement(transformation(extent={{4,-84},{86,-16}})));

        /*
  //
  BloodO2in.q(start=10),
  BloodO2out.conc(start=7.9475),
  BloodCO2out.conc(start=21.6349),
  Blood.bloodPO2PCO2_.totalO2.sO2CO(start=0.977),
  Blood.bloodPO2PCO2_.totalO2.a(start=-0.1),
  Blood.bloodPO2PCO2_.totalO2.cO2Hb(start=8.16),
  Blood.bloodPO2PCO2_.totalO2.tO2(start=8.161),
  Blood.bloodPO2PCO2_.totalO2.pCO2(start=5700),
  Blood.bloodPO2PCO2_.totalO2.pO2(start=13870),
  
  BloodCO2in(q(start=115.472)),
  Blood.bloodPO2PCO2_.totalCO2.tCO2_P(start=24.9),
  Blood.bloodPO2PCO2_.totalCO2.pCO2(start=5160)
  
  */

        Parts.BloodParameters bloodParameters
          annotation (Placement(transformation(extent={{-82,-6},{-62,14}})));

        Parts.BloodO2CO2measured ArtBlood(Blood(bloodPO2PCO2_(totalO2(
          pO2(                            start=13459),
          cO2Hb(                            start=7.82305),
          pCO2(                            start=4428.03),
          a(                            start=-0.1)), totalCO2(
          tCO2_P(                             start=26),
          pCO2(                             start=5330)))))
          annotation (Placement(transformation(extent={{112,-88},{206,-10}})));

          /*
    Blood.bloodPO2PCO2_.totalO2.pO2(start=13459),
    Blood.bloodPO2PCO2_.totalO2.cO2Hb(start=7.82305),
    Blood.bloodPO2PCO2_.totalO2.pCO2(start=4428.03),
    Blood.bloodPO2PCO2_.totalO2.a(start=-0.1),
    Blood.bloodPO2PCO2_.totalCO2.tCO2_P(start=26), 
    Blood.bloodPO2PCO2_.totalCO2.pCO2(start=5330)
    
    
    */
        Parts.BloodO2CO2Equilibrium TissueCapillary
          annotation (Placement(transformation(extent={{64,-138},{-18,-216}})));
        Physiolibrary.Types.Constants.ConcentrationConst BEox(k=0) annotation (
            Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={-86,-30})));
        Parts.BloodO2CO2measured VeinsBlood(Blood(bloodPO2PCO2_(totalO2(
        pO2(                            start=6140),
        cO2Hb(                            start=6.52),
        a(                            start=0.076),
        pCO2(                            start=6400)), totalCO2(
        tCO2_P(                             start=27.4),
        pCO2(                             start=6240)))))
          annotation (Placement(transformation(extent={{-188,-94},{-94,-16}})));

        /*  
  Blood.bloodPO2PCO2_.totalO2.pO2(start=6140),
  Blood.bloodPO2PCO2_.totalO2.cO2Hb(start=6.52),
  Blood.bloodPO2PCO2_.totalO2.a(start=0.076),
  Blood.bloodPO2PCO2_.totalO2.pCO2(start=6400),
  Blood.bloodPO2PCO2_.totalCO2.tCO2_P(start=27.4), 
  Blood.bloodPO2PCO2_.totalCO2.pCO2(start=6240))
  
  */
      Physiolibrary.Chemical.Sources.UnlimitedSolutePumpOut
                                                    Metabolism_O2Use(
            useSoluteFlowInput=true) annotation (Placement(transformation(
            extent={{-10,10},{10,-10}},
            rotation=270,
            origin={36,-240})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump InflowBase(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=90,
              origin={14,-236})));
        Physiolibrary.Types.Constants.MolarFlowRateConst VCO2(k=0.000145717)
          annotation (Placement(transformation(extent={{-36,-240},{-16,-220}})));
        Physiolibrary.Types.Constants.MolarFlowRateConst VO2(k=0.00018309)
          annotation (Placement(transformation(extent={{-26,-268},{-6,-248}})));
        Physiolibrary.Types.Constants.VolumeConst VenBloodVolume(k=0.00360844)
          annotation (Placement(transformation(extent={{-154,-204},{-134,-190}})));
        Physiolibrary.Types.Constants.VolumeConst ArtBloodVolume(k=0.001621)
          annotation (Placement(transformation(extent={{190,-156},{168,-140}})));
        Physiolibrary.Chemical.Components.Substance veinsO2(
          stateName="O2Veins.Mass[mMol]",
          useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit,
          solute_start=0.0247781)
          annotation (Placement(transformation(extent={{-126,-256},{-106,-236}})));
        Physiolibrary.Chemical.Components.Substance artysO2(
          stateName="O2Artys.Mass[mMol]",
          useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit,
          solute_start=0.0130979)
          annotation (Placement(transformation(extent={{154,-240},{174,-220}})));
        Physiolibrary.Chemical.Components.Substance                veins(
                                                                 stateName=
              "CO2Veins.Mass[mMol]",
        useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit,
          solute_start=0.0869)
          annotation (Placement(transformation(extent={{-114,-208},{-94,-188}})));
        Physiolibrary.Chemical.Components.Substance                artys(
                                                                 stateName=
              "CO2Artys.Mass[mMol]",
        useNormalizedVolume=false,
          Simulation=Physiolibrary.Types.SimulationType.NoInit,
          solute_start=0.0343)
          annotation (Placement(transformation(extent={{114,-236},{94,-216}})));
        Parts.PulmonaryShunts pulmonaryShunts
          annotation (Placement(transformation(extent={{-114,-132},{-84,-96}})));
        Physiolibrary.Types.Constants.FractionConst ShuntSraction(k=0.02)
          annotation (Placement(transformation(extent={{-144,-106},{-136,-98}})));
      Physiolibrary.Chemical.Components.Stream O2pulmShortCircuit(
            useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{12,-90},{32,-110}})));
      Physiolibrary.Chemical.Components.Stream CO2pulmShortCircuit(
            useSolutionFlowInput=true)
          annotation (Placement(transformation(extent={{10,-112},{30,-132}})));
      equation
        connect(barometricPressure.y,ventilation. barometricPressure) annotation (
           Line(points={{-67,86},{-46,86},{-46,78.3},{-23.9,78.3}}, color={0,0,
                127}));
        connect(airHumidity.y,ventilation. airHumidity) annotation (Line(points={{-69,70},
                {-23.9,70},{-23.9,70.16}},          color={0,0,127}));
        connect(FiO2.y,ventilation. FiO2) annotation (Line(points={{-71,58},{-50,
                58},{-50,62.02},{-23.9,62.02}}, color={0,0,127}));
        connect(FiCO2.y,ventilation. FiCO2) annotation (Line(points={{-53,52},{
                -23.9,52},{-23.9,52.4}}, color={0,0,127}));
        connect(bodyTemperature.y,ventilation. bodyTemperature) annotation (Line(
              points={{-57,28},{-42,28},{-42,32.42},{-23.9,32.42}}, color={0,0,
                127}));
        connect(inspiredTidalVolume.y,ventilation. tidalVolume) annotation (Line(
              points={{-23,92},{-7.5,92},{-7.5,78.3}},   color={0,0,127}));
        connect(deadVolume.y,ventilation. deadSpace) annotation (Line(points={{-5,100},
                {8.9,100},{8.9,78.3}},          color={0,0,127}));
        connect(breathingFrequency.y,ventilation. respiratoryRate) annotation (
            Line(points={{19,102},{25.3,102},{25.3,78.3}},
                                                        color={0,0,127}));
        connect(bloodParameters.bloodParameters, AlvCapillary.bloodParameters)
          annotation (Line(
            points={{-71.9,-0.7},{-25.1,-0.7},{-25.1,-20.76},{12.2,-20.76}},
            color={0,0,255},
            thickness=0.5));
        connect(AlvCapillary.O2equil, ventilation.O2) annotation (Line(
            points={{33.52,-22.8},{33.52,-6},{-11.6,-6},{-11.6,13.92}},
            color={107,45,134},
            thickness=1));
        connect(AlvCapillary.CO2equil, ventilation.CO2) annotation (Line(
            points={{53.2,-23.48},{61.2,-23.48},{61.2,8},{61.2,11.7},{25.3,11.7}},
            color={107,45,134},
            thickness=1));

        connect(ArtBlood.bloodParameters, bloodParameters.bloodParameters)
          annotation (Line(
            points={{121.4,-15.46},{121.4,-0.7},{-71.9,-0.7}},
            color={0,0,255},
            thickness=0.5));
        connect(BEox.y, AlvCapillary.BEox) annotation (Line(points={{-81,-30},{
                -44,-30},{-44,-35.38},{-1.33,-35.38}},
                                              color={0,0,127}));
        connect(BEox.y, TissueCapillary.BEox) annotation (Line(points={{-81,-30},
                {-81,-32},{-16,-32},{-16,-88},{86,-88},{86,-193.77},{69.33,
                -193.77}},
              color={0,0,127}));
        connect(ArtBlood.BEox, AlvCapillary.BEox) annotation (Line(points={{105.89,
                -32.23},{94,-32.23},{94,-86},{-12,-86},{-12,-35.38},{-1.33,-35.38}},
                                                                          color={0,0,127}));

        connect(AlvCapillary.BloodO2out, ArtBlood.BloodO2in) annotation (Line(
            points={{79.44,-44.56},{99.72,-44.56},{99.72,-41.98},{119.52,-41.98}},
            color={107,45,134},
            thickness=1));

        connect(AlvCapillary.BloodCO2out, ArtBlood.BloodCO2in) annotation (Line(
            points={{79.44,-58.16},{99.72,-58.16},{99.72,-59.92},{120.46,-59.92}},
            color={107,45,134},
            thickness=1));

        connect(ArtBlood.BloodCO2in, TissueCapillary.BloodCO2in) annotation (Line(
            points={{120.46,-59.92},{120.46,-166.08},{56.62,-166.08}},
            color={107,45,134},
            thickness=1));
        connect(ArtBlood.BloodO2in, TissueCapillary.BloodO2in) annotation (Line(
            points={{119.52,-41.98},{138,-41.98},{138,-184.02},{56.62,-184.02}},
            color={107,45,134},
            thickness=1));

        connect(Metabolism_O2Use.q_in, TissueCapillary.O2equil) annotation (Line(
            points={{36,-230},{36,-230},{36,-208.2},{34.48,-208.2}},
            color={107,45,134},
            thickness=1));
        connect(InflowBase.q_out, TissueCapillary.CO2equil) annotation (Line(
            points={{14,-226},{14,-226},{14,-207.42},{14.8,-207.42}},
            color={107,45,134},
            thickness=1));
        connect(VO2.y, Metabolism_O2Use.soluteFlow) annotation (Line(points={{-3.5,
                -258},{4,-258},{26,-258},{26,-244},{32,-244}},    color={0,0,127}));
        connect(VCO2.y, InflowBase.soluteFlow) annotation (Line(points={{-13.5,
                -230},{10,-230},{10,-232}},    color={0,0,127}));
        connect(veinsO2.q_out, TissueCapillary.BloodO2out) annotation (Line(
            points={{-116,-246},{-116,-214},{-44,-214},{-44,-183.24},{-11.44,
                -183.24}},
            color={107,45,134},
            thickness=1));

        connect(artysO2.q_out, TissueCapillary.BloodO2in) annotation (Line(
            points={{164,-230},{164,-190},{136,-190},{136,-184.02},{56.62,-184.02}},
            color={107,45,134},
            thickness=1));
        connect(ArtBloodVolume.y, artysO2.solutionVolume) annotation (Line(points={{165.25,
                -148},{160,-148},{160,-226}}, color={0,0,127}));
        connect(veinsO2.solutionVolume, VenBloodVolume.y) annotation (Line(points={{-120,
                -242},{-120,-242},{-120,-168},{-120,-197},{-131.5,-197}}, color={0,0,127}));
        connect(veins.q_out, TissueCapillary.BloodCO2out) annotation (Line(
            points={{-104,-198},{-70,-198},{-70,-167.64},{-11.44,-167.64}},
            color={107,45,134},
            thickness=1));
        connect(veins.solutionVolume, VenBloodVolume.y) annotation (Line(points={{-108,
                -194},{-108,-152},{-120,-152},{-120,-197},{-131.5,-197}}, color={0,0,127}));
        connect(artys.q_out, TissueCapillary.BloodCO2in) annotation (Line(
            points={{104,-226},{102,-226},{102,-166.08},{56.62,-166.08}},
            color={107,45,134},
            thickness=1));
        connect(artys.solutionVolume, ArtBloodVolume.y) annotation (Line(points={{108,
                -222},{110,-222},{110,-156},{150,-156},{150,-148},{165.25,-148}},
              color={0,0,127}));
        connect(VeinsBlood.BloodCO2in, AlvCapillary.BloodCO2in) annotation (Line(
            points={{-179.54,-65.92},{-83.77,-65.92},{-83.77,-59.52},{11.38,-59.52}},
            color={107,45,134},
            thickness=1));

        connect(AlvCapillary.BloodO2in, VeinsBlood.BloodO2in) annotation (Line(
            points={{11.38,-43.88},{-86.72,-43.88},{-86.72,-47.98},{-180.48,
                -47.98}},
            color={107,45,134},
            thickness=1));

        connect(VeinsBlood.BloodCO2in, TissueCapillary.BloodCO2out) annotation (Line(
            points={{-179.54,-65.92},{-196,-65.92},{-196,-167.64},{-11.44,-167.64}},
            color={107,45,134},
            thickness=1));
        connect(VeinsBlood.BloodO2in, TissueCapillary.BloodO2out) annotation (Line(
            points={{-180.48,-47.98},{-206,-47.98},{-206,-183.24},{-11.44,-183.24}},
            color={107,45,134},
            thickness=1));
        connect(bloodParameters.bloodParameters, VeinsBlood.bloodParameters)
          annotation (Line(
            points={{-71.9,-0.7},{-178.6,-0.7},{-178.6,-21.46}},
            color={0,0,255},
            thickness=0.5));
        connect(VeinsBlood.BEox, AlvCapillary.BEox) annotation (Line(points={{-194.11,
                -38.23},{-210,-38.23},{-210,-8},{-68,-8},{-68,-30},{-44,-30},{-44,
                -35.38},{-1.33,-35.38}},
                                 color={0,0,127}));
        connect(VeinsBlood.bloodFlowRate, QCO.y) annotation (Line(points={{
                -194.11,-28.09},{-200,-28.09},{-200,-106},{-152,-106},{-152,-121},
                {-172.75,-121}}, color={0,0,127}));
        connect(pulmonaryShunts.CardiacOutput, QCO.y) annotation (Line(points={{
                -111.75,-123.54},{-152,-123.54},{-152,-121},{-172.75,-121}},
              color={0,0,127}));
        connect(ShuntSraction.y, pulmonaryShunts.FractionShunts) annotation (Line(
              points={{-135,-102},{-126,-102},{-126,-108.6},{-112.5,-108.6}},
              color={0,0,127}));
        connect(pulmonaryShunts.PulmonaryPerfusion, AlvCapillary.bloodFlowRate)
          annotation (Line(points={{-96.3,-117.96},{-54,-117.96},{-54,-26.54},{
                -1.33,-26.54}}, color={0,0,127}));
        connect(O2pulmShortCircuit.q_in, VeinsBlood.BloodO2in) annotation (Line(
            points={{12,-100},{-40,-100},{-40,-47.98},{-90,-47.98},{-180.48,
                -47.98}},
            color={107,45,134},
            thickness=1));
        connect(O2pulmShortCircuit.q_out, ArtBlood.BloodO2in) annotation (Line(
            points={{32,-100},{104,-100},{104,-41.98},{119.52,-41.98}},
            color={107,45,134},
            thickness=1));
        connect(CO2pulmShortCircuit.solutionFlow, pulmonaryShunts.ShuntFlow)
          annotation (Line(points={{20,-129},{20,-132},{-92,-132},{-92,-121.92},{
                -96.3,-121.92}}, color={0,0,127}));
        connect(O2pulmShortCircuit.solutionFlow, pulmonaryShunts.ShuntFlow)
          annotation (Line(points={{22,-107},{22,-112},{-6,-112},{-6,-132},{-92,
                -132},{-92,-121.92},{-96.3,-121.92}}, color={0,0,127}));
        connect(CO2pulmShortCircuit.q_in, AlvCapillary.BloodCO2in) annotation (
            Line(
            points={{10,-122},{-46,-122},{-46,-66},{-84,-66},{-83.77,-65.92},{
                -83.77,-59.52},{11.38,-59.52}},
            color={107,45,134},
            thickness=1));
        connect(CO2pulmShortCircuit.q_out, ArtBlood.BloodCO2in) annotation (Line(
            points={{30,-122},{68,-122},{112,-122},{112,-59.92},{120.46,-59.92}},
            color={107,45,134},
            thickness=1));

        connect(TissueCapillary.bloodFlowRate, QCO.y) annotation (Line(points={{
                69.33,-203.91},{92,-203.91},{92,-136},{-152,-136},{-152,-121},{
                -172.75,-121}}, color={0,0,127}));
        connect(ArtBlood.bloodFlowRate, QCO.y) annotation (Line(points={{105.89,
                -22.09},{92,-22.09},{92,-136},{-152,-136},{-152,-121},{-172.75,
                -121}}, color={0,0,127}));
        connect(TissueCapillary.bloodParameters, bloodParameters.bloodParameters)
          annotation (Line(
            points={{55.8,-210.54},{55.8,-256},{228,-256},{228,-2},{122,-2},{
                121.4,-0.7},{-71.9,-0.7}},
            color={0,0,255},
            thickness=0.5));
        connect(atmosphericTemperature.y, ventilation.ambientTemperature)
          annotation (Line(points={{-43,42},{-23.9,42},{-23.9,42.04}}, color={0,
                0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end oldtestBloodyMary;

      model oldBloodyMary

        Parts.BloodyMary_version01 testBloodyMary
          annotation (Placement(transformation(extent={{-58,-36},{46,70}})));
      end oldBloodyMary;

      model testBloodyMary

        Parts.BloodyMary_Physiomodel bloodyMary_Physiomodel
          annotation (Placement(transformation(extent={{48,34},{92,78}})));
        Physiolibrary.Types.Constants.VolumeConst inspiredTidalVolume(k=0.0005)
          annotation (Placement(transformation(extent={{-84,80},{-76,84}})));
        Physiolibrary.Types.Constants.FractionConst FiO2(k=0.21)
          annotation (Placement(transformation(extent={{-72,68},{-60,72}})));
        Physiolibrary.Types.Constants.PressureConst barometricPressure(k=
              99991.79056125)
          annotation (Placement(transformation(extent={{-58,78},{-46,82}})));
        Physiolibrary.Types.Constants.TemperatureConst atmosphericTemperature(k=
              298.15)
          annotation (Placement(transformation(extent={{-52,60},{-42,64}})));
        Physiolibrary.Types.Constants.TemperatureConst bodyTemperature(k=310.15)
          annotation (Placement(transformation(extent={{-52,52},{-42,56}})));
        Physiolibrary.Types.Constants.FractionConst FiCO2(k=0.00038)
          annotation (Placement(transformation(extent={{-34,66},{-24,70}})));
        Physiolibrary.Types.Constants.FractionConst airHumidity(k=0.58)
          annotation (Placement(transformation(extent={{-36,74},{-24,78}})));
        Physiolibrary.Types.Constants.FrequencyConst breathingFrequency(k=
              0.29333333333333)
          annotation (Placement(transformation(extent={{5,-3},{-5,3}},
              rotation=180,
              origin={-3,-17})));
        Physiolibrary.Types.Constants.VolumeConst deadVolume(k=0.00015)
          annotation (Placement(transformation(extent={{5,-3.5},{-5,3.5}},
              rotation=180,
              origin={-3,-3.5})));
        Physiolibrary.Types.Constants.ConcentrationConst BEox(k=0) annotation (
            Placement(transformation(
              extent={{4,-3},{-4,3}},
              rotation=180,
              origin={-24,27})));
        Physiolibrary.Types.Constants.VolumeFlowRateConst CardiacOutput(k=
              8.3333333333333e-05)
          annotation (Placement(transformation(extent={{59,-78},{67,-72}})));
        Physiolibrary.Types.Constants.MolarFlowRateConst VCO2(k=0.000145717)
          annotation (Placement(transformation(extent={{-20,-74},{-10,-68}})));
        Physiolibrary.Types.Constants.MolarFlowRateConst VO2(k=0.00018309)
          annotation (Placement(transformation(extent={{-16,-58},{-8,-52}})));
        Physiolibrary.Types.Constants.VolumeConst ArtBloodVolume(k=0.001621)
          annotation (Placement(transformation(extent={{-12,-34},{-4,-28}})));
        Physiolibrary.Types.Constants.VolumeConst VenBloodVolume(k=0.00360844)
          annotation (Placement(transformation(extent={{-72,-50},{-64,-44}})));
        Physiolibrary.Types.Constants.FractionConst Shuntfraction(k=0.02)
          annotation (Placement(transformation(extent={{59,-66},{67,-60}})));
        Parts.PulmonaryShunts pulmonaryShunts
          annotation (Placement(transformation(extent={{78,-80},{98,-60}})));
      equation
        connect(Shuntfraction.y, pulmonaryShunts.FractionShunts) annotation (Line(
              points={{68,-63},{72,-63},{72,-67},{79,-67}}, color={0,0,127}));
        connect(CardiacOutput.y, pulmonaryShunts.CardiacOutput) annotation (Line(
              points={{68,-75},{72,-75},{72,-75.3},{79.5,-75.3}},
                                                              color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end testBloodyMary;

      model testBM2

        Parts.BloodyMary_Physiomodel bloodyMary_Physiomodel(CO2balance(veins(
                solute_start=0.0812), artys(solute_start=0.0338)), kidney1(
              kidneyABRcompensation1(actionSize=1E-005)))
          annotation (Placement(transformation(extent={{44,20},{64,40}})));
        Parts.TestInputs testInputs(constTidalVolume(k=0.00057), stepFiCO2(height=
                0.05, duration=1000000))
          annotation (Placement(transformation(extent={{-54,24},{-34,44}})));
      equation
        connect(testInputs.busConnector, bloodyMary_Physiomodel.busConnector)
          annotation (Line(
            points={{-36.6,34},{61,34},{61,35.8}},
            color={0,0,255},
            thickness=0.5));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})), experiment(StopTime=6000));
      end testBM2;

      model testO2

        Parts.O2PhysiomodelDbg o2PhysiomodelDbg
          annotation (Placement(transformation(extent={{-22,34},{-2,54}})));
        Parts.TestInputs testInputs
          annotation (Placement(transformation(extent={{-84,66},{-64,86}})));
        Parts.VentilationInputs ventilationInputs
          annotation (Placement(transformation(extent={{-88,12},{-68,32}})));
        Parts.AcidBaseInputs acidBaseInputs
          annotation (Placement(transformation(extent={{-88,-20},{-68,0}})));
        Parts.CO2PhysiomodelInputs cO2PhysiomodelInputs
          annotation (Placement(transformation(extent={{-88,-56},{-68,-36}})));
      equation
        connect(o2PhysiomodelDbg.busConnector, testInputs.busConnector)
          annotation (Line(
            points={{-4,51.1429},{-36,51.1429},{-36,76},{-66.6,76}},
            color={0,0,255},
            thickness=0.5));
        connect(o2PhysiomodelDbg.busConnector, ventilationInputs.busConnector)
          annotation (Line(
            points={{-4,51.1429},{-36,51.1429},{-36,28},{-68,28}},
            color={0,0,255},
            thickness=0.5));
        connect(o2PhysiomodelDbg.busConnector, acidBaseInputs.busConnector)
          annotation (Line(
            points={{-4,51.1429},{-36,51.1429},{-36,-9.8},{-78,-9.8}},
            color={0,0,255},
            thickness=0.5));
        connect(o2PhysiomodelDbg.busConnector, cO2PhysiomodelInputs.busConnector)
          annotation (Line(
            points={{-4,51.1429},{-36,51.1429},{-36,-40},{-70,-40}},
            color={0,0,255},
            thickness=0.5));
      end testO2;

      model testICF

        Interstitium interstitium(initialHCO3Conc=25, volume(displayUnit="l")=
               0.012)
          annotation (Placement(transformation(extent={{18,20},{38,40}})));
        Physiolibrary.Chemical.Components.Substance BloodBE(useNormalizedVolume=
             false, solute_start=0)
          annotation (Placement(transformation(extent={{20,60},{40,80}})));
        Physiolibrary.Types.Constants.VolumeConst bloodVolume(k=0.005)
          annotation (Placement(transformation(extent={{0,70},{8,78}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k=5332.8954966)
          annotation (Placement(transformation(extent={{-20,34},{-12,42}})));
        Physiolibrary.Chemical.Sensors.ConcentrationMeasure
          concentrationMeasure
          annotation (Placement(transformation(extent={{-66,20},{-46,40}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
            useSoluteFlowInput=true) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={18,-20})));
        Physiolibrary.Types.Constants.ConcentrationConst bloodHCO3Concentration(
            k=26)
          annotation (Placement(transformation(extent={{-80,-26},{-72,-18}})));
        Modelica.Blocks.Math.Add add(k1=-1, k2=+1)
          annotation (Placement(transformation(extent={{-58,-26},{-38,-6}})));
        Modelica.Blocks.Math.Gain gain(k=2e-5)
          annotation (Placement(transformation(extent={{-28,-26},{-8,-6}})));
      equation
        connect(interstitium.BE, BloodBE.q_out) annotation (Line(
            points={{28,39},{30,39},{30,70}},
            color={107,45,134},
            thickness=1));
        connect(BloodBE.solutionVolume, bloodVolume.y)
          annotation (Line(points={{26,74},{9,74}}, color={0,0,127}));
        connect(interstitium.pCO2, pCO2.y) annotation (Line(points={{20,38},{20,
                38},{-11,38}}, color={0,0,127}));
        connect(interstitium.HCO3, concentrationMeasure.q_in) annotation (Line(
            points={{19,30},{19,30},{-56,30}},
            color={107,45,134},
            thickness=1));
        connect(concentrationMeasure.concentration, add.u1) annotation (Line(
              points={{-56,22},{-60,22},{-60,-10}}, color={0,0,127}));
        connect(bloodHCO3Concentration.y, add.u2) annotation (Line(points={{-71,
                -22},{-71,-22},{-60,-22}}, color={0,0,127}));
        connect(add.y, gain.u) annotation (Line(points={{-37,-16},{-34,-16},{
                -30,-16}}, color={0,0,127}));
        connect(gain.y, unlimitedSolutePump.soluteFlow) annotation (Line(points=
               {{-7,-16},{12,-16},{14,-16}}, color={0,0,127}));
        connect(interstitium.HCO3, unlimitedSolutePump.q_out) annotation (Line(
            points={{19,30},{18,30},{18,-10}},
            color={107,45,134},
            thickness=1));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}})));
      end testICF;

      model testKidneyCompensation

        kidneyABRcompensation kidneyABRcompensation1
          annotation (Placement(transformation(extent={{2,-42},{22,-22}})));
        Physiolibrary.Chemical.Components.Substance BloodBE(useNormalizedVolume=
              false, solute_start=0)
          annotation (Placement(transformation(extent={{52,-38},{72,-18}})));
        Physiolibrary.Types.Constants.VolumeConst bloodVolume(k=0.005)
          annotation (Placement(transformation(extent={{44,-14},{52,-6}})));
        Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={62,94})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump1(
            useSoluteFlowInput=true)
          annotation (Placement(transformation(extent={{12,-62},{32,-42}})));
        OSA.BEINV
              bEINV
          annotation (Placement(transformation(extent={{-26,32},{24,84}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5330)
          annotation (Placement(transformation(extent={{-60,-10},{-52,-2}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=8)
          annotation (Placement(transformation(extent={{-88,56},{-80,64}})));
        Physiolibrary.Types.Constants.ConcentrationConst cAlb(k=0.66)
          annotation (Placement(transformation(extent={{-86,46},{-78,54}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=310.15)
          annotation (Placement(transformation(extent={{-62,18},{-54,26}})));
        Physiolibrary.Types.Constants.ConcentrationConst cPi(k=1.15)
          annotation (Placement(transformation(extent={{-70,38},{-62,46}})));
        Physiolibrary.Types.Constants.FractionConst sO2(k=0.5)
          annotation (Placement(transformation(extent={{-58,32},{-50,40}})));
        Modelica.Blocks.Sources.Ramp ramp(
          height=7000,
          duration=1e6,
          offset=5320,
          startTime(displayUnit="d") = 2592000)
          annotation (Placement(transformation(extent={{-72,66},{-62,76}})));
        Scenarios.AddingAcidBase addingAcidBase(addAcid(
            period=15,
            nperiod=1,
            startTime(displayUnit="s") = 20000,
            amplitude=1e-3), unlimitedSolutePump(SoluteFlow(displayUnit="mol/s")=
                 1, useSoluteFlowInput=true))
          annotation (Placement(transformation(extent={{80,0},{100,20}})));
      equation
        connect(BloodBE.solutionVolume,bloodVolume. y) annotation (Line(points={{58,-24},
                {58,-10},{53,-10}},            color={0,0,127}));
        connect(BloodBE.q_out,concentrationMeasure1. q_in) annotation (Line(
            points={{62,-28},{62,94}},
            color={107,45,134},
            thickness=1));
        connect(unlimitedSolutePump1.q_out,BloodBE. q_out) annotation (Line(
            points={{32,-52},{62,-52},{62,-28}},
            color={107,45,134},
            thickness=1));
        connect(kidneyABRcompensation1.molarflowrate, unlimitedSolutePump1.soluteFlow)
          annotation (Line(points={{21,-32},{26,-32},{26,-48}},
                                                            color={0,0,127}));
        connect(ctHb.y,bEINV. ctHb)
          annotation (Line(points={{-79,60},{-40,60},{-40,58},{-28.5,58}},
                                                         color={0,0,127}));
        connect(cAlb.y,bEINV. cAlb) annotation (Line(points={{-77,50},{-28.5,50},
                {-28.5,51.24}},color={0,0,127}));
        connect(temperature.y,bEINV. temp) annotation (Line(points={{-53,22},{
                -36,22},{-36,32.52},{-28.5,32.52}},  color={0,0,127}));
        connect(cPi.y,bEINV. cPi) annotation (Line(points={{-61,42},{-46,42},{
                -46,45},{-28.5,45}},
                                 color={0,0,127}));
        connect(sO2.y,bEINV. sO2) annotation (Line(points={{-49,36},{-40,36},{
                -40,38.76},{-28.5,38.76}},  color={0,0,127}));
        connect(concentrationMeasure1.concentration, bEINV.BEox) annotation (
            Line(points={{54,94},{0,94},{-48,94},{-48,78.8},{-28.5,78.8}},
              color={0,0,127}));
        connect(bEINV.pH, kidneyABRcompensation1.pH) annotation (Line(points={{
                26.5,58},{34,58},{34,-16},{-16,-16},{-16,-32},{-10,-32},{-10,
                -32},{4,-32}}, color={0,0,127}));
        connect(concentrationMeasure1.concentration, kidneyABRcompensation1.BE)
          annotation (Line(points={{54,94},{-20,94},{-94,94},{-94,-36},{4,-36},
                {4,-41}}, color={0,0,127}));
        connect(ramp.y, bEINV.pCO2) annotation (Line(points={{-61.5,71},{-45.75,
                71},{-45.75,68.4},{-28.5,68.4}}, color={0,0,127}));
        connect(BloodBE.q_out, addingAcidBase.q_out) annotation (Line(
            points={{62,-28},{98,-28},{98,1},{90,1}},
            color={107,45,134},
            thickness=1));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})));
      end testKidneyCompensation;

      model testSO2
        Physiolibrary.Types.Constants.pHConst pH(k=7.4)
          annotation (Placement(transformation(extent={{-84,60},{-76,68}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5300)
          annotation (Placement(transformation(extent={{-88,46},{-80,54}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k=300.15)
          annotation (Placement(transformation(extent={{-86,34},{-78,42}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=9)
          annotation (Placement(transformation(extent={{0,60},{-12,70}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5.4)
          annotation (Placement(transformation(extent={{26,60},{16,66}})));
        Physiolibrary.Types.Constants.FractionConst fMetHb(k=0.005)
          annotation (Placement(transformation(extent={{26,34},{16,42}})));
        Physiolibrary.Types.Constants.FractionConst fHbF(k=0.005)
          annotation (Placement(transformation(extent={{54,14},{44,22}})));
        Physiolibrary.Types.Constants.PressureConst pCO(k(displayUnit="kPa")=
            0)
          annotation (Placement(transformation(extent={{-34,-16},{-26,-8}})));
        TotalO2 totalO2_1
          annotation (Placement(transformation(extent={{-42,32},{-22,52}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k(displayUnit="kPa")=
            5000)
          annotation (Placement(transformation(extent={{-84,-8},{-76,0}})));
      equation
        connect(totalO2_1.pH, pH.y) annotation (Line(points={{-41,52},{-58,52},
                {-58,64},{-75,64}}, color={0,0,127}));
        connect(totalO2_1.pCO2, pCO2.y) annotation (Line(points={{-41,48},{-58,
                48},{-58,50},{-79,50}}, color={0,0,127}));
        connect(totalO2_1.T, temperature.y) annotation (Line(points={{-41,44},{
                -52,44},{-52,38},{-77,38}}, color={0,0,127}));
        connect(ctHb.y, totalO2_1.ctHb) annotation (Line(points={{-13.5,65},{
                -13.5,58.5},{-23,58.5},{-23,52}}, color={0,0,127}));
        connect(totalO2_1.cDPG, cDPG.y) annotation (Line(points={{-23,48},{-4,
                48},{-4,63},{14.75,63}}, color={0,0,127}));
        connect(totalO2_1.FMetHb, fMetHb.y) annotation (Line(points={{-23,44},{
                -4,44},{-4,38},{14.75,38}}, color={0,0,127}));
        connect(fHbF.y, totalO2_1.FHbF) annotation (Line(points={{42.75,18},{10,
                18},{10,40},{-23,40}}, color={0,0,127}));
        connect(pCO.y, totalO2_1.pCO) annotation (Line(points={{-25,-12},{-18,
                -12},{-18,8},{-14,8},{-14,36},{-23,36}}, color={0,0,127}));
        connect(pO2.y, totalO2_1.pO2inp) annotation (Line(points={{-75,-4},{-58,
                -4},{-58,41.5},{-41.1,41.5}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}})));
      end testSO2;

      model TestOSA

        OSA.ctO2content ctO2content
          annotation (Placement(transformation(extent={{-32,-32},{54,54}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)
          annotation (Placement(transformation(extent={{78,24},{68,32}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k(displayUnit="kPa")=
            5000)
          annotation (Placement(transformation(extent={{-58,-6},{-50,2}})));
        Physiolibrary.Types.Constants.pHConst pH(k=7.410)
          annotation (Placement(transformation(extent={{-56,38},{-48,46}})));
        Physiolibrary.Types.Constants.FractionConst FCOHb(k=0.005)
          annotation (Placement(transformation(extent={{80,-28},{72,-20}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5140)
          annotation (Placement(transformation(extent={{-60,20},{-52,28}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k(
              displayUnit="K") = 310.15)
          annotation (Placement(transformation(extent={{-74,6},{-66,14}})));
        Physiolibrary.Types.Constants.FractionConst FHbF(k=0.005)
          annotation (Placement(transformation(extent={{82,-12},{74,-4}})));
        Physiolibrary.Types.Constants.FractionConst FMetHb(k=0.005)
          annotation (Placement(transformation(extent={{74,8},{66,16}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=9)
          annotation (Placement(transformation(extent={{82,42},{72,50}})));
      equation
        connect(pH.y, ctO2content.pH) annotation (Line(points={{-47,42},{-36.3,
                42},{-36.3,29.06}},  color={0,0,127}));
        connect(pO2.y, ctO2content.pO2) annotation (Line(points={{-49,-2},{
                -36.3,-2},{-36.3,45.4}},    color={0,0,127}));
        connect(pCO2.y, ctO2content.pCO2) annotation (Line(points={{-51,24},{
                -42,24},{-42,11},{-36.3,11}},        color={0,0,127}));
        connect(temperature.y, ctO2content.T) annotation (Line(points={{-65,10},
                {-36.3,10},{-36.3,-6.2}},   color={0,0,127}));
        connect(FCOHb.y, ctO2content.FCOHb) annotation (Line(points={{71,-24},{
                58.3,-24},{58.3,-23.4}},   color={0,0,127}));
        connect(FHbF.y, ctO2content.FHbF) annotation (Line(points={{73,-8},{62,
                -8},{62,-6.2},{58.3,-6.2}},  color={0,0,127}));
        connect(FMetHb.y, ctO2content.FMetHb) annotation (Line(points={{65,12},
                {58.3,12},{58.3,11}},   color={0,0,127}));
        connect(cDPG.y, ctO2content.cDPG) annotation (Line(points={{66.75,28},{
                58.3,28},{58.3,28.2}},   color={0,0,127}));
        connect(ctHb.y, ctO2content.ctHb) annotation (Line(points={{70.75,46},{
                58.3,46},{58.3,45.4}},   color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}})));
      end TestOSA;

      model TestOSA1

        OSA.ctO2content ctO2content
          annotation (Placement(transformation(extent={{-32,-32},{54,54}})));
        Physiolibrary.Types.Constants.ConcentrationConst cDPG(k=5)
          annotation (Placement(transformation(extent={{78,24},{68,32}})));
        Physiolibrary.Types.Constants.PressureConst pO2(k(displayUnit="kPa")=
            5000)
          annotation (Placement(transformation(extent={{-58,-6},{-50,2}})));
        Physiolibrary.Types.Constants.pHConst pH(k=7.410)
          annotation (Placement(transformation(extent={{-56,38},{-48,46}})));
        Physiolibrary.Types.Constants.FractionConst FCOHb(k=0.005)
          annotation (Placement(transformation(extent={{80,-28},{72,-20}})));
        Physiolibrary.Types.Constants.PressureConst pCO2(k(displayUnit="kPa")=
               5140)
          annotation (Placement(transformation(extent={{-60,20},{-52,28}})));
        Physiolibrary.Types.Constants.TemperatureConst temperature(k(
              displayUnit="K") = 310.15)
          annotation (Placement(transformation(extent={{-74,6},{-66,14}})));
        Physiolibrary.Types.Constants.FractionConst FHbF(k=0.005)
          annotation (Placement(transformation(extent={{82,-12},{74,-4}})));
        Physiolibrary.Types.Constants.FractionConst FMetHb(k=0.005)
          annotation (Placement(transformation(extent={{74,8},{66,16}})));
        Physiolibrary.Types.Constants.ConcentrationConst ctHb(k=9)
          annotation (Placement(transformation(extent={{82,42},{72,50}})));
      equation
        connect(pH.y, ctO2content.pH) annotation (Line(points={{-47,42},{-36.3,
                42},{-36.3,29.06}},  color={0,0,127}));
        connect(pO2.y, ctO2content.pO2) annotation (Line(points={{-49,-2},{
                -36.3,-2},{-36.3,45.4}},    color={0,0,127}));
        connect(pCO2.y, ctO2content.pCO2) annotation (Line(points={{-51,24},{
                -42,24},{-42,11},{-36.3,11}},        color={0,0,127}));
        connect(temperature.y, ctO2content.T) annotation (Line(points={{-65,10},
                {-36.3,10},{-36.3,-6.2}},   color={0,0,127}));
        connect(FCOHb.y, ctO2content.FCOHb) annotation (Line(points={{71,-24},{
                58.3,-24},{58.3,-23.4}},   color={0,0,127}));
        connect(FHbF.y, ctO2content.FHbF) annotation (Line(points={{73,-8},{62,
                -8},{62,-6.2},{58.3,-6.2}},  color={0,0,127}));
        connect(FMetHb.y, ctO2content.FMetHb) annotation (Line(points={{65,12},
                {58.3,12},{58.3,11}},   color={0,0,127}));
        connect(cDPG.y, ctO2content.cDPG) annotation (Line(points={{66.75,28},{
                58.3,28},{58.3,28.2}},   color={0,0,127}));
        connect(ctHb.y, ctO2content.ctHb) annotation (Line(points={{70.75,46},{
                58.3,46},{58.3,45.4}},   color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent=
                  {{-100,-100},{100,100}})));
      end TestOSA1;
    end tests;

    model kidneyABRcompensation

      Physiolibrary.Types.RealIO.pHInput pH
        annotation (Placement(transformation(extent={{-100,-20},{-60,20}})));
      Physiolibrary.Types.RealIO.MolarFlowRateOutput molarflowrate=-action* actionSize
      annotation (Placement(transformation(extent={{80,-10},{100,10}})));

      Real action;
      parameter Real actionSize=5e-4;
    //   parameter Real actionTimeConst=3600*12;
    //   parameter Real actionLimit=1;
    //   constant Real referencepH=7.4;

      Real targetBE =  -35.36421 + (12.97681 + 35.36421)/(1 + (pH/7.443465)^179.8756)
        "Fit of the SA comepnsation diagram";
      Physiolibrary.Types.RealIO.ConcentrationInput BE
        annotation (Placement(transformation(extent={{-100,-110},{-60,-70}})));

      Real cKC
        "slow change of concentration of BE in kidney cells creates second order dynamics";
      parameter Real kKC = 1e-2
        "speed of change of concentration in kideny cells, e.g. membrane dynamics";

    equation
      der(cKC) = kKC* (targetBE - cKC);

      action = actionSize*(BE - cKC);

      // hard anti-windup limiter
    //   if action > actionLimit and pH > referencepH or action < -actionLimit and pH <
    //       referencepH then
    //     der(action) = 0;
    //   else
    //     der(action)*actionTimeConst = (pH - referencepH) - action;
    //   end if;
    //
    end kidneyABRcompensation;

    model BodyBEox

      Physiolibrary.Types.BusConnector busConnector
        annotation (Placement(transformation(extent={{-100,60},{-60,100}})));
      Physiolibrary.Chemical.Components.Substance BloodBE(useNormalizedVolume=
            false, solute_start=0)
        annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
      Physiolibrary.Types.Constants.VolumeConst bloodVolume(k=0.005)
        annotation (Placement(transformation(extent={{-18,14},{-10,22}})));
      Physiolibrary.Chemical.Sensors.ConcentrationMeasure concentrationMeasure1
        annotation (Placement(transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={0,80})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-84,-10},{-64,10}})));
      Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump1(
          useSoluteFlowInput=true)
        annotation (Placement(transformation(extent={{-84,-36},{-64,-16}})));
    equation
      connect(BloodBE.solutionVolume,bloodVolume. y) annotation (Line(points={{-4,4},{
              -4,18},{-9,18}},               color={0,0,127}));
      connect(BloodBE.q_out,concentrationMeasure1. q_in) annotation (Line(
          points={{0,0},{0,18},{0,80}},
          color={107,45,134},
          thickness=1));
      connect(concentrationMeasure1.concentration, busConnector.BEox)
        annotation (Line(points={{-8,80},{-80,80}},           color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(unlimitedSolutePump.q_out, BloodBE.q_out) annotation (Line(
          points={{-64,0},{-30,0},{0,0}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump.soluteFlow, busConnector.interstitiumBEoxFlow)
        annotation (Line(points={{-70,4},{-70,4},{-70,52},{-70,80},{-80,80}},
            color={0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(unlimitedSolutePump1.q_out, BloodBE.q_out) annotation (Line(
          points={{-64,-26},{0,-26},{0,0}},
          color={107,45,134},
          thickness=1));
      connect(unlimitedSolutePump1.soluteFlow, busConnector.kidneyBEoxFlow)
        annotation (Line(points={{-70,-22},{-70,-22},{-70,80},{-80,80}}, color=
              {0,0,127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}})));
    end BodyBEox;

    model kidney

      Physiolibrary.Types.BusConnector busConnector
        annotation (Placement(transformation(extent={{-100,62},{-60,102}})));
      kidneyABRcompensation kidneyABRcompensation1
        annotation (Placement(transformation(extent={{-40,8},{-16,32}})));
    equation
      connect(kidneyABRcompensation1.molarflowrate, busConnector.kidneyBEoxFlow)
        annotation (Line(points={{-17.2,20},{-6,20},{-6,82},{-80,82}},
                                                                     color={0,0,
              127}), Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      connect(kidneyABRcompensation1.pH, busConnector.Artys_pH) annotation (
          Line(points={{-37.6,20},{-37.6,20},{-80,20},{-80,82}},
                                                             color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{-3,-3},{-3,-3}}));
      connect(kidneyABRcompensation1.BE, busConnector.BEox) annotation (Line(
            points={{-37.6,9.2},{-80,9.2},{-80,12},{-80,82}}, color={0,0,127}),
          Text(
          string="%second",
          index=1,
          extent={{6,3},{6,3}}));
      annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}})), Icon(graphics={Ellipse(extent={{-56,90},
                  {24,-82}}, lineColor={28,108,200}), Line(points={{32,88},{24,
                  -4},{52,-86}}, color={28,108,200})}));
    end kidney;

    package Scenarios

      model AddingAcidBase

        Physiolibrary.Chemical.Interfaces.ChemicalPort_b
                                  q_out
          "Concentration and molar flow from/to compartment"
          annotation (Placement(transformation(extent={{-10,-100},{10,-80}}),
              iconTransformation(extent={{-10,-100},{10,-80}})));
        Physiolibrary.Chemical.Sources.UnlimitedSolutePump unlimitedSolutePump(
            useSoluteFlowInput=true)
          annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));
        Modelica.Blocks.Sources.Pulse addAcid(
          amplitude=1,
          width=100,
          startTime(displayUnit="d") = 0,
          period=1,
          nperiod=0)
          annotation (Placement(transformation(extent={{-100,58},{-80,78}})));
        Modelica.Blocks.Sources.Pulse addBase(
          amplitude=1,
          width=100,
          startTime(displayUnit="d") = 0,
          period=1,
          nperiod=0)
          annotation (Placement(transformation(extent={{-100,20},{-80,40}})));
        Modelica.Blocks.Math.Add add(k2=-1)
          annotation (Placement(transformation(extent={{-60,40},{-40,60}})));
      equation
        connect(unlimitedSolutePump.q_out, q_out) annotation (Line(
            points={{-20,0},{-20,-90},{0,-90}},
            color={107,45,134},
            thickness=1));
        connect(addAcid.y, add.u1) annotation (Line(points={{-79,68},{-72,68},{
                -72,56},{-62,56}},
                           color={0,0,127}));
        connect(add.u2, addBase.y) annotation (Line(points={{-62,44},{-72,44},{-72,30},
                {-79,30}}, color={0,0,127}));
        connect(add.y, unlimitedSolutePump.soluteFlow)
          annotation (Line(points={{-39,50},{-26,50},{-26,4}}, color={0,0,127}));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})), Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-100},{100,100}}), graphics={
              Rectangle(
                extent={{-20,2},{20,62}},
                lineColor={0,0,0},
                fillColor={127,0,127},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-6,72},{6,62}},
                lineColor={0,0,0},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-20,80},{20,72}},
                lineColor={0,0,0},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-4,2},{4,-68}},
                lineColor={0,0,0},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid),
              Line(points={{-20,52},{-6,52}}, color={0,0,0}),
              Line(points={{-20,32},{-6,32}}, color={0,0,0}),
              Line(points={{-20,12},{-6,12}}, color={0,0,0}),
              Line(points={{-20,22},{-12,22}}, color={0,0,0}),
              Line(points={{-20,42},{-12,42}}, color={0,0,0})}));
      end AddingAcidBase;
    end Scenarios;
  end Parts;

  package Icons

    model Alveolus

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{
                -100,-100},{100,100}}), graphics={Bitmap(
              extent={{-100,100},{102,-100}},
              imageSource=
                  ""
                   +
                  ""
                   +
                  "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"
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  "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"
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  "",
              fileName="modelica://NewBloodyMary/../../ikony/alveolus.png")}));

    end Alveolus;

    model Shunts

      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={Bitmap(
              extent={{-100,100},{102,-100}},
              imageSource=
                  "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"
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  "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",
              fileName="modelica://NewBloodyMary/../../ikony/Shunts1.png")}));

    end Shunts;
  annotation (uses(Modelica(version="3.2.1"), Physiolibrary(version="2.3.1"),
      Physiomodel(version="1.0.0")));

  end Icons;

  model test_disoc
    Modelica.Blocks.Sources.Ramp                      pO2_const(
      duration=10,
      offset=133,
      height=26000)
      annotation (Placement(transformation(extent={{-138,92},{-130,100}})));
    Physiolibrary.Types.RealIO.FractionOutput sO2 annotation(Placement(transformation(extent = {{-8, -8}, {8, 8}}, rotation = 0, origin={4,8}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,58})));
    Physiolibrary.Types.RealIO.ConcentrationOutput cHCO3(displayUnit="mmol/l")
      "outgoing concentration of HCO3"                                                                            annotation(Placement(transformation(extent = {{-7, -7}, {7, 7}}, rotation = 0, origin={5,116}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,78})));
    Physiolibrary.Types.RealIO.ConcentrationInput BEox annotation(Placement(transformation(extent={{-160,
              -40},{-120,0}}),                                                                                                 iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={-186,110})));
    Physiolibrary.Types.RealIO.pHOutput pH(start=7.4)   annotation(Placement(transformation(extent={{-7,-7},
              {7,7}},                                                                                                    rotation = 0, origin={1,-41}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,98})));
    Physiolibrary.Types.RealIO.ConcentrationOutput cdO2 annotation(Placement(transformation(extent={{-6,6},{
              6,-6}},                                                                                                    rotation = 0, origin={-46,0}),     iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,0})));
    Physiolibrary.Types.RealIO.ConcentrationOutput cdCO2 annotation(Placement(transformation(extent = {{-7, 7}, {7, -7}}, rotation = 0, origin={5,104}),    iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,-20})));
    AcidBaseBalance.Acidbase.OSA.ctO2content
                bloodctO2content
      annotation (Placement(transformation(extent={{-80,14},{-20,74}})));
    AcidBaseBalance.Acidbase.OSA.ctCO2content
                 bloodctCO2content
      annotation (Placement(transformation(extent={{-80,86},{-20,146}})));
    AcidBaseBalance.Acidbase.OSA.BEINV
          vanSlykeEquation
      annotation (Placement(transformation(extent={{-82,-76},{-20,-16}})));
    Physiolibrary.Types.RealIO.ConcentrationOutput ceHb
      "effiective concentration of hemoglobin (mmol/l)"                                                   annotation(Placement(transformation(extent = {{-6, 6}, {6, -6}}, rotation = 0, origin = {-58, 0}), iconTransformation(extent = {{-10, -10}, {10, 10}}, rotation = 0, origin={66,20})));
    Physiolibrary.Types.Constants.PressureConst       pCO2_const(k(displayUnit=
            "mmHg") = 5332.8954966)
      annotation (Placement(transformation(extent={{-132,36},{-124,44}})));
      inner AcidBaseBalance.Interfaces.ModelSettings
                                     modelSettings(
      useIons=true,
      useOsmoticFlow=false,
      UseMetabolicUABalance=false,
      arterialO2conc_start=8.23882,
      arterialCO2conc_start=21.659,
      venousO2conc_start=6.03882,
      venousCO2conc_start=23.529,
      UseRespiratoryCompensation=true)
                            annotation (Placement(transformation(extent={{-100,80},
              {-80,100}})));
  equation
    connect(vanSlykeEquation.BEox,BEox)  annotation(Line(points={{-84.8182,-22},
            {-116,-22},{-116,-20},{-140,-20}},                                                color = {0, 0, 127}));
    connect(bloodctO2content.pH,bloodctCO2content. pH) annotation(Line(points={{-83,
            56.6},{-20,56.6},{-20,128},{-83,128}},                                                                                                 color={238,46,
            47},
        thickness=0.5));
    connect(bloodctCO2content.cHCO3,cHCO3)  annotation(Line(points={{-17,116},{
            -36,116},{-36,302},{-56,302},{-56,116},{5,116}},                                color = {0, 0, 127}));
    connect(bloodctO2content.ceHb,ceHb)  annotation(Line(points={{-68,11},{-68,
            0},{-58,0}},                                                                           color = {0, 0, 127}));
    connect(bloodctCO2content.cdCO2p,cdCO2)
      annotation (Line(points={{-17,104},{-36,104},{-36,290},{-56,290},{-56,104},
            {5,104}},                                      color={0,0,127}));
    connect(bloodctO2content.cdO2p,cdO2)
      annotation (Line(points={{-56,11},{-56,0},{-46,0}}, color={0,0,127}));
    connect(bloodctO2content.sO2,sO2)
      annotation (Line(points={{-32,11},{-32,8},{4,8}}, color={0,0,127}));
    connect(vanSlykeEquation.pH,bloodctCO2content. pH) annotation (Line(points={{
            -23.3818,-40.6},{88,-40.6},{88,-194},{-20,-194},{-20,128},{-83,128}},
                                                                         color={238,46,
            47},
        thickness=0.5));
    connect(bloodctCO2content.sO2,sO2)  annotation (Line(points={{-83,92},{10,
            92},{10,-108},{88,-108},{88,8},{4,8}},
                                              color={0,0,127}));
    connect(vanSlykeEquation.sO2,sO2)  annotation (Line(points={{-84.8182,-68.2},
            {10,-68.2},{10,-268},{124,-268},{124,-192},{88,-192},{88,8},{4,8}},
                                                                       color={0,0,
            127}));
    connect(bloodctO2content.pCO2,vanSlykeEquation. pCO2) annotation (Line(points={{-83,44},
            {-62,44},{-62,-34},{-84.8182,-34}},         color={0,0,127},
        thickness=0.5));
    connect(bloodctCO2content.pCO2,vanSlykeEquation. pCO2) annotation (Line(
          points={{-83,140},{-62,140},{-62,-34},{-84.8182,-34}},color={0,0,127},
        thickness=0.5));
    connect(vanSlykeEquation.pH,pH)  annotation (Line(points={{-23.3818,-40.6},
            {89.24,-40.6},{89.24,-41},{1,-41}},          color={238,46,47},
        thickness=0.5));
    connect(pO2_const.y, bloodctO2content.pO2) annotation (Line(points={{-129.6,
            96},{-106,96},{-106,68},{-83,68}}, color={0,0,127}));
    connect(pCO2_const.y, bloodctCO2content.pCO2) annotation (Line(points={{
            -123,40},{-112,40},{-112,140},{-83,140},{-83,140}}, color={0,0,127}));
    annotation (Icon(coordinateSystem(preserveAspectRatio=false)), Diagram(
          coordinateSystem(preserveAspectRatio=false)));
  end test_disoc;
  annotation (uses(
      Physiomodel(version="1.0.0"),
      Complex(version="3.2.2"),
      Modelica(version="3.2.2"),
      Physiolibrary(version="2.3.2-beta")));
end NewBloodyMary_testing;